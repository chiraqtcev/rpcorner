//NPC names holder by Jonathan Joestar
#include "npc_names_holder_h.fos"

NpcNamesHolder@ npcNamesHolder;

shared class NpcNamesHolderImpl : NpcNamesHolder
{
	array<NpcName@> npcNames;
	
	NpcNamesHolderImpl()
	{
	
	}
	
	string getNpcName(int dialogId)
	{
		NpcName@ npcName;

		for(uint i = 0; i < this.npcNames.length(); i++)
		{
			NpcName@ currentNpcName = npcNames[i];

			if(currentNpcName.getDialogId() == dialogId)
			{
				@npcName = currentNpcName;
				break;
			}
		}
		return @npcName != null ? npcName.npcName : "";		
	}
	
	void loadNpcNames()
	{
		file foDlg;
		
		if(foDlg.open("text\\russ\\FODLG.MSG", "r") < 0)
		{
			Log("Can't open FODLG.MSG");
			return;
		}
		
		string line;
		
		Log("Starting NPC names loading...");

		while(!foDlg.isEndOfFile())
		{
			foDlg.readLine(line);
			
			
			if(line.length() == 0)
			{
				continue;
			}
			
			if(substring(line, 0, 1) != "{")
			{
				continue;
			}
						
			string dialog = substring(line, 1, findFirst(line, "}") - 1);
			
			int dialogId = -1;
			
			if( !StrToInt(dialog, dialogId) )
			{
				continue;
			}
			
			if(dialogId % 10 != 0)
			{
				continue;
			}
			int nameStart = findFirst(line, "{}{") + 3;
			int nameLength = findFirst(line, "}", nameStart) - nameStart;
			
			string npcName = substring(line, nameStart, nameLength);
			
			dialogId /= 10;
			
			NpcName@ npcNameObj = NpcName(dialogId, npcName);

			npcNames.insertLast(npcNameObj);
		}
		
		Log("NPC names loaded.");
	}
}

shared class NpcName
{
	int dialogId;
	string npcName;
	
	NpcName()
	{
	
	}

	NpcName(int dialogId, string npcName)
	{
		this.dialogId = dialogId;
		this.npcName = npcName;
	}
	
	int getDialogId()
	{
		return this.dialogId;
	}
	
	string getNpcName()
	{
		return this.npcName;
	}
	
	string toString(){
		return "NpcName{ dialogId: " + this.dialogId + " npcName: " + npcName + " }";
	}
}


NpcNamesHolder@ getNpcNamesHolder()
{
	if(@npcNamesHolder == null)
	{
		@npcNamesHolder = NpcNamesHolderImpl();
	}
	
	return npcNamesHolder;
}