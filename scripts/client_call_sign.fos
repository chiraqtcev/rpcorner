// Author: heX
// Client addon
// Compile using fo_client.dll
// for injection to client_main.fos use client_main.patch
// also use all.patch for other patching

#define RADIO_NAME_MIN                  ( 3 )
#define RADIO_NAME_MAX                  ( 8 )
#define RADIO_NAME_CMD                  ( "/name " )
#define RADIO_SEPARATOR                 ( " - " )

#define STR_RADIO_CALL_SIGN_OFF         ( 135 )
#define STR_RADIO_CALL_SIGN_BAD_CHAR    ( 136 )
#define STR_RADIO_CALL_SIGN_MIN         ( 137 )
#define STR_RADIO_CALL_SIGN_MAX         ( 138 )
#define STR_RADIO_CALL_SIGN_CHANGED     ( 139 )

string RadioName;

// Check RadioName to illegal char
bool CheckRadioNameChar( string name )
{
    uint8 lastChar = 0;
    for( uint i = 0; i < name.length(); i++ )
    {
        if( not (         // char ranges
                                        ( ( name[ i ] >= 'a' ) and ( name[ i ] <= 'z' ) ) or
                                        ( ( name[ i ] >= 'A' ) and ( name[ i ] <= 'Z' ) ) or
                                        ( ( name[ i ] >= 'а' ) and ( name[ i ] <= 'я' ) ) or
                                        ( ( name[ i ] >= 'А' ) and ( name[ i ] <= 'Я' ) ) or
                                        ( ( name[ i ] >= '0' ) and ( name[ i ] <= '9' ) ) ) )
            return false;
        if( lastChar == name[ i ] )
            return false;
        lastChar = name[ i ];
    }
    return true;
}

// Prepare RadioName to using
string PrepareRadioName( string rawRadioName )
{
    return rawRadioName;
}

// place in start()
void CallSignStart()
{
    RadioName = "";
}

// place in out_message
// in begin block "if(sayType==SAY_RADIO)"
bool CallSignHook1( string& message, int& sayType, bool& result )
{
    // +heX
    if( message == "/name" )
    {
        RadioName = "";
        Message( TEXTMSG_GAME, STR_RADIO_CALL_SIGN_OFF );
        result = false;
        return true;
    }
    else if( message.length() > RADIO_NAME_CMD.length() )
        if( substring( message, 0, RADIO_NAME_CMD.length() ) == RADIO_NAME_CMD )
        {
            RadioName = substring( message, RADIO_NAME_CMD.length(), message.length() - RADIO_NAME_CMD.length() );

            if( not CheckRadioNameChar( RadioName ) )
            {
                Message( TEXTMSG_GAME, STR_RADIO_CALL_SIGN_BAD_CHAR );
                RadioName = "";
                result = false;
                return true;
            }
            if( RadioName.length() < RADIO_NAME_MIN )
            {
                Message( TEXTMSG_GAME, STR_RADIO_CALL_SIGN_MIN );
                RadioName = "";
            }
            else
            {
                if( RadioName.length() > RADIO_NAME_MAX )
                {
                    Message( TEXTMSG_GAME, STR_RADIO_CALL_SIGN_MAX );
                    RadioName = substring( message, RADIO_NAME_CMD.length(), RADIO_NAME_MAX );
                }
                Message( TEXTMSG_GAME, STR_RADIO_CALL_SIGN_CHANGED );
                Message( RadioName );                       // тут надо через лексемы делать, а мне лень...
                // пример лексем: cr.SayMsg(SAY_EMOTE_ON_HEAD,TEXTMSG_TEXT,STR_DICE_THROW,"$result"+Random(1,6));
                // Message("Подпись в радио измененна на " + RadioName);
            };
            result = false;
            return true;
        }

    // hook is not active
    return false;
}

// place in out_message
// in end block "if(sayType==SAY_RADIO)"
bool CallSignHook2( string& message, int& sayType, bool& result )
{
    // +heX
    if( RadioName != "" )
        if( message != "" )
            if( message[ message.length() - 1 ] != ' ' )      // block adding call sign
                message = message + RADIO_SEPARATOR + RadioName;

    return false;
}
