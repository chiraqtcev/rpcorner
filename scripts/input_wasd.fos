#include "_defines.fos"
/** 
 *  Module allows you to use WASD action-like keyboard based movement.
 *
 *  Eg:
 *    Space + W - walk up
 *    Space + Shift + S + D - run bottom-right
 *    Space + Q - rotate left
 *    Space + E - rotate right
 *    Space + Z - toggle full time mode (so that you need not to hold Space anymore)
 *    Space + Ctrl - toggle attack/use cursor
 *
 *  EXPORTS:
 *   void WASDInputLoop()  // EXPORT -> loop()
 *   bool WASDInputKeyState(int key, bool state) // EXPORT -> key_down|key_up(...)
 *   WASDInputLost() // EXPORT -> input_lost()
 */

#ifdef __CLIENT
    // Direction offsets (these are not engine Critter.Dir like directions!)
    enum Direction {
        N = 0,
        NE = 1,
        E = 2,
        SE = 3,
        S = 4,
        SW = 5,
        W = 6,
        NW = 7
    };

    // Direction angle offsets
    enum DirectionDegree {
        N  = 45.0f * 5,
        NE = 45.0f * 4,
        E  = 45.0f * 3,
        SE = 45.0f * 2,
        S  = 45.0f * 1,
        SW = 45.0f * 0,
        W  = 45.0f * 7,
        NW = 45.0f * 6,
    }

    // Used key codes
    enum KeyCode {
        W = 0x11,
        A = 0x1E,
        S = 0x1F,
        D = 0x20,

        Q = 0x10,
        E = 0x12,

        LShift = 0x2A,
        RShift = 0x36,

        Z = 0x2C,

        Space = 0x39,

        LControl = 0x1D,
        RControl = 0x9D,

        //Down = 0xD0,
        //Up = 0xC8,
        //Left = 0xCB,
        //Right = 0xCD,
    }

    class WASDInputController 
    {
        bool isEnabled; // WASD movement enabled
        bool isAlwaysEnabled;
        bool isN; // Moving north (top)
        bool isE; // Moing east (left)
        bool isS; // Moving south (down)
        bool isW; // Moving west (left)
        bool isRun; // Is running
        bool isRotateLeft; // Is rotating left
        bool isRotateRight; // Is rotating right
        bool isGeometryViolated; // True if critter moves north or south (so 8-directions are "emulated" in 6-direction geometry)

        uint lastRunTick;

        bool GetEnabled() 
        {
            return this.isEnabled || this.isAlwaysEnabled;
        }

        void SetEnabled(bool value) 
        {
            this.isEnabled = value;
        }

        void SwitchAlwaysEnabled() 
        {
            this.isAlwaysEnabled = !this.isAlwaysEnabled;
            this.isRotateLeft = this.isRotateRight = this.isN = this.isE = this.isS = this.isW = this.isRun = this.isGeometryViolated = false;
            Message(this.isAlwaysEnabled ? "Перемещение с клавиатуры включено." : "Перемещение с клавиатуры выключено.");
        }

        // Controller constructor
        WASDInputController() 
        {
            this.isEnabled = this.isAlwaysEnabled = this.isRotateLeft = this.isRotateRight = this.isN = this.isE = this.isS = this.isW = this.isRun = this.isGeometryViolated = false;
            this.lastRunTick = GetTick();
            this.verticalMovementOffset = GetTick() % 1;
        }

        // Returns desirable direction based on is* properties
        int GetDirection() 
        {
            if (this.isN) {
                if (this.isE) {
                    return Direction::NE;
                } 
                else if(this.isW) {
                    return Direction::NW;
                }
                else {
                    return Direction::N;
                }
            }
            else if (this.isS) {
                if (this.isE) {
                    return Direction::SE;
                }
                else if (this.isW) {
                    return Direction::SW;
                }
                else {
                    return Direction::S;
                }
            }
            else if (this.isW) {
                return Direction::W;
            }
            else if (this.isE) {
                return Direction::E;
            }

            return -1;
        }

        // Processes key press, true if should be intercepted and not processed by anyone else
        bool KeyState(int keyCode, bool isDown) 
        {
            CritterCl@ player = GetChosen();

            if (__ConsoleActive || __IsTextInput || null is player) {
                return false;
            }

            // Always enabled switching
            if (this.isEnabled && KeyCode::Z == keyCode && isDown) {
                this.SwitchAlwaysEnabled();
                return false;
            }

            // Hold enabled switching
            if (KeyCode::Space == keyCode) {
                this.SetEnabled(isDown);
                return false;
            }

            if (!isDown) {
                // Remove delay in reaction between keypresses
                this.lastRunTick = 0;

                switch(keyCode) {
                    case KeyCode::A:
                    case KeyCode::D:
                    case KeyCode::W:
                    case KeyCode::S: 
                        if (!this.isN && !this.isS && !this.isW && !this.isE) {
                            this.Stop();
                        }
                        break;                    
                }
            }

            if (this.GetEnabled() && isDown && KeyCode::Q == keyCode) {
                return this.SwitchCursor(player);
            }

            switch (keyCode) {
                case KeyCode::A:
                    this.isW = isDown;
                    return this.GetEnabled();
                case KeyCode::D:
                    this.isE = isDown;
                    return this.GetEnabled();
                case KeyCode::W:
                    this.isN = isDown;
                    return this.GetEnabled();
                case KeyCode::S:
                    this.isS = isDown;
                    return this.GetEnabled();
                // case KeyCode::_:
                //     this.isRotateLeft = isDown;
                //     return this.GetEnabled();
                // case KeyCode::_:
                //     this.isRotateRight = isDown;
                //     return this.GetEnabled();
                case KeyCode::LShift:
                case KeyCode::RShift:
                    this.isRun = isDown;
                    return this.GetEnabled();
            }

            return false;
        }

        // Runs controller within event loop
        void Run()
        {
            CritterCl@ player = GetChosen();

            // Die if outside allowed time window
            uint tick = GetTick();
            if (this.lastRunTick + 50 >= tick) {
                return;
            }
            this.lastRunTick = tick;

            // Die if not enabled
            if (null is player || !this.GetEnabled()) {
                return;
            }

            // Process movement
            if (this.isE || this.isN || this.isS || this.isW) {
                this.Move(player);
            }

            // Process rotation
            else if (this.isRotateRight || this.isRotateLeft) {
                this.isGeometryViolated = false;
                this.Rotate(player);
            }
        }

        // Process rotation
        void Rotate(CritterCl@ player) 
        {
            // Drop if already running
            uint[] currentAction;
            GetChosenActions(currentAction);
            if (
                currentAction.length > 1
                && currentAction[1] == 3
            ) return;

            // Rotate left (1) or right (0)
            int dir = this.isRotateRight ? 0 : 1;
            uint[] action = { 3, dir, 0, 0, 0, 0, 0 };
            SetChosenActions(action);
        }

        void Stop()
        {
            uint[] action = { 0, 0, 0, 0, 0, 0, 0 };
            SetChosenActions(action);
        }

        bool SwitchCursor(CritterCl@ player) 
        {
            int cursor = GetCurrentCursor();

            if (cursor != 2 && cursor != 3) {
                uint8 mode = 0;
                ProtoItem@ proto = player.GetSlotProto(1, mode);
                if (proto !is null) {
                    if (proto.Type == ITEM_TYPE_WEAPON)  {
                        ChangeCursor(3);
                        return true;
                    } else if (0 != proto.Flags & ITEM_CAN_USE_ON_SMTH) {
                        ChangeCursor(2);
                        return true;
                    }
                }
            }

            ChangeCursor(0);
            return true;
        }

        // Process movement
        void Move(CritterCl@ player) 
        {
            uint16 HexX = player.HexX, HexY = player.HexY;
            int direction = this.GetDirection();
            if (direction < 0) {
                return;
            }
            
            // Move critter position to 1-2 hexes in specified direction 
            switch (direction) {
                case Direction::NE: {
                    this.isGeometryViolated = false;
                    MoveHexByDir(HexX, HexY, 0, 1);
                    //GetHexCoord(HexX, HexY, HexX, HexY, DirectionDegree::NE, 500);
                    this.MoveCritter(player, HexX, HexY);
                } return;
                case Direction::E: {
                    this.isGeometryViolated = false;
                    MoveHexByDir(HexX, HexY, 1, 1);
                    this.MoveCritter(player, HexX, HexY);
                } return;
                case Direction::SE: {
                    this.isGeometryViolated = false;
                    MoveHexByDir(HexX, HexY, 2, 1);
                    //GetHexCoord(HexX, HexY, HexX, HexY, DirectionDegree::SE, 100);
                    this.MoveCritter(player, HexX, HexY);
                } return;
                case Direction::SW: {
                    this.isGeometryViolated = false;
                    MoveHexByDir(HexX, HexY, 3, 1);
                    //GetHexCoord(HexX, HexY, HexX, HexY, DirectionDegree::SW, 100);
                    this.MoveCritter(player, HexX, HexY);
                } return;
                case Direction::W: {
                    this.isGeometryViolated = false;
                    MoveHexByDir(HexX, HexY, 4, 1);
                    //GetHexCoord(HexX, HexY, HexX, HexY, DirectionDegree::W, 100);
                    this.MoveCritter(player, HexX, HexY);
                } return;
                case Direction::NW: {
                    this.isGeometryViolated = false;
                    MoveHexByDir(HexX, HexY, 5, 1);
                    //GetHexCoord(HexX, HexY, HexX, HexY, DirectionDegree::NW, 100);
                    this.MoveCritter(player, HexX, HexY);
                } return;
            }

            uint[] currentAction;
            GetChosenActions(currentAction);

            // Handle UP and DOWN movements (emulate 8-direction movement in 6-direction geometry)
            if (
                this.isGeometryViolated
                && currentAction.length >= 4
                && currentAction[0] == 1
            ) {
                // Is already moving in such way
                return;
            } 
            else switch (direction) {
                case Direction::N: {
                    this.isGeometryViolated = true;
                    // Move aim one hex to top
                    //MoveHexByDir(HexX, HexY, 5, 1);
                    //MoveHexByDir(HexX, HexY, 0, 1);
                    //GetHexCoord(player.HexX, player.HexY, HexX, HexY, DirectionDegree::N, 2);
                    this.FindVerticalPath(player, HexX, HexY, true);
                    this.MoveCritter(player, HexX, HexY);
                } return;
                case Direction::S: {
                    this.isGeometryViolated = true;
                    // Move aim one hex to bottom
                    //MoveHexByDir(HexX, HexY, 3, 1);
                    //MoveHexByDir(HexX, HexY, 2, 1);
                    //GetHexCoord(player.HexX, player.HexY, HexX, HexY, DirectionDegree::S, 2);
                    this.FindVerticalPath(player, HexX, HexY, false);
                    this.MoveCritter(player, HexX, HexY);
                } return;
            }
        }

        // Asks critter to move to specified hex
        void MoveCritter(CritterCl@ player, uint16 hexX, uint16 hexY) 
        {
            uint[] currentAction;
            GetChosenActions(currentAction);

            uint isRun = this.isRun ? 1 : 0;
            // Skip call if already moving there
            if (
                currentAction.length >= 4 
                && 1 == currentAction[0]
                && uint(hexX) == currentAction[1]
                && uint(hexY) == currentAction[2]
                && isRun == currentAction[3]
            ) return;

            // "Do not try to move half of the map around some zero width obstacle"
            int pathLength = GetPathLength(player, hexX, hexY, 0);
            if (pathLength > 4) return;

            if (
                !this.CanMoveTo(player, hexX, hexY)
                && !(this.isRun && this.FindWayAround(player, hexX, hexY))
            ) {
                QuakeScreen(1,30);
                return;
            }

            uint[] action = {1, int(hexX), int(hexY), isRun, 0, 0, 0};
            SetChosenActions(action);
        }

        void WASDInputLost() 
        {
            this.isEnabled = this.isRotateLeft = this.isRotateRight = this.isW = this.isN = this.isS = this.isE = false;
        }

        bool CanMoveTo(CritterCl@ player, uint16 hexX, uint16 hexY) 
        {
            return (player.HexX != hexX || player.HexY != hexY) && 0 != GetPathLength(player, hexX, hexY, 0);
        }

        uint8 verticalMovementOffset;

        void FindVerticalPath(CritterCl@ player, uint16& hexX, uint16& hexY, bool north)
        {
            uint16 leftHexX = player.HexX, rightHexX = player.HexX;
            uint16 leftHexY = player.HexY, rightHexY = player.HexY;
            
            if (north) {
                MoveHexByDir(leftHexX, leftHexY, 5, 1);
                MoveHexByDir(rightHexX, rightHexY, 0, 1);
            } else {
                MoveHexByDir(leftHexX, leftHexY, 3, 1);
                MoveHexByDir(rightHexX, rightHexY, 2, 1);
            }

            bool leftPossible = this.CanMoveTo(player, leftHexX, leftHexY);
            bool rightPossible = this.CanMoveTo(player, rightHexX, rightHexY);
           
            if (leftPossible && (!rightPossible || 2 > this.verticalMovementOffset)) 
            {
                this.verticalMovementOffset+=1;
                if (this.verticalMovementOffset == 2) {
                    this.verticalMovementOffset = 3;
                }
                hexX = leftHexX;
                hexY = leftHexY;
            }
            else if (rightPossible && (!leftPossible || 2 <= this.verticalMovementOffset)) {
                this.verticalMovementOffset-=1;
                if (this.verticalMovementOffset == 1) {
                    this.verticalMovementOffset = 0;
                }
                hexX = rightHexX;
                hexY = rightHexY;
            }
        }

        bool FindWayAround(CritterCl@ player, uint16& hexX, uint16& hexY) 
        {
            uint16 nHexX = player.HexX, neHexX = player.HexX, nwHexX = player.HexX;
            uint16 nHexY = player.HexY, neHexY = player.HexY, nwHexY = player.HexY;
            
            MoveHexByDir(nHexX, nHexY, player.Dir, 1);
            if (this.CanMoveTo(player, nHexX, nHexY)) {
                hexX = nHexX;
                hexY = nHexY;
                return true;
            }

            MoveHexByDir(neHexX, neHexY, player.Dir + 1 > 5 ? 0 : player.Dir + 1, 1);
            if (this.CanMoveTo(player, neHexX, neHexY)) {
                hexX = neHexX;
                hexY = neHexY;
                return true;
            }

            MoveHexByDir(nwHexX, nwHexY, int(player.Dir) - 1 < 0 ? 5 : player.Dir - 1, 1);
            if (this.CanMoveTo(player, nwHexX, nwHexY)) {
                hexX = nwHexX;
                hexY = nwHexY;
                return true;
            }

            return false;
        }
    }   

    // EXPORTS

    WASDInputController wasdController(); // singleton

    void WASDInputLoop()  // EXPORT -> loop()
    {
        wasdController.Run();
    }

    bool WASDInputKeyState(int key, bool state) // EXPORT -> key_down|key_up(...)
    {
        if (wasdController.KeyState(key, state)) {
            //wasdController.Run();
            return true;
        }
        return false;
    }

    void WASDInputLost() // EXPORT -> input_lost()
    {
        wasdController.WASDInputLost();
    }

#endif