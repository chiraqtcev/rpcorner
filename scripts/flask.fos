#ifndef FLASK
#define FLASK

#include "_utils.fos"
#include "flask_h.fos"
#include "_ltp.fos"
#include "gathering_h.fos"
#include "food_h.fos"

bool FlaskCheck( Critter& cr, Item@ drink, Item@ flask )
{
	Map@ map = cr.GetMap(); 
    if( !valid( map ) ) { return false; }
	if( !valid( drink ) ) { return false; }
	if( !valid( flask ) ) { return false; }
   	if( ( find_flask( drink ) && drink.DRINK_DNA <= 0 ) && flask.DRINK_DNA <= 0 ) { return false; }
		
    if( !find_flask( flask ) ) { return false; }
	
	uint16 drinkPid = drink.GetProtoId();

	uint[] drinks = { PID_BOTTLE_GLASS, PID_GLASS_BOTTLE_FULL, PID_GLASS_BOTTLE_FULL_PRT, PID_GLASS_BOTTLE_DIRTY_FULL_PRT, PID_GLASS_BOTTLE_DIRTY_FULL, PID_CLEAN_WATER2, PID_CLEAN_WATER2_PRT };

	if( ( drinks.find( drinkPid ) != -1 ) && !hasItems( cr, Flasks, SLOT_HAND1 ) ) {
		start_pouring_out( cr, flask );
		return true;
	}
	
	int index = index_glass_bottles( drink, 1 );
	bool same_dna = flask.DRINK_DNA == drinkPid 
				|| ( index != -1 && flask.DRINK_DNA == glass_bottles[2][index] );
	
 	if( flask.DRINK_DNA != 0 && !same_dna && drinkPid != PID_BOTTLE_GLASS ) { SEM( cr, "Емкость заполнена чем-то другим." ); return false; }
	
	if( find_opened_drinks( drink ) || find_glassed_drinks( drink ) || find_flask( drink ) ) { //search.fos
		
		string text = "Наполняет ";
		text += actionString(flask);
		cr.Say( SAY_EMOTE, text );

		flask.Update();
		
		start_pouring( cr, drink, flask );
	}
	
	return true;
}

bool DrinkFlask( Critter& cr, Item& flask )
{
	Map@ map = cr.GetMap(); 
	if( !valid( map ) || !valid( flask ) ) { return false;
    }
	
	if( flask.CritSlot != SLOT_HAND1 ) { SYNM( cr, "Возьмите предмет в руку." ); return false;
	}
	
	if( flask.REMAINING_USES <= 0 ) { SEM( cr, "Емкость пуста." ); return false;
	}
	
	if( flask.DRINK_DNA != 0 ) {
	
		flask.REMAINING_USES --;
		flask.EXTRA_WEIGHT = flask.REMAINING_USES * 100;
		
		Item@ consumedDrink = cr.AddItem( flask.DRINK_DNA, 1 );
		consumedDrink.REMAINING_USES = 2;

		consumedDrink.TOXIN_LEVEL  = flask.TOXIN_LEVEL;
		consumedDrink.FLASK_POISON = flask.FLASK_POISON;
		consumedDrink.TASTE 	   = flask.TASTE;
		consumedDrink.SPIRIT_LEVEL = flask.SPIRIT_LEVEL;

		ProccessDrink( cr, cr, consumedDrink );
		_SubItem( consumedDrink, 1 );
	}
	
	if( flask.REMAINING_USES == 0 ) { 
		flask.DRINK_DNA = 0;
		flask.EXTRA_WEIGHT = 0;
		flask.Val3 = 0;
		flask.Val4 = 0;
		flask.Val6 = 0;
		flask.FLASK_POISON = 0;
		flask.Val9 = 0;
		ChangeProto( flask );
	}
	
	flask.Update();
	return true;
}

bool PourFlask( Critter& cr, Item& flask )
{
	Map@ map = cr.GetMap(); 
	if( !valid( map ) || !valid( flask ) ) { return false;
    }
	
	if( flask.REMAINING_USES <= 0 || flask.DRINK_DNA <= 0) { SEM( cr, "Емкость пуста." ); return false;
	}
	
	flask.REMAINING_USES = 0;
	flask.EXTRA_WEIGHT = 0;
	flask.DRINK_DNA = 0;
	flask.Val3 = 0;
	flask.Val4 = 0;
	flask.Val6 = 0;
	flask.FLASK_POISON = 0;
	flask.Val9 = 0;
	map.PlaySound( "splash.ogg", cr.HexX, cr.HexY, 5 );
	
	string text = "Выливает ";
	text += actionString(flask);
	cr.Say( SAY_EMOTE, text );
	
	ChangeProto( flask );
	
	flask.Update();
	return true;
}

bool ltp_pouring_inited = false;
void ltp_pouring_init()
{
	LTPREG( LTP_POURING, process_pouring )
	ltp_pouring_inited = true;
}

bool start_pouring( Critter& cr, Item& drink, Item& flask )
{
	if(!ltp_pouring_inited) { 
		ltp_pouring_init();
	}
	
	Map@ map = cr.GetMap();
	
	if( valid( flask ) ) {
		
		if( flask.REMAINING_USES >= flask.Proto.Partial_Item ) { SEM( cr, "Емкость уже заполнена." ); return false; }

		uint hit_pause = ACTION_PAUSE_BASE - (cr.Stat[ST_AGILITY] * ACTION_PAUSE_BONUS_RATE );
		uint action_pause = CLAMP( hit_pause, ACTION_PAUSE_MIN, ACTION_PAUSE_MAX );
		
		map.PlaySound( "homebrew_pouring.ogg", cr.HexX, cr.HexY, 5 );
		
		cr.SetAnims( COND_LIFE, 0, ANIM2_CROUCH );
		
		StartProcess( cr, LTP_POURING, 0, drink.Id, flask.Id, action_pause );

		return true;
	}
	return false;
}

uint process_pouring( Critter@ cr, int& param0, int& param1, int& param2 )
{
    LTPROCESS( cr, param0, LTP_POURING )
	
	uint hit_pause = ACTION_PAUSE_BASE - ( cr.Stat[ST_AGILITY] * ACTION_PAUSE_BONUS_RATE );
	uint action_pause = CLAMP( hit_pause, ACTION_PAUSE_MIN, ACTION_PAUSE_MAX );
	
	Item@ drink = GetItem( param1 );
  	Item@ flask = GetItem( param2 );
	
  	if( valid( flask ) && valid( drink ) ) {
		
		Map@ map = cr.GetMap();
		map.PlaySound( "homebrew_pouring.ogg", cr.HexX, cr.HexY, 5 );
		
		if( find_flask( flask ) && flask.REMAINING_USES == 0 ) {
			ChangeProto( flask );
		}
		
		int index = index_glass_bottles( drink, 1 );
		bool UsedFullBottle = flask.REMAINING_USES <= int( flask.Proto.Partial_Item - 5 ) && index != -1 && ReplaceWith( drink, PID_BOTTLE_GLASS, 1 );
	
		if( UsedFullBottle )
		{
			flask.DRINK_DNA = glass_bottles[2][index];
			flask.REMAINING_USES += 5;
			flask.EXTRA_WEIGHT = flask.REMAINING_USES * 100;
			flask.Update();
		}
		else if( flask.REMAINING_USES < flask.Proto.Partial_Item )
		{
			bool same_dna = flask.DRINK_DNA == drink.GetProtoId() 
						|| ( index != -1 && flask.DRINK_DNA == glass_bottles[2][index] );
			
			if( flask.DRINK_DNA != 0 && !same_dna ) 
			{ 
				SEM( cr, "Емкость заполнена чем-то другим." ); 
				return 0; 
			}

			flask.REMAINING_USES ++;
			flask.EXTRA_WEIGHT = flask.REMAINING_USES * 100;
			flask.Val3 = drink.Val3;
			flask.Val4 = drink.Val4;
			flask.Val6 = drink.Val6;
			flask.FLASK_POISON = drink.FLASK_POISON;
			flask.Val9 = drink.Val9;
			flask.Update();
				
			if( find_flask( drink ) ) {
				flask.DRINK_DNA = drink.DRINK_DNA;
			} else {
				if( index != -1 )
					flask.DRINK_DNA = glass_bottles[2][index];
				else
					flask.DRINK_DNA = drink.GetProtoId();
			}
			
			SpillOut( drink );
			
			param1 = valid( drink ) ? drink.Id : 0;
		}
		
		if( flask.REMAINING_USES >= flask.Proto.Partial_Item ) 
		{
			
			flask.REMAINING_USES = flask.Proto.Partial_Item;
			
			string itemDisc;
			itemDisc += actionString(flask);
			SSM( cr, "Вы наполнили " + "|0xFFFF00 " + itemDisc + "|0x3CF800 ." );
			
			cr.SetAnims( COND_LIFE, 0, ANIM2_IDLE );
			
			if( drink.REMAINING_USES == 0 ) {
				drink.DRINK_DNA = 0;
				drink.Val3 = 0;
				drink.Val4 = 0;
				drink.Val6 = 0;
				drink.FLASK_POISON = 0;
				drink.Val9 = 0;
				ChangeProto( drink );
			}
			
			return 0;
		}
		
		if( drink.REMAINING_USES == 0 && !UsedFullBottle ) 
		{
			cr.SetAnims(COND_LIFE, 0, ANIM2_IDLE);
			SEM( cr, "Тара опустела." );
			
			drink.DRINK_DNA = 0;
			drink.Val3 = 0;
			drink.Val4 = 0;
			drink.Val6 = 0;
			drink.FLASK_POISON = 0;
			drink.Val9 = 0;
			
			cr.SetAnims(COND_LIFE, 0, ANIM2_IDLE);
			
			ChangeProto( drink );
			return 0;
		}		
		
		return action_pause;
	}
	
	cr.SetAnims(COND_LIFE, 0, ANIM2_IDLE);
	
	return 0;
}

//Info 
string actionString( Item& item )
{
	string text;
	uint16 itemPid = item.GetProtoId();
	switch( itemPid )
	{
		case( PID_SHOTGLASS ): 
			text += "стопку";
			break;
		case( PID_WATER_BUCKET ):
		case( PID_EMPTY_BUCKET ): 
			text += "ведро";
			break;
		default:
			text += "флягу";
			break;
	}
	return text;
}
//Proto Changer
void ChangeProto( Item& item )
{
	if( find_flask( item ) ) {
		uint16 itemPid = item.GetProtoId();
		switch( itemPid )
		{
			case( PID_FLASK_FULL ):
				item.ChangeProto( PID_FLASKB );
				break;
			case( PID_WATER_BUCKET ): 
				item.ChangeProto( PID_EMPTY_BUCKET );
				break;
			case( PID_FLASKB ):
				item.ChangeProto( PID_FLASK_FULL );
				break;
			case( PID_EMPTY_BUCKET ): 
				item.ChangeProto( PID_WATER_BUCKET );
				break;
			default:
				break;
		}
	}
}

//import bool find_flask( Item& item ) from "flask";
bool find_flask( Item& item ) {
	if( valid( item ) ) {
		uint16 flaskPid = item.GetProtoId();
		if ( Flasks.find( flaskPid ) != -1 ) {
			return true;
		}
	}
	return false;
}

bool ltp_pouringOut_inited = false;
void ltp_pouringOut_init()
{
	LTPREG( LTP_POURING_OUT, process_pouring_out )
	ltp_pouringOut_inited = true;
}

bool start_pouring_out( Critter& cr, Item& target )
{
	if(!ltp_pouringOut_inited) { 
		ltp_pouringOut_init();
	}
	
	Map@ map = cr.GetMap();		
	
	if( valid( target ) ) {
		
		if( target.REMAINING_USES < 1 ) {
			SEM( cr, "Воды больше нет." );
			return false;
		}
		
		if( !hasItem( cr, PID_BOTTLE_GLASS, SLOT_HAND1 ) && !hasItem( cr, PID_GLASS_BOTTLE_DIRTY_FULL_PRT, SLOT_HAND1 ) ) { cr.Say( SAY_NETMSG, "|0xFFFF00 У вас нет подходящей тары в руках." ); return false;
		}
		
		uint hit_pause = ACTION_PAUSE_BASE - (cr.Stat[ST_AGILITY] * ACTION_PAUSE_BONUS_RATE );
		uint action_pause = CLAMP( hit_pause, ACTION_PAUSE_MIN, ACTION_PAUSE_MAX );
		map.PlaySound( "homebrew_pouring.ogg", cr.HexX, cr.HexY, 5 );
		
		StartProcess( cr, LTP_POURING_OUT, 0, 0, target.Id, action_pause );
		return true;
	}
	return false;
}

uint process_pouring_out( Critter@ cr, int& param0, int& param1, int& param2 )
{
    LTPROCESS( cr, param0, LTP_POURING_OUT )
	uint hit_pause = ACTION_PAUSE_BASE - ( cr.Stat[ST_AGILITY] * ACTION_PAUSE_BONUS_RATE );
	uint action_pause = CLAMP( hit_pause, ACTION_PAUSE_MIN, ACTION_PAUSE_MAX );
  	Item@ target = GetItem( param2 );
	
  	if( valid( target ) ) 
  	{
      	if( ( !hasItem( cr, PID_BOTTLE_GLASS ) && !hasItem( cr, PID_GLASS_BOTTLE_DIRTY_FULL_PRT ) && !hasItem( cr, PID_GLASS_BOTTLE_FULL_PRT ) && !hasItem( cr, PID_CLEAN_WATER2_PRT ) ) || target.REMAINING_USES < 1 )
      	{
			string TXT = ( !hasItem( cr, PID_BOTTLE_GLASS ) || !hasItem( cr, PID_GLASS_BOTTLE_DIRTY_FULL_PRT ) || !hasItem( cr, PID_GLASS_BOTTLE_FULL_PRT )|| !hasItem( cr, PID_CLEAN_WATER2_PRT ) ) ? " У Вас закончилась тара." : " Вы разлили всю воду по бутылкам.";
			cr.Say( SAY_NETMSG, "|0xFFFF00" + TXT );
			if( target.REMAINING_USES < 1 ) 
			{
				target.DRINK_DNA = 0;
				target.REMAINING_USES = 0;
				target.EXTRA_WEIGHT = 0;
				ChangeProto( target );
			}
			return 0;
		}
		
		_CritAnimateUse(cr);
		cr.Say( SAY_EMOTE_ON_HEAD, "Наполняет бутылку" );

		if( hasItem( cr, PID_GLASS_BOTTLE_DIRTY_FULL_PRT ) || hasItem( cr, PID_GLASS_BOTTLE_FULL_PRT ) || hasItem( cr, PID_CLEAN_WATER2_PRT ) )
		{	
			Item@ waterBottlePrt = null;
			if( hasItem( cr, PID_GLASS_BOTTLE_DIRTY_FULL_PRT ) )
				@waterBottlePrt = getItem( cr, PID_GLASS_BOTTLE_DIRTY_FULL_PRT );
			
			if( hasItem( cr, PID_GLASS_BOTTLE_FULL_PRT ) )
				@waterBottlePrt = getItem( cr, PID_GLASS_BOTTLE_FULL_PRT );

			if( hasItem( cr, PID_CLEAN_WATER2_PRT ) )
				@waterBottlePrt = getItem( cr, PID_CLEAN_WATER2_PRT );
						
			if( waterBottlePrt.REMAINING_USES < waterBottlePrt.Proto.Partial_Item )
			{				
				target.REMAINING_USES --;
				target.EXTRA_WEIGHT = target.REMAINING_USES * 100;
				waterBottlePrt.REMAINING_USES ++;
				waterBottlePrt.EXTRA_WEIGHT = waterBottlePrt.REMAINING_USES * 100;

				Map@ map = cr.GetMap();
				map.PlaySound( "homebrew_pouring.ogg", cr.HexX, cr.HexY, 5 );
								
				target.Update();
				waterBottlePrt.Update();
				
				if( waterBottlePrt.REMAINING_USES == waterBottlePrt.Proto.Partial_Item ) {
					
					Item@ waterBottle = null;

					if( hasItem( cr, PID_GLASS_BOTTLE_DIRTY_FULL_PRT ) )
						@waterBottle = cr.AddItem( PID_GLASS_BOTTLE_DIRTY_FULL, 1 );
					
					if( hasItem( cr, PID_GLASS_BOTTLE_FULL_PRT ) )
						@waterBottle = cr.AddItem( PID_GLASS_BOTTLE_FULL, 1 );

					if( hasItem( cr, PID_CLEAN_WATER2_PRT ) )
						@waterBottle = cr.AddItem( PID_CLEAN_WATER2, 1 );

					_SubItem( waterBottlePrt , 1 );
					
					SSM( cr, "Вы полностью наполнили бутылку водой" );
					
					waterBottle.Update();
				}
			}

			return action_pause;
			
		} 
		else 
		{
			Item@ bottle = cr.GetItem( PID_BOTTLE_GLASS, -1 );
			_SubItem( bottle, 1 );

			if( target.REMAINING_USES >= 5 )
			{
				int fullbottlepid = 0;
				switch( target.DRINK_DNA )
				{
					case ( PID_GLASS_BOTTLE_DIRTY_FULL_PRT ):
						fullbottlepid = PID_GLASS_BOTTLE_DIRTY_FULL;
						break;

					case ( PID_GLASS_BOTTLE_FULL_PRT ):
						fullbottlepid = PID_GLASS_BOTTLE_FULL;
						break;

					case ( PID_CLEAN_WATER2_PRT ):
						fullbottlepid = PID_CLEAN_WATER2;
						break;

					default:
						return 0;
				}

				if( fullbottlepid != 0 )
					cr.AddItem( fullbottlepid, 1 );

				target.REMAINING_USES -= 5;
				target.EXTRA_WEIGHT = target.REMAINING_USES * 100;
			}
			else
			{
				Item@ waterBottlePrt = null;
				@waterBottlePrt = cr.AddItem( target.DRINK_DNA, 1 );
				
				Item@ hands = cr.GetItem( 0, SLOT_HAND1 );
				if( valid( hands ) ) 
					cr.MoveItem( hands.Id, hands.GetCount(), SLOT_INV );

				cr.MoveItem( waterBottlePrt.Id, waterBottlePrt.GetCount(), SLOT_HAND1 );

				target.REMAINING_USES --;
				target.EXTRA_WEIGHT = target.REMAINING_USES * 100;
				waterBottlePrt.REMAINING_USES ++;
				waterBottlePrt.EXTRA_WEIGHT = waterBottlePrt.REMAINING_USES * 100;

				waterBottlePrt.Update();
			}
		
			Map@ map = cr.GetMap();
			map.PlaySound( "homebrew_pouring.ogg", cr.HexX, cr.HexY, 5 );
			target.Update();
		}
		
		return action_pause;
    }
	return 0;
}
#endif //FLASK