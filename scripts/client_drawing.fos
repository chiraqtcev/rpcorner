//Vice Dice 2018
// It's shit, sorry.

//client_drawing.fos

#ifndef __CLIENT_DRAWING_MODULE__
#define __CLIENT_DRAWING_MODULE__

#define _2238
#define _DEBUG

#include "client_drawing_h.fos"

funcdef void TrajectoryFunction(uint timePass, int position, float speedX, float speedY, uint time, int&offX, int&offY);
array<TrajectoryFunction@> Trajectories = {@ArcTrajectory};

class DrawableObject : IDrawable // base class
{
	bool active;
	uint id;
	uint8 drawType;
	array<DrawableEventHandler@> callbacks;
	
	uint timeStart = 0;
	uint time	   = 0;
	
	DrawableObject()
	{
		this.active = true;
		callbacks = array<DrawableEventHandler@>(DRAWABLE_EVENTS_END,null);
	}	
	
	
	DrawableObject(uint16 time)
	{
		this.active = true;
		callbacks = array<DrawableEventHandler@>(DRAWABLE_EVENTS_END,null);
		this.timeStart = GetTick();
		this.time = time;
	}	
	
	DrawableObject(uint16 time, DrawableEventHandler& onCreateHandler)
	{
		this.active = true;
		callbacks = array<DrawableEventHandler@>(DRAWABLE_EVENTS_END,null);
		this.timeStart = GetTick();
		this.time = time;
		SetEvent(DRAWABLE_EVENT_ON_CREATE, onCreateHandler);
		OnCreate();
	}
	
	
	void SetDrawType(uint8 type)
	{
		this.drawType = type;
	}
	
	void SetId(uint id)
	{
		this.id = id;	
	}
	
	void SetTime(uint timeNew)
	{
		this.time 	   = timeNew;
		this.timeStart = GetTick();
	}
	
	uint TimePass()
	{

		uint msPass = GetTick() - this.timeStart;
		
		return msPass;
	}
	

	void SetEvent(uint eventId, DrawableEventHandler& handler)
	{
		if(eventId <= DRAWABLE_EVENTS_END || eventId >= DRAWABLE_EVENTS_BEGIN)
			@callbacks[eventId] = handler;
	}
	
	void OnCreate() 
	{
		if(@callbacks[DRAWABLE_EVENT_ON_CREATE]!=null)
			callbacks[DRAWABLE_EVENT_ON_CREATE].Callback(this);
	}
	void OnDestroy()
	{
		if(@callbacks[DRAWABLE_EVENT_ON_DESTROY]!=null)
			callbacks[DRAWABLE_EVENT_ON_DESTROY].Callback(this);
	}
	
	void GetScreenPosition(int& x, int& y, bool source = true)    {}
	void GetHexPosition(uint16& x, uint16& y, bool source = true) {}
	void SetColors(uint color1In, uint color2In) {}
	void SetOpacity(uint opacity) {}
	void SetTrajectory(uint8 type) {}
	void SetOffsets(int offx, int offy) {}
	void Draw(){}
	
}
 
class CMovingMapObject : DrawableObject // base class too
{
	array<float> speed ;
	array<int>  vector ; 

	
	CMovingMapObject(int mapx1In, int mapy1In, int mapx2In, int mapy2In, uint16 speed, int offsetXIn, int offsetYIn, bool noOffsets = true)
	{
		int destx = 0, desty = 0, srcx = 0, srcy = 0;
		
		this.speed  =  array<float>(2);
		this.vector =  array<int>(2);
		this.vector[0] = 0;
		GetHexPos(mapx1In, mapy1In, srcx, srcy); 
		GetHexPos(mapx2In, mapy2In, destx, desty);
		// yolo ?
		srcx  *= __SpritesZoom;
		srcy  *= __SpritesZoom; 
		destx *= __SpritesZoom;
		desty *= __SpritesZoom;
		
		if(!noOffsets)
		{
			this.vector[0] =  (destx+(offsetXIn/__SpritesZoom)) - srcx;
			this.vector[1] =  (desty+(offsetYIn/__SpritesZoom)) - srcy;
		}
		else
		{
			this.vector[0] =  destx - srcx;
			this.vector[1] =  desty - srcy;
		}
		this.speed[0]  = speed*(this.vector[0]/(abs(this.vector[0]) + abs(this.vector[1])))/1000;
		this.speed[1]  = speed*(this.vector[1]/(abs(this.vector[0]) + abs(this.vector[1])))/1000;
		this.time  	   = (abs(this.vector[0]+this.vector[1])/(abs(this.speed[0] + this.speed[1])));
		super(time);
	}
}

bool SpritesInit = false;

array<Sprite@> CachedSprites(CACHED_SPRITES_COUNT, null);

array<LoadedSprite@> LoadedSprites(0); // deprecated, replaced with CachedSprites
array<MovingSprite@> MovingSprites(0); // deprecated

WeaponRadiusChosen@ wepRadChos;

array<CustomChosenHex@> CustomChosenHexes;

array<WMZoneRender@> WMZonesRender;


// rework
array<IDrawable@> Drawables; // generic drawables
uint drawables;

array<IDrawable@> DelayedTexts;
uint texts;

array<IDrawable@> Rays;
uint rays;

array<IDrawable@> BurstRays;
uint burstRays;

array<IDrawable@> MuzzleFlashes;
uint muzzleFlashes;

array<IDrawable@> BurstMuzzles;
uint burstMuzzles;

array<IDrawable@> MovingMapObjects;
uint movingMapObjects;

array<IDrawable@> FlyEffects;
uint flyEffects;

#ifdef __CLIENT

class WMZoneRender : IWMZoneRender
{	
	int realx, realy, length;
	uint color, layer;
	uint8 drawType;
	array<int> vertices;
	
	
 	WMZoneRender(int xin, int yin, int colorin, int lengthin)
	{
		this.realx = xin;
		this.realy = yin;
		this.color = colorin;
		this.length = lengthin;
	}
	
	void Draw(uint layer)
	{
		if(this.layer == layer)
		{
			RecalculateVertices();
			DrawPrimitive(drawType, vertices);
		}
	}
	
	void SetX(int xin)
	{
		this.realx = xin;
	}
	
	void SetY(int yin)
	{
		this.realy = yin;
	}
	
	void SetColor(uint colorin)
	{
		this.color = colorin;
	}
	
	void SetDrawType(uint8 type)
	{
		this.drawType = type;
	}
	
	void SetZoneLength(int len)
	{
		this.length = len;
	}
	
	void SetLayer(uint layer)
	{
		this.layer = layer;
	}
	
	void GenerateVertices()
	{
		vertices.insertLast(realx);
		vertices.insertLast(realy);
		vertices.insertLast(color);
		
		vertices.insertLast(realx+length);
		vertices.insertLast(realy);
		vertices.insertLast(color);
			
		vertices.insertLast(realx);
		vertices.insertLast(realy+length);
		vertices.insertLast(color);
		
		vertices.insertLast(realx+length);
		vertices.insertLast(realy+length);
		vertices.insertLast(color);
	}
	
	void RecalculateVertices()
	{
		vertices[0] = realx / __GmapZoom + __GmapOffsetX;
		vertices[1] = realy / __GmapZoom + __GmapOffsetY;
		
		vertices[3] = (realx+length) / __GmapZoom + __GmapOffsetX;
		vertices[4] =  realy / __GmapZoom + __GmapOffsetY;
		
		vertices[6] = realx / __GmapZoom + __GmapOffsetX;
		vertices[7] = (realy+length) / __GmapZoom + __GmapOffsetY;
		
		vertices[9] =  (realx+length) / __GmapZoom + __GmapOffsetX;
		vertices[10] = (realy+length) / __GmapZoom + __GmapOffsetY;
	}
}

class TimedMapSprite : DrawableObject
{
	Sprite@ sprite;
	uint16 mapX, mapY ;
	int  color, offsetX, offsetY;
	
	TimedMapSprite(uint16 mapX, uint16 mapY, int color, int offsetX, int offsetY, uint time, uint sprHash, uint8 dir)
	{
		@sprite = Sprite();
		super(time);
		this.mapX = mapX;
		this.mapY = mapY;
		this.color = color;
		this.offsetX = offsetX;
		this.offsetY = offsetY;
		sprite.LoadHash(sprHash, dir);
	}
	
	void Draw()
	{
		if(TimePass() > time)
		{
			drawables -=1;
			@Drawables[id] = null;
		}
		else
		{
			int x = 0, y = 0;
			GetHexPos(mapX, mapY, x, y);
			DrawSprite(sprite.Id, -1, x, y, 0);
		}
	}
}

class RayMap : DrawableObject
{
	int mapx1, mapy1, mapx2, mapy2, offsetX, offsetY;
	uint color1, color2, opacity;
	uint8  dir;
	array<int> data ;
	int8 yInc, xInc;
	
	RayMap(int mapx1In, int mapy1In, int mapx2In, int mapy2In)
	{
		this.data = array<int>(6);
		this.mapx1 = mapx1In;
		this.mapy1 = mapy1In;
		this.mapx2 = mapx2In;
		this.mapy2 = mapy2In;
		this.offsetX = 0;
		this.offsetY = 0;
		this.opacity = 1; // default
		this.dir = GetDirection(mapx1, mapy1, mapx2, mapy2);
		this.yInc = (this.dir == 1 || this.dir == 4) ? 1 : 0;
		this.xInc = yInc > 0 ? 0 : 1;
		super();
	}
	
	RayMap(int mapx1In, int mapy1In, int mapx2In, int mapy2In, uint renderTime, int offsetXIn, int offsetYIn)
	{
		this.data = array<int>(6);
		this.mapx1 = mapx1In;
		this.mapy1 = mapy1In;
		this.mapx2 = mapx2In;
		this.mapy2 = mapy2In;
		this.offsetX = offsetXIn;
		this.offsetY = offsetYIn;
		this.opacity = 1; // default
		this.dir = GetDirection(mapx1, mapy1, mapx2, mapy2);
		this.yInc = (this.dir == 1 || this.dir == 4) ? 1 : 0;
		this.xInc = yInc > 0 ? 0 : 1;
		super(renderTime);
	}

	void SetColors(uint color1In, uint color2In)
	{
		this.color1 = color1In;
		this.color2 = color2In;
	}
	
	void SetOpacity(uint opacity)
	{
		this.opacity = opacity;
		this.data.resize(opacity*6);
	}
	
	void SetOffsets(int offx, int offy)
	{
		this.offsetX = offx;
		this.offsetY = offy;
	}
	
	void GetScreenPosition(int& x, int& y, bool source = true) 
	{
		if(source)
		{
			x = data[0];
			y = data[1];
			
			return;
		}
		else
		{
			x = data[3];
			y = data[4];
			return;
		}
	}
	
	void GetHexPosition(uint16& x, uint16& y, bool source = true) 
	{
		if(source)
		{
			GetMonitorHex(data[0], data[1], x, y);
			return;
		}
		else
		{
			GetMonitorHex(data[3], data[4], x, y);
			return;
		}
	}
	
	
	void Draw()
	{
		if(TimePass() > this.time)
		{
			rays -= 1;
			@Rays[id] = null;
		}
		else
		{
			RecalculatePoints();
			DrawPrimitive(drawType, data);
		}
		
	}
	
	void RecalculatePoints()
	{
		for(uint i = 0, j = opacity; i<j; i++)
		{
			GetHexPos(mapx1, mapy1, data[i*6], data[(i*6)+1]); 
			data[(i*6)]   +=  xInc*i;
			data[(i*6)+1] -= (35/(__SpritesZoom) - yInc*i);  // source > humanoid critters around 70 px tall
			data[(i*6)+2] = color1;
			
			GetHexPos(mapx2, mapy2, data[(i*6)+3], data[(i*6)+4]); 
			data[(i*6)+3] -= (offsetX/(__SpritesZoom) - xInc*i);
			data[(i*6)+4] -= (offsetY/(__SpritesZoom) - yInc*i);
			data[(i*6)+5] = color2;
		}
		
	}
}


class BurstRay : DrawableObject
{
	array<RayMap@> Rays; // y e a 
	uint currentRay, opacity, amount;
	
	BurstRay(int amount, int mapx1In, int mapy1In, int mapx2In, int mapy2In, uint renderTime, int rayOffsetX, int rayOffsetY)
	{

		this.amount = amount;
		this.Rays.resize(amount);
		for(uint i = 0; i<amount; i++)
		{
			RayMap@ ray = RayMap(mapx1In, mapy1In, mapx2In, mapy2In);// renderTime, Random(rayOffsetX-(rayOffsetX*2),rayOffsetX*2), Random(0,rayOffsetY));
			ray.SetTime( (i+1)*renderTime );
			ray.SetOffsets(Random(rayOffsetX-(rayOffsetX*2),rayOffsetX*2), Random(0,rayOffsetY));
			@this.Rays[i] = ray;
			
		}
		this.currentRay = 0;
		super(renderTime);
		//Log("burst rays size is " +  BurstRays.length());
		//	GetTime(this.rayTimeStart[0],this.rayTimeStart[1],this.rayTimeStart[2],this.rayTimeStart[3],this.rayTimeStart[4],this.rayTimeStart[5],this.rayTimeStart[6],this.rayTimeStart[7]);
	}
	
	void SetDrawType(uint8 type)
	{
		for(uint i = 0, j = this.Rays.length(); i<j; i++)
		{
			this.Rays[i].drawType = type;
		}
	}
	
	void SetColors(uint color1In, uint color2In)
	{
		for(uint i = 0, j = this.Rays.length(); i<j; i++)
		{
			this.Rays[i].color1 = color1In;
			this.Rays[i].color2 = color2In;
		}
	}
	
	void SetId(uint id)
	{
		this.id = id;
	}
	
	void SetOpacity(uint opacity)
	{
		this.opacity = opacity;
		for(uint i = 0, j = Rays.length(); i < j; i++)
		{
			Rays[i].SetOpacity(opacity);
		}
	}
	
	void GetScreenPosition(int& x, int& y, bool source = true) 
	{
		if(Rays.length()>0)
		{
			if(source)
			{
				x = Rays[0].data[0];
				y = Rays[0].data[1];
				
				return;
			}
			else
			{
				x = Rays[0].data[3];
				y = Rays[0].data[4];
				return;
			}
		}
	}
	

	void Draw()
	{
		uint msDiff = this.TimePass();
		currentRay  = msDiff/this.time;
		
		if(currentRay<amount)
		{
			
		
/* 			if( (msDiff > this.time) )
			{
				currentRay += 1;
			
				this.timeStart = GetTick();
			} */
			
			this.Rays[currentRay].RecalculatePoints();
			DrawPrimitive(this.Rays[currentRay].drawType, this.Rays[currentRay].data);
		}
		else
		{
			burstRays -= 1;
			@BurstRays[id] = null;
		}
	}

}

class WeaponRadiusChosen : IWeaponRadiusChosen
{
	ItemCl@ chosenWeapon;
	uint color;
	array<int> data = array<int>(21,0); // yes, 7 points right
	uint8 drawType;
	
	WeaponRadiusChosen(uint color)
	{
		this.color = color; 
		for(uint8 i = 0, j = data.length()/3; i<j; i++)
		{
			this.data[(i*3)+2] = this.color;
		}
	}
	
 	void Draw()
	{
		RecalculateVertices();
		DrawPrimitive(drawType, data);
	}

	void SetDrawType(uint8 type)
	{
		this.drawType = type;
	}
	
		
 	void RecalculateVertices()
	{

		CritterCl@ chosen = GetChosen();
 		@chosenWeapon = _CritGetItemHand(chosen);
		if(valid(chosenWeapon) && chosenWeapon.GetType() == ITEM_TYPE_WEAPON)
		{
			
			uint16 hexX, hexY;
			uint8 wepMode  = chosenWeapon.Mode&0x0F;
			
			uint wpnMaxDist =  _WeaponMaxDist(chosenWeapon.Proto, wepMode);
			#ifdef _2238
			wpnMaxDist += checkBonus(chosenWeapon, BONUS_WEAPON_MAX_RANGE);
			if(chosen.Perk[PE_MARKSMAN]!=0)
			{
				uint8 wepSkill = 0;
				switch(wepMode)
				{
					case 0:
						wepSkill = chosenWeapon.Proto.Weapon_Skill_0;
						break;
					case 1:
						wepSkill = chosenWeapon.Proto.Weapon_Skill_1;
						break;
					case 2:
						wepSkill = chosenWeapon.Proto.Weapon_Skill_2;
						break;
					
				}
				if(wepSkill == SK_SMALL_GUNS || wepSkill == SK_BIG_GUNS || wepSkill == SK_ENERGY_WEAPONS)
					wpnMaxDist*= MARKSMAN_MOD;
			}
			
			if(IsGrenade(chosenWeapon))
			{
				if(chosen.Perk[PE_HEAVE_HO]!=0)
				{
					wpnMaxDist += chosen.Perk[PE_HEAVE_HO]*3;
				}
			}
			#endif
			
		
		
			for(uint8 i = 0, j = data.length()/3; i<j; i++) // each point is 3 cells
			{
				hexX = chosen.HexX;
				hexY = chosen.HexY;
				MoveHexByDir(hexX,hexY, i%6, wpnMaxDist);
				GetHexPos(hexX, hexY, this.data[i*3], this.data[(i*3)+1]);
			}
			
		}
	}
}

class CustomChosenHex
{
	uint color, radius;
	array<int> data = array<int>(21,0); // yes, 7 points
	uint8 drawType;
	
	CustomChosenHex(uint color, uint radius)
	{
		this.color = color; 
		this.radius = radius;
		for(uint8 i = 0, j = data.length()/3; i<j; i++)
		{
			this.data[(i*3)+2] = this.color;
		}
	}
	
 	void Draw()
	{
		RecalculateVertices();
		DrawPrimitive(drawType, data);
	}
	
	void SetDrawType(uint8 type)
	{
		this.drawType = type;
	}
	
	
 	void RecalculateVertices()
	{
 		CritterCl@ chosen = GetChosen();
 	
		if(valid(chosen))
		{
			uint16 hexX, hexY;
			for(uint8 i = 0, j = data.length()/3; i<j; i++) // each point is 3 cells
			{
				hexX = chosen.HexX;
				hexY = chosen.HexY;
				MoveHexByDir(hexX,hexY, i%6, this.radius);
				GetHexPos(hexX, hexY, this.data[i*3], this.data[(i*3)+1]);
			}
		}
	}
}


//deprecated, cvet invented this already
class LoadedSprite
{
	uint id;
	string name;
	uint layer, color, screenId, frmCount;
	int posX, posY, w, h;
	bool scratch, center;
	
	LoadedSprite(string@ name, uint pathId, uint layer, uint color, int posx, int posy, int w, int h, bool scratch, bool center, uint screenId)
	{
		this.id = LoadSprite(name, pathId);
		this.name = name;
		this.layer = layer;
		this.color = color;
		this.posX  = posx;
		this.posY  = posy;
		this.w 	   = w;
		this.h 	   = h;
		this.scratch = scratch;
		this.center  = center;
		this.frmCount = GetSpriteCount(this.id);
		this.screenId = screenId;
	}
	
	void Draw(int sprIndex)
	{
		DrawSprite(this.id, sprIndex, this.posX, this.posY, this.w, this.h, this.scratch, this.center, this.color);
	}

}

//deprecated since inherited from LoadedSprite
class MovingSprite : LoadedSprite
{
	int offXFrame, offYFrame, xLim, yLim, initialX, initialY;
	
	MovingSprite(string@ name, uint pathId, uint layer, uint color, int initialX, int initialY, int w, int h, bool scratch, bool center, uint screenId, int offXFrame, int offYFrame, int xLim, int yLim)
	{
		super(name, pathId, layer, color, initialX, initialY, w, h, scratch, center, screenId);
		this.offXFrame = offXFrame;
		this.offYFrame = offYFrame;
		this.xLim 	   = xLim;
		this.yLim      = yLim;
		this.initialX  = initialX;
		this.initialY  = initialY;
	}
	
	void Draw(uint sprIndex)
	{
		this.posX += this.offXFrame;
		this.posY += this.offYFrame;
		if( this.posX < -100 || this.posX > xLim || this.posY < -100 || this.posY > yLim )
		{
			this.posX = Random(0,__ScreenWidth);
			this.posY = this.initialY + Random(-20,-99);
		}
		LoadedSprite::Draw(sprIndex);
	}

}

class DelayedText : DrawableObject
{
	uint color;
	int posX, posY, offX, offY;
	string text;
	uint16 mapX, mapY, undef, textExSec, textExMs, width;
	bool map;
	uint8 font;
	
	
	DelayedText(uint16 posX, uint16 posY, uint color, uint8 font, uint time, string text, bool map, uint16 mapX, uint16 mapY, int offX, int offY)
	{
		this.posX  = posX;
		this.posY  = posY;
		this.color = color;
		this.time  = time;
		this.text  = text;
		this.map   = map;
		this.font  = font;
		this.offX  = offX;
		this.offY  = offY;
		this.width = this.text.length() * 10;
		super(this.time);
		//GetTime(this.textTimeStart[0],this.textTimeStart[1],this.textTimeStart[2],this.textTimeStart[3],this.textTimeStart[4],this.textTimeStart[5],this.textTimeStart[6],this.textTimeStart[7]);
		if(map)
		{
			this.mapX = mapX;
			this.mapY = mapY;
		}
	}
	
	void GetScreenPosition(int& x, int& y, bool source = true) 
	{

		if(source)
		{
			x = posX;
			y = posY;
			
			return;
		}
		else
		{
			x = posX+offX;
			y = posY+offY;
			return;
		}
	}
	
	
	void Draw()
	{
		if(this.map)
			MapToScreenPos();
		
		this.posX -= this.width/2;
		
		DrawText(this.text,	this.posX+this.offX/__SpritesZoom, this.posY+this.offY/__SpritesZoom, this.text.length()*10, 100, this.color,  this.font,	FT_CENTERX);
		
	
		if(this.TimePass() > time) 
		{
			
			@DelayedTexts[this.id] = null;
			texts--;
		}
	}
	
	void MapToScreenPos()
	{
		GetHexPos(this.mapX, this.mapY, this.posX, this.posY);
	}
	
}

class MuzzleFlash : CMovingMapObject
{
	uint16 mapx1, mapy1;
	uint color1, color2;
	array<int> data    ;

	MuzzleFlash(int mapx1In, int mapy1In, int mapx2In, int mapy2In, uint16 speed, int offsetXIn, int offsetYIn)
	{
		this.data   =  array<int>(6);
		super(mapx1In, mapy1In, mapx2In, mapy2In, speed, offsetXIn, offsetYIn, false);
		this.mapx1 = mapx1In;
		this.mapy1 = mapy1In;
		GetHexPos(mapx1, mapy1, this.data[0], this.data[1]); 
		this.data[3] = this.data[0];
		this.data[4] = this.data[1];
	}
	
	void SetColors(uint color1In, uint color2In)
	{
		this.color1 = color1In;
		this.color2 = color2In;
		
		this.data[2] = this.color1;
		this.data[5] = this.color2;
	}
	
	
	void Draw()
	{
		//Message("Drawing muzzle");
		uint msPass = TimePass();
		if(msPass > time)
		{
		//	Message("Muzzle timed out");
			
			muzzleFlashes -= 1;
			@MuzzleFlashes[id] = null;
			OnDestroy();
		}
		else
		{
			RecalculatePoints(msPass);
			DrawPrimitive(drawType, data);
		}
	}
	
	void GetScreenPosition(int& x, int& y, bool source = true) 
	{
		if(source)
		{
			x = data[0];
			y = data[1];
			
			return;
		}
		else
		{
			x = data[3];
			y = data[4];
			return;
		}
	}
	
	void GetHexPosition(uint16& x, uint16& y, bool source = true) // engine bug, 420 revision fixed it
	{
		if(source)
		{
			GetMonitorHex(data[0], data[1], x, y);
			return;
		}
		else
		{
			GetMonitorHex(data[3], data[4], x, y);
			return;
		}
	}
	
	void RecalculatePoints(uint msPass)
	{
		
		GetHexPos(mapx1, mapy1, data[0], data[1]);
		int distX = speed[0]*msPass/__SpritesZoom;
		int distY = speed[1]*msPass/__SpritesZoom;
	
		data[0] = (data[0] + distX);
		data[1] = (data[1] + (-32/__SpritesZoom)+distY);
		
		data[3] = (data[0] - (distX/10));
		data[4] = (data[1] - (distY/10));
		
	//	data[2] = color1;
	//	data[5] = color2;
		
	}
}

// muzzle factory, in fact, some bad way to create muzzles sync.
class BurstMuzzle : DrawableObject
{
	array<MuzzleFlash@> muzzles; // y e a 
	uint amount, delay, currentMuzzle, maxDelay, speed, color1, color2;
	int offsetX, offsetY, distanceFactor;
	uint16 mapx1, mapy1, mapx2, mapy2;
	
	
	BurstMuzzle(int mapx1In, int mapy1In, int mapx2In, int mapy2In, uint speed, uint delay, int amount, int offsetX, int offsetY)
	{
		
		this.speed = speed;
		this.mapx1 = mapx1In;
		this.mapy1 = mapy1In;
		this.mapx2 = mapx2In;
		this.mapy2 = mapy2In;
		this.offsetX = offsetX;
		this.offsetY = offsetY;
		this.delay = delay;
		this.currentMuzzle = 0;
		this.amount = amount;
		this.muzzles.resize(this.amount);
		this.maxDelay = this.amount*this.delay;
		this.distanceFactor = GetDistantion(mapx1, mapy1, mapx2, mapy2);
		super(this.maxDelay); // super crashes client
		
		//	GetTime(this.timeStart[0],this.timeStart[1],this.timeStart[2],this.timeStart[3],this.timeStart[4],this.timeStart[5],this.timeStart[6],this.timeStart[7]);
	}
	
	void GetScreenPosition(int& x, int& y, bool source = true) 
	{

		if(source)
		{
			GetHexPos(mapx1, mapy1, x, y);
			
			return;
		}
		else
		{
			GetHexPos(mapx2, mapy2, x, y);

			return;
		}
	}
	
	
	void SetDrawType(uint8 type)
	{
		this.drawType = type;
	}
	
	void SetColors(uint color1In, uint color2In)
	{

		this.color1 = color1In;
		this.color2 = color2In;

	}
	
	void SetId(uint id)
	{
		this.id = id;
	}
	

	void Draw()
	{
		//GetTime(this.timeStart[0], this.timeStart[0], this.timeStart[0], this.timeStart[0], this.timeStart[0], this.timeStart[0], exSec, exMs);	// Get the current time
		uint msDiff  = this.TimePass();
		uint timeDiff = msDiff - (((this.currentMuzzle)*this.delay)%this.maxDelay);
		
		if(timeDiff >= this.delay)
		{
			
			for(uint i = 0, j = timeDiff/this.delay; i<j; i++)
			{
				if(currentMuzzle >= amount)
				{
					burstMuzzles -= 1;
					@BurstMuzzles[this.id] = null;
					return;
				}
				
				MuzzleFlash@ burstMuzzle = MuzzleFlash(this.mapx1, this.mapy1, this.mapx2, this.mapy2, Random(1500,this.speed), Random(-this.offsetX-distanceFactor,this.offsetX+distanceFactor), Random(-this.offsetY-distanceFactor,this.offsetY+distanceFactor));
				burstMuzzle.SetColors(this.color1, this.color2);
				burstMuzzle.SetDrawType(this.drawType);
				burstMuzzle.SetId(FindFreeMuzzleCell());
				@MuzzleFlashes[burstMuzzle.id] = burstMuzzle;
				@this.muzzles[amount-(amount-this.currentMuzzle)] = burstMuzzle;
				
				if(@this.callbacks[DRAWABLE_EVENT_ON_DESTROY] != null)
					burstMuzzle.SetEvent(DRAWABLE_EVENT_ON_DESTROY, this.callbacks[DRAWABLE_EVENT_ON_DESTROY]);
				
				currentMuzzle++;
			}
		}
		
	}
}

class FlyEffect : CMovingMapObject
{
	Sprite@ sprite;
	uint16 mapx1, mapy1, mapx2, mapy2;
	array<int> data;
	uint8 trajectoryType = 0;
	
	FlyEffect(uint16 mapx1In, uint16 mapy1In, uint16 mapx2In, uint16 mapy2In, int speed, uint spriteHash, uint8 dir, int offsetX, int offsetY)
	{
		@sprite = Sprite();
		data = array<int>(2);
		this.mapx1 = mapx1In;
		this.mapy1 = mapy1In;
		this.mapx2 = mapx2In;
		this.mapy2 = mapy2In;
		sprite.LoadHash(spriteHash, dir);
		super(mapx1In, mapy1In, mapx2In, mapy2In, speed, offsetX, offsetY);
	}
	
	void SetTrajectory(uint8 type)
	{
		this.trajectoryType = type;
	}
	
	void GetScreenPosition(int& x, int& y, bool source = true) 
	{
		if(source)
		{
			x = data[0];
			y = data[1];
			return;
		}
		else
		{
			GetHexPos(mapx2, mapy2, x, y);
			return;
		}
	}
	
	void SetColor(uint color1In, uint color2In)
	{
		this.sprite.Color = color1In;
	}
	
	void Draw()
	{
		
		uint msPass = TimePass();
		if(msPass > this.time)
		{
			flyEffects -= 1;
			@FlyEffects[this.id] = null;
		}
		else
		{
			RecalculatePoints(msPass);
			DrawSprite(sprite.Id, -1, data[0], data[1], sprite.Width/__SpritesZoom, sprite.Height/__SpritesZoom, true, false, sprite.Color);
		}
	}
	
	void RecalculatePoints(uint msPass)
	{
	//	uint msPass  = this.TimePass();
		
		GetHexPos(mapx1, mapy1, data[0], data[1]);
		int distX = speed[0]*msPass/__SpritesZoom;
		int distY = speed[1]*msPass/__SpritesZoom;
		
		int offX = 0;
		int offY = 0;
		
		
		if(this.trajectoryType == FLY_EFFECT_TRAJECTORY_LINE)
			offY = 55;
		else
			Trajectories[this.trajectoryType-1](msPass, speed[0]*msPass/__SpritesZoom, speed[0], speed[1], this.time, offX, offY);
		
		//int offY  = (this.trajectoryType == FLY_EFFECT_TRAJECTORY_LINE ? -55 : Trajectories[this.trajectoryType-1](msPass, speed[0]*msPass/__SpritesZoom, speed[0], speed[1], this.time));//GetParabolicOffsets(-150, msPass, this.time);
		
		data[0] = (data[0] + (-offX/__SpritesZoom)+(distX));
		data[1] = (data[1] + (-offY/__SpritesZoom)+(distY));
	}
}

uint FindFreeDrawableCell()
{
	for(uint i = 0, j = Drawables.length(); i<j; i++)
	{
		if(@Drawables[i]==null)
			return i;
	}
	
	Drawables.insertLast(null);
	return Drawables.length()-1;
}

uint FindFreeRayCell()
{
	for(uint i = 0, j = Rays.length(); i<j; i++)
	{
		if(@Rays[i]==null)
			return i;
	}
	
	Rays.insertLast(null);
	return Rays.length()-1;
	
}


uint FindFreeBurstRayCell()
{
	for(uint i = 0, j = BurstRays.length(); i<j; i++)
	{
		if(@BurstRays[i]==null)
			return i;
	}
	
	BurstRays.insertLast(null);
	return BurstRays.length()-1;
}

Sprite@ GetCachedSprite(int spriteDef)
{
	if(valid(CachedSprites[spriteDef]))
		return CachedSprites[spriteDef];
	else
		return null;
}


uint FindLoadedSpriteByName(string@ name)
{
	for(uint i = 0, j = LoadedSprites.length(); i<j; i++)
	{
		if(LoadedSprites[i].name == name)
			return LoadedSprites[i].id;
		
	}
	return 0;
}

string GetLoadedSpriteNameById(uint Id)
{
	for(uint i = 0, j = LoadedSprites.length(); i<j; i++)
	{
		if(LoadedSprites[i].id == Id)
			return LoadedSprites[i].name;
		
	}
	return "";
}

uint FindFreeLoadedSpriteCell()
{
	for(uint i = 0, j = LoadedSprites.length(); i<j; i++)
	{
		if(@LoadedSprites[i] == null)
			return i;
		
	}
	LoadedSprites.insertLast(null);
	return LoadedSprites.length()-1;
}

void DeleteLoadedSprite(uint id)
{
	for(uint i = 0, j = LoadedSprites.length(); i<j; i++)
	{
		if(LoadedSprites[i].id == id)
		{
			@LoadedSprites[i]=null;
			return;
		}
	}
	Log("Error while deleting sprite from manager memory (does'nt exist in it's context)");
	return;
}

uint FindFreeMovCell()
{
	for(uint i = 0, j = MovingSprites.length(); i<j; i++)
	{
		if(@MovingSprites[i] == null)
			return i;
		
	}
	MovingSprites.insertLast(null);
	return MovingSprites.length()-1;
}

uint FindMovByName(string@ name)
{
	for(uint i = 0, j = MovingSprites.length(); i<j; i++)
	{
		if(MovingSprites[i].name == name)
			return MovingSprites[i].id;
		
	}
	return 0;
}

string GetMovNameById(uint Id)
{
	for(uint i = 0, j = MovingSprites.length(); i<j; i++)
	{
		if(MovingSprites[i].id == Id)
			return MovingSprites[i].name;
		
	}
	return "";
}


uint FindFreeTextCell()
{
	for(uint i = 0, j = DelayedTexts.length(); i<j; i++)
	{
		if(@DelayedTexts[i]==null)
			return i;
	}
	
	DelayedTexts.insertLast(null);
	return DelayedTexts.length()-1;
}

uint FindFreeMuzzleCell()
{
	for(uint i = 0, j = MuzzleFlashes.length(); i<j; i++)
	{
		if(@MuzzleFlashes[i]==null)
			return i;
	}
	
	MuzzleFlashes.insertLast(null);
	return MuzzleFlashes.length()-1;
}

uint FindFreeBurstMuzzleCell()
{
	for(uint i = 0, j = BurstMuzzles.length(); i<j; i++)
	{
		if(@BurstMuzzles[i]==null)
			return i;
	}
	
	BurstMuzzles.insertLast(null);
	return BurstMuzzles.length()-1;
}

uint FindFreeFlyEffectCell()
{
	for(uint i = 0, j = FlyEffects.length(); i<j; i++)
	{
		if(@FlyEffects[i]==null)
			return i;
	}
	
	FlyEffects.insertLast(null);
	return FlyEffects.length()-1;
}

void DrawDrawables()
{
	if(drawables>0)
	{
	//	Message("Drawing drawables");
		for(uint i = 0, j = Drawables.length(); i < j; i++)
		{
			if(@Drawables[i]!=null)
				Drawables[i].Draw();
		}
	}
}

// array-drawings
void DrawRays()
{
	if(rays>0)
	{
		for(uint i = 0, j = Rays.length(); i<j; i++)
		{
			if(@Rays[i]!=null)
				Rays[i].Draw();
		}
	}
}

void DrawBurstRays()
{
	if(burstRays>0)
	{
		for(uint i = 0, j = BurstRays.length(); i<j; i++)
		{
			if(@BurstRays[i]!=null)
				BurstRays[i].Draw();
		}
	}
}

void DrawLoadedSprites(uint layer, uint screenId)
{
	for(uint i = 0, j = LoadedSprites.length(); i<j; i++)
	{
		if(@LoadedSprites[i] != null)
		{
			if(LoadedSprites[i].layer == layer && LoadedSprites[i].screenId == screenId)
			{
				LoadedSprites[i].Draw(0);
			}
		}
	}
}


void DrawScreenMovings(uint layer, uint screenId)
{
	for(uint i = 0, j = MovingSprites.length(); i<j; i++)
	{
		if(@MovingSprites[i] != null)
		{
			if(MovingSprites[i].layer == layer && MovingSprites[i].screenId == screenId)
			{
				MovingSprites[i].Draw(0);
			}
		}
	}
 }

void DrawTexts()
{
	if(texts>0)
	{
		for(uint i = 0, j = DelayedTexts.length(); i<j; i++)
		{
			if(@DelayedTexts[i]!=null)
				DelayedTexts[i].Draw();
		}
	}
}

void DrawMuzzleFlashes()
{
	if(muzzleFlashes>0)
	{
	//	Message("Muzzles more than 0");
		for(uint i = 0, j = MuzzleFlashes.length(); i<j; i++)
		{
			if(@MuzzleFlashes[i]!=null)
				MuzzleFlashes[i].Draw();
		}
	}
}

void DrawBurstMuzzles()
{
	if(burstMuzzles>0)
	{
		for(uint i = 0, j = BurstMuzzles.length(); i<j; i++)
		{
			if(@BurstMuzzles[i]!=null)
			{
				BurstMuzzles[i].Draw();
			}
		}
	}
}

void DrawMovingMapObjects()
{
	if(movingMapObjects>0)
	{
		for(uint i = 0, j = MovingMapObjects.length(); i<j; i++)
		{
			if(@MovingMapObjects[i]!=null)
			{
				MovingMapObjects[i].Draw();
			}
		}
	}
}

void DrawWepRadius(CritterCl@ chosen)
{
	if(valid(wepRadChos))
	{
		ItemCl@ chosenItem = _CritGetItemHand(chosen);
		if(valid(chosenItem))
		{
			if(chosenItem.GetType() == ITEM_TYPE_WEAPON)
			wepRadChos.Draw(); 	
		}

	}
}

void DrawCustomRadiuses()
{
	if(CustomChosenHexes.length()!=0)
	{
		for(uint i =0, j=CustomChosenHexes.length(); i<j; i++)
		{
			CustomChosenHexes[i].Draw();
		}
	}
}

void DrawFlyEffects()
{
	if(flyEffects>0)
	{
		for(uint i = 0, j = FlyEffects.length(); i < j; i++)
		{
			if(@FlyEffects[i]!=null)
				FlyEffects[i].Draw();
		}
	}
}

void DrawWMZones() // require manual define for ZONE_IDX, and some checks, aswell as layer input argument, to control the layers overlapping
				   // ( intended to work with a single-dimensional array holding WMZoneRender objects, just like *vanilla* worldmap cells macros )
{
/* 	for(uint zx = MAX(0, 0  - (__GmapOffsetX*__GmapZoom/(__GlobalMapZoneLength))), countx = MIN(WMZonesRender.length()/__GlobalMapHeight, (__ScreenWidth-__GmapOffsetX)*__GmapZoom/__GlobalMapZoneLength  )  ; zx<countx; zx++)
	{
		for(uint zy = MAX(0, 0  - (__GmapOffsetY*__GmapZoom/(__GlobalMapZoneLength))), county = MIN(WMZonesRender.length()/__GlobalMapWidth, (__ScreenHeight-__GmapOffsetY)*__GmapZoom/__GlobalMapZoneLength ); zy<county; zy++)
		{
			if(WMZonesRender[ZONE_IDX(zx,zy)].color!=0)
				WMZonesRender[ZONE_IDX(zx,zy)].Draw(layer);
		}
	}
*/
} 


// API

IDrawable@ CreateRay( int[] drawData) // need 2 points to draw ray between them, each point is 3 array cells = X,Y,Color, so, its 6 cells minimum for a single ray.
{							  
	if(__ConfigDrawRays)
	{
		RayMap@ ray = RayMap(drawData[RAYDATA_MAPX1], drawData[RAYDATA_MAPY1], drawData[RAYDATA_MAPX2], drawData[RAYDATA_MAPY2], drawData[RAYDATA_TIME], 0, 35);
		ray.SetColors(drawData[2], drawData[5]);
		ray.SetDrawType(DRAW_PRIMITIVE_LINELIST);
		ray.SetId(FindFreeRayCell());
		@Rays[ray.id] = ray;
		
		rays += 1;
		
		return ray;
	}
	
	return null;
}

IDrawable@ CreateBurstRay(int [] drawData)
{
	if(__ConfigDrawRays)
	{
		BurstRay@ burstRay = BurstRay(drawData[RAYDATA_AMOUNT], drawData[RAYDATA_MAPX1], drawData[RAYDATA_MAPY1], drawData[RAYDATA_MAPX2], drawData[RAYDATA_MAPY2], drawData[RAYDATA_TIME], 10, 35);
		burstRay.SetColors(drawData[2], drawData[5]);
		burstRay.SetDrawType(DRAW_PRIMITIVE_LINELIST);
		burstRay.SetId(FindFreeBurstRayCell());
		@BurstRays[burstRay.id] = burstRay;
		
		burstRays += 1;
		
		return burstRay;
	}
	return null;
}

IDrawable@ CreateMuzzle(int[] drawData) 
{							  
	if(__ConfigDrawMuzzles)
	{
		
		MuzzleFlash@ muzzle = MuzzleFlash(drawData[MUZZLEDATA_MAPX1], drawData[MUZZLEDATA_MAPY1], drawData[MUZZLEDATA_MAPX2],
		drawData[MUZZLEDATA_MAPY2], drawData[MUZZLEDATA_SPEED], Random(-10,10), Random(-15,35));
		
		muzzle.SetColors(drawData[2], drawData[5]);
		muzzle.SetDrawType(DRAW_PRIMITIVE_LINELIST);
		muzzle.SetId(FindFreeMuzzleCell());
		@MuzzleFlashes[muzzle.id] = muzzle;
		
		muzzleFlashes += 1;
		
		return muzzle;
	}
	return null;
}

IDrawable@ CreateBurstMuzzle(int[] drawData)
{
	if(__ConfigDrawMuzzles)
	{
 		BurstMuzzle@ burstMuzzle = BurstMuzzle(drawData[MUZZLEDATA_MAPX1], drawData[MUZZLEDATA_MAPY1], drawData[MUZZLEDATA_MAPX2],
		drawData[MUZZLEDATA_MAPY2], drawData[MUZZLEDATA_SPEED], drawData[MUZZLEDATA_DELAY], drawData[MUZZLEDATA_AMOUNT], Random(-25,55), Random(-15,65));
		
	 	burstMuzzle.SetColors(drawData[2], drawData[5]);
		burstMuzzle.SetDrawType(DRAW_PRIMITIVE_LINELIST);
		burstMuzzle.SetId(FindFreeBurstMuzzleCell());
		@BurstMuzzles[burstMuzzle.id] = burstMuzzle;
		
		muzzleFlashes += drawData[8];
		burstMuzzles += 1;
		
		return burstMuzzle; 
	}
	return null;
}

void InitSprites()
{
	if(!SpritesInit)
	{
		int randomPicSet = Random(0,0);	
		
		Sprite@ regSprite 	   = Sprite();
		Sprite@ mainMenuSprite = Sprite();
		
		if(regSprite.Load("reg"+__ScreenWidth+"x"+__ScreenHeight+"_"+randomPicSet+".png", PT_ART_INTRFACE))
			@CachedSprites[CACHED_REG_SPRITE]	    = regSprite;
		if(mainMenuSprite.Load("mm"+__ScreenWidth+"x"+__ScreenHeight+"_"+randomPicSet+".png", PT_ART_INTRFACE))
			@CachedSprites[CACHED_MAIN_MENU_SPRITE] = mainMenuSprite;

		SpritesInit = true;
	}
}

IDrawable@ CreateFlyEffect(int[] data)
{
	//Message("trying to create fly effect with hx " + data[0] + " hy " + data[1] + " tx " + data[2] + " ty " + data[3] + " sp " + data[4] + " hash " + uint(data[5]) + " dir " + data[6] + " offx " +  data[7] + " offy " + data[8]);
	
	FlyEffect@ flyEffect = FlyEffect(data[0], data[1], data[2], data[3], data[4], uint(data[5]), data[6], data[7], data[8]);
	flyEffect.SetId(FindFreeFlyEffectCell());
	@FlyEffects[flyEffect.id] = flyEffect;
	
	flyEffects += 1;
	
	return flyEffect;
}

// hx hy tx ty speed hash dir offx offy count
void CreateFlyEffects(int[] data, array<IDrawable@> fill)
{
	fill.resize(0);
	for(int i = 0; i<data[9]; i++)
	{
		fill.insertLast(CreateFlyEffect(data));
	}
	
}

IDrawable@ CreateTimedMapSprite(int[] data)
{
	//Message("Creating map sprite x " + data[0] + " y " + data[1] + " color " + data[2] + " offx " + data[3] + " offy " + data[4] + " time " + data[5] + " hash " + data[6] + " dir " + data[7]);
	TimedMapSprite@ mapSprite = TimedMapSprite(data[0], data[1], data[2], data[3], data[4], data[5], uint(data[6]), data[7]);
	//Message("id setting");
	mapSprite.SetId(FindFreeDrawableCell());
	//Message("applyin to array");
	@Drawables[mapSprite.id] = mapSprite;
	
	drawables += 1;
	
	return mapSprite;
}

// to use with RunClientScript
void _CreateDelayedText(int posX, int posY, int color, string@ text, int[]@ parameteres)
{
	//DelayedText(uint16 posX, uint16 posY, uint color, uint8 font, uint time, string text, bool map, uint16 mapX, uint16 mapY, int offX, int offY)
	DelayedText@ newText = DelayedText(posX, posY, color, uint(parameteres[0]), parameteres[1], text, parameteres[2]>0 ? true : false, parameteres[3], parameteres[4], parameteres[5], parameteres[6]);
	newText.SetId(FindFreeTextCell());
	@DelayedTexts[newText.id] = newText;
	
	texts += 1;

}

void _CreateFlyEffect(int, int, int, string@, int[]@ data)
{
	data[4]   = HexToPixelSpeed(data[0], data[1], data[2], data[3], data[4]);
	//Message("Speed " + data[4]);
	CreateFlyEffect(data).SetTrajectory(data[9]);
}

void _CreateFlyEffects(int, int, int cnt, string@, int[]@ data)
{
	
}

// to use with RunClientScript
void _DrawPenetratingRay(int param0, int param1, int param2, string@ param3, int[]@ param4)
{
	
	if(__ConfigDrawRays)
	{
		int[] rayInfo;
		rayInfo.resize(8);
		bool ray = false;
		
		uint16 hx = param4[0], hy = param4[1], tx = param4[2], ty = param4[3];
		uint weaponPid = param4[4];
		
		GetHexCoord(hx, hy,  tx,  ty , 0.0f, param2);
		
		if(weaponPid==PID_M72_GAUSS_RIFLE || weaponPid==PID_PK12_GAUSS_PISTOL)
		{
			rayInfo[2] = 0x00FFFFFF; // white transparent
			rayInfo[5] = COLOR_WHITE;
			ray = true;
		}
		else // default color
		{
			rayInfo[2] = COLOR_LGREEN;
			rayInfo[5] = COLOR_LGREEN;
			ray = true;
		}
		
		if(ray)
		{
			rayInfo[0] = hx;
			rayInfo[1] = hy;
			rayInfo[3] = tx;
			rayInfo[4] = ty;
			rayInfo[7] = 150;
			CreateRay(rayInfo);
		}
	}

}

void CreateCustomRadius(uint color, uint radius)
{
	CustomChosenHex@ cch = CustomChosenHex(color,radius);
	cch.SetDrawType(DRAW_PRIMITIVE_LINESTRIP);
	CustomChosenHexes.insertLast(cch);
}

IWeaponRadiusChosen@ CreateWeaponRadius(uint color)
{
	if(color!=0)
	{
		WeaponRadiusChosen@ wrc = WeaponRadiusChosen(color);
		wrc.SetDrawType(DRAW_PRIMITIVE_LINESTRIP);
		@wepRadChos = wrc;
		return wrc;
	}
	return null;
}



double ArcHeight(double position, double arc_length, double arc_height)
{
    double b = (arc_height * 4) / (arc_length);
    double a = b / (arc_length);
    return - position * position * a + position * b;
}

void ArcTrajectory(uint timePass, int position, float speedX, float speedY, uint time, int& offX, int& offY)
{
	offY = 55+ArcHeight(position, speedX*time/__SpritesZoom, 75);
	
}


#endif
#endif
