// Author: Anuri

#include "_ltp.fos"
#include "_utils.fos"
#include "_defines.fos"
#include "firestarter_h.fos"
#include "effects_h.fos"
#include "explode_h.fos"
#include "flash_grenade_h.fos"

bool suicide_ltp_inited = false;
void suicide_ltp_init()
{
    LTPREG( LTP_SUICIDE, process_suicide )
    suicide_ltp_inited = true;
}

void unsafe_killself( Critter& player, int param0, int param1, int param2, string@ param3, int[]@ param4 ) //exported
{
	if( !valid( player ) || player.IsBusy() || player.IsDead() || player.IsKnockout() || player.StatBase[ ST_CURRENT_HP ] <= 0 )
	{
		return;
	}
	
	Map@ map = player.GetMap();
	if( !valid(map) )
	{
		return;
	}
	
	Item@[] suicide_tools;
	if( player.GetItems( SLOT_HAND1, suicide_tools ) == 0 )
	{ 
		player.SayMsg( SAY_EMOTE, TEXTMSG_TEXT, STR_EMOTE_SUICIDE_TRY_CHOKE ); 
		return;
	}
	
	Item@ suicide_tool = suicide_tools[suicide_tools.length()-1];
	uint8 tool_Subtype = suicide_tool.Proto.Item_Subtype;
	
	if( tool_Subtype == 2 )
	{
		player.SayMsg( SAY_EMOTE, TEXTMSG_TEXT, STR_EMOTE_SUICIDE_TRY_REVOLVER );
		start_russianRoulette( player, suicide_tool );
		return;
		
	}
	else if( tool_Subtype == 1 || ( tool_Subtype >= 3 && tool_Subtype <= 14 ) || ( tool_Subtype >= 16 && tool_Subtype <= 42 ) && suicide_tool.AmmoCount > 0 )
	{
		player.SayMsg( SAY_EMOTE, TEXTMSG_TEXT, STR_EMOTE_SUICIDE_TRY_GUN );
		
	}
	else if( tool_Subtype == 15 && suicide_tool.AmmoCount > 0 )
	{
		player.SayMsg( SAY_EMOTE, TEXTMSG_TEXT, STR_EMOTE_SUICIDE_TRY_LASER );
		
	}
	else if( tool_Subtype >= 45 && tool_Subtype <= 50 || tool_Subtype >= 52 && tool_Subtype <= 54 )
	{
		player.SayMsg( SAY_EMOTE, TEXTMSG_TEXT, STR_EMOTE_SUICIDE_TRY_GRENADE );
		
	}
	else if( player.CountItem( PID_LIGHTER ) > 0 && tool_Subtype == 51 )
	{
		player.SayMsg( SAY_EMOTE, TEXTMSG_TEXT, STR_EMOTE_SUICIDE_TRY_BURN );
		player.AddItem( PID_BOTTLE_GLASS, 1 );
		player.MoveItem( suicide_tool.Id, suicide_tool.GetCount(), SLOT_INV );
		_SubItem( suicide_tool, 1 );
		@ suicide_tool = player.GetItem( PID_LIGHTER, -1 );
		player.MoveItem( suicide_tool.Id, suicide_tool.GetCount(), SLOT_HAND1 );
		
	}
	else if( tool_Subtype == 44 || tool_Subtype == 55 || tool_Subtype == 56 || tool_Subtype == 61 )
	{
		player.SayMsg( SAY_EMOTE, TEXTMSG_TEXT, STR_EMOTE_SUICIDE_TRY_KNIFE );
		
	}
	else if ( suicide_tool.GetProtoId() == PID_CHEMICALS )
	{
		player.SayMsg( SAY_EMOTE, TEXTMSG_TEXT, STR_EMOTE_SUICIDE_TRY_CHEM );
		
	}
	else
	{
		player.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_SUICIDE_NOTHING );
		return;
	}
	start_suicide( player, suicide_tool );
}
	
bool start_suicide( Critter& player, Item& suicide_tool )
{
	if( !suicide_ltp_inited )
	{
		suicide_ltp_init();
	}
	
	if( valid( suicide_tool ) )
	{	
		uint8 tool_Subtype = suicide_tool.Proto.Item_Subtype;
		StartProcess( player, LTP_SUICIDE, 0, suicide_tool.Id, 0, 5000 );
		return true;
	}
	return false;
}
	
uint process_suicide( Critter@ cr, int& param0, int& param1, int& param2 )
{
    LTPROCESSD( LTP_SUICIDE )
	
	Map@ map = cr.GetMap();
	if( !valid(map) )
	{
		return 0;
	}

    if( param0 == 0 )
    {	
		Item@ suicide_tool = GetItem( param1 );
		uint8 tool_Subtype = suicide_tool.Proto.Item_Subtype;
		
		if( ( tool_Subtype == 1 || ( tool_Subtype >= 3 && tool_Subtype <= 42 ) ) && suicide_tool.AmmoCount > 0 )
		{
			switch(tool_Subtype)
			{
				case( 1 ):
				case( 3 ):
					cr.SayMsg( SAY_EMOTE, TEXTMSG_TEXT, STR_EMOTE_SUICIDE_GUN );
					cr.StatBase[ ST_MAX_LIFE ] -= 666;
					cr.ToDead( ANIM2_DEAD_BACK, null );
					cr.ParamBase[ CR_DEATH_STAGE ] = 100;
					break;
				case( 7 ):
				case( 8 ):
					cr.SayMsg( SAY_EMOTE, TEXTMSG_TEXT, STR_EMOTE_SUICIDE_SHOTGUN );
					cr.ToDead( ANIM2_DEAD_BLOODY_SINGLE, null );
					break;
				case( 15 ):
				case( 17 ):
					cr.SayMsg( SAY_EMOTE, TEXTMSG_TEXT, STR_EMOTE_SUICIDE_LASER );
					cr.ToDead( ANIM2_DEAD_LASER, null );
					break;
				case( 25 ):
				case( 27 ):
					cr.SayMsg( SAY_EMOTE, TEXTMSG_TEXT, STR_EMOTE_SUICIDE_PLASMA );
					cr.ToDead( ANIM2_DEAD_FUSED, null );
					break;
				case( 35 ):
				case( 37 ):
					cr.SayMsg( SAY_EMOTE, TEXTMSG_TEXT, STR_EMOTE_SUICIDE_ELECTRO );
					cr.ToDead( ANIM2_DEAD_PULSE, null );
					break;
				default:
					cr.SayMsg( SAY_EMOTE, TEXTMSG_TEXT, STR_SUICIDE_WRONG_TOOL );
					break;
			}
			if( tool_Subtype != 2 ) 
			{
				uint8 weaponMode = _WeaponSoundId( suicide_tool.Proto, _WeaponModeUse( suicide_tool.Mode ) );
				ProtoItem@ weapon = GetProtoItem( suicide_tool.Proto.ProtoId );
				weaponSFX( cr, weapon, 0 );

				suicide_tool.AmmoCount --;
				suicide_tool.Update();
				cr.MoveItem( suicide_tool.Id, 1, SLOT_GROUND );
			}
		}
		else if( ( tool_Subtype >= 45 && tool_Subtype <= 50 ) || ( tool_Subtype >= 52 && tool_Subtype <= 54 ) )
		{
			cr.SayMsg( SAY_EMOTE, TEXTMSG_TEXT, STR_EMOTE_SUICIDE_GRENADE );
			QuakeScreen2( cr );
			switch(tool_Subtype)
			{
				case( 45 ):
					cr.ToDead( ANIM2_DEAD_EXPLODE, null );
					ExplodeEx( map, cr.HexX, cr.HexY, PID_EXPLODE_ROCKET, 0, Random( 30, 70 ), DAMAGE_EXPLODE, 2, 0 );
					break;
				case( 47 ):
					cr.ToKnockout( KNOCKOUT_ANIM2_DEFAULT( true ), 150, cr.HexX, cr.HexY );
					ApplyFlashEff( cr, 2 );
					break;
				case( 49 ):
					cr.ToDead( ANIM2_DEAD_EXPLODE, null );
					ExplodeEx( map, cr.HexX, cr.HexY, PID_EXPLODE_PLASMA, 0, Random( 50, 90 ), DAMAGE_PLASMA, 2, 0 );
					break;
				case( 50 ):
					cr.ToDead( ANIM2_DEAD_EXPLODE, null );
					ExplodeEx( map, cr.HexX, cr.HexY, PID_EXPLODE_EMP, 0, Random( 70, 110 ), DAMAGE_ELECTR, 2, 0 );
					break;
				case( 52 ):
					cr.ToDead( ANIM2_DEAD_BURN, null );
					ExplodeEx( map, cr.HexX, cr.HexY, PID_EXPLODE_ROCKET, 0, Random( 20, 50 ), DAMAGE_FIRE, 1, 0 );
					GenerateFire( map, cr.HexX, cr.HexY, 1, 1, cr.Id );
					break;
				default:
					cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_EMOTE_SUICIDE_GRENADE_FAIL );
					break;
			}
			_SubItem( suicide_tool, 1 );
		}
		else if( tool_Subtype == 44 || tool_Subtype == 55 || tool_Subtype == 56 || tool_Subtype == 61 )
		{
			cr.SayMsg( SAY_EMOTE, TEXTMSG_TEXT, STR_EMOTE_SUICIDE_HARAKIRI );
			cr.ToDead( ANIM2_DEAD_BLOODY_SINGLE, null );
			cr.MoveItem( suicide_tool.Id, 1, SLOT_GROUND );
		
		}
		else if ( suicide_tool.GetProtoId() == PID_CHEMICALS )
		{
			cr.SayMsg( SAY_EMOTE, TEXTMSG_TEXT, STR_EMOTE_SUICIDE_CHEM );
			_SubItem(suicide_tool, 1);
			cr.StatBase[ ST_MAX_LIFE ] -= 666;
			cr.ToDead( ANIM2_DEAD_FRONT, null );
			cr.ParamBase[ CR_DEATH_STAGE ] = 100;
		}
		else if( suicide_tool.GetProtoId() == PID_LIGHTER )
		{
			cr.SayMsg( SAY_EMOTE, TEXTMSG_TEXT, STR_EMOTE_SUICIDE_BURN );
			cr.ToDead( ANIM2_DEAD_BURN_RUN, null );
			Item@[] droppedItems;
			cr.GetItems( -1, droppedItems );
			MoveItems( droppedItems, map, cr.HexX, cr.HexY );
			GenerateFire( map, cr.HexX, cr.HexY, 2, 1, cr.Id );
			
		}
		else
		{
			cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_SUICIDE_NOTHING );
		}
	}
	return 0;
}

bool ltp_russroll_inited = false;
void ltp_russroll_init()
{
	LTPREG( LTP_RUSSROUL, process_russianRoulette )
	ltp_russroll_inited = true;
}

bool start_russianRoulette( Critter& player, Item& revolver )
{
	if(!ltp_russroll_inited)
	{
		ltp_russroll_init();
	}
	
	if( valid( revolver ) )
	{	
		StartProcess( player, LTP_RUSSROUL, 0, revolver.Id, 0, 3000 );
		return true;
	}
	return false;
}

uint process_russianRoulette( Critter@ cr, int& param0, int& param1, int& param2 )
{
    LTPROCESSD( LTP_RUSSROUL )

	Map@ map = cr.GetMap();
	if(!valid(map)) 
	{ 
		return 0;
	}

    if( param0 == 0 )
    {
        Item@ revolver = GetItem( uint( param1 ) );
        if( valid( revolver ) )
        {
            int chance = revolver.AmmoCount * 1000 / revolver.Proto.Weapon_MaxAmmoCount;
			bool isFemale = ( cr.Stat[ ST_GENDER ] == GENDER_FEMALE );
			if( Random( 1, 1000 ) < chance )
			{
				cr.SayMsg( SAY_EMOTE_ON_HEAD, TEXTMSG_TEXT, isFemale ? STR_RUSS_ROULL_LOSE_F : STR_RUSS_ROULL_LOSE_M );
				
				uint8 weaponMode = _WeaponSoundId( revolver.Proto, _WeaponModeUse( revolver.Mode ) );
				ProtoItem@ weapon = GetProtoItem( revolver.Proto.ProtoId );
				weaponSFX( cr, weapon, 0 );
				
				revolver.AmmoCount--;
				revolver.Update();
				cr.MoveItem( revolver.Id, 1, SLOT_GROUND );
				cr.StatBase[ ST_MAX_LIFE ] -= 666;
				cr.ToDead( ANIM2_DEAD_FRONT, null );
				cr.ParamBase[ CR_DEATH_STAGE ] = 100;
			} 
			else
			{
				cr.SayMsg( SAY_EMOTE_ON_HEAD, TEXTMSG_TEXT, isFemale ? STR_RUSS_ROULL_WIN_F : STR_RUSS_ROULL_WIN_M );
				ProtoItem@ weapon = GetProtoItem( revolver.Proto.ProtoId );
				weaponSFX( cr, weapon, 4 );
			}
        }
    }
    return 0;
}

void weaponSFX( Critter& cr, ProtoItem& weapon, uint8 use )
{
	int radius = weapon.Weapon_HearRadius;
	
	if( radius == 0 || use == 4 ) {
		radius = 5;
	}
	Critter@[] players;
	int hx = cr.HexX, hy = cr.HexY;
	cr.GetMap().GetCrittersHex( hx, hy, radius, FIND_ALL | FIND_ONLY_PLAYERS, players );
	int[] values = { weapon.ProtoId, use, radius };
	for( uint i = 0; i < players.length(); i++ ) 
	{
		Critter@ player = players[i];
		if( valid( player ) ) 
		{
			player.RunClientScript( "fofmod@__PlayWeaponSound", cr.Id, hx, hy, "LAUGHTE1.mp3", values );
		}
	}
}