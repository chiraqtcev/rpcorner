#ifndef BRAHMINS
#define BRAHMINS

#include "_utils.fos"
#include "_npc_pids.fos"
#include "brahmins_h.fos"
#include "npc_planes_h.fos"

bool noPetting( Critter& cr, Critter@ targetCr )
{
	if( targetCr.Stat[ ST_GENDER ] != GENDER_FEMALE )
	{
		cr.Say( SAY_NETMSG, "Самцы браминов не нуждаются в дополнительной подкормке." );
		return true;
	}
	
	if( targetCr.GetTimeEvents( CTE_BRAHMIN_PREGNANCY, null, null, null ) == 0 )
	{
		cr.Say( SAY_NETMSG, "Пока она не беременна, ей хватает подножного корма и воды." );
		return true;
	}
	
	return false;
}

//import bool BrahminPetting( Critter& cr, Item& item, Critter@ targetCr ) from "brahmins";
bool BrahminPetting( Critter& cr, Item& item, Critter@ targetCr ) //exported
{
	uint pid = item.GetProtoId();
	
	uint[][] food_data = {
		{ PID_BROC_FLOWER, 1 },
		{ PID_XANDER_ROOT, 1 },
		{ PID_ALGAE, 2 },
		{ PID_MUTATED_FRUIT, 3 },
		{ PID_CORN, 5 },
		{ PID_CABBAGE, 4},
		{ PID_RADCVET, 2},
		{ PID_MUSH_LOW, 2},
	}; 
	
	for( uint i = 0, len = food_data.length(); i < len; i++ )
		if( food_data[i].length() > 0 && food_data[i][0] == pid )
		{
			if( noPetting( cr, targetCr ) ) return true;
			
			if( targetCr.ParamBase[CR_VAL0] < 10 )
			{
				targetCr.ParamBase[CR_VAL0] += food_data[i][1];
				cr.Say( SAY_EMOTE_ON_HEAD, "Кормит брамина" );
				_SubItem( item, 1 );
			}
			else
			{
				cr.Say( SAY_NETMSG, "Животина сыта." );
			}
			return true;
		}
	
	uint[][] water_data = {
		{ PID_GLASS_BOTTLE_FULL, 1 },
		{ PID_GLASS_BOTTLE_DIRTY_FULL, 1 },
		{ PID_BRAHMIN_MILK, 3 },
	};

	for( uint i = 0, len = water_data.length(); i < len; i++ )
		if( water_data[i].length() > 0 && water_data[i][0] == pid )
		{
			if( noPetting( cr, targetCr ) ) return true;

			if( targetCr.ParamBase[CR_VAL1] < 4 )
			{
				targetCr.ParamBase[CR_VAL1] += water_data[i][1];
				cr.Say( SAY_EMOTE_ON_HEAD, "Поит брамина" );

				cr.AddItem( PID_BOTTLE_GLASS, 1 );
				
				_SubItem( item, 1 );
			}
			else
			{
				cr.Say( SAY_NETMSG, "Животина напоена." );
			}
			return true;
		}
		
	return false;
}

//import void brahminInitSearch( Critter& cr ) from "brahmins";
void brahminInitSearch( Critter& cr ) //exported
{
	if( cr.GetTimeEvents (CTE_BRAHMIN_SEARCH, null, null, null) > 0 ) return;
	cr.AddTimeEvent( "cte_search_partner", 0, CTE_BRAHMIN_SEARCH, 0 );
}

void brahminBirth( Map@ map, uint16 hexX, uint16 hexY )
{
	Critter@ baby = map.AddNpc (NPC_BRAHMIN_SM, hexX, hexY, Random (0, 5), null, null, null);
	if (valid (baby)) {
		baby.StatBase [ST_GENDER] = (Random (0, 1) == 0) ? GENDER_MALE : GENDER_FEMALE;
		baby.AddTimeEvent ("brahmins@cte_brahmin_growth", 2*24*60*60*__TimeMultiplier, CTE_BRAHMIN_GROWTH, 0);
		baby.StatBase[ ST_AI_ID ] = 6;
		baby.StatBase[ ST_REPLICATION_TIME ] = -1;
	}
}

//~run brahmins tBirth id 0 0
void tBirth( Critter& cr, int id, int hunger, int water )
{
	Map@ map = cr.GetMap();
	if( !valid( map ) ) return;
	
	Critter@ brahmin = map.AddNpc( NPC_PID_Brahmin, cr.HexX + 1, cr.HexY + 1, Random( 0, 5 ), null, null, "brahmins@_BrahminInitPregnancy" );
	if( !valid( brahmin ) ) return;

	cr.Say( SAY_NORM, "Чудо рождения!" );
	brahmin.ParamBase[CR_VAL0] = hunger;
	brahmin.ParamBase[CR_VAL1] = water;
}

void _BrahminInitPregnancy( Critter& cr, bool firstTime )
{
	if( cr.GetTimeEvents( CTE_BRAHMIN_PREGNANCY, null, null, null ) > 0 ) 
	{
		cr.Say( SAY_EMOTE, "Готовится рожать" );
		cr.EraseTimeEvents( cr.EraseTimeEvents( CTE_SLOWRELOAD ) );
		return;
	}
	
	cr.AddTimeEvent( "brahmins@cte_brahmin_pregnancy", REAL_SECOND( 3 ), CTE_BRAHMIN_PREGNANCY, 100 ); //100% озабоченность
}

uint cte_brahmin_pregnancy( Critter& cr, int identifier, uint& rate ) 
{
	//Что бы беременный брамин женского рода родил браминёнка - её нужно напоить и накормить с рук.
			  
	if( cr.ParamBase[CR_VAL0] < 10 )
	{
		cr.Say( SAY_EMOTE_ON_HEAD, "Страдает от голода" );
		return REAL_SECOND( 15 ); //REAL_MINUTE( Random( 15, 45 ) );
	}
	
	if( cr.ParamBase[CR_VAL1] < 4 )
	{
		cr.Say( SAY_EMOTE_ON_HEAD, "Страдает от жажды" );
		return REAL_SECOND( 15 ); //REAL_MINUTE( Random( 15, 45 ) );
	}
	
	if (!cr.IsDead ()) {
		Map@ map = cr.GetMap();
		if( !valid( map ) ) return 0;
		
		brahminBirth( map, cr.HexX, cr.HexY );
		
		cr.ParamBase[CR_VAL0] = 0;
		cr.ParamBase[CR_VAL1] = 0;
	}
	return 0;
}

//~run brahmins tSex id1 id2 0
void tSex( Critter& cr, int id1, int id2, int )
{
	if( id1 != 0 || id2 != 0 )
	{
		cr.Say( SAY_NETMSG, "Функционал принудетельного возбуждения двух конкретных особей пока что не написан." );
		return;
	}
	
	Map@ map = cr.GetMap();
	if( !valid( map ) ) return;
	
	Critter@ brahmin;
	
	@brahmin = map.AddNpc( NPC_PID_Brahmin, cr.HexX + 1, cr.HexY + 1, Random( 0, 5 ), null, null, "brahmins@_BrahminInitSex" );
	if( !valid( brahmin ) ) return;
	
	brahmin.StatBase[ST_GENDER] = GENDER_FEMALE;
	
	@brahmin = null;
	
	@brahmin = map.AddNpc( NPC_PID_Brahmin, cr.HexX + 1, cr.HexY - 1, Random( 0, 5 ), null, null, "brahmins@_BrahminInitSex" );
	if( !valid( brahmin ) ) return;
	
	brahmin.StatBase[ST_GENDER] = GENDER_MALE;
		
	cr.Say( SAY_NORM, "А теперь.. \nЕбитес!" );
}

void _BrahminInitSex( Critter& cr, bool firstTime )
{
	if( cr.GetTimeEvents( CTE_BRAHMIN_SEARCH, null, null, null ) > 0 ) 
	{
		cr.Say( SAY_EMOTE, "Довольно мычит" );
		cr.EraseTimeEvents( cr.EraseTimeEvents( CTE_SLOWRELOAD ) );
		return;
	}
	
	cr.AddTimeEvent( "brahmins@cte_search_partner", REAL_SECOND( 3 ), CTE_BRAHMIN_PREGNANCY, 100 ); //100% озабоченность
}

uint cte_search_partner( Critter& cr, int identifier, uint& rate ) 
{
	if( cr.Stat [ST_GENDER] == GENDER_FEMALE ) return 0;
	Map@ map = cr.GetMap();
	Critter@[] partners;
	rate += 1;
	
	if( Random (0, 99) < int( rate ) ) 
	{
		map.GetCrittersHex( cr.HexX, cr.HexY, 15, FIND_LIFE, partners );
		int plen = partners.length ();
		int i = 0;
		int closestIndex = -1;
		uint minDistance = 15;
		
		while( i < plen ) 
		{
			bool isPregnant = partners[i].GetTimeEvents( CTE_BRAHMIN_PREGNANCY, null, null, null ) > 0;
			bool isInfant = partners[i].GetTimeEvents( CTE_BRAHMIN_GROWTH, null, null, null ) > 0;
			
			if( partners[i].Stat [ST_BASE_CRTYPE] == 15 && partners[i].Stat [ST_GENDER] == GENDER_FEMALE && !isPregnant && !isInfant )  
			{
				if( GetCrittersDistantion( cr, partners[i] ) <= minDistance ) 
				{
					minDistance = GetCrittersDistantion( cr, partners[i] );
					closestIndex = i;
				}
			}
			i ++;
		}
		
		if( closestIndex >= 0 )
		{
			if( GetCrittersDistantion (cr, partners[closestIndex]) <= 2 )
			{
				cr.Say (SAY_EMOTE, "Браминий секс");
				partners[closestIndex].Say (SAY_EMOTE, "Браминий секс");
				partners[closestIndex].AddTimeEvent ("brahmins@cte_brahmin_pregnancy", 2*24*60*60*__TimeMultiplier, CTE_BRAHMIN_PREGNANCY, 0);
				cr.AddTimeEvent ("cte_search_partner", REAL_HOUR( 24 ), CTE_BRAHMIN_SEARCH, 0);
				return 0;
			}
			else
			{
				cr.ModeBase[MODE_NO_HOME] = 1;
				AddWalkPlane (cr, 0, partners[closestIndex].HexX, partners[closestIndex].HexY, 6, false, 1);
				cr.Say (SAY_EMOTE, "Возбужденно мычит");
				return REAL_SECOND( 10 );
			}
		}
	}
	return REAL_MINUTE( 1 );
}

uint cte_brahmin_growth( Critter& cr, int identifier, uint& rate )
{
	if( !cr.IsDead() )  
		cr.ChangeCrType( 15 );
	
	return 0;
}

bool CheckBrahminPregnancy( Critter& cr, Critter& target )
{
	uint[] index;
	uint[] duration;
	uint[] rate;

	uint count = target.GetTimeEvents( CTE_BRAHMIN_PREGNANCY, index, duration, rate );
	if( count > 0 ) {
		for( uint j = 0; j < count; j++ )
		{
			string time = DeltaTime_HMS( duration[j] / __TimeMultiplier );
			cr.Say( SAY_NETMSG, "Она разродится через " + time + "." );
		}
	} else {
		cr.Say( SAY_NETMSG, "|0xFFFF00 Она не беременна." );
	}
	
	return true;
}

#endif // BRAHMINS