#ifndef FISH
#define FISH

#include "_utils.fos"
#include "fish_h.fos"
#include "_ltp.fos"
#include "critter_skills_h.fos"

import uint8 checkSand( Map& map, uint16 tx, uint16 ty ) from "qmap_sand";
import uint8 checkWaterAround( Map& map, uint16 tx, uint16 ty, uint8 coast_flags, uint8 radius, bool smartRadius ) from "qmap_water";
import uint8 checkCoast( Map& map, uint16 tx, uint16 ty ) from "qmap_coast";
import uint8 checkWater( Map& map, uint16 tx, uint16 ty ) from "qmap_water";

bool PrepareFishingRod( Critter& cr, Item& item ) {
	uint16 pid = item.GetProtoId();
	if( pid == PID_STRING ) {
		if( hasItem( cr, PID_ROD, SLOT_HAND1 ) ) {
			SingleItemProtoChange( cr, PID_ROD_STRING, SLOT_HAND1 );
			cr.Say( SAY_EMOTE, "Привязывает леску к удочке" );
			_SubItem( item, 1 );
		} else {
			SYNM( cr, "Возьмите удочку в руку, чтобы привязать к ней леску." );
		}
		
	} else if( pid == PID_HOOK ) {
		if( hasItem( cr, PID_ROD_STRING, SLOT_HAND1 ) ) {
			SingleItemProtoChange( cr, PID_ROD_STRING_HOOK, SLOT_HAND1 );
			cr.Say( SAY_EMOTE, "Привязывает крючок к леске" );
			_SubItem( item, 1 );
		} else {
			SYNM( cr, "Возьмите удочку с леской в руку, чтобы привязать к ней крючок." );
		}
		
	} else if ( Bait.find( pid ) != -1) {
		if( hasItem( cr, PID_ROD_STRING_HOOK, SLOT_HAND1 ) ) {
			Item@ rod = cr.GetItem( 0, SLOT_HAND1 );
			string bait;
			string changeBait = "";
			if( rod.Val0 != 0 ) {
				changeBait = ", сменив наживку";
			}
			bait += GetMsgStr( 0, TEXTMSG_ITEM, pid * 100 );
			int index = Bait.find( pid );
			rod.Val0 = pid;
			cr.Say( SAY_EMOTE, "Насаживает " + bait + " на крючок" + changeBait );
			_SubItem( item, 1 );
		}
		if( hasItem( cr, PID_ROD_STRING, SLOT_HAND1 ) || hasItem( cr, PID_ROD, SLOT_HAND1 ) ) {
			SYNM( cr, "Для насаживания наживки вам нужна удочка с леской и крючком." );
		} 
	}
	return true;
}

class Fish
{
	uint16 pid;
	uint8 size;
	uint8 max_depth;
	uint stamina;
	uint16[] bait;
	
	Fish( uint16 pid, uint8 size, uint8 max_depth, uint stamina )
	{
        this.pid = pid;
        this.size = size;
        this.max_depth = max_depth;
        this.stamina = stamina;
	}
	
	bool likes( uint16 lure ) {
		return this.bait.find( lure ) != -1;
	}
}

class FishCollection
{
	Fish@[] fishes;
	FishCollection() 
	{
	}
  
	FishCollection@ fish( uint16 pid, uint8 size, uint8 max_depth, uint stamina ) 
	{
		this.fishes.insertLast( Fish( pid, size, max_depth, stamina ) );
		return this;
	}
  
	FishCollection@ bait( uint16 bait ) 
	{
		this.fishes[ this.fishes.length() - 1 ].bait.insertLast( bait );
		return this;
	}
	
	FishCollection@ get_by_depth( uint8 depth ) 
	{
		FishCollection result;
		for( uint i=0, len = this.fishes.length(); i<len; i++ ) {
			if(this.fishes[i].max_depth <= depth ) {
				result.fishes.insertLast( this.fishes[i] );
			}
		}
		return result;
	}
		
	FishCollection@ get_by_bait( uint16 lure ) 
	{
		FishCollection result;
		for( uint i=0, len = this.fishes.length(); i<len; i++ ) {
			if( this.fishes[i].likes(lure) ) {
				result.fishes.insertLast( this.fishes[i] );
			}
		}
		return result;
	}
	
	Fish@ get_random()
	{
		uint len = this.fishes.length();
		if( len > 0 ) {
				return this.fishes[ Random( 0, len-1 ) ];
		} else {
			return null; 
		}
	}
}

FishCollection@ fishes = FishCollection()
//             	 Pid,         size, max_depth, stamina, 						 preffered bait 
	.fish( PID_FISH_SMALLEST,   1,		1,		150 ).bait( PID_MAGGOT ).bait( PID_ROACH ).bait( PID_MANTIS_MEAT ).bait( PID_MEAT_JERKY ).bait( PID_MUTMUSH )
	.fish( PID_FISH_SMALL,      2,		2,		300 ).bait( PID_MAGGOT ).bait( PID_ROACH ).bait( PID_MANTIS_MEAT ).bait( PID_MEAT_JERKY ).bait( PID_MUTMUSH ).bait( PID_RADCVET_SEED ).bait( PID_CORN_SEED )
	.fish( PID_FISH,			3,		3,		450 ).bait( PID_MANTIS_MEAT ).bait( PID_MEAT_JERKY ).bait( PID_MUTMUSH ).bait( PID_RADCVET_SEED ).bait( PID_CORN_SEED ).bait( PID_RAD_MEAT ).bait( PID_PLAYERS_EAR ).bait( PID_THORAX ).bait( PID_FISH_SMALLEST )
	.fish( PID_FISH_BIG,      	4,		4,		600 ).bait( PID_RAD_MEAT ).bait( PID_MEAT_JERKY ).bait( PID_PLAYERS_EAR ).bait( PID_THORAX ).bait( PID_FISH_SMALLEST ).bait( PID_RAT_MEAT ).bait( PID_MEAT )
	.fish( PID_FISH_BIGGEST,	5,		4,	    750 ).bait( PID_THORAX ).bait( PID_FISH_SMALLEST ).bait( PID_RAT_MEAT ).bait( PID_MEAT_JERKY ).bait( PID_MEAT );

Fish@ getFish( Item@ floater ) 
{
	uint depth = floater.DEPTH;
	uint16 baitPid = floater.HAS_BAIT;
	return fishes.get_by_depth( depth ).get_by_bait( baitPid ).get_random();
}

bool PrepareFishing( Critter& cr, Item& fishingRod, int hexX, int hexY )
{
	Map@ map = cr.GetMap();
    if( !valid( map ) ) { return false; }

	if( Invalid_maps.find( map.GetProtoId() ) != -1 ) { SEM( cr, "В этом месте рыба не водится." ); return false; }

	if( !valid( fishingRod ) ) { return false; }
	
	if( !hasItem( cr, PID_ROD_STRING_HOOK, SLOT_HAND1 ) ) { SEM( cr, "Возьмите снаряженную удочку в руку." ); return false; }
	
	if( fishingRod.HAS_BAIT <= 0 ) { SEM( cr, "Для ловли рыбы Вам потребуется наживка." ); return false; }

	if( GetDistantion( cr.HexX, cr.HexY, hexX, hexY ) > CLAMP( 2 + ( cr.SkillBase[ SK_FISHING ] / 50 ), 2, 8 ) ) { SEM( cr, "Вы не можете закинуть удочку так далеко." ); return false; }

	check_tiles( cr, fishingRod, hexX, hexY ); 
	
	return true;
}

void check_tiles( Critter& cr, Item& fishingRod, int hexX, int hexY ) 
{
	Map@ map = cr.GetMap();
	if( !valid( map ) ) { return; }
	
	uint8  water_flags = 0; 	

	water_flags = checkWater( map, H2T( hexX ), H2T( hexY ) );
	
	if( water_flags == 0 )
	{
		SEM( cr, "В месте приземления поплавка нет воды." );
		return;
	}
	
	Item@ floater = map.AddItem( hexX, hexY, PID_FLOATER, 1 );
	floater.HAS_BAIT = fishingRod.HAS_BAIT;
	floater.DEPTH = CheckDepth( map, floater );
	
	uint[] values = { floater.Id, cr.Id };
	floater.EVENT = CreateTimeEvent( AFTER( REAL_SECOND( 1 ) ), "e_floaterCheck", values, true );

	start_fishing( cr, fishingRod, floater, map );
}


bool ltp_inited = false;
void ltp_init()
{
    LTPREG( LTP_FISHING, process_fishing )
    ltp_inited = true;
}

bool start_fishing( Critter& cr, Item& fishingRod, Item& floater, Map& map )
{
    if( !ltp_inited )
        ltp_init();

   	femote_Gender( cr,  "закинул удочку", "закинулa удочку");
	map.PlaySound( "rod_throw.ogg", cr.HexX, cr.HexY, 5 );
	StartProcess( cr, LTP_FISHING, 0, floater.Id, fishingRod.Id, 1000 );
	cr.SetAnims( COND_LIFE, 0, ANIM2_WINDUP_UNARMED );
	return true;
}

uint process_fishing( Critter@ cr, int& param0, int& param1, int& param2 )
{
    LTPROCESS( cr, param0, LTP_FISHING )
    
	if( !valid( cr ) )  { return 0; }
	
	Map@ map = cr.GetMap();
	if( !valid( map ) ) { return 0; }
		
	Item@ floater = GetItem( param1 );
	if( !valid( floater ) )  { return 0; }
	
	Item@ fishingRod = GetItem( param2 );
	if( !valid( fishingRod ) )  { return 0; }
	
	if( param0 == 0 ) {
		map.PlaySound( "fishing_reel1.ogg", cr.HexX, cr.HexY, 2 );
        
		if( floater.HAS_FISH <= 0 ) {
			uint roll = Random( 1 , 100 );
			if( roll > 50 ) { //сюда модификатор шанса поклевки от наживки ( можно добавить позже )
				floaterBite( cr, floater, fishingRod );
			} else if( roll <= 5 ) { //сюда можно крит промахи
			femote_Gender( cr,  "вытащил водоросли", "вытащила водоросли" );
			cr.AddItem( PID_ALGAE, 1 );
			FinishFishing( cr, floater ); 
			}
			
		} else {
			if( Random( 1, 3 ) != 1 ) {
				floaterBite( cr, floater, fishingRod );
			}
		}
		
		return Random( 3, 6 ) * 1000;
		
	} else {
		cr.SetAnims(COND_LIFE, 0, ANIM2_IDLE);
		DeleteItem( floater );
		return 0;
	}
}

uint e_floaterCheck( uint[]@ values )
{
	uint itemId = values[0];
	Item@ floater = GetItem( itemId );
	if( !valid( floater ) ) { return 0;		
	}
	
	uint crtterId = values[1];
	Critter@ cr = GetCritter( crtterId );
	if( !valid( cr ) ) { 
		EraseTimeEvent( floater.EVENT );
		floater.EVENT = 0;
		DeleteItem( floater );
		return 0;		
	}

	if( cr.ParamBase[ ST_LTP_TIME ] == -1 || cr.ParamBase[ ST_LTP_TYPE_DIR_HEX ] == 0 || ( floater.HAS_BAIT == 0 && floater.HAS_FISH == 0 ) ) {
		
		if( floater.HAS_FISH > 0 ) {
			StartMenuFishing( cr, floater );
			return 0;
		}
		
		if( valid( cr ) ) {
			femote_Gender( cr,  "вытащил удочку", "вытащила удочку");
			FinishFishing( cr, floater );
		} else {
			EraseTimeEvent( floater.EVENT );
			floater.EVENT = 0;
			DeleteItem( floater );
		}				
		return 0;
	}
	return REAL_MS( 500 );
}

void floaterBite( Critter& cr, Item& floater, Item& fishingRod )
{
	if( !FLAG( floater.Flags, ITEM_HIDDEN ) ) {	
		SETFLAG( floater.Flags, ITEM_HIDDEN );
		uint[] values = { floater.Id, fishingRod.Id, cr.Id };
		
		if (floater.HAS_FISH == 0 && Random( 1, 2 ) == 2 ) {
			Fish@ fish = getFish( floater );
			if( valid( fish ) ) { 
				floater.HAS_FISH = fish.pid;
				floater.FISH_SIZE = fish.size;
				floater.FISH_STAMINA = fish.stamina;
				fishingRod.HAS_BAIT = 0;
				
				uint val = floater.DEPTH * 100 + 50;
				if( Random( 0, val ) < cr.SkillBase [ SK_FISHING ] ) {
					floater.SHOW_FISH = 1;
				}
				
				fishAction( cr, floater );
				CreateTimeEvent( AFTER( REAL_MS( 500 ) ), "e_hookedFish", values, true );
			}
		}
		CreateTimeEvent( AFTER( REAL_MS( 500 ) ), "e_floaterUp", values, true );
		
	} else {		
		UNSETFLAG( floater.Flags, ITEM_HIDDEN );
	}	
	floater.Update();
}

uint e_floaterUp( uint[]@ values)
{
	if( values.length() != 3 ) { return 0; }
	
	uint itemId = values[0];
	Item@ floater = GetItem( itemId );
	if( !valid( floater ) ) { return 0; }
	
	uint item2Id = values[1];
	Item@ fishingRod = GetItem( itemId );
	if( !valid( fishingRod ) ) { return 0; }
	
	uint crtterId = values[2];
	Critter@ cr = GetCritter( crtterId );
	if( !valid( cr ) ) { return 0; }

	floaterBite( cr, floater, fishingRod );

	return 0;
}

uint e_hookedFish( uint[]@ values)
{
	uint itemId = values[0];
	Item@ floater = GetItem( itemId );
	if( !valid( floater) ) { return 0; }
	
	uint item2Id = values[1];
	Item@ fishingRod = GetItem( itemId );
	if( !valid( fishingRod ) ) { return 0; }
	
	
	if( floater.BAIT_EATEN != 1 ) {
		floater.BAIT_EATEN = 1;
		floater.HAS_BAIT = 0;
		fishingRod.HAS_BAIT = 0;
		
		if( floater.FISH_SIZE == 1 ) {
			return REAL_SECOND( 30 );
		}
		if( floater.FISH_SIZE == 2 ) {
			return REAL_SECOND( 30 );
		}
		if( floater.FISH_SIZE == 3 ) {
			return REAL_SECOND( 30 );
		}
		if( floater.FISH_SIZE == 4 ) {
			return REAL_SECOND( 30 );
		}
		if( floater.FISH_SIZE == 5 ) {
			return REAL_SECOND( 30 );
		}
	}
	
	floater.HAS_FISH = 0;
	
	uint crtterId = values[2];
	Critter@ cr = GetCritter( crtterId );
	if( valid( cr ) ) {
		SSM( cr, "Похоже, что рыба сорвалась, съев приманку..." );
	}
	
	return 0;
}

uint CheckDepth( Map& map, Item& floater ) 
{
	uint8 depth = 4;
	uint16 hexX = floater.HexX, hexY = floater.HexY;
	
	for( uint i = 0, len = 5; i < len; i++ ) {
		map.MoveHexByDir( hexX, hexY, i, 7 );
		if( checkWater( map, H2T( hexX ), H2T( hexY ) ) == 0 && ( checkCoast( map, H2T( hexX ), H2T( hexY ) ) != 0 || checkSand ( map, H2T( hexX ), H2T( hexY ) ) != 0 ) ) {
			depth--;
			//Log( "сонар нашел берег на 7, глубина: " + depth );
			//map.SetText( hexX, hexY, COLOR_LGRAY, ":отклик сонара 7:" );
			break;
		}
		hexX = floater.HexX;
		hexY = floater.HexY;
	}
	
	for( uint i = 0, len = 5; i < len; i++ ) {
		map.MoveHexByDir( hexX, hexY, i, 5 );
		if( checkWater( map, H2T( hexX ), H2T( hexY ) ) == 0 && ( checkCoast( map, H2T( hexX ), H2T( hexY ) ) != 0 || checkSand ( map, H2T( hexX ), H2T( hexY ) ) != 0 ) ) {
			depth--;
			//Log( "сонар нашел берег на 5, глубина: " + depth );
			//map.SetText( hexX, hexY, COLOR_LGRAY, ":отклик сонара 5:" );
			break;
		}
		hexX = floater.HexX;
		hexY = floater.HexY;
	}
	
	for( uint i = 0, len = 5; i < len; i++ ) {
		map.MoveHexByDir( hexX, hexY, i, 3 );
		if( checkWater( map, H2T( hexX ), H2T( hexY ) ) == 0 && ( checkCoast( map, H2T( hexX ), H2T( hexY ) ) != 0 || checkSand ( map, H2T( hexX ), H2T( hexY ) ) != 0 ) ) {
			depth--;
			//Log( "сонар нашел берег на 3, глубина: " + depth );
			//map.SetText( hexX, hexY, COLOR_LGRAY, ":отклик сонара 3:" );
			break;
		}
		hexX = floater.HexX;
		hexY = floater.HexY;
	}
	//Log( "Глубина: " + depth );
	return depth;
}

class MenuFishing: CenteredMenuHandler {
    uint target_id;
    uint map_id;
	
    MenuFishing( Item& floater, Map& map ) {
        target_id = floater.Id;
        map_id = map.Id;
    }

    bool MenuUpdate( Critter& cr, iDialogBox& menu ) {
        Map@ map = GetMap( map_id );
	    if( !valid( map ) ) {return false; }
        Item@ floater = GetItem( target_id );
		if( !valid( floater ) ) {
			SEM( cr, "Рыба сорвалась!" ); 
			return false; 
		}
		
		if( menu.Button( "Тянуть" ) ) {
			if( floater.FISH_ACTION == ACTION_JINK ) {
				floater.FISH_STAMINA = floater.FISH_STAMINA + FisherResponseModifier( floater );
				SSM( cr, "Вы чувствуете натяжение лески, рыба сопротивляется!" ); 
			} else {
				floater.FISH_STAMINA = floater.FISH_STAMINA - FisherResponseModifier( floater );
				SSM( cr, "Рыба поддается." ); 
			}
			fishAction( cr, floater );
			return true;
		}
		if( menu.Button( "Подсекать" ) ) {
			if( floater.FISH_ACTION == ACTION_PULL ) {
				floater.FISH_STAMINA = floater.FISH_STAMINA + FisherResponseModifier( floater );
				SEM( cr, "Вы чувствуете натяжение лески, рыба сопротивляется!" ); 
			} else {
				floater.FISH_STAMINA = floater.FISH_STAMINA - FisherResponseModifier( floater );
				SSM( cr, "Рыба поддается." ); 
			}
			fishAction( cr, floater );
			return true;
		}
		if( menu.Button( "Вытаскивать" ) ) {
			if( PlayerSkill( cr ) >= floater.FISH_STAMINA ) {
				Profit( cr, floater );
				return false;
			} else {
				floater.FISH_STAMINA = floater.FISH_STAMINA + FisherResponseModifier( floater );
				SEM( cr, "Вы чувствуете натяжение лески, рыба сопротивляется!" ); 
				fishAction( cr, floater );
				return true;
			}
		}
		if( menu.Button( "Перерезать леску" ) ) {
			femote_Gender( cr,  "вытащил удочку", "вытащила удочку");
			FinishFishing( cr, floater );
			if( hasItem( cr, PID_ROD_STRING_HOOK, SLOT_HAND1 ) ) {
				SingleItemProtoChange( cr, PID_ROD, SLOT_HAND1 );
			}
			return false;
		}
		return true;
    }
	
	// UI менюхи
    string@ Description( Critter& cr ) {
		
		Item@ floater = GetItem( target_id );
		if( !valid( floater ) ) {
			string info = "Рыба сорвалась!";
			return info;
		}
		
		string info = "На крючке рыба!";
		string depth = floater.DEPTH;
		string fish_size = "Размер рыбы: "; 
		if( floater.SHOW_FISH == 1 ) {
			fish_size += GetMsgStr( 0, TEXTMSG_ITEM, floater.HAS_FISH * 100 );
		} else {
			fish_size += " Вы не можете определить.";
		}
		
		uint8 fish_action = floater.FISH_ACTION;
		string action = "Действия рыбы: ";
		if( floater.SHOW_ACTION == 1 ) {
			action += fish_action == 1 ? "Тянет леску" : "Беспорядочно мечется";
		} else {
			action += " Вы не можете определить.";
		}
		
		info += "\nГлубина: " + depth;
		info += "\n" + fish_size;
		info += "\n" + action;
        return info;
    }

	bool ShouldRedraw( Critter& cr ) {
		Item@ floater = GetItem(target_id);
		if( !valid( floater ) ) { return false; }
		
		if( floater.HAS_FISH > 0 ) {
			return true;
		} else {
			FinishFishing( cr, floater );
			if( hasItem( cr, PID_ROD_STRING_HOOK, SLOT_HAND1 ) ) { // ПРОВЕРИТЬ
				SingleItemProtoChange( cr, PID_ROD, SLOT_HAND1 );
			}
			return false;
		}
	}

    string@ ButtonCancel() {
        return ButtonDecorator( "Скрыть меню", null);
    }
}

// точка входа при прирывании процесса лтп, если на крючке есть рыба.
void StartMenuFishing( Critter& cr, Item& floater )
{
    Map@ map = cr.GetMap();
    if( map is null ) {
        return;
    }

    iMenuHandler@ handler = MenuFishing(floater, map);
    iDialogBox@ menu = OpenMenu( cr, "Рыбалка", handler );
}

void FinishFishing( Critter& cr, Item& floater ) 
{
	if( valid( floater ) ) {
		
		Item@ fishingRod = cr.GetItem( PID_ROD_STRING_HOOK, SLOT_HAND1 );
		if( valid( fishingRod ) && floater.BAIT_EATEN > 0 ) {
			fishingRod.HAS_BAIT = 0;
		}
				
		EraseTimeEvent( floater.EVENT );
		floater.EVENT = 0;
		DeleteItem( floater );
		
		if( valid( cr ) ) {
			cr.SetAnims(COND_LIFE, 0, ANIM2_IDLE);
		}
		
		Map@ map = cr.GetMap();
		if( valid( map ) ) {
			map.PlaySound( "fishing_reel1.ogg", cr.HexX, cr.HexY, 2 );
		}
	}
}

int PlayerSkill( Critter& cr )
{
	int skill = 0;
	skill = skill + cr.ParamBase[ ST_STRENGTH ] + cr.ParamBase[ ST_AGILITY ] + cr.ParamBase[ ST_LUCK ] + cr.SkillBase [ SK_FISHING ];
 	return skill;
}

void Profit( Critter& cr, Item& floater )
{
	Map@ map = cr.GetMap();
	if( !valid( map ) ) { return ; }
		
	if( !valid( floater ) ) {
		SEM( cr, "Рыба сорвалась!" );
		return;
	}
	
	map.PlaySound( "catch_fish.ogg", cr.HexX, cr.HexY, 5 );
	
	string reward = GetMsgStr( 0, TEXTMSG_ITEM, floater.HAS_FISH * 100 );
		
	cr.Say( SAY_EMOTE, "Вытаскивает " + reward );
	
	cr.AddItem( floater.HAS_FISH, 1 );
	FinishFishing( cr, floater );
	
	int skillNum = SK_FISHING;
	raiseSkill( cr, skillNum );
	
	cr.StatBase[ST_EXPERIENCE] += 25;

	if( hasItem( cr, PID_ROD_STRING_HOOK, SLOT_HAND1 ) ) 
	{
		Item@ rod = cr.GetItem( 0, SLOT_HAND1 );
		Item@ item = cr.GetItem( 0, SLOT_HAND2 );
		uint pid = valid( item ) ? item.GetProtoId() : 0;
		
		if( Bait.find( pid ) == -1 || !valid( rod ) )
			return;
		
		string bait;
		string changeBait = "";
		if( rod.Val0 != 0 ) {
			changeBait = ", сменив наживку";
		}
		bait += GetMsgStr( 0, TEXTMSG_ITEM, pid * 100 );
		int index = Bait.find( pid );
		rod.Val0 = pid;
		cr.Say( SAY_EMOTE, "Насаживает " + bait + " на крючок" + changeBait );
		_SubItem( item, 1 );
	}
}

void fishAction( Critter& cr, Item& floater )
{
	floater.SHOW_ACTION = 0;
	string fail = "|0xFFFF00 Похоже, что рыба сорвалась, съев приманку. ";
	if( Random( 1, 100 ) <= 5 ) {
		if( Random( 1, 100 ) > ( cr.Stat[ST_LUCK] * 2 ) ) {
			int chance = Random( 1, 100 );
			if( chance <= floater.FISH_SIZE * 5 ) {
				if( Random( 1, 3 ) == 1 ) {
					SingleItemProtoChange( cr, PID_ROD, SLOT_HAND1 );
					fail += "Вытащив удочку, Вы поняли, что леска лопнула!";
				} else {
					SingleItemProtoChange( cr, PID_ROD_STRING, SLOT_HAND1 );
					fail += "Вытащив удочку, Вы поняли, что рыба сорвалась вместе с крючком!";
				}
			}
		}
		
		SEM( cr, fail );
		floater.BAIT_EATEN;
		FinishFishing( cr, floater );
		return;
	}
	
	uint val = floater.DEPTH * 100 + 50;
	if( Random( 0, val ) < cr.SkillBase [ SK_FISHING ] ) {
		floater.SHOW_ACTION = 1;
	}
	
	floater.FISH_ACTION = Random( ACTION_PULL, ACTION_JINK );
}

uint FisherResponseModifier( Item& floater )
{
	uint modifier = floater.FISH_STAMINA;
	modifier = CLAMP( ( modifier * 120 / 100 - modifier ), 0, modifier );
	return modifier;
}

#endif //FISH