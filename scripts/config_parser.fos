#define __MODULE_CONFIG_PARSER__
#include "config_parser_h.fos"

iConfig@ CreateConfig()
{
    return Config();
}

class Config : iConfig
{
    Section[] sections;

    uint GetSectionsNum()
    {
        return sections.length();
    }

    iSection@ GetSection( uint n )
    {
        if( n >= sections.length() )
            return null;
        return sections[ n ];
    }

    iSection@ AddSection( string& name )
    {
        sections.grow( 1 );
        sections.last().name = name;
        return sections.last();
    }

    bool Parse( string& filePatch )
    {
        string str;

        file   f;
        if( f.open( filePatch, "r" ) >= 0 )
        {
            f.readString( f.getSize(), str );
            f.close();
        }
        else
        {
            Log( "Can't open: " + filePatch );
            return false;
        }

        // Log("str len "+str.length());

        if( str.length() < 3 )
            return false;

        string@[] @ strs = splitEx( str, "\n" );
        if( strs is null )
            return false;

        // Log("strs len "+strs.length());

        string buff1;

        for( uint i = 0, j = strs.length(); i < j; i++ )
        {
            if( strs[ i ] is null )
                continue;

            buff1 = strs[ i ];

            uint len = buff1.length();

            // Log("buff "+i+" len "+len);

            if( len < 3 )
                continue;

            if( buff1[ 0 ] == '[' )
            {
                if( buff1[ len - 1 ] != ']' )
                {
                    Log( "Parser error: bad section" );
                    return false;
                }
                sections.grow( 1 );
                sections.last().name = substring( buff1, 1, len - 2 );
            }
            else
            {
                string@[] @ strs2 = splitEx( buff1, "=" );
                if( strs2 is null )
                    continue;
                uint len2 = strs2.length();

                // Log("strs2 "+i+" len "+len2);

                if( len2 != 2 || strs2[ 0 ] is null || strs[ 1 ] is null )
                    Log( "Bad key: " + buff1 );
                else
                {
                    sections.last().keys.grow( 1 );
                    sections.last().keys.last().Set( strs2[ 0 ], strs2[ 1 ] );
                }
            }
        }
        return true;
    }

    bool Write( string& filePatch )
    {
        file f;
        if( f.open( "save/bans/qbans.txt", "w" ) >= 0 )
        {
            for( uint i = 0, j = sections.length(); i < j; i++ )
            {
                Section@ sec = sections[ i ];
                if( sec.name == "" )
                    continue;

                f.writeString( "[" + sec.name + "]\n" );

                for( uint k = 0, m = sec.keys.length(); k < m; k++ )
                {
                    Key@ key = sec.keys[ k ];
                    if( key.title == "" or key.value == "" )
                        continue;
                    f.writeString( key.title + "=" + key.value + "\n" );
                }

                f.writeString( "\n" );
            }

            f.close();
            return true;
        }

        Log( "Can't save: " + filePatch );
        return false;
    }
}

class Section : iSection
{
    string name;
    Key[] keys;

    string& GetName() { return name; }

    iKey@ GetKey( string& title )
    {
        for( uint i = 0, j = keys.length(); i < j; i++ )
        {
            if( keys[ i ].title != title )
                continue;
            return keys[ i ];
        }
        return nullKey;
    }

    iKey@ AddKey( string& t, string& v )
    {
        keys.grow( 1 );
        keys.last().Set( t, v );
        return keys.last();
    }
}

class Key : iKey
{
    string  title;
    string  value;

    string& GetTitle() { return title; }
    string& GetVal()   { return value; }

    uint GetUint()
    {
        int n = 0;
        StrToInt( value, n );
        return uint( n );
    }

    void Set( string& t, string& v )
    {
        title = t;
        value = v;
    }
}

Key nullKey;
