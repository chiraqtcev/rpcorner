#ifndef NPC_PLANES
#define NPC_PLANES

#include "_utils.fos"
#include "npc_planes_h.fos"

bool AddMiscPlane( Critter& npc, uint priority, uint waitSecond, string@ funcName )
{
	if( npc.IsPlayer() ) return false;

    NpcPlane@ plane = CreatePlane();
    plane.Type = AI_PLANE_MISC;
    plane.Priority = ( priority == 0 ? AI_PLANE_MISC_PRIORITY : priority );
    plane.Misc_WaitSecond = waitSecond;
    if( valid( funcName ) && not plane.Misc_SetScript( funcName ) ) {
        Log( "Set script <" + funcName + "> fail" );
        return false;
    }
    return npc.AddPlane( plane );
}

bool AddWalkPlane( Critter& npc, uint entire, uint cut, bool run )
{
	if( npc.IsPlayer() ) return false;

    uint16 hX = 0, hY = 0;
    Map@   map = npc.GetMap();
    if( valid( map ) && map.GetEntireCoords( entire, 0, hX, hY ) ) {
        return AddWalkPlane( npc, 0, hX, hY, 6, run, cut );
    }
    return false;
}

bool AddWalkPlane( Critter& npc, uint priority, uint16 hexX, uint16 hexY, uint8 dir, bool run, uint cut )
{
	if( npc.IsPlayer() ) { return false; }
    if( not npc.IsCanWalk() ) { return false; }

    NpcPlane@ plane = CreatePlane();
    plane.Type = AI_PLANE_WALK;
    plane.Priority = ( priority == 0 ? AI_PLANE_WALK_PRIORITY : priority );
    plane.Walk_HexX = hexX;
    plane.Walk_HexY = hexY;
    plane.Walk_Dir = dir;
    plane.Run = run;
    plane.Walk_Cut = cut;
    return npc.AddPlane( plane );
}

bool AddWalkPlane( Critter& npc, uint priority, int identifier, uint identifierExt, uint16 hexX, uint16 hexY, uint8 dir, bool run, uint cut )
{
	if( npc.IsPlayer() ) { return false; }
    if( not npc.IsCanWalk() ) { return false; }

    NpcPlane@ plane = CreatePlane();
    plane.Type = AI_PLANE_WALK;
    plane.Priority = ( priority == 0 ? AI_PLANE_WALK_PRIORITY : priority );
    plane.Identifier = identifier;
    plane.IdentifierExt = identifierExt;
    plane.Walk_HexX = hexX;
    plane.Walk_HexY = hexY;
    plane.Walk_Dir = dir;
    plane.Run = run;
    plane.Walk_Cut = cut;
    return npc.AddPlane( plane );
}

bool AddAttackPlane( Critter& npc, uint priority, Critter& target )
{
	if( npc.IsPlayer() ) { return false; }
	
    NpcPlane@ plane = CreatePlane();
    plane.Type = AI_PLANE_ATTACK;
    plane.Priority = ( priority == 0 ? AI_PLANE_ATTACK_PRIORITY : priority );
    plane.Attack_TargId = target.Id;
    plane.Attack_MinHp = getDeathHitPoints(target);
    plane.Attack_IsGag = false;
    plane.Attack_GagHexX = 0;
    plane.Attack_GagHexY = 0;
    plane.Attack_LastHexX = npc.HexX;//target.HexX;
    plane.Attack_LastHexY = npc.HexY;//target.HexY;
    plane.Run = true;
    return npc.AddPlane( plane );
}

bool AddAttackPlane( Critter& npc, uint priority, uint critId )
{
	if( npc.IsPlayer() ) { return false; }

    Critter@ target = GetCritter( critId );
    if( not valid( target ) ) {
        Log( "Target not found." );
        return false;
    }

    NpcPlane@ plane = CreatePlane();
    plane.Type = AI_PLANE_ATTACK;
    plane.Priority = ( priority == 0 ? AI_PLANE_ATTACK_PRIORITY : priority );
    plane.Attack_TargId = target.Id;
    plane.Attack_MinHp = getDeathHitPoints(target);
    plane.Attack_IsGag = false;
    plane.Attack_GagHexX = 0;
    plane.Attack_GagHexY = 0;
    plane.Attack_LastHexX = npc.HexX;//target.HexX;
    plane.Attack_LastHexY = npc.HexY;//target.HexY;
    plane.Run = true;
    return npc.AddPlane( plane );
}

bool AddAttackPlane( Critter& npc, uint priority, Critter& target, int minHp )
{
	if( npc.IsPlayer() ) { return false; }

    NpcPlane@ plane = CreatePlane();
    plane.Type = AI_PLANE_ATTACK;
    plane.Priority = ( priority == 0 ? AI_PLANE_ATTACK_PRIORITY : priority );
    plane.Attack_TargId = target.Id;
    plane.Attack_MinHp = minHp;
    plane.Attack_IsGag = false;
    plane.Attack_GagHexX = 0;
    plane.Attack_GagHexY = 0;
    plane.Attack_LastHexX = npc.HexX;//target.HexX;
    plane.Attack_LastHexY = npc.HexY;//target.HexY;
    plane.Run = true;
    return npc.AddPlane( plane );
}

bool AddAttackPlane( Critter& npc, uint priority, uint critId, int minHp )
{
	if( npc.IsPlayer() ) { return false; }

    Critter@ target = GetCritter( critId );
    if( not valid( target ) ) {
        Log( "Target not found." );
        return false;
    }

    NpcPlane@ plane = CreatePlane();
    plane.Type = AI_PLANE_ATTACK;
    plane.Priority = ( priority == 0 ? AI_PLANE_ATTACK_PRIORITY : priority );
    plane.Attack_TargId = target.Id;
    plane.Attack_MinHp = minHp;
    plane.Attack_IsGag = false;
    plane.Attack_GagHexX = 0;
    plane.Attack_GagHexY = 0;
    plane.Attack_LastHexX = npc.HexX;//target.HexX;
    plane.Attack_LastHexY = npc.HexY;//target.HexY;
    plane.Run = true;
    return npc.AddPlane( plane );
}

bool AddAttackPlane( Critter& npc, uint priority, Critter& target, bool run )
{
	if( npc.IsPlayer() ) { return false; }

    NpcPlane@ plane = CreatePlane();
    plane.Type = AI_PLANE_ATTACK;
    plane.Priority = ( priority == 0 ? AI_PLANE_ATTACK_PRIORITY : priority );
    plane.Attack_TargId = target.Id;
    plane.Attack_MinHp = __DeadHitPoints * 0.5;
    plane.Attack_IsGag = false;
    plane.Attack_GagHexX = 0;
    plane.Attack_GagHexY = 0;
    plane.Attack_LastHexX = npc.HexX;//target.HexX;
    plane.Attack_LastHexY = npc.HexY;//target.HexY;
    plane.Run = run;
    return npc.AddPlane( plane );
}

bool AddAttackPlane( Critter& npc, uint priority, uint critId, bool run )
{
	if( npc.IsPlayer() ) { return false; }

    Critter@ target = GetCritter( critId );
    if( not valid( target ) ) {
        Log( "Target not found." );
        return false;
    }

    NpcPlane@ plane = CreatePlane();
    plane.Type = AI_PLANE_ATTACK;
    plane.Priority = ( priority == 0 ? AI_PLANE_ATTACK_PRIORITY : priority );
    plane.Attack_TargId = target.Id;
    plane.Attack_MinHp = __DeadHitPoints * 0.5;
    plane.Attack_IsGag = false;
    plane.Attack_GagHexX = 0;
    plane.Attack_GagHexY = 0;
    plane.Attack_LastHexX = npc.HexX;//target.HexX;
    plane.Attack_LastHexY = npc.HexY;//target.HexY;
    plane.Run = run;
    return npc.AddPlane( plane );
}

bool AddAttackPlane( Critter& npc, uint priority, Critter& target, int minHp, bool run )
{
	if( npc.IsPlayer() ) { return false; }

    NpcPlane@ plane = CreatePlane();
    plane.Type = AI_PLANE_ATTACK;
    plane.Priority = ( priority == 0 ? AI_PLANE_ATTACK_PRIORITY : priority );
    plane.Attack_TargId = target.Id;
    plane.Attack_MinHp = minHp;
    plane.Attack_IsGag = false;
    plane.Attack_GagHexX = 0;
    plane.Attack_GagHexY = 0;
    plane.Attack_LastHexX = npc.HexX;//target.HexX;
    plane.Attack_LastHexY = npc.HexY;//target.HexY;
    plane.Run = run;
    return npc.AddPlane( plane );
}

bool AddAttackPlane( Critter& npc, uint priority, uint critId, int minHp, bool run )
{
	if( npc.IsPlayer() ) { return false; }

    Critter@ target = GetCritter( critId );
    if( not valid( target ) ) {
        Log( "Target not found." );
        return false;
    }

    NpcPlane@ plane = CreatePlane();
    plane.Type = AI_PLANE_ATTACK;
    plane.Priority = ( priority == 0 ? AI_PLANE_ATTACK_PRIORITY : priority );
    plane.Attack_TargId = target.Id;
    plane.Attack_MinHp = minHp;
    plane.Attack_IsGag = false;
    plane.Attack_GagHexX = 0;
    plane.Attack_GagHexY = 0;
    plane.Attack_LastHexX = npc.HexX;//target.HexX;
    plane.Attack_LastHexY = npc.HexY;//target.HexY;
    plane.Run = run;
    return npc.AddPlane( plane );
}

bool AddPickPlane( Critter& npc, uint priority, uint16 hexX, uint16 hexY, uint16 protoId, uint useItemId, bool toOpen )
{
	if( npc.IsPlayer() ) { return false; }

    NpcPlane@ plane = CreatePlane();
    plane.Type = AI_PLANE_PICK;
    plane.Priority = ( priority == 0 ? AI_PLANE_PICK_PRIORITY : priority );
    plane.Pick_HexX = hexX;
    plane.Pick_HexY = hexY;
    plane.Pick_Pid = protoId;
    plane.Pick_UseItemId = useItemId;
    plane.Pick_ToOpen = toOpen;
    plane.Run = false;
    return npc.AddPlane( plane );
}

bool AddPickPlane( Critter& npc, uint priority, Item@ item, uint useItemId, bool toOpen )
{
	if( npc.IsPlayer() ) { return false; }

    NpcPlane@ plane = CreatePlane();
    plane.Type = AI_PLANE_PICK;
    plane.Priority = ( priority == 0 ? AI_PLANE_PICK_PRIORITY : priority );
    plane.Pick_HexX = item.HexX;
    plane.Pick_HexY = item.HexY;
    plane.Pick_Pid = item.GetProtoId();
    plane.Pick_UseItemId = useItemId;
    plane.Pick_ToOpen = toOpen;
    plane.Run = false;
    return npc.AddPlane( plane );
}

uint EraseAttackPlane( Critter& npc, Critter& target )
{
	if( npc.IsPlayer() ) { return 0; }

    return EraseAttackPlane( npc, target.Id );
}

uint EraseAttackPlane( Critter& npc, uint critId )
{
	if( npc.IsPlayer() ) { return 0; }

    NpcPlane@[] planes;
    uint count = npc.GetPlanes( planes );
    if( count == 0 ) {
        return 0;
	}
	
    uint erased = 0;
    for( uint i = 0; i < count; i++ ) {
        if( planes[ i ].Attack_TargId == critId && npc.ErasePlane( i - erased ) ) {
            erased++;
		}
    }
    return erased;
}

//AOP AI TECH
bool TryLetPassage( Critter& cr, Critter& toCr )
{
	if( int( MIX_UINT16(cr.HexX, cr.HexY ) ) != cr.AI_PASSAGE_REQUEST_POS ) { // requested on new position
        cr.AI_PASSAGE_REQUEST_POS = int( MIX_UINT16( cr.HexX, cr.HexY ) );
        cr.AI_PASSAGE_REQUEST_TIME = GetTick() + AI_REACTION_TIME;
        return true; // skip request, tell retry
    }

	if( int( GetTick() ) < cr.AI_PASSAGE_REQUEST_TIME ) { // not enough time since first request
		return true; // skip request, tell retry
	}

	cr.AI_PASSAGE_REQUEST_TIME = GetTick() + AI_REACTION_TIME;

    Map@ map = cr.GetMap();
    if( !valid( map ) ) { return false; }

    if( IsBlockingChoke( map, cr.HexX, cr.HexY, toCr.HexX, toCr.HexY ) ) {
        uint8[] goDirs = { 0, 1, 5, 2, 4, 3 }; // priority: front, f-right, f-left, b-right, b-left, back
		uint imax = goDirs.length();
        for( uint i = 0; i < imax; i++ ) {
            uint16 hexX = cr.HexX;
            uint16 hexY = cr.HexY;
			uint dir = ( cr.Dir + goDirs[i] ) % 6;
            map.MoveHexByDir( hexX, hexY, dir, 1 );
            if( !map.IsHexPassed( hexX, hexY ) ) { continue; }

            map.GetHexCoordWall( cr.HexX, cr.HexY, hexX, hexY, 0, Random( 1, 5 ) );
            cr.ErasePlane( AI_PLANE_WALK, true );

            return AddWalkPlane( cr, 0, hexX, hexY, dir, true, 1 );
        }
    }
	return false;
}

bool IsBlockingChoke( Map& map, uint16 ox, uint16 oy, uint16 tx, uint16 ty )
{
    uint8 skipDir =7;
    if( GetDistantion( ox, oy, tx, ty ) == 1 ) {
        skipDir = GetDirection(ox, oy, tx, ty);
	}
	
    bool[] dirBlocked( 6, false );
    for( uint8 dir = 0; dir < 6; dir++ ) {
        if( dir == skipDir ) {
            continue; // considering relative critter as free hex
		}
        uint16 hexX = ox;
        uint16 hexY = oy;
        map.MoveHexByDir( hexX, hexY, dir, 1 );
        if( !map.IsHexPassed( hexX, hexY ) ) {
            dirBlocked[dir] = true;
		}
	}

    uint passageCount = 0;
    for( uint dir = 0; dir < 6; dir++ ) {
        if( dirBlocked[dir] && !dirBlocked[(dir + 1) % 6] ) {
            passageCount++;
		}
	}
    return passageCount > 1;
}
#endif //NPC_PLANES