// Author: cvet
// Some stuff for work with time.

// import uint GetNearFullSecond(uint16 year, uint16 month, uint16 day, uint16 hour, uint16 minute, uint16 second) from "time";
// Result is greather than __FullSecond at least on one.

// For client:
// import string@ GetTimeString(const string& format, uint fullSecond) from "time";
// import string@ GetTimeString(const string& format, int year, int month, int day, int dayOfWeek, int hour, int minute, int second) from "time";
// Tags format:
//  %YEAR% - year,
//  %MONTH% - month,
//  %DAY% - day,
//  %DOW% - day of week,
//  %HOUR% - hour,
//  %MINUTE% - minute;
//  %SECOND% - second;
// To show names of values add "-STR" to format tag (%MONTH% -> %MONTH-STR%), supported by month and day of week.
// Example: GetTimeString("%HOUR%:%MINUTE% %DAY% (%DOW-STR%) %MONTH-STR% %YEAR%",fullSecond) -> "14:05 23 (Sunday) November 2299"/"14:05 23 (Воскресенье) Ноябрь 2299".

#include "_utils.fos"

#define STR_MONTH          # (m)               ( 20 + ( m ) )
#define STR_DAY_OF_WEEK    # (dow)       ( 33 + ( dow ) )

#define YEAR_FIX             ( 228 ) // Постнаша эра. Год от рождества Ануриева.
#define FIXED_YEAR           ( 2246 ) // Лунный календарь
 

uint GetNearFullSecond( uint16 year, uint16 month, uint16 day, uint16 hour, uint16 minute, uint16 second )
{
    int jump = 0;   // 1 - years, 2 - months, 3 - days
    if( year == 0 )
    {
        year = __Year;
        jump = 1;
    }
    if( month == 0 )
    {
        month = __Month;
        jump = 2;
    }
    if( day == 0 )
    {
        day = __Day;
        jump = 3;
    }

    uint fullSecond = ::GetFullSecond( year, month, day, hour, minute, second );
    while( fullSecond <= __FullSecond )
    {
        switch( jump )
        {
        case 0:
            return __FullSecond + 1;           // Time expired, call faster
        case 1:
            year++;
            break;
        case 2:
            month++;
            if( month > 12 )
            {
                month = 1;
                year++;
            }
            break;
        case 3:
            day++;
            if( day > 28 && day > GetDaysInMonth( year, month ) )
            {
                day = 1;
                month++;
                if( month > 12 )
                {
                    month = 1;
                    year++;
                }
            }
            break;
        default:
            break;
        }

        fullSecond = ::GetFullSecond( year, month, day, hour, minute, second );
    }
    return fullSecond;
}

uint GetDaysInMonth( uint16 year, uint16 month )
{
    switch( month )
    {
    case 1:
    case 3:
    case 5:
    case 7:
    case 8:
    case 10:
    case 12:    // 31
        return 31;
    case 2:     // 28-29
        if( year % 400 == 0 || ( year % 4 == 0 && year % 100 != 0 ) )
            return 29;
        return 28;
    default:     // 30
        return 30;
    }
    return 0;
}

#ifdef __CLIENT
string@ GetTimeString( const string& format, uint fullSecond ) // Export
{
    uint16 year = 0, month = 0, day = 0, dayOfWeek = 0, hour = 0, minute = 0, second = 0;
    ::GetGameTime( fullSecond, year, month, day, dayOfWeek, hour, minute, second );
    return GetTimeString( format, year, month, day, dayOfWeek, hour, minute, second );
}

string@ GetTimeString( const string& format, int year, int month, int day, int dayOfWeek, int hour, int minute, int second ) // Export
{
    string result = format;

    if( year != -1 )
        result = ReplaceText( result, "%YEAR%", year );
    if( month != -1 )
    {
        result = ReplaceText( result, "%MONTH%", month );
        result = ReplaceText( result, "%MONTH-STR%", GetMsgStr( TEXTMSG_GAME, STR_MONTH( month ) ) );
    }
    if( day != -1 )
        result = ReplaceText( result, "%DAY%", day );
    if( dayOfWeek != -1 )
    {
        result = ReplaceText( result, "%DOW%", dayOfWeek );
        result = ReplaceText( result, "%DOW-STR%", GetMsgStr( TEXTMSG_GAME, STR_MONTH( dayOfWeek ) ) );
    }
    if( hour != -1 )
        result = ReplaceText( result, "%HOUR%", hour );
    if( minute != -1 )
        result = ReplaceText( result, "%MINUTE%", minute );
    if( second != -1 )
        result = ReplaceText( result, "%SECOND%", second );

    return result;
}
#endif

// Возвращает представление времени в виде строки в формате dd.mm.yy hh:mm. rifleman17
string DateTimeToString( uint gameTime )
{
    uint16 year = 0;
    uint16 month = 0;
    uint16 dayOfWeek = 0;
    uint16 day = 0;
    uint16 hour = 0;
    uint16 minute = 0;
    uint16 second = 0;
    GetGameTime( gameTime, year, month, day, dayOfWeek, hour, minute, second );
    return "" + ( day > 9 ? ( "" + day ) : ( "0" + day ) ) + "." + ( month > 9 ? ( "" + month ) : ( "0" + month ) ) + "." + year + " " + ( hour > 9 ? ( "" + hour ) : ( "0" + hour ) ) + ":" + ( minute > 9 ? ( "" + minute ) : ( "0" + minute ) );
}

string[] month_names = { "Январь", "Февраль", "Март", "Апрель", "Май", "Июнь", "Июль", "Август", "Сентябрь", "Октябрь", "Ноябрь", "Декабрь" };
string[] day_names = { "воскресенье", "понедельник", "вторник", "среда", "четверг", "пятница", "суббота", "воскресенье" };
string[] day_times_names = { "рассвет", "полдень", "закат", "полночь" };

string CurrentDateTimeYears( uint gameTime, int delta_years, int style )
{
    uint16 year = 0;
    uint16 month = 0;
    uint16 dayOfWeek = 0;
    uint16 day = 0;
    uint16 hour = 0;
    uint16 minute = 0;
    uint16 second = 0;
    GetGameTime( gameTime, year, month, day, dayOfWeek, hour, minute, second );

	// Mio realtime fix.
	uint16 pass;
	GetTime( year, month, day, pass, pass, pass, pass, pass );

	return CurrentDateTime( 228 + year + delta_years, month, day, dayOfWeek, hour, minute, second, style );
}

string CurrentDateTime( uint gameTime, int delta_time, int style )
{
    uint16 year = 0;
    uint16 month = 0;
    uint16 dayOfWeek = 0;
    uint16 day = 0;
    uint16 hour = 0;
    uint16 minute = 0;
    uint16 second = 0;
    GetGameTime( gameTime + delta_time, year, month, day, dayOfWeek, hour, minute, second );

	// Mio realtime fix.
	uint16 pass;
	GetTime( year, month, day, pass, pass, pass, pass, pass );

	return CurrentDateTime( YEAR_FIX+year, month, day, dayOfWeek, hour, minute, second, style );
}
	
string CurrentDateTime( uint16 year, uint16 month, uint16 day, uint16 dayOfWeek, uint16 hour, uint16 minute, uint16 second, int style )
{
	switch( style )
	{
		case( 0 ): return "Ваши умственные способности настолько скудны, что вы даже не знаете, какое сейчас время года.";
		case( 1 ): return "Вы без понятия какой сейчас год, месяц или день. Но,  Сейчас " +(hour >9 ? (+hour>15? (+hour>21? ("полночь"):("закат") ):("полдень")):(+hour >3 ? ("рассвет"):("полночь")))+", вроде как."; 
		case( 2 ): return "Ваших мозгов не хватает определить какой сейчас день или год, но вы знаете, что сейчас " +(hour >9 ? (+hour>15? (+hour>21? ("полночь"):("закат") ):("полдень")):(+hour >3 ? ("рассвет"):("полночь")))+", а месяц похож на " +month_names[month+Random(-2,2)];
		case( 3 ): return "Вы знаете, что сейчас " +(hour >9 ? (+hour>15? (+hour>21? ("полночь"):("закат") ):("полдень")):(+hour >3 ? ("рассвет"):("полночь")))+", месяц похож на " +month_names[month-1];
		case( 4 ): return "Судя по положению солнца, сейчас " + (hour+Random(-2,2)) + " часов, а месяц " +month_names[month-1];
		case( 5 ): return "С небольшой погрешностью, вы можете определить, что время " + (hour+Random(-1,1)) + " , на дворе " +month_names[month-1]+", а день " + day + ".";
		case( 6 ): return "Вы понятия не имеете какой сейчас год. Сейчас " + d2(hour) + ":" + d2(minute) + ", "+month_names[month-1]+ " месяц, день " + day + ".";
		case( 7 ): return "Вы настолько умны, что знаете время и даты. " + FIXED_YEAR + "." + month + "." + day + " " + d2(hour) + ":" + d2(minute) + ":" + d2(second) + " - " + day_names[dayOfWeek] + ".";
		case( 8 ): return "Time: " + FIXED_YEAR + "." + d2(month) + "." + d2(day) + " " + d2(hour) + ":" + d2(minute) + ":" + d2(second) + " x" + __TimeMultiplier + ", " + day_names[dayOfWeek] + ".";	
		case( 9 ): return "" + FIXED_YEAR + "." + d2(month) + "." + d2(day) + "";
        case( 10 ): return "Вы смотрите на часы, а там: " +hour+ " : "+minute+" .";
	}
	return "Вы полностью потерялись во времени.";
}
