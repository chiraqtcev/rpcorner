// Dynamic Map Objects 64 - server side

#include "_macros.fos"

// #include "qmap_h.fos"

MapTileData@[] MapTileDatabase;
/*
   class DMO2_Main //DynamicMapObjects2
   {
        DMO2_ObjectType@[] ObjectTypes;
        DMO2_GridType@[] GridTypes;
        DMO2_LayerType@[] LayerTypes;

        DMO2_Layer[] Layers;

        DMO2_ObjectType@ GetOT(uint8 num)
        {
                return ObjectTypes[num];
        }
        DMO2_GridType@ GetGT(uint8 num)
        {
                return GridTypes[num];
        }
        DMO2_LayerType@ GetLT(uint8 num)
        {
                return LayerTypes[num];
        }

        DMO2_Layer@ GetL(uint num)
        {
                return Layers[num];
        }


   #ifdef SERVER
        bool Send(Critter@ player, uint layer, uint dataType, uint flags, int[]& data)
        {

        }
   #endif

   #ifdef CLIENT
        bool Receive(uint layer, uint dataType, uint flags, int[]& data)
        {

        }
   #endif
   }

   DMO2_Main dmo2;

   GetCritters()

   class DMO2_Map
   {
        uint MapId;
        uint8[] Layers;
        uint[] Players;

        bool Send2All()
        {
                Map@ map = GetMap(MapId);
                if(map is null) return false;

                uint len_l = Layers.length(),
                len_p = Players.length();
                if(len_l<1 or len_p<1) return false;

                Critter@ crs(len_p, null);

                for(uint i=0; i<len_p; i++)
                {

                }

                for(uint i=0; i<len_l; i++)
                {
                        dmo2.GetL(Layers[i]).Send
                }
        }
   }

   class DMO2_ObjectType
   {
        uint8 TypeId;
        bool IsPassed;
        bool IsRaked;
        int drawOrderType;
        int offsX;
        int offsY;
        int drawOffsY;
        bool Selectable;
        bool CanUse;
        bool CanUseSkill;

        uint8 MiscDataSize;
        uint16 PrivateDataSize;
   }

   class DMO2_GridType
   {
        uint8 TypeId;

        //один объект ставится каждые HexOffs гексов по X и Y
        uint8 HexOffs;

        //первый объект ставится со смещением hexShiftX/Y
        int8 HexShiftX;
        int8 HexShiftY;

        uint MaxHex;

        uint8 GetBitHexSize() //in bits
        {
                uint z = (MaxHex/HexOffs),
                s=0;
                while(z>0 && s<128)
                {
                        z = z>>4;
                        s+=4;
                }
                return s*2;
        }

        uint8 GetHexSize()
        {
                uint s = GetBitHexSize(),
                t = s%8;
                if(t==0) return s>>3;
                else return (s>>3)+1;
        }
   }

   class DMO2_LayerType
   {
        uint8 ObjectType;
        uint8 GridType;

        bool CheckLook;
        int LookBonus;

        bool UseHashNums;
        uint8 DataArraysNum;

        uint GetObjectUnitSize()
        {
                return (UseHashNums?2:4)+dmo2.GetOT(ObjectType).MiscDataSize+dmo2.GetGT(GridType).GetHexSize();
        }
   }

   #define DMO2_LAYER_DATA_OBJECTS		(0)
   #define DMO2_LAYER_DATA_HASHES		(1)
   #define DMO2_LAYER_DATA_PRIVATE		(2)
   #define DMO2_LAYER_DATA_CALLBACKS	(3)
   #define DMO2_LAYER_DATA_4			(4)
   #define DMO2_LAYER_DATA_5			(5)
   #define DMO2_LAYER_DATA_TO_DELETE	(6)

   class DMO2_Layer
   {
        uint8 LayerType;
        int[][] Data;

        DMO2_Layer()
        {
                Data.resize(dmo2.GetLT(LayerType).DataArraysNum);
        }

        //uint8 GetDataArraysNum()
        //{
        //	DMO2_LayerType lt = dmo2.GetLT(LayerType);
        //	return 1 + ((dmo2.GetOT(lt.ObjectType).PrivateDataSize>0)?1:0) +
        //}
   }

   class DMO2_LayerRevision
   {
        int[][] Data;
        uint revision;
        uint dump_time;
   }*/

class MapTileData
{
    /*================= Базовые переменные и массивы ===================*/

    uint Id;
    // uint16 TileHashCount;
    // uint16 TileCount;

    int[] TileHashs;

    int[] Tiles;

    uint[] Players;

    MapTileData()
    {
        Id = 0;

        TileHashs.resize( 1 );
        TileHashs[ 0 ] = 0;

        Tiles.resize( 2 );
        Tiles[ 0 ] = 0;
        Tiles[ 1 ] = 0;

        Players.resize( 0 );
    }

    uint16 TileHashCount()
    {
        return TileHashs.length();
    }

    uint TileCount()
    {
        return Tiles.length() >> 1;
    }

    /*=================== Работа с игроками =====================*/

    bool AddPlayer( Critter& player )
    {
        bool ck = false;
        for( uint i = 0; i < Players.length(); i++ )
        {
            if( Players[ i ] != player.Id )
                continue;
            ck = true;
            break;
        }

        if( !ck )
        {
            Players.insertLast( player.Id );
            ck = true;
        }

        ck = ck && ( TileHashCount() < 1 || SendFullHash( player ) ) && ( TileCount() < 1 || SendAllTiles( player ) );

        if( ck )
            player.ParamBase[ ST_QMAP ] = Id;
        else
            Log( "qmap AddPlayer error." );

        return ck;
    }

    bool DelPlayer( Critter& player )
    {
        for( uint i = 0; i < Players.length(); i++ )
        {
            if( Players[ i ] != player.Id )
                continue;
            /*if(player.Cond!=COND_NOT_IN_GAME)*/ player.RunClientScript( "qmap_client@__delMTD", int(Id), 0, 0, null, null );
            player.ParamBase[ ST_QMAP ] = 0;
            Players.removeAt( i );
            return true;
        }
        return false;
    }

    void GetSendPlayers( Critter@ player, Critter@[]& crs )
    {
        if( player is null )
        {
            Map@     map = GetMap( Id );
            Critter@ cr = null;
            for( uint i = 0; i < Players.length(); i++ )
            {
                @cr = map.GetCritter( Players[ i ] );
                if( cr is null )
                {
                    Players.removeAt( i );
                    i--;
                    continue;
                }
                crs.insertLast( cr );
            }

        }
        else
            crs.insertLast( player );
    }

    /*=================== Работа с хэшами =====================*/

    uint16 AddOneHash( int hash )
    {
        if( hash == 0 )
            return 0;

        uint16 num = 0;

        for( uint16 i = 1, len = TileHashCount(); i < len; i++ )
        {
            if( TileHashs[ i ] == 0 )
                num = i;
            else if( TileHashs[ i ] == hash )
                return i;
        }

        if( num != 0 )
        {
            TileHashs[ num ] = hash;
        }
        else
        {
            // if(TileHashCount>250) return 0;

            num = TileHashCount();

            TileHashs.insertLast( hash );

            // TileHashCount++;
        }

        SendOneHash( null, num, hash );

        return num;
    }

    bool DelOneHash( int hash )
    {
        if( hash == 0 )
            return false;
        for( uint16 i = 1, len = TileHashCount(); i < len; i++ )
        {
            if( TileHashs[ i ] != hash )
                continue;

            TileHashs[ i ] = 0;

            SendOneHash( null, i, 0 );

            return true;
        }
        return false;
    }

    /*=================== Работа с тайлами =====================*/

    bool Set( uint16 hs, uint16 val, uint hex, bool rewrite )
    {
        // return (setTile(Tiles, hs, val, hexX, hexY, layer, rewrite) && SendTile(null, hs, val, hexX, hexY, layer));
        return ( DMO64_set( Tiles, hs, val, hex, rewrite ) && SendTile( null, hs, val, hex ) );
    }

    bool Add( int[]& data, bool rewrite )
    {
        if( DMO64_add( Tiles, data, rewrite ) )
        {
            ApplyBlockers();
            SendTiles( null, data );
            return true;
        }
        return false;
    }

    bool Clear( uint hex )
    {
        return Set( 0, 0, hex, true );
    }

    void ApplyBlockers()
    {
        Map@ map = GetMap( Id );
        if( map is null )
            return;

        uint16 hs = 0, val = 0, hexX = 0, hexY = 0;
        uint8  layer = 0;
        for( uint i = 0, len = TileCount(); i < len; i++ )
        {
            DMO64_get( Tiles, i, hs, val, hexX, hexY, layer );
            if( layer != 2 )
                continue;
            map.BlockHex( hexX, hexY, true );
        }
    }

    /*=================== Отправка хэшей =====================*/

    bool SendFullHash( Critter@ player )
    {
        if( TileHashCount() < 1 )
        {
            Log( "Send Tiles Hash Error! Invalid data." );
            return false;
        }
        Critter@[] crs;
        GetSendPlayers( player, crs );
        for( uint i = 0; i < crs.length(); i++ )
            crs[ i ].RunClientScript( "qmap_client@__SetFullHash", int(Id), int( TileHashCount() ), 0, null, TileHashs );
        return true;
    }

    bool SendOneHash( Critter@ player, uint16 hash_num, int hash )
    {
        Critter@[] crs;
        GetSendPlayers( player, crs );
        for( uint i = 0; i < crs.length(); i++ )
            crs[ i ].RunClientScript( "qmap_client@__SetOneHash", int(Id), int(hash_num), int(hash), null, null );
        return true;
    }

    /*=================== Отправка тайлов =====================*/

    bool SendAllTiles( Critter@ player )
    {
        if( TileCount() < 1 )
        {
            Log( "SendAllTiles Error! Invalid data." );
            return false;
        }
        Critter@[] crs;
        GetSendPlayers( player, crs );
        for( uint i = 0; i < crs.length(); i++ )
            crs[ i ].RunClientScript( "qmap_client@__SetTiles", int(Id), int( TileCount() ), 1, null, Tiles );
        return true;
    }

    bool SendTiles( Critter@ player, int[]& data )
    {
        if( data.length() % 2 != 0 || data.length() < 2 )
        {
            Log( "SendTiles Error! Invalid data." );
            return false;
        }
        Critter@[] crs;
        GetSendPlayers( player, crs );
        for( uint i = 0; i < crs.length(); i++ )
            crs[ i ].RunClientScript( "qmap_client@__SetTiles", int(Id), int(TileCount() /*data.length()>>1*/), 0, null, data );
        return true;
    }

    bool SendTile( Critter@ player, uint16 hs, uint16 val, uint hex )
    {
        int data01 = uint16ToInt( hs, val ),
            data02 = int(hex);

        // if(data02==0) {Log("Send Single Tile Error! Invalid data."); return false;}
        Critter@[] crs;
        GetSendPlayers( player, crs );
        for( uint i = 0; i < crs.length(); i++ )
            crs[ i ].RunClientScript( "qmap_client@__SetTile", int(Id), data01, data02, null, null );
        return true;
    }

}

uint findMTDi( uint mapId )
{
    if( mapId == 0 )
        return uint( -1 );
    for( uint i = 0, len = MapTileDatabase.length(); i < len; i++ )
    {
        if( MapTileDatabase[ i ].Id != mapId )
            continue;
        if( i != 0 )
        {
            MapTileData@ temp_mtd = MapTileDatabase[ i ];
            MapTileDatabase.removeAt( i );
            MapTileDatabase.insertFirst( @temp_mtd );
        }
        return 0;
    }
    return uint( -1 );
}

MapTileData@ findMTD( uint mapId )
{
    uint ind = findMTDi( mapId );
    if( ind == uint( -1 ) )
        return null;
    return MapTileDatabase[ ind ];
}

MapTileData@ getMTD( uint mapId )
{
    uint num = uint( -1 );
    for( uint i = 0; i < MapTileDatabase.length(); i++ )
    {
        if( MapTileDatabase[ i ].Id == 0 )
            num = i;
        if( MapTileDatabase[ i ].Id != mapId )
            continue;
        return MapTileDatabase[ i ];
    }
    if( num == uint( -1 ) )
    {
        num = MapTileDatabase.length();
        MapTileData new_mtd;
        MapTileDatabase.insertLast( @new_mtd );
    }

    MapTileData@ mtd = MapTileDatabase[ num ];

    mtd.Id = mapId;

    Map@ map = GetMap( mapId );
    if( !(map is null) )
        map.SetEvent( MAP_EVENT_FINISH, "_MapFinish" );

    if( IsAnyData( "dmo64_hash_" + mtd.Id ) )
        GetAnyData( "dmo64_hash_" + mtd.Id, mtd.TileHashs );
    if( IsAnyData( "dmo64_obj_" + mtd.Id ) )
        GetAnyData( "dmo64_obj_" + mtd.Id, mtd.Tiles );
    mtd.ApplyBlockers();

    return mtd;
}

void qmap_critter_in( uint mapId, Critter& cr )
{
//	Log("preadd player");
    MapTileData@ mtd = getMTD( mapId );
    if( mtd is null )
        return;
    mtd.AddPlayer( cr );
//	Log("add player");
}

void qmap_critter_out( uint mapId, Critter& cr )
{
    cr.ParamBase[ ST_QMAP ] = 0;
    MapTileData@ mtd = findMTD( mapId );
//	Log("predel player");
    if( mtd is null )
    {
        return;
    }
    mtd.DelPlayer( cr );
//	Log("del player");
}

void qmap_save_all()
{
    bool ckT = false, ckH = false;

    for( uint i = 0, len = MapTileDatabase.length(); i < len; i++ )
    {
        MapTileData@ mtd = MapTileDatabase[ i ];

        ckT = false;
        ckH = false;

        if( mtd.Id != 0 )
        {
            if( valid( GetMap( mtd.Id ) ) )
            {
                if( mtd.TileHashCount() > 1 )
                {
                    SetAnyData( "dmo64_hash_" + mtd.Id, mtd.TileHashs );
                    ckH = true;

                    if( mtd.TileCount() > 1 )
                    {
                        SetAnyData( "dmo64_obj_" + mtd.Id, mtd.Tiles );
                        ckT = true;
                    }
                }
            }

            if( !( ckH && ckT ) && IsAnyData( "dmo64_obj_" + mtd.Id ) )
                EraseAnyData( "dmo64_obj_" + mtd.Id );                                                          // если тайлов или хэшей меньше двух
            if( !ckH && IsAnyData( "dmo64_hash_" + mtd.Id ) )
                EraseAnyData( "dmo64_hash_" + mtd.Id );                                                         // если хэшей меньше двух

            if( valid( GetMap( mtd.Id ) ) )
                continue;
        }
        MapTileDatabase.removeAt( i-- );
    }
}

void qmap_load_all()
{
    return;
}

void _MapFinish( Map& map, bool deleted )
{
    uint ind = findMTDi( map.Id );
    if( ind == uint( -1 ) )
        return;

    if( IsAnyData( "dmo64_obj_" + map.Id ) )
        EraseAnyData( "dmo64_obj_" + map.Id );
    if( IsAnyData( "dmo64_hash_" + map.Id ) )
        EraseAnyData( "dmo64_hash_" + map.Id );

    MapTileDatabase.removeAt( ind );
}

bool SetTile( Map& map, uint hash, uint16 hexX, uint16 hexY, uint8 layer )
{
    MapTileData@ mtd = findMTD( map.Id );
    if( mtd is null )
        return false;

    return mtd.Set( mtd.AddOneHash( int(hash) ), 0, DMO64_makeHex( hexX, hexY, layer ), true );
}

bool SetTile( Map& map, uint hash, uint hash2, uint16 hexX, uint16 hexY, uint8 layer )
{
    MapTileData@ mtd = findMTD( map.Id );
    if( mtd is null )
        return false;

    return mtd.Set( mtd.AddOneHash( int(hash) ), hash2, DMO64_makeHex( hexX, hexY, layer ), true );
}

uint16 AddOneHash( Map& map, uint hash )
{
    MapTileData@ mtd = findMTD( map.Id );
    if( mtd is null )
        return 0;

    return mtd.AddOneHash( int(hash) );
}

bool SetTiles( Map& map, int[]& data )
{
    MapTileData@ mtd = findMTD( map.Id );
    if( mtd is null )
        return false;

    return mtd.Add( data, true );
}

uint GetTile( Map& map, uint16 hexX, uint16 hexY, uint8 layer )
{
    MapTileData@ mtd = findMTD( map.Id );
    if( mtd is null )
        return 0;

    uint16 hs = DMO64_getHashNum( mtd.Tiles, DMO64_makeHex( hexX, hexY, layer ) );

    if( hs == 0 || mtd.TileHashs.length() <= hs )
        return 0;

    return uint( mtd.TileHashs[ hs ] );
}
