#ifndef PARALYSIS
#define PARALYSIS

#include "_utils.fos"
#include "paralysis_h.fos"

void AffectParalysis( Critter& cr, int value ) // Export
{
    uint[] indexes;
    uint[] durations;
    uint stats;
    int  resist;
    bool isActive = cr.GetTimeEvents( EVENT_ID, indexes, durations, null ) != 0;

    if( value > 0 ) {
        resist = value * cr.Stat[ ST_POISON_RESISTANCE ] / 100;
	}
    value -= resist;

    cr.ParamBase[ ST_PARALYSIS_LEVEL ] += value;
	
	cr.ParamBase[ ST_PARALYSIS_LEVEL ] = CLAMP( cr.ParamBase[ ST_PARALYSIS_LEVEL ], 0, 125 );

	if( cr.Param[ QST_GAMEMODE ] == GAME_TEST ) {
		cr.Say( SAY_NETMSG, "Вы чувствуете, что нейротоксин подействует через минуту. Ваш организм сопротивляется ( " + resist + " ), итоговая сила ~" + value + "." );
	}	
	
    if( !isActive ) {
        cr.AddTimeEvent( "cte_Paralysis", REAL_MINUTE( 1 ), EVENT_ID, 0 );
	}
}

uint cte_Paralysis( Critter& cr, int identifier, uint& rate )
{
	if( cr.ParamBase[ CR_STRENGTH ] == 0 ) {
		cr.ParamBase[ CR_STRENGTH ] = cr.ParamBase[ ST_STRENGTH ];
	}
	if( cr.ParamBase[ CR_AGILITY ] == 0 ) {
		cr.ParamBase[ CR_AGILITY ] = cr.ParamBase[ ST_AGILITY ];
	}
	if( cr.ParamBase[ CR_ENDURANCE ] == 0 ) {
		cr.ParamBase[ CR_ENDURANCE ] = cr.ParamBase[ ST_ENDURANCE ];
	}
	if( cr.Param[ QST_GAMEMODE ] == GAME_TEST ) {
		cr.Say( SAY_NETMSG, "Вы проверяете своё состояние:"
					+ "\n S " + cr.ParamBase[ CR_STRENGTH ] 	+ " / " + cr.ParamBase[ ST_STRENGTH ]
					+ "\n E " + cr.ParamBase[ CR_ENDURANCE ] 	+ " / " + cr.ParamBase[ ST_ENDURANCE ]
					+ "\n A " + cr.ParamBase[ CR_AGILITY ] 		+ " / " + cr.ParamBase[ ST_AGILITY ] );
	}
	
    uint paral_stage = 0;
    
    if( cr.Param[ ST_PARALYSIS_LEVEL ] <= 0 ) {
        cr.ParamBase[ ST_PARALYSIS_LEVEL ] = 0;
    } else if( cr.Param[ ST_PARALYSIS_LEVEL ] <= 50 ) {
        paral_stage = 1;
    } else if( cr.Param[ ST_PARALYSIS_LEVEL ] <= 100 ) {
        paral_stage = 2;
    } else {
        paral_stage = 3;
	}
	
    if( paral_stage != 0 && cr.IsPlayer() ) {
        if( cr.Stat[ ST_BODY_TYPE ] < 5 ) {
            cr.SayMsg( SAY_EMOTE_ON_HEAD, TEXTMSG_GAME, Random( 12904, 12907 ) );
		}
		else return 0; //Не действует.
    }
	
	bool isFast = cr.ParamBase[CR_VAL9] != 0;
	
	if( cr.Param[ QST_GAMEMODE ] == GAME_TEST ) {
		cr.Say( SAY_NETMSG, "Это " + ( isFast ? "быстрая" : "обычная" ) + " версия нейротоксина, его уровень: " + paral_stage + "." );	
	}
    switch( paral_stage )
    {
		case( 0 ):
			cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, 12903 );
			cr.ParamBase[ ST_STRENGTH ] = cr.ParamBase[ CR_STRENGTH ];
			cr.ParamBase[ ST_AGILITY ] = cr.ParamBase[ CR_AGILITY ];
			cr.ParamBase[ ST_ENDURANCE ] = cr.ParamBase[ CR_ENDURANCE ];
			cr.ParamBase[ CR_STRENGTH ] = 0;
			cr.ParamBase[ CR_PERCEPTION ] = 0;
			cr.ParamBase[ CR_AGILITY ] = 0;
			cr.ParamBase[ CR_ENDURANCE ] = 0;
			cr.ParamBase[CR_VAL9] = 0; //Скорость прогрессирования/выветривания паралича
			return 0;

		case( 1 ):
			cr.ParamBase[ ST_STRENGTH ]--;
			cr.ParamBase[ ST_AGILITY ]--;
			cr.ParamBase[ ST_ENDURANCE ]--;
			cr.ParamBase[ ST_PARALYSIS_LEVEL ] -= 5;
			cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, 12900 );
			return REAL_MINUTE( isFast ? 1 : 10 );

		case( 2 ):
			cr.ParamBase[ ST_STRENGTH ] -= 2;
			cr.ParamBase[ ST_AGILITY ] -= 2;
			cr.ParamBase[ ST_ENDURANCE ] -= 2;
			cr.ParamBase[ ST_PARALYSIS_LEVEL ] -= 5;
			cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, 12901 );
			return REAL_MINUTE( isFast ? 1 : 10 );

		case( 3 ):
			if( !cr.IsKnockout() ) {
				cr.ToKnockout( KNOCKOUT_ANIM2_DEFAULT( false ), 500, cr.HexX, cr.HexY );
			}
			cr.ParamBase[ ST_STRENGTH ] = 1;
			cr.ParamBase[ ST_AGILITY ] = 1;
			cr.ParamBase[ ST_ENDURANCE ] = 1;
			cr.ParamBase[ ST_PARALYSIS_LEVEL ] -= 5;
			cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, 12902 );
			return REAL_MINUTE( isFast ? 1 : 10 );

		default:
			return REAL_MINUTE( isFast ? 1 : 10 );
		}
    return 0;
}

void DropParalysis( Critter& cr, int value ) // Export
{
    if( value > 0 ) {
        cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, 12908 );
	}
    
	if( value > cr.Param[ ST_PARALYSIS_LEVEL ] ) {
		DropParalysisInstant( cr );
	} else {
        cr.ParamBase[ ST_PARALYSIS_LEVEL ] -= value;
	}
}


void DropParalysisInstant( Critter& cr )
{
	if( cr.ParamBase[ CR_STRENGTH ] == 0 ) {
		cr.ParamBase[ CR_STRENGTH ] = cr.ParamBase[ ST_STRENGTH ];
	}
	
	if( cr.ParamBase[ CR_AGILITY ] == 0 ) {
		cr.ParamBase[ CR_AGILITY ] = cr.ParamBase[ ST_AGILITY ];
	}
	
	if( cr.ParamBase[ CR_ENDURANCE ] == 0 ) {
		cr.ParamBase[ CR_ENDURANCE ] = cr.ParamBase[ ST_ENDURANCE ];
	}
	
    if( cr.Param[ ST_PARALYSIS_LEVEL ] != 0 ) {
        cr.ParamBase[ ST_STRENGTH ] = cr.ParamBase[ CR_STRENGTH ];
        cr.ParamBase[ ST_AGILITY ] = cr.ParamBase[ CR_AGILITY ];
        cr.ParamBase[ ST_ENDURANCE ] = cr.ParamBase[ CR_ENDURANCE ];
        cr.ParamBase[ ST_PARALYSIS_LEVEL ] = 0;
        cr.EraseTimeEvents( EVENT_ID );
    }
	
	cr.ParamBase[ CR_STRENGTH ] = 0;
	cr.ParamBase[ CR_AGILITY ] = 0;
	cr.ParamBase[ CR_ENDURANCE ] = 0;
	cr.ParamBase[CR_VAL9] = 0; //Скорость прогрессирования/выветривания паралича
}
#endif //PARALYSIS