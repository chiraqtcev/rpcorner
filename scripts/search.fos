// Поисковые ф-ции по списку бутылок
#include "GLASS_H.fos"

bool find_empty_glass( Item@ item ) {
	return( index_glass_bottles( item, 0 ) != -1 );
}

bool find_glassed_drinks( Item& item ) {
	return( index_glass_bottles( item, 1 ) != -1 );
}

bool find_opened_drinks( Item& item ) {
	return( index_glass_bottles( item, 2 ) != -1 );
}

bool find_other_bottles( Item& item ) {
	return( index_glass_bottles( item, 3 ) != -1 );
}

bool find_other_glass( Item& item ) {
	return( index_glass_bottles( item, 4 ) != -1 );
}

int index_glass_bottles( Item@ item, uint categoty = 0 ) {
	return index_glass_bottles( valid( item ) ? item.GetProtoId() : 0, categoty );
}

int index_glass_bottles( uint pid, uint categoty = 0 ) {
	if( pid == 0 || categoty >= glass_bottles.length() )
		return -1;
	
	return glass_bottles[categoty].find( pid );
}

uint16 find_any_glass( Item& item ) {
    return findGlass( item.GetProtoId() );
}

uint16 findGlass( uint16 pid ) {    
    int index = 0;
    for( uint i = 0, l = glass_bottles.length(); i < l; i++ )
    {
        index = glass_bottles[i].find( pid );
        if( index != -1 )
            return ++ i;
    }
    return 0;
}

bool find_capped_bottles( Item& item ) {
	if( valid( item ) ) {
		uint16 cappedBottle = item.GetProtoId();
		if ( capped_bottles.find( cappedBottle ) != -1 ) {
			return true;
		}
	}
	return false;
}