// Author: cvet
// Server and client stuff for radio
#include "_macros.fos"
#include "_utils.fos"

// / Server
#ifndef __CLIENT

void _InitMicrophone(Item& item, bool firstTime) 
{
    if (firstTime) {
        SETFLAG( item.Flags, ITEM_RADIO );
        item.RadioFlags = uint8( RADIO_DISABLE_RECV );
        item.RadioBroadcastSend = uint8( RADIO_BROADCAST_LOCATION );
        item.RadioBroadcastRecv = uint8( RADIO_BROADCAST_MAP );
        item.Update();
    }
}

void unsafe_OutMessage(Critter& cr, int sayType, int p0, int p1, string@ msg, int[]@ p2) 
{
    // Не палить ГМов
    if (0 != cr.ParamBase[QST_INVIS] || null is msg || sayType == SAY_NETMSG) 
    {
        return;
    }

    Map@ map = cr.GetMap();
    if (null is map || msg is null) 
        return;

    // Отсев эмоутов и пустых сообщений
    array<uint8> buffer;
    uint8 prev = ' ';
    bool ignore = false;
    for (uint i = 0, l = msg.length(); i < l; i++) 
    {
        if ( (prev == ' ' && msg[i] == ' ') || (prev == '*' && msg[i] == '*') ) 
        {
            continue;
        } 
        else 
        {
            prev = msg[i];
        }

        if (msg[i] == '*') 
        {
            ignore = !ignore;
        } 
        else if (!ignore) 
        {
            buffer.insertLast(msg[i]);
        }
    }

    ignore = false;
    msg.resize(buffer.length);
    for (uint i = 0, l = buffer.length; i < l; i++) 
    {
        if (!ignore || i + 1 == l) 
        {
            if (buffer[i] == ' ') 
                continue;
            else 
                ignore = true;
        }

        msg[i] = buffer[i];
    }

    if (0 == msg.length()) 
        return;

    // Добавление идентификации голоса
    // msg = msg + " *" + (cr.StatBase[ST_GENDER] == 0 ? "мужской" : "женский") + " голос*";

    // Модификация дистанции слишимости в зависимости от типа речи
    float distance = 200.0f;
    switch(sayType) {
        case SAY_SHOUT: 
            distance = 10000.0f;
            break;
        case SAY_RADIO:
        case SAY_WHISP:
            distance = 64.0f;
            break;
    }
    array<int> skip = {};
    // Поиск микрофонов у криттеров в пределах видимости TODO: отрефакторить снизив нагрузку
    /* array<Critter@> find = {@cr};
    array<Critter@> critters;
    map.GetCrittersSeeing(find, true, FIND_LIFE, critters);
    for (uint i = 0, l = critters.length; i < l; i++) 
	{
		if( critters[i].ParamBase[QST_INVIS] != 0 || ( pow(float(critters[i].HexX) - float(cr.HexX), 2) + pow(float(critters[i].HexY) - float(cr.HexY), 2) >= distance ) )
			continue;
		
        Item@ item = critters[i].GetItem(PID_MICROPHONE,-1);
        if( !valid( item ) || !FLAG(item.Flags, ITEM_RADIO) || FLAG(item.RadioFlags, RADIO_DISABLE_SEND) || skip.find( item.RadioChannel ) != -1 ) 
			continue;

		RadioMessage(item.RadioChannel, msg);
		
		if( item.RadioChannel == 0 ) 
			heard_radio_log_ch0(cr, msg);

		skip.insertLast(item.RadioChannel);
    }*/

    // Поиск раций и микрофонов на земле
	
    Item@[] radios;
    if( 0 < map.GetItems( PID_RADIO, radios ) ) 
    {
        for( uint i = 0, l = radios.length; i < l; i++ )
         {
			
            Item@ radio = radios[i];
			
			if( !valid( radio ) || !FLAG(radio.Flags, ITEM_RADIO) || FLAG( radio.RadioFlags, RADIO_DISABLE_SEND ) ) 
            {
				continue;				
			}
			
			if( skip.find( radio.RadioChannel ) != -1 || ( pow( float( radio.HexX ) - float( cr.HexX ), 2 ) + pow( float( radio.HexY ) - float( cr.HexY ), 2 ) >= distance ) ) 
            {
				continue;
			}
			
			RadioMessage( radio.RadioChannel, msg );	

            uint index = findFirstOf( msg, "/" );
            if( index == 0 )
            {
                msg = substring( msg, 4, msg.length() );
            }     

			SendRadioLogs( cr, msg, radio.RadioChannel );
			skip.insertLast( radio.RadioChannel );
        }
    }
}

import void char_replace(string& text, uint8 from, uint8 to) from "rp_chat";
uint8 backtick = "`"[0];
uint8 apostrophe = "'"[0];
void SendRadioLogs( Critter& cr, string@ message, uint16 channel )
{
    if( !valid( message ) )
        return;

    uint len = message.length();
    if( len == 0 || len > 128 ) {
        return;
    }

    file f;
    string@ text,
            file_path,
            channel_name;

    if( channel == 0 )
    {
        file_path = "logs\\radio_0.txt";
        text = "`Рация 0> .."+message+"..`";
        channel_name = "нулевой_радиоканал";
    }
    else
    {
        file_path = "logs\\radio.txt";
        text = "`Рация " + channel + " | " + crInfo( cr ) + ": > .." + message + "..`";
        channel_name = "gm-radio";
    }

    if( f.open(file_path, "a") < 0 ) 
        return;
    
    f.writeString(message + "\n");
    f.close();

    char_replace(message, backtick, apostrophe);
    DiscordSendMessage(channel_name, text);
    return;
}

void EditRadioSettings( Critter& player, Item& radio ) // Export
{
    player.RunClientScript( "radio@ShowEditScreen", radio.Id, 0, 0, null, null );
}

void unsafe_ChangeChannel( Critter& player, int radioId, int radioChannel, int, string@, int[] @ )
{
    Item@ radio = player.GetItemById( radioId );
    if( not valid( radio ) || not FLAG( radio.Flags, ITEM_RADIO ) )
        return;
    if( FLAG( radio.RadioFlags, RADIO_DISABLE_SHIFT_CHANNEL ) )
        return;

    radio.RadioChannel = CLAMP( radioChannel, 0, 0xFFFF );
    radio.Update();
}

void unsafe_ChangeActivity( Critter& player, int radioId, int isSend, int, string@, int[] @ )
{
    Item@ radio = player.GetItemById( radioId );
    if( not valid( radio ) || not FLAG( radio.Flags, ITEM_RADIO ) )
        return;

    if( isSend != 0 )
    {
        if( not FLAG( radio.RadioFlags, RADIO_DISABLE_SHIFT_SEND ) )
        {
            radio.RadioFlags ^= RADIO_DISABLE_SEND;
            radio.Update();
        }
    }
    else
    {
        if( not FLAG( radio.RadioFlags, RADIO_DISABLE_SHIFT_RECV ) )
        {
            radio.RadioFlags ^= RADIO_DISABLE_RECV;
            radio.Update();
        }
    }
}

void unsafe_ChangeBroadcast( Critter& player, int radioId, int broadcastSend, int broadcastRecv, string@, int[] @ )
{
    Item@ radio = player.GetItemById( radioId );
    if( not valid( radio ) || not FLAG( radio.Flags, ITEM_RADIO ) )
        return;

    // Change send
    if( not FLAG( radio.RadioFlags, RADIO_DISABLE_SHIFT_BC_SEND ) )
    {
        if( broadcastSend == RADIO_BROADCAST_WORLD || broadcastSend == RADIO_BROADCAST_LOCATION ||
            broadcastSend == RADIO_BROADCAST_MAP || broadcastSend == RADIO_BROADCAST_ZONE( 2 ) ||
            broadcastSend == RADIO_BROADCAST_ZONE( 5 ) )
        {
            radio.RadioBroadcastSend = broadcastSend;
            radio.Update();
        }
    }

    // Change recv
    if( not FLAG( radio.RadioFlags, RADIO_DISABLE_SHIFT_BC_RECV ) )
    {
        if( broadcastRecv == RADIO_BROADCAST_WORLD || broadcastRecv == RADIO_BROADCAST_LOCATION ||
            broadcastRecv == RADIO_BROADCAST_MAP || broadcastRecv == RADIO_BROADCAST_ZONE( 2 ) ||
            broadcastRecv == RADIO_BROADCAST_ZONE( 5 ) )
        {
            radio.RadioBroadcastRecv = broadcastRecv;
            radio.Update();
        }
    }
}

void SetInHand( Critter& player, int flags, int broadcastSend, int broadcastRecv )
{
    Item@ item = player.GetItem( 0, SLOT_HAND1 );
    if( not valid( item ) )
        return;

    SETFLAG( item.Flags, ITEM_RADIO );
    item.RadioFlags = uint8( flags );
    item.RadioBroadcastSend = uint8( broadcastSend );
    item.RadioBroadcastRecv = uint8( broadcastRecv );
    item.Update();
}

void UnsetInHand( Critter& player, int, int, int )
{
    Item@ item = player.GetItem( 0, SLOT_HAND1 );
    if( not valid( item ) )
        return;

    UNSETFLAG( item.Flags, ITEM_RADIO );
    item.Update();
}

#endif // !__CLIENT

// / Client
#ifdef __CLIENT

# include "_client_defines.fos"
# include "client_gui_h.fos"
# include "_colors.fos"
# include "_msgstr.fos"

class ScreenMain : IGUIScreenCallbackShow
{
    TextboxChannel@ Channel;
    ButtonSendRecv@ Send;
    ButtonSendRecv@ Recv;
    ButtonBroadcast@[] BroadcastSend;
    ButtonBroadcast@[] BroadcastRecv;
    int BroadcastSendType;
    int BroadcastRecvType;

    int RadioId;
    int RadioChannel;
    int RadioBroadcastSend;
    int RadioBroadcastRecv;
    int RadioFlags;

    void OnShow( int radioId, int radioChannel, int radioData )
    {
        // Store data
        RadioId = radioId;
        RadioChannel = radioChannel;
        RadioBroadcastSend = ( radioData >> 16 ) & 0xFF;
        RadioBroadcastRecv = ( radioData >> 24 ) & 0xFF;
        RadioFlags = radioData & 0xFFFF;

        // Set actual GUI states
        Channel.SetChannel( RadioChannel );

        Send.SetState( not FLAG( RadioFlags, RADIO_DISABLE_SEND ) );
        Recv.SetState( not FLAG( RadioFlags, RADIO_DISABLE_RECV ) );

        BroadcastSendType = 0;
        if( RadioBroadcastSend == RADIO_BROADCAST_WORLD )
            BroadcastSendType = 1;
        else if( RadioBroadcastSend == RADIO_BROADCAST_ZONE( 5 ) )
            BroadcastSendType = 2;
        else if( RadioBroadcastSend == RADIO_BROADCAST_ZONE( 2 ) )
            BroadcastSendType = 3;
        else if( RadioBroadcastSend == RADIO_BROADCAST_LOCATION )
            BroadcastSendType = 4;
        else if( RadioBroadcastSend == RADIO_BROADCAST_MAP )
            BroadcastSendType = 5;
        for( uint i = 0; i < BroadcastSend.length(); i++ )
            BroadcastSend[ i ].SetState( false );
        if( BroadcastSendType != 0 )
            BroadcastSend[ BroadcastSendType - 1 ].SetState( true );

        BroadcastRecvType = 0;
        if( RadioBroadcastRecv == RADIO_BROADCAST_WORLD )
            BroadcastRecvType = 1;
        else if( RadioBroadcastRecv == RADIO_BROADCAST_ZONE( 5 ) )
            BroadcastRecvType = 2;
        else if( RadioBroadcastRecv == RADIO_BROADCAST_ZONE( 2 ) )
            BroadcastRecvType = 3;
        else if( RadioBroadcastRecv == RADIO_BROADCAST_LOCATION )
            BroadcastRecvType = 4;
        else if( RadioBroadcastRecv == RADIO_BROADCAST_MAP )
            BroadcastRecvType = 5;
        for( uint i = 0; i < BroadcastRecv.length(); i++ )
            BroadcastRecv[ i ].SetState( false );
        if( BroadcastRecvType != 0 )
            BroadcastRecv[ BroadcastRecvType - 1 ].SetState( true );
    }

    void ChangeChannel()
    {
        if( RadioChannel == Channel.RadioChannel )
            return;
        RadioChannel = Channel.RadioChannel;
        RunServerScriptUnsafe( "radio@unsafe_ChangeChannel", RadioId, RadioChannel, 0, null, null );
        Message( TEXTMSG_GAME, STR_RADIO_CHANNEL_CHANGED );
    }

    void ChangeActivity( bool isSend )
    {
        int  shiftFlag = ( isSend ? RADIO_DISABLE_SHIFT_SEND : RADIO_DISABLE_SHIFT_RECV );
        int  disabledFlag = ( isSend ? RADIO_DISABLE_SEND : RADIO_DISABLE_RECV );
        uint cantShiftStr = ( isSend ? STR_RADIO_CANT_SHIFT_SEND : STR_RADIO_CANT_SHIFT_RECV );
        uint beginStr = ( isSend ? STR_RADIO_BROADCAST_SEND_BEGIN : STR_RADIO_BROADCAST_RECV_BEGIN );
        uint endStr = ( isSend ? STR_RADIO_BROADCAST_SEND_END : STR_RADIO_BROADCAST_RECV_END );

        if( not FLAG( RadioFlags, shiftFlag ) )
        {
            RadioFlags ^= disabledFlag;
            RunServerScriptUnsafe( "radio@unsafe_ChangeActivity", RadioId, isSend ? 1 : 0, 0, null, null );

            if( not FLAG( RadioFlags, disabledFlag ) )
                Message( TEXTMSG_GAME, beginStr );
            else
                Message( TEXTMSG_GAME, endStr );
        }
        else
        {
            Message( TEXTMSG_GAME, cantShiftStr );
        }

        if( isSend )
            Send.SetState( not FLAG( RadioFlags, disabledFlag ) );
        else
            Recv.SetState( not FLAG( RadioFlags, disabledFlag ) );
    }

    void ChangeBroadcast( bool isSend, int type )
    {
        int  shiftFlag = ( isSend ? RADIO_DISABLE_SHIFT_BC_SEND : RADIO_DISABLE_SHIFT_BC_RECV );
        uint cantShiftStr = ( isSend ? STR_RADIO_CANT_SHIFT_BC_SEND : STR_RADIO_CANT_SHIFT_BC_RECV );
        uint changeStr = ( isSend ? STR_RADIO_BROADCAST_SEND_CHANGE : STR_RADIO_BROADCAST_RECV_CHANGE );

        if( ( RadioFlags & shiftFlag ) != 0 )
        {
            Message( TEXTMSG_GAME, cantShiftStr );
            return;
        }

        if( isSend )
            BroadcastSendType = type;
        else
            BroadcastRecvType = type;

        int newBroadcastSend = RADIO_BROADCAST_WORLD;
        if( BroadcastSendType == 2 )
            newBroadcastSend = RADIO_BROADCAST_ZONE( 5 );
        else if( BroadcastSendType == 3 )
            newBroadcastSend = RADIO_BROADCAST_ZONE( 2 );
        else if( BroadcastSendType == 4 )
            newBroadcastSend = RADIO_BROADCAST_LOCATION;
        else if( BroadcastSendType == 5 )
            newBroadcastSend = RADIO_BROADCAST_MAP;
        else
            BroadcastSendType = 1;
        int newBroadcastRecv = RADIO_BROADCAST_WORLD;
        if( BroadcastRecvType == 2 )
            newBroadcastRecv = RADIO_BROADCAST_ZONE( 5 );
        else if( BroadcastRecvType == 3 )
            newBroadcastRecv = RADIO_BROADCAST_ZONE( 2 );
        else if( BroadcastRecvType == 4 )
            newBroadcastRecv = RADIO_BROADCAST_LOCATION;
        else if( BroadcastRecvType == 5 )
            newBroadcastRecv = RADIO_BROADCAST_MAP;
        else
            BroadcastRecvType = 1;

        if( RadioBroadcastSend == newBroadcastSend && RadioBroadcastRecv == newBroadcastRecv )
            return;

        RadioBroadcastSend = newBroadcastSend;
        RadioBroadcastRecv = newBroadcastRecv;
        RunServerScriptUnsafe( "radio@unsafe_ChangeBroadcast", RadioId, RadioBroadcastSend, RadioBroadcastRecv, null, null );
        Message( TEXTMSG_GAME, changeStr );

        for( uint i = 0; i < BroadcastSend.length(); i++ )
            BroadcastSend[ i ].SetState( false );
        BroadcastSend[ BroadcastSendType - 1 ].SetState( true );
        for( uint i = 0; i < BroadcastRecv.length(); i++ )
            BroadcastRecv[ i ].SetState( false );
        BroadcastRecv[ BroadcastRecvType - 1 ].SetState( true );
    }
}

class TextboxChannel : IGUIElementCallbackInit, IGUIElementCallbackKeyPress
{
    ScreenMain@     Instance;
    IGUIElementOpt@ Options;
    uint16          RadioChannel;

    TextboxChannel( ScreenMain & instance )
    {
        @Instance = instance;
        @Instance.Channel = this;
    }

    void OnInit()
    {
        @Options = GUI_GetElementOptions();
    }

    void OnKeyPress( uint8 key, uint8 letter )
    {
        string@ text = Options.GetText();

        if( ( Instance.RadioFlags & RADIO_DISABLE_SHIFT_CHANNEL ) == 0 )
        {
            if( text.length() > 0 && text[ text.length() - 1 ] == '\n' )
                text.resize( text.length() - 1 );

            int channel = 0;
            StrToInt( text, channel );
            channel = CLAMP( channel, 0, 0xFFFF );
            text = "" + channel;

            RadioChannel = channel;
            if( key == DIK_RETURN || key == DIK_NUMPADENTER )
                Instance.ChangeChannel();
        }
        else
        {
            text = "" + RadioChannel;
            Message( TEXTMSG_GAME, STR_RADIO_CANT_SHIFT_CHANNEL );
        }
    }

    void SetChannel( uint16 channel )
    {
        RadioChannel = channel;
        Options.Text( "" + channel, FONT_FALLOUT, COLOR_GREEN, COLOR_GREEN, FT_CENTERX | FT_CENTERY );
    }
}

class ButtonRefresh : IGUIElementCallbackMouseClick
{
    ScreenMain@ Instance;

    ButtonRefresh( ScreenMain & instance )
    {
        @Instance = instance;
    }

    void OnMouseClick( int click )
    {
        if( ( Instance.RadioFlags & RADIO_DISABLE_SHIFT_CHANNEL ) == 0 )
            Instance.ChangeChannel();
        else
            Message( TEXTMSG_GAME, STR_RADIO_CANT_SHIFT_CHANNEL );
    }
}

class ButtonSendRecv : IGUIElementCallbackInit, IGUIElementCallbackMouseClick
{
    ScreenMain@     Instance;
    IGUIElementOpt@ Options;
    bool            IsSend;

    ButtonSendRecv( ScreenMain & instance, bool isSend )
    {
        @Instance = instance;
        IsSend = isSend;
        if( IsSend )
            @Instance.Send = this;
        else
            @Instance.Recv = this;
    }

    void OnInit()
    {
        @Options = GUI_GetElementOptions();
    }

    void OnMouseClick( int click )
    {
        if( click == MOUSE_CLICK_LEFT )
            Instance.ChangeActivity( IsSend );
    }

    void SetState( bool state )
    {
        Options.Switch( state );
    }
}

class ButtonBroadcast : IGUIElementCallbackInit, IGUIElementCallbackMouseClick
{
    ScreenMain@     Instance;
    IGUIElementOpt@ Options;
    bool            IsSend;
    int             Type;

    ButtonBroadcast( ScreenMain & instance, bool isSend, int type )
    {
        @Instance = instance;
        IsSend = isSend;
        Type = type;
        if( isSend )
            @Instance.BroadcastSend[ type - 1 ] = this;
        else
            @Instance.BroadcastRecv[ type - 1 ] = this;
    }

    void OnInit()
    {
        @Options = GUI_GetElementOptions();
    }

    void OnMouseClick( int click )
    {
        if( click == MOUSE_CLICK_LEFT )
            Instance.ChangeBroadcast( IsSend, Type );
    }

    void SetState( bool state )
    {
        Options.Switch( state );
    }
}

void InitRadioScreen() // Export
{
    // Main screen
    ScreenMain screenMain();
    GUI_CreateScreen( CLIENT_SCREEN_RADIO, GetIfaceIniStr( "RadioMainPic" ) )
    .CallbackShow( screenMain )
    .CloseOnMiss( true )
    .AutoCursor( true, CURSOR_DEFAULT );

    GUI_AddScreenElement( CLIENT_SCREEN_RADIO, null, 0, 0 )
    .Position( "RadioMainText" )
    .Text( GetMsgStr( TEXTMSG_GAME, STR_RADIO_MAIN ), FONT_FALLOUT, COLOR_SAND, 0, FT_CENTERX | FT_CENTERY | FT_BORDERED );

    // Channel textbox
    TextboxChannel textboxChannel( screenMain );
    GUI_AddScreenElement( CLIENT_SCREEN_RADIO, null, 0, 0 )
    .Position( "RadioChannel" )
    .CallbackInit( textboxChannel )
    .CallbackKeyPress( textboxChannel )
    .TextInput( true, 5, COLOR_LGREEN );

    GUI_AddScreenElement( CLIENT_SCREEN_RADIO, null, 0, 0 )
    .Position( "RadioChannelText" )
    .Text( GetMsgStr( TEXTMSG_GAME, STR_RADIO_CHANNEL ), FONT_FALLOUT, COLOR_SAND, 0, FT_CENTERX | FT_CENTERY | FT_BORDERED );

    // Refresh radio channel
    ButtonRefresh buttonRefresh( screenMain );
    GUI_AddScreenElement( CLIENT_SCREEN_RADIO, null, 0, 0 )
    .Position( "RadioRefresh" )
    .CallbackMouseClick( buttonRefresh )
    .DownPic( GetIfaceIniStr( "RadioRefreshPicDn" ) );

    GUI_AddScreenElement( CLIENT_SCREEN_RADIO, null, 0, 0 )
    .Position( "RadioRefreshText" )
    .Text( GetMsgStr( TEXTMSG_GAME, STR_RADIO_REFRESH ), FONT_FALLOUT, COLOR_SAND, 0, FT_CENTERX | FT_CENTERY | FT_BORDERED );

    // Broadcast
    GUI_AddScreenElement( CLIENT_SCREEN_RADIO, null, 0, 0 )
    .Position( "RadioBroadcastSendText" )
    .Text( GetMsgStr( TEXTMSG_GAME, STR_RADIO_BROADCAST_SEND ), FONT_FALLOUT, COLOR_SAND, 0, FT_CENTERY | FT_BORDERED );
    GUI_AddScreenElement( CLIENT_SCREEN_RADIO, null, 0, 0 )
    .Position( "RadioBroadcastRecvText" )
    .Text( GetMsgStr( TEXTMSG_GAME, STR_RADIO_BROADCAST_RECV ), FONT_FALLOUT, COLOR_SAND, 0, FT_CENTERR | FT_CENTERY | FT_BORDERED );

    ButtonSendRecv buttonSend( screenMain, true );
    GUI_AddScreenElement( CLIENT_SCREEN_RADIO, null, 0, 0 )
    .Position( "RadioBroadcastSend" )
    .CallbackInit( buttonSend )
    .CallbackMouseClick( buttonSend )
    .DownPic( GetIfaceIniStr( "RadioBroadcastSendPicDn" ) );

    ButtonSendRecv buttonRecv( screenMain, false );
    GUI_AddScreenElement( CLIENT_SCREEN_RADIO, null, 0, 0 )
    .Position( "RadioBroadcastRecv" )
    .CallbackInit( buttonRecv )
    .CallbackMouseClick( buttonRecv )
    .DownPic( GetIfaceIniStr( "RadioBroadcastRecvPicDn" ) );

    screenMain.BroadcastSend.resize( 5 );
    screenMain.BroadcastRecv.resize( 5 );
    for( uint i = 1; i <= 5; i++ )
    {
        ButtonBroadcast buttonBroadcastSend( screenMain, true, i );
        GUI_AddScreenElement( CLIENT_SCREEN_RADIO, null, 0, 0 )
        .Position( "RadioBroadcastSend" + i )
        .CallbackInit( buttonBroadcastSend )
        .CallbackMouseClick( buttonBroadcastSend )
        .DownPic( GetIfaceIniStr( "RadioBroadcastSend" + i + "PicDn" ) );

        ButtonBroadcast buttonBroadcastRecv( screenMain, false, i );
        GUI_AddScreenElement( CLIENT_SCREEN_RADIO, null, 0, 0 )
        .Position( "RadioBroadcastRecv" + i )
        .CallbackInit( buttonBroadcastRecv )
        .CallbackMouseClick( buttonBroadcastRecv )
        .DownPic( GetIfaceIniStr( "RadioBroadcastRecv" + i + "PicDn" ) );

        GUI_AddScreenElement( CLIENT_SCREEN_RADIO, null, 0, 0 )
        .Position( "RadioBroadcast" + i + "Text" )
        .Text( GetMsgStr( TEXTMSG_GAME, STR_RADIO_BROADCAST1 + i - 1 ), FONT_FALLOUT, COLOR_SAND, 0, FT_CENTERX | FT_CENTERY | FT_BORDERED );
    }
}

void ShowEditScreen( int itemId, int, int, string@, int[] @ )
{
    CritterCl@ chosen = GetChosen();
    if( not valid( chosen ) )
        return;

    ItemCl@[] items;
    uint count = chosen.GetItems( -1, items );
    for( uint i = 0, j = items.length(); i < j; i++ )
    {
        ItemCl@ item = items[ i ];
        if( item.Id == uint( itemId ) )
            ShowScreen( CLIENT_SCREEN_RADIO, item.Id, item.RadioChannel,
                        ( item.RadioBroadcastRecv << 24 ) | ( item.RadioBroadcastSend << 16 ) | ( item.RadioFlags ) );
    }
}

#endif // __CLIENT
