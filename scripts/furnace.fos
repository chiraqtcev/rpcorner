#ifndef FURNACE
#define FURNACE

#include "_utils.fos"
#include "furnace_h.fos"
#include "firestarter_h.fos"
#include "combat_h.fos"

class MenuFurnace: CenteredMenuHandler {
    uint furnace_id;
    uint map_id;
	
    MenuFurnace( Item& furnace, Map& map ) {
		furnace_id = furnace.Id;
		map_id = map.Id;
    }

    bool MenuUpdate( Critter& cr, iDialogBox& menu ) {
        Map@ map = GetMap( map_id );
        Item@ furnace = GetItem( furnace_id );
	
        if( map is null || furnace is null ) {
            return false;
        }
		 
		if ( furnace.STATE != 0 && furnace.STATE != 1 ) {
			furnace.STATE = 0;
		}

		if( GetDistantion( cr.HexX, cr.HexY, furnace.HexX, furnace.HexY ) > 2 )
			return false;
		
        if( menu.Button( "Содержимое" )  ) {
			if( furnace.STATE > 0 ) {
				if( hasItems( cr, FurnaceTools, SLOT_HAND1 ) ) {
					ShowContainer( cr, furnace, TRANSFER_HEX_CONT_DOWN );
					return false;
				} else {
					if ( cr.Stat[ ST_INTELLECT ] > 4 ) {
						SEM( cr, "Вам кажется, что раскалённую печь лучше не трогать голыми руками.\n|0xFFFF00 Подсказка: возьмите лопату, инструменты или монтировку в руку и попробуйте ещё раз." );
						return false;
					} else {
						InjureCritter( cr, 3, DAMAGE_FIRE, 0, 0 );
						SEM( cr, "Вы обожглись!" );
						return true;
					}
				}
			}
            ShowContainer( cr, furnace, TRANSFER_HEX_CONT_DOWN );
            return false; 
        }
		
		if( furnace.STATE == 0 ) {
			if( menu.Button( "Разжечь огонь" )  ) {
				Item@ fuelto = null;
				for( uint i = 0, j = 2; i < j; i++) {
					@fuelto = @cr.GetItem( Igniters[i], -1 );
					if( valid( fuelto ) ) { 
						break; 
					}
				}
				
				if( valid( fuelto ) ) {
					if( TurnFurnaceOn( cr, fuelto, furnace ) ) {
						uint[] values = { furnace.Id, cr.Id };
						furnace.EVENT = CreateTimeEvent( REAL_SECOND( 0 ), "e_FurnaceStage", values, true );
					} else {
						return false;
					}
				}			
				return true; 
			}
		} else {
			if( menu.Button( "Потушить огонь" )  ) {
				Item@ fuelto = null;
				uint check  = 0;
				
				for( uint i = 0, j = 3; i < j; i++ ) {
					@fuelto = @cr.GetItem( WaterSource[i], -1 );
					if( valid( fuelto ) ) { 
						check = 1;
						break; 
					}
				}
				
				if ( check != 1 ) {
					SEM( cr, "У вас нет воды." );				
				}
				
				if( valid( fuelto ) ) {
					TurnFurnaceOff( cr, fuelto, furnace );
					furnace.PicMap = furnace.Proto.PicMap;
					setAnimState( furnace );
				}			
				return true; 
			}		
		}
		
		if( menu.Button( "Подкинуть горючее" )  ) {
			
			Item@ fuel = null;
			for( uint i = 0, j = 9; i < j; i++ ) {
				@fuel = @cr.GetItem( FireFuel[i], -1 );
				if( valid( fuel ) ) { break; }
			}
			
			if( valid( fuel ) ) {
				FeedTheFurnace( cr, fuel, furnace );
			}
			return true; 
		}
		
		if( menu.Button( "Закрыть меню" ) ) {
			return false;
		}
		
		return true;
	}
	
	string@ Description( Critter& cr ) {
	
		string info;
		Item@ furnace = GetItem( furnace_id );
		
		Item@[] MaterialsCheck;
		furnace.GetItems( uint( -1 ), MaterialsCheck );
		Item@ material = null;
		int check_kg = 0;
		
		if( furnace.MAX_FUEL == 0 ) {
            furnace.MAX_FUEL = 24000;
        }
		
 		info += "|0x3CF800 Топливо: |0xFFFF00 " + furnace.CURRENT_FUEL * 100 / furnace.MAX_FUEL + "|0x3CF800 % Температура: |0xFFFF00 " + furnace.FIRE_STRENGTH + "|0x3CF800 C.";
		info += "\n|0x3CF800 Расплавленные продукты:";
		
		if( furnace.FURN_IRON > 0 ) {
			info += "\n|0x3CF800 Железо: |0xFFFF00 " + ( furnace.FURN_IRON / 1000.0f ) + "|0x3CF800  кг."; 
			check_kg++;
		}
		
		if( furnace.FURN_GOLD > 0 ) {
			info += "\n|0x3CF800 Золото: |0xFFFF00 " + ( furnace.FURN_GOLD / 1000.0f ) + "|0x3CF800  кг."; 
			check_kg++; 
		}
		
		if( furnace.FURN_LEAD > 0 ) {
			info += "\n|0x3CF800 Свинец: |0xFFFF00 " + ( furnace.FURN_LEAD / 1000.0f ) + "|0x3CF800  кг."; 
			check_kg++;
		}
		
		if( furnace.FURN_COPPER > 0 ) {
			info += "\n|0x3CF800 Медь: |0xFFFF00 " + ( furnace.FURN_COPPER / 1000.0f ) + "|0x3CF800  кг."; 
			check_kg++;
		}
		
		if( furnace.FURN_GLASS > 0 ) {
			info += "\n|0x3CF800 Стекло: |0xFFFF00 " + ( furnace.FURN_GLASS / 1000.0f ) + "|0x3CF800  кг."; 
			check_kg++;
		}
		
		if ( check_kg < 1 ) {
			info += "\n|0xFFFF00 Продукты отсутствуют!";
		}
		
		return info;
    }
	
    string@ ButtonCancel() {
        return ButtonDecorator( " ", null );
    }
	
	bool ShouldRedraw( Critter& cr ) {
		return true;
    }
}

void StartMenuFurnace( Critter& cr, Item& furnace ) // exported
{
    Map@ map = cr.GetMap();
    if( map is null ) {
        return;
    }
	
    iMenuHandler@ handler = MenuFurnace( furnace, map );
    iDialogBox@ menu = OpenMenu( cr, "Печь", handler );
}

void setAnimState( Item& furnace )
{
	if( furnace.STATE > 0 && furnace.FIRE_STRENGTH != 1 ) {	
		UNSETFLAG( furnace.Flags, ITEM_SHOW_ANIM_EXT );
		SETFLAG( furnace.Flags, ITEM_LIGHT );
		SETFLAG( furnace.Flags, ITEM_CAN_USE );
		UNSETFLAG( furnace.Flags, ITEM_CAN_PICKUP );
	} else {
		SETFLAG( furnace.Flags, ITEM_SHOW_ANIM_EXT );
		UNSETFLAG( furnace.Flags, ITEM_LIGHT );
	}
	
	furnace.Update();
}

bool FeedTheFurnace( Critter& cr, Item& item, Item& furnace )
{
	Map@ map = cr.GetMap();
	if( furnace.CURRENT_FUEL == furnace.MAX_FUEL) {	
		SEM( cr, "Горючее уже некуда подкладывать, дайте ему прогореть!" );
		return false;
	}
	
	_CritAnimateUse(cr);
	
	if( item.GetProtoId() == PID_COAL ) {
		furnace.CURRENT_FUEL = MIN( furnace.CURRENT_FUEL + 5400, furnace.MAX_FUEL );
		cr.Say( SAY_EMOTE, "Подкладывает уголь" );
		map.PlaySound( "ROCK.ACM", furnace.HexX, furnace.HexY, 3 );
		
	} else {	
		furnace.CURRENT_FUEL = MIN( furnace.CURRENT_FUEL + 1800, furnace.MAX_FUEL );
		cr.Say( SAY_EMOTE, "Подкладывает топливо" );
		map.PlaySound( "BRDSWELL.ACM", furnace.HexX, furnace.HexY, 3 );
	}

	int occupancy_rate = ( furnace.CURRENT_FUEL * 100 / furnace.MAX_FUEL );
	SYNM( cr, "Кострище заполнено горючими материалами на " +occupancy_rate+ " %" );
	
	_SubItem( item, 1 );
	
	return true;
}

bool TurnFurnaceOn( Critter& cr, Item& item, Item& furnace )
{
	Map@ map = cr.GetMap();
    if( !valid( map ) ) { return false; }
	
	if( furnace.STATE == 1 ) {
		SEM( cr, "Огонь уже вовсю полыхает." );
		return false;
	}
	
	if( furnace.CURRENT_FUEL == 0 ) {
		SEM( cr, "Тут нечего разжигать, найдите подходящее топливо." );
		return false;
	}
	
	if( furnace.STATE == 0 && furnace.CURRENT_FUEL > 0 ) {
		if( item.GetProtoId() == PID_FLINT && Random( 1, 300 ) > cr.Skill[SK_OUTDOORSMAN] ) {
			_SubItem( item, 1 );
			SSM( cr, "Вы сточили поджиг." );
		}
		
		furnace.STATE++;
		_CritAnimateUse(cr);
		cr.Say( SAY_EMOTE, "Разжигает огонь" );
		
		uint[] values = {furnace.Id};
		furnace.EVENT = CreateTimeEvent( AFTER( REAL_SECOND( 0 ) ), "e_BurnFurnace", values, true );
		furnace.PicMap = PIC_FURNACE_ANIM_ON;
		setAnimState( furnace );
	}
	return true;
}

uint e_BurnFurnace( uint[]@ values )
{
	Item@ furnace = GetItem( values[0] );
	if( valid( furnace ) ) {
		furnace.CURRENT_FUEL = ( furnace.CURRENT_FUEL - FUEL_BURN_AMMOUNT );
		if( furnace.CURRENT_FUEL > 0 ) {
			uint16 hexX = 0, hexY = 0;
			Map @map = furnace.GetMapPosition( hexX, hexY );
			map.PlaySound( "campfire.ogg", furnace.HexX, furnace.HexY, 3 );
			if( map.GetRain() == 0 || Random( 1, 3 ) != 3 ) {
				return FIRE_BURNING_TIME;
			}
		}
	
		furnace.STATE = 0;
		EraseTimeEvent( furnace.EVENT );
		furnace.EVENT = 0;
		ProtoItem@ proto = GetProtoItem( PID_FURNACE_SMALL );
		furnace.PicMap = proto.PicMap;
		setAnimState( furnace );
		furnace.Update();
		uint16 hexX=0, hexY=0;
		Map @map = furnace.GetMapPosition( hexX, hexY );
		map.PlaySound( "STEAM1.ACM", furnace.HexX, furnace.HexY, 5 );
	}
	return 0;
}

bool TurnFurnaceOff( Critter& cr, Item& item, Item& furnace )
{
	Map@ map = cr.GetMap();
    if( !valid( map ) ) { return false; }
	
	uint16 itemPid = item.GetProtoId();
	if( WaterSource.find( itemPid ) != -1 ) {
		
		if( item.REMAINING_USES == 1 ) {
			
			_SubItem( item, 1 );
			cr.AddItem( PID_BOTTLE_GLASS, 1 );
		
		} else {
			item.REMAINING_USES --;
			item.EXTRA_WEIGHT = item.REMAINING_USES * 100;
		}
	}
	
	if( Flasks.find( itemPid ) != -1 && item.REMAINING_USES > 0 ) {	
		
		item.REMAINING_USES --;
		item.EXTRA_WEIGHT = item.REMAINING_USES * 100;
		
		if( item.REMAINING_USES == 0 ) { 
		
			item.DNA = 0;
			item.EXTRA_WEIGHT = 0;
			
			if( itemPid == PID_FLASK_FULL ) {
				item.ChangeProto( PID_FLASKB );
			}
		}
	} else if( item.REMAINING_USES == 0 ) { 
		SEM( cr, "Фляга пуста." );
		return false;
	}
	
	item.Update();
		
	if( furnace.STATE == 0 && furnace.CURRENT_FUEL >= 0 ) {
		
		cr.Say( SAY_EMOTE, "Выливает воду" );
		map.PlaySound( "splash.ogg", furnace.HexX, furnace.HexY, 5 );
		
		if( furnace.CURRENT_FUEL == 0 ) {
			SEM( cr, "Вы попусту вылили воду, разве так стоит обращаться со столь ценной жидкостью?" );
		} else {
			SEM( cr, "Вы залили водой топливо! Теперь часть непригодна для розжига..." );
			furnace.CURRENT_FUEL = MAX( furnace.CURRENT_FUEL - Random( 1800, 5400 ), 0 );
		}

		return false;
	}
	
	if( furnace.STATE >= 1 ) {
		furnace.STATE = 0;
		furnace.CURRENT_FUEL = MAX( furnace.CURRENT_FUEL - Random( 1800, 5400 ), 0 );
		cr.Say( SAY_EMOTE, "Тушит пламя" );
		map.PlaySound( "STEAM1.ACM", furnace.HexX, furnace.HexY, 5 );
		
		ProtoItem@ proto = GetProtoItem( PID_FURNACE_SMALL );
		furnace.PicMap = proto.PicMap;
		setAnimState( furnace );
		
		Item@ fireFX = map.AddItem( furnace.HexX, furnace.HexY, PID_SMOKE, 1 );
		
		uint[] values = { fireFX.Id };
		fireFX.EVENT = CreateTimeEvent( AFTER( REAL_SECOND( 1 ) ),"firestarter@e_fireFX", values, true );
	}
	
	EraseTimeEvent( furnace.EVENT );
	furnace.EVENT = 0;
	return true;
}

void BurnItem( Item& furnace, uint16 materialPid, uint16 type, Item& item )
{
    Map@ map = GetMap( furnace.MapId );
    ProtoItem@ MaterialProto = GetProtoItem( materialPid );
    uint16 hx = furnace.HexX, hy = furnace.HexY;
    
	if( furnace.FIRE_STRENGTH == 0 || furnace.STATE == 0 ) {
		return;
	}
	
    Item@ fireFX = map.AddItem( furnace.HexX, furnace.HexY, PID_SMOKE, 1 );
    uint[] values = { fireFX.Id };
    fireFX.EVENT = CreateTimeEvent( AFTER( REAL_SECOND( 1 ) ),"firestarter@e_fireFX", values, true );
    
	float burn_k = 0.0f;
	
    switch( type )
    {
        case( BURN_TYPE_ORE ):
            burn_k = ORE_K;
            break;
        case( BURN_TYPE_MISC ):
            burn_k = MISC_K;
            break;    
        case( BURN_TYPE_ARMOUR ):
            burn_k = ARMOUR_K;
            break;    
        case( BURN_TYPE_WEAPON ):
            burn_k = WEAPON_K;
            break;
        default:
            burn_k = 0.5f;
            break;
    }

	string resourceType;
    uint16 SmeltingTemp;
    
    switch( MaterialProto.Material )
    {
        case( MATERIAL_METAL ):
            resourceType = "FURN_IRON";
            SmeltingTemp = BURN_IRON;
            break;
        case( MATERIAL_GOLD ):
            resourceType = "FURN_GOLD";
            SmeltingTemp = BURN_GOLD;
            break;
        case( MATERIAL_LEAD ):
            resourceType = "FURN_LEAD";
            SmeltingTemp = BURN_LEAD;
            break;
        case( MATERIAL_COPPER ):
            resourceType = "FURN_COPPER";
            SmeltingTemp = BURN_COPPER;
            break;
        case( MATERIAL_GLASS ):
            resourceType = "FURN_GLASS";
            SmeltingTemp = BURN_GLASS;
            break;
        case( MATERIAL_STONE ):
        {
            switch( materialPid )
            {
                case( PID_METAL_ORE ):
                    resourceType = "FURN_IRON";
                    SmeltingTemp = BURN_IRON;
                    break;
                case( PID_GOLD_NUGGET ):
                case( PID_GOLD_ORE ):
                case( PID_GOLD_SAND ):
                case( PID_GOLD_SMALLORE ):
                    resourceType = "FURN_GOLD";
                    SmeltingTemp = BURN_GOLD;
                    break;
                case( PID_COPPER_ORE ):
                case( PID_COPPER_NUGGET ):
                    resourceType = "FURN_COPPER";
                    SmeltingTemp = BURN_COPPER;
                    break;
                case( PID_LEAD_NUGGET ):
                case( PID_LEAD_ORE ):
                    resourceType = "FURN_LEAD";
                    SmeltingTemp = BURN_LEAD;
                    break;
            }
            break;
        }
        default:
            SmeltingTemp = 600; // плавление других предметов
            break;
    }

	if ( furnace.FIRE_STRENGTH >= SmeltingTemp && SmeltingTemp != 0 ) {
		if ( resourceType == "FURN_IRON" ) {
			furnace.FURN_IRON += ( MaterialProto.Weight * burn_k );
		}
		if ( resourceType == "FURN_GOLD" ) {
			furnace.FURN_GOLD += ( MaterialProto.Weight /* * burn_k*/ );
		}
		if ( resourceType == "FURN_COPPER" ) {
			furnace.FURN_COPPER += ( MaterialProto.Weight * burn_k );
		}
		if ( resourceType == "FURN_LEAD" ) {
			furnace.FURN_LEAD += ( MaterialProto.Weight * burn_k );
		}
		if ( resourceType == "FURN_GLASS" ) {
			furnace.FURN_GLASS += ( MaterialProto.Weight /* * burn_k */ );
		}
		_SubItem( item, 1 );
	}
	return;
}

uint e_FurnaceStage( uint[]@ values )
{
	Item@ furnace = GetItem( values[0] );
	if( !valid( furnace ) ) {
		return 0;	
	}
	
	Map@ map = GetMap( furnace.MapId );
	
	if( !valid( map ) ) {
		return 0;	
	}
	
	if ( furnace.FIRE_STRENGTH < 0 ) {
		furnace.FIRE_STRENGTH = 0;
		EraseTimeEvent( furnace.EVENT );
		furnace.EVENT = 0;
		return 0;
	}
	
	if ( furnace.STATE == 0 && furnace.FIRE_STRENGTH > 0 ) {
		furnace.FIRE_STRENGTH -= FUEL_BURN_AMMOUNT / 2;
		if ( furnace.FIRE_STRENGTH <= 0 ) {
			furnace.FIRE_STRENGTH = 0;
			EraseTimeEvent( furnace.EVENT );
			furnace.EVENT = 0;
			return 0;
		}
	}
	
	if ( furnace.STATE == 1 && furnace.FIRE_STRENGTH < 1800 ) {
		furnace.FIRE_STRENGTH += FUEL_BURN_AMMOUNT / 2;
	}

	Item@[] resources;
	int count = furnace.GetItems( uint ( -1 ) , resources );
	int burn_check = 0;

	if( furnace.FURN_IRON > 0 ) {
		ProtoItem@ MaterialProto = GetProtoItem( PID_IRON_BAR );	
		burn_check = furnace.FURN_IRON - MaterialProto.Weight;
			
		if ( ( burn_check ) >= 0 ) {
			furnace.FURN_IRON = burn_check;
			furnace.AddItem( PID_IRON_BAR, 1, 0 );
		}
	}
	
	if( furnace.FURN_GOLD > 0 ) {
		ProtoItem@ MaterialProto = GetProtoItem( PID_GOLDEN_BAR );	
		burn_check = furnace.FURN_GOLD - MaterialProto.Weight;
			
		if ( ( burn_check ) >= 0 ) {
			furnace.FURN_GOLD = burn_check;
			furnace.AddItem( PID_GOLDEN_BAR, 1, 0 );
		}
	}
	
	if( furnace.FURN_COPPER > 0 ) {
		ProtoItem@ MaterialProto = GetProtoItem( PID_COPPER_BAR );	
		burn_check = furnace.FURN_COPPER - MaterialProto.Weight;
		
		if ( ( burn_check ) >= 0 ) {
			furnace.FURN_COPPER = burn_check;
			furnace.AddItem( PID_COPPER_BAR, 1, 0 );
		}
	}
	
	if( furnace.FURN_LEAD > 0 ) {
		ProtoItem@ MaterialProto = GetProtoItem( PID_LEAD_INGOT );	
		burn_check = furnace.FURN_LEAD - MaterialProto.Weight;
		
		if ( ( burn_check ) >= 0 ) {
			furnace.FURN_LEAD = burn_check;
			furnace.AddItem( PID_LEAD_INGOT, 1, 0 );
		}
	}
	
	if( furnace.FURN_GLASS > 0 ) {
		ProtoItem@ MaterialProto = GetProtoItem( PID_GLASS_BAR );	
		burn_check = furnace.FURN_GLASS - MaterialProto.Weight;
		
		if ( ( burn_check ) >= 0 ) {
			furnace.FURN_GLASS = burn_check;
			furnace.AddItem( PID_GLASS_BAR, 1, 0 );
		}
	}
	
	if( count > 0 ) {
	
		int n = Random( 0, count - 1 );
		uint type;
		uint16 materialPid = resources[n].GetProtoId();
		ProtoItem@ MaterialProto = GetProtoItem( materialPid );
		type = BURN_TYPE_MISC;
		
		if( MaterialProto.Type == ITEM_TYPE_MISC ) {
			if( MaterialProto.Material == MATERIAL_STONE ) { // докончить
				if ( materialPid == PID_METAL_ORE || materialPid == PID_GOLD_NUGGET || materialPid == PID_GOLD_ORE || materialPid == PID_COPPER_ORE 
					|| materialPid == PID_COPPER_NUGGET || materialPid == PID_LEAD_NUGGET || materialPid == PID_LEAD_ORE) {
					type = BURN_TYPE_ORE;
				}
			} else {
				if( materialPid == PID_IRON_BAR || materialPid == PID_GOLDEN_BAR || materialPid == PID_COPPER_BAR || materialPid == PID_LEAD_INGOT || materialPid == PID_GLASS_BAR ) {
					type = 101; // Памятка: это необходимо для того, чтобы горело всё, кроме продуктов
				} else {
					type = BURN_TYPE_MISC;
				}
			}
		} 

		if( MaterialProto.Type == ITEM_TYPE_ARMOR ) {
			type = BURN_TYPE_ARMOUR;
		}

		if( MaterialProto.Type == ITEM_TYPE_WEAPON )	{
			type = BURN_TYPE_WEAPON;
		}
		
		if ( type != 101 ) 
		{
			BurnItem( furnace, materialPid, type, resources[n] );
			if( Explosives.find( materialPid ) != -1 ) {
				uint[] values = { furnace.Id };
				CreateTimeEvent( AFTER( REAL_SECOND( Random( 0, 10 ) ) ),"firestarter@e_Explosives", values, true );
			}

			if( materialPid == PID_GOLD_SMALLORE || materialPid == PID_GOLD_SAND )
				return REAL_SECOND( 3 );
		}
	}
	return FIRE_BURNING_TIME;
}

#endif //FURNACE