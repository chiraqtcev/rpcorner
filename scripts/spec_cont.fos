#include "_macros.fos"
#include "_global_events.fos"

#define         SAVED_ITEM_TYPE_WEAPON      ( 0 )
#define         SAVED_ITEM_TYPE_THROWING    ( 1 )
#define         SAVED_ITEM_TYPE_SEED        ( 2 )
#define         SAVED_ITEM_TYPE_MAX         ( 3 )

class SavedItem
{
    uint16 ProtoId;
    uint   Count;
}

class SavedThrowing : SavedItem
{
    uint16 Deterioration;
}

class SavedSeed : SavedItem
{
    uint Quality;
}

class SavedWeapon : SavedItem
{
    uint16 Deterioration;
    uint8  BrokenFlags;
    uint8  BrokenCount;
}

class SpecCont
{
    uint8 type;
    uint  contItemId;
    SavedItem[] items;
}

class Storage : iManagerModule, // iManager_loop,
// iManager_critter_init, iManager_critter_finish,
// iManager_critter_idle, iManager_critter_dead, iManager_critter_respawn,
// iManager_map_critter_in, iManager_map_critter_out,
      iManager_world_save  // , iManager_player_registration, iManager_player_login, iManager_time
{
    Storage()
    {
        AddStartCallback( "spec_cont", "start" );
    }
    bool manager_init()
    {
        all_conts.resize( SAVED_ITEM_TYPE_MAX );
        return true;
    }
    bool global_world_save()
    {
        return true;
    }

    AddCont( Item & item, )

    SpecCont@[][] all_conts;
}

Storage storage;

void start()
{
    iManagerModule@  module = storage;
    iManagerElement@ manager = manager_add_module( module, "Storage", 10 );   // чем выше значение приоритета - тем раньше будут вызываться обработчики ивэнтов
    if( manager is null )
        return;
}
