#include "_macros.fos"

bool _mainTerminal( Critter& player, Scenery& term, int skill, Item@ item )
{
    if( player.IsPlayer() && skill == -1 && !valid( item ) )
    {
        return RunDialog( player, 91, term.HexX, term.HexY, false );
    }
    return false;
}

bool _energyTerminal( Critter& player, Scenery& term, int skill, Item@ item )
{
    if( player.IsPlayer() && skill == -1 && not valid( item ) )
    {
        return RunDialog( player, 92, term.HexX, term.HexY, false );
    }
    return false;
}

bool _autoDoc( Critter& player, Scenery& term, int skill, Item@ item )
{
    GameVar@ autodoc = GetGlobalVar( GVAR_replication_autodoc );
    GameVar@ chipOn = GetLocalVar( LVAR_microchip_on, player.Id );

    if( chipOn == 1 )
    {
        player.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, 6603 );
        return true;
    }

    if( player.IsPlayer() && skill == -1 && not valid( item ) )
    {
        if( autodoc == 0 )
            player.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, 6600 );
        else if( autodoc == 1 )
            player.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, 6601 );
        else if( autodoc == 2 )
        {
            if( player.Stat[ ST_BODY_TYPE ] > 4 )
            {
                player.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, 6612 );
                return true;
            }
            player.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, 6602 );
            autodoc = 0;
            chipOn = 1;
        }
    }
    return true;
}

bool _cloning( Critter& player, Scenery& term, int skill, Item@ item )
{
    GameVar@ cloneVar = GetGlobalVar( GVAR_replication_clone );

    if( valid( item ) && item.GetProtoId() == PID_MICROCHIP )
    {
        if( cloneVar == 0 )
        {
            player.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, 6607 );
            return true;
        }
        if( cloneVar == 1 )
        {
            player.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, 6608 );
            return true;
        }
        Map@     map = player.GetMap();
        uint16   X = 0, Y = 0;
        uint8    step = 0;
        Critter@ clone = GetCritter( item.Val1 );
        if( valid( clone ) )
        {
            uint8 countEnt = map.CountEntire( 129 );
            while( step < countEnt - 1 )
            {
                map.GetEntireCoords( 129, step, X, Y );
                if( map.IsHexPassed( X, Y ) )
                    step = countEnt - 1;
                if( !map.IsHexPassed( X, Y ) && step == countEnt - 1 )
                    return false;
                step++;
            }
            if( clone.IsDead() )
                clone.ToLife();
            if( clone.Stat[ ST_GENDER ] == GENDER_MALE && clone.Stat[ ST_BODY_TYPE ] < 3 )
                clone.ChangeCrType( CRTYPE_DEFAULT_M );
            else if( clone.Stat[ ST_GENDER ] == GENDER_FEMALE && clone.Stat[ ST_BODY_TYPE ] < 3 )
                clone.ChangeCrType( CRTYPE_DEFAULT_F );
            clone.TransitToMap( map.Id, X, Y, Random( 0, 5 ) );
            player.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, 6604 );
            clone.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, 6605 );
            DeleteItem( item );
            cloneVar = 0;
        }
        else
        {
            player.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, 6606 );
            string playerId;
            playerId += item.Val1 + "|";
            file   f;
            if( f.open( "replwait.cfg", "a" ) >= 0 )
            {
                f.writeString( playerId );
                f.close();
            }
            DeleteItem( item );
            cloneVar = 0;
        }
        return true;
    }
    else
        return false;
}

void _paParts( Item& item, bool firstTime )
{
    item.SetEvent( ITEM_EVENT_SKILL, "_iCanDoIt" );
}


bool _iCanDoIt( Item& item, Critter& crit, int skill )
{
    if( skill == SK_REPAIR )
    {
        if( crit.Timeout[ TO_SK_REPAIR ] > 0 )
        {
            crit.SayMsg( SAY_NETMSG, TEXTMSG_GAME, 3401 );
            return true;
        }
        if( ( Random( 180, 300 ) - crit.Skill[ SK_REPAIR ] ) <= 0 )
        {
            crit.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, 6609 );
            crit.AddItem( PID_POWERED_ARMOR, 1 );
            DeleteItem( item );
            crit.TimeoutBase[ TO_SK_REPAIR ] = REPAIR_TIMEOUT( crit );
        }
        else
        {
            crit.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, 6610 );
            crit.TimeoutBase[ TO_SK_REPAIR ] = REPAIR_TIMEOUT( crit );
        }
        return true;
    }
    return false;
}
