// Author: cvet
#include "_macros.fos"
#include "trader_table.fos"

// #define TABLE_TRADERS_COUNT                          (TradersCount)
// #define TABLE_ITEMS_COUNT                            (ItemsCount)
// #define TABLE_DIALOG_ID #(traderIndex)               (TradersData[(traderIndex)])
// #define TABLE_REFRESH_HOUR #(traderIndex)            (TradersData[TABLE_TRADERS_COUNT+(traderIndex)])
// #define TABLE_SKILL #(traderIndex)                   (TradersData[TABLE_TRADERS_COUNT*2+(traderIndex)])
// #define TABLE_ITEM_PID #(itemIndex)                  (TradersData[TABLE_TRADERS_COUNT*3+(itemIndex)])
// #define TABLE_ITEM_COUNT #(traderIndex,itemIndex)    (TradersData[TABLE_TRADERS_COUNT*3+TABLE_ITEMS_COUNT+TABLE_ITEMS_COUNT*(traderIndex)+(itemIndex)])


void InitTradersOnMap( Critter& cr, int, int, int )
{
	Map@ map = cr.GetMap();
	if(!valid(map)) return;
	
	Critter@[] crs;
	uint count = map.GetCritters( 0, FIND_ALL | FIND_ONLY_NPC, crs );
	for( uint i = 0; i < count; i++ )
		if( !crs[i].IsPlayer() )
			_TraderInit( crs[i], true );
	
	cr.Say( SAY_NETMSG, "Обновляем ассортимент у " + count + " торговцев." );
}

void _TraderInit( Critter& trader, bool firstTime )
{
	trader.Say( SAY_EMOTE, "Осматривается" );
	trader.EraseTimeEvents( CTE_TRADER );
	trader.AddTimeEvent( "cte_UpdateItems", 0, CTE_TRADER );
}

uint cte_UpdateItems( Critter& trader, int identifier, uint& stage )
{
    if( trader.IsDead() )
        return trader.Timeout[ TO_REPLICATION ] + REAL_MINUTE( 1 );
    return UpdateItems( trader );
}

int GetTraderIndex( Critter& trader )
{
    // Индекс торговца равен его номеру диалога, дальнейшая обработка в табличке будет.
    int dialogId = trader.Stat[ ST_DIALOG_ID ];
    if( dialogId > 0 )
        return dialogId;  // если диалог не 0 - возвращаем значение.
    return -1;            // интересно, зачем это тут было, но оставим.

    /*if(dialogId>0)
       {
            for(uint i=0,j=TABLE_TRADERS_COUNT;i<j;i++)
            {
                    if(TABLE_DIALOG_ID(i)==dialogId) return i;
            }
       }
       return -1;*/
}

uint UpdateItems( Critter& trader )
{
    int traderIndex = GetTraderIndex( trader );
    if( traderIndex < 0 )
        return 0;

    // Delete all

    // Add new
    GenerateItemsForTrader( trader, traderIndex );

    /*for(uint i=0,j=TABLE_ITEMS_COUNT;i<j;i++)
       {
            int pid=TABLE_ITEM_PID(i);
            if(pid>0)
            {
                    int needCount=TABLE_ITEM_COUNT(traderIndex,i);
                    if(needCount>0)
                    {
                            Item@ item=trader.AddItem(pid,needCount);
                            if(valid(item) && item.IsWeared()) SetWear(item,Random(5,25)); // 5%-25% procent of deteoration
                    }
            }
       }*/

    // Calculate next update time
    // int hour=TABLE_REFRESH_HOUR(traderIndex);
//	int hour=10;
//	if(hour<=0) return 0;
    return REAL_HOUR( 2 );
}
