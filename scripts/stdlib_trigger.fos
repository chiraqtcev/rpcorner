#define RUN_DIALOG     ( 1 )
#define RUN_TRIGGER    ( 2 )
#define RUN_SCENERY    ( 3 )
#define RUN_ITEM       ( 4 )
#define RUN_MSG        ( 5 )

void t_ToHeal( Critter& player, Scenery& trigger, bool entered, uint8 dir )
{
    ToHeal( RUN_TRIGGER, player, trigger.HexX, trigger.HexY, dir, null, trigger, null,
            0, 0, 0, 0, 0, entered ? 0 : 1, null );
}

void t_ShowLocation( Critter& player, Scenery& trigger, bool entered, uint8 dir, int v0 )
{
    ShowLocation( RUN_TRIGGER, player, trigger.HexX, trigger.HexY, dir, null, trigger, null,
                  v0, 0, 0, 0, 0, entered ? 0 : 1, null );
}

void t_FadeOut( Critter& player, Scenery& trigger, bool entered, uint8 dir, int v0 )
{
    FadeOut( RUN_TRIGGER, player, trigger.HexX, trigger.HexY, dir, null, trigger, null,
             v0, 0, 0, 0, 0, entered ? 0 : 1, null );
}

void t_FadeOutAll( Critter& player, Scenery& trigger, bool entered, uint8 dir, int v0 )
{
    FadeOutAll( RUN_TRIGGER, player, trigger.HexX, trigger.HexY, dir, null, trigger, null,
                v0, 0, 0, 0, 0, entered ? 0 : 1, null );
}

void t_TransitToGlobal( Critter& player, Scenery& trigger, bool entered, uint8 dir )
{
    TransitToGlobal( RUN_TRIGGER, player, trigger.HexX, trigger.HexY, dir, null, trigger, null,
                     0, 0, 0, 0, 0, entered ? 0 : 1, null );
}

void t_TransitGroupToGlobal( Critter& player, Scenery& trigger, bool entered, uint8 dir )
{
    TransitGroupToGlobal( RUN_TRIGGER, player, trigger.HexX, trigger.HexY, dir, null, trigger, null,
                          0, 0, 0, 0, 0, entered ? 0 : 1, null );
}

void t_TransitToLocation( Critter& player, Scenery& trigger, bool entered, uint8 dir, int v0, int v1 )
{
    TransitToLocation( RUN_TRIGGER, player, trigger.HexX, trigger.HexY, dir, null, trigger, null,
                       v0, v1, 0, 0, 0, entered ? 0 : 1, null );
}

void t_TransitToMap( Critter& player, Scenery& trigger, bool entered, uint8 dir, int v0 )
{
    TransitToMap( RUN_TRIGGER, player, trigger.HexX, trigger.HexY, dir, null, trigger, null,
                  v0, 0, 0, 0, 0, entered ? 0 : 1, null );
}

void t_TransitToNewLocation( Critter& player, Scenery& trigger, bool entered, uint8 dir, int v0 )
{
    TransitToNewLocation( RUN_TRIGGER, player, trigger.HexX, trigger.HexY, dir, null, trigger, null,
                          v0, 0, 0, 0, 0, entered ? 0 : 1, null );
}

void t_InfoMessage( Critter& player, Scenery& trigger, bool entered, uint8 dir, int v0 )
{
    InfoMessage( RUN_TRIGGER, player, trigger.HexX, trigger.HexY, dir, null, trigger, null,
                 v0, 0, 0, 0, 0, entered ? 0 : 1, null );
}

void t_NpcMessageNorm( Critter& player, Scenery& trigger, bool entered, uint8 dir, int v0 )
{
    NpcMessageNorm( RUN_TRIGGER, player, trigger.HexX, trigger.HexY, dir, null, trigger, null,
                    v0, 0, 0, 0, 0, entered ? 0 : 1, null );
}

void t_NpcMessageShout( Critter& player, Scenery& trigger, bool entered, uint8 dir, int v0 )
{
    NpcMessageShout( RUN_TRIGGER, player, trigger.HexX, trigger.HexY, dir, null, trigger, null,
                     v0, 0, 0, 0, 0, entered ? 0 : 1, null );
}

void t_NpcMessageWhisp( Critter& player, Scenery& trigger, bool entered, uint8 dir, int v0 )
{
    NpcMessageWhisp( RUN_TRIGGER, player, trigger.HexX, trigger.HexY, dir, null, trigger, null,
                     v0, 0, 0, 0, 0, entered ? 0 : 1, null );
}

void t_NpcMessageEmo( Critter& player, Scenery& trigger, bool entered, uint8 dir, int v0 )
{
    NpcMessageEmo( RUN_TRIGGER, player, trigger.HexX, trigger.HexY, dir, null, trigger, null,
                   v0, 0, 0, 0, 0, entered ? 0 : 1, null );
}

void t_TimeOutSet( Critter& player, Scenery& trigger, bool entered, uint8 dir, int v0 )
{
    TimeOutSet( RUN_TRIGGER, player, trigger.HexX, trigger.HexY, dir, null, trigger, null,
                v0, 0, 0, 0, 0, entered ? 0 : 1, null );
}

void t_TimeOutSub( Critter& player, Scenery& trigger, bool entered, uint8 dir, int v0 )
{
    TimeOutSub( RUN_TRIGGER, player, trigger.HexX, trigger.HexY, dir, null, trigger, null,
                v0, 0, 0, 0, 0, entered ? 0 : 1, null );
}

void t_TimeOutAdd( Critter& player, Scenery& trigger, bool entered, uint8 dir, int v0 )
{
    TimeOutAdd( RUN_TRIGGER, player, trigger.HexX, trigger.HexY, dir, null, trigger, null,
                v0, 0, 0, 0, 0, entered ? 0 : 1, null );
}

void t_GroupSetVar( Critter& player, Scenery& trigger, bool entered, uint8 dir, int v0, int v1 )
{
    GroupSetVar( RUN_TRIGGER, player, trigger.HexX, trigger.HexY, dir, null, trigger, null,
                 v0, v1, 0, 0, 0, entered ? 0 : 1, null );
}

void t_ZoneSetShadow( Critter& player, Scenery& trigger, bool entered, uint8 dir, int v0 )
{
    ZoneSetShadow( RUN_TRIGGER, player, trigger.HexX, trigger.HexY, dir, null, trigger, null,
                   v0, 0, 0, 0, 0, entered ? 0 : 1, null );
}

void t_SetHomePos( Critter& player, Scenery& trigger, bool entered, uint8 dir, int v0 )
{
    SetHomePos( RUN_TRIGGER, player, trigger.HexX, trigger.HexY, dir, null, trigger, null,
                v0, 0, 0, 0, 0, entered ? 0 : 1, null );
}

void t_KillNpcByRole( Critter& player, Scenery& trigger, bool entered, uint8 dir, int v0, int v1 )
{
    KillNpcByRole( RUN_TRIGGER, player, trigger.HexX, trigger.HexY, dir, null, trigger, null,
                   v0, v1, 0, 0, 0, entered ? 0 : 1, null );
}

void t_KillNpcOnMapByRole( Critter& player, Scenery& trigger, bool entered, uint8 dir, int v0, int v1, int v2 )
{
    KillNpcOnMapByRole( RUN_TRIGGER, player, trigger.HexX, trigger.HexY, dir, null, trigger, null,
                        v0, v1, v2, 0, 0, entered ? 0 : 1, null );
}

void t_ToLifeNpc( Critter& player, Scenery& trigger, bool entered, uint8 dir )
{
    ToLifeNpc( RUN_TRIGGER, player, trigger.HexX, trigger.HexY, dir, null, trigger, null,
               0, 0, 0, 0, 0, entered ? 0 : 1, null );
}

void t_Warn( Critter& player, Scenery& trigger, bool entered, uint8 dir, int v0 )
{
    Warn( RUN_TRIGGER, player, trigger.HexX, trigger.HexY, dir, null, trigger, null,
          v0, 0, 0, 0, 0, entered ? 0 : 1, null );
}

void t_Say( Critter& player, Scenery& trigger, bool entered, uint8 dir, int v0, int v1 )
{
    Say( RUN_TRIGGER, player, trigger.HexX, trigger.HexY, dir, null, trigger, null,
         v0, v1, 0, 0, 0, entered ? 0 : 1, null );
}

void t_SayShout( Critter& player, Scenery& trigger, bool entered, uint8 dir, int v0, int v1 )
{
    SayShout( RUN_TRIGGER, player, trigger.HexX, trigger.HexY, dir, null, trigger, null,
              v0, v1, 0, 0, 0, entered ? 0 : 1, null );
}

void t_Attack( Critter& player, Scenery& trigger, bool entered, uint8 dir, int v0 )
{
    Attack( RUN_TRIGGER, player, trigger.HexX, trigger.HexY, dir, null, trigger, null,
            v0, 0, 0, 0, 0, entered ? 0 : 1, null );
}

void t_Attack2( Critter& player, Scenery& trigger, bool entered, uint8 dir, int v0 )
{
    Attack2( RUN_TRIGGER, player, trigger.HexX, trigger.HexY, dir, null, trigger, null,
             v0, 0, 0, 0, 0, entered ? 0 : 1, null );
}

void t_AttackStop2( Critter& player, Scenery& trigger, bool entered, uint8 dir, int v0 )
{
    AttackStop2( RUN_TRIGGER, player, trigger.HexX, trigger.HexY, dir, null, trigger, null,
                 v0, 0, 0, 0, 0, entered ? 0 : 1, null );
}

void t_AttackStop( Critter& player, Scenery& trigger, bool entered, uint8 dir, int v0 )
{
    AttackStop( RUN_TRIGGER, player, trigger.HexX, trigger.HexY, dir, null, trigger, null,
                v0, 0, 0, 0, 0, entered ? 0 : 1, null );
}

void t_AttackForced2( Critter& player, Scenery& trigger, bool entered, uint8 dir, int v0 )
{
    AttackForced2( RUN_TRIGGER, player, trigger.HexX, trigger.HexY, dir, null, trigger, null,
                   v0, 0, 0, 0, 0, entered ? 0 : 1, null );
}

void t_Kill( Critter& player, Scenery& trigger, bool entered, uint8 dir, int v0 )
{
    Kill( RUN_TRIGGER, player, trigger.HexX, trigger.HexY, dir, null, trigger, null,
          v0, 0, 0, 0, 0, entered ? 0 : 1, null );
}

void t_Damage( Critter& player, Scenery& trigger, bool entered, uint8 dir, int v0, int v1 )
{
    Damage( RUN_TRIGGER, player, trigger.HexX, trigger.HexY, dir, null, trigger, null,
            v0, v1, 0, 0, 0, entered ? 0 : 1, null );
}

void t_SayEnt( Critter& player, Scenery& trigger, bool entered, uint8 dir, int v0, int v1 )
{
    SayEnt( RUN_TRIGGER, player, trigger.HexX, trigger.HexY, dir, null, trigger, null,
            v0, v1, 0, 0, 0, entered ? 0 : 1, null );
}

void t_DoorOpen( Critter& player, Scenery& trigger, bool entered, uint8 dir, int v0 )
{
    DoorOpen( RUN_TRIGGER, player, trigger.HexX, trigger.HexY, dir, null, trigger, null,
              v0, 0, 0, 0, 0, entered ? 0 : 1, null );
}

void t_DoorClose( Critter& player, Scenery& trigger, bool entered, uint8 dir, int v0 )
{
    DoorClose( RUN_TRIGGER, player, trigger.HexX, trigger.HexY, dir, null, trigger, null,
               v0, 0, 0, 0, 0, entered ? 0 : 1, null );
}

void t_DoorControl( Critter& player, Scenery& trigger, bool entered, uint8 dir, int v0, int v1 )
{
    DoorControl( RUN_TRIGGER, player, trigger.HexX, trigger.HexY, dir, null, trigger, null,
                 v0, v1, 0, 0, 0, entered ? 0 : 1, null );
}

void t_DialogNpc( Critter& player, Scenery& trigger, bool entered, uint8 dir, int v0 )
{
    DialogNpc( RUN_TRIGGER, player, trigger.HexX, trigger.HexY, dir, null, trigger, null,
               v0, 0, 0, 0, 0, entered ? 0 : 1, null );
}

import void ShowElevator( Critter& player, uint8 elevatorType, uint[] mapPids, uint entireNum ) from "elevator";
// лифт, всего существуют 8 типов лифтов. Максимум - 4 этажа
// для четырехэтажного отдельный триггер
// 1ый параметр - номер гекса, на который попадет игрок
// остальные параметры - коды прототипов карт
void t_Elevator4( Critter& player, Scenery& trigger, bool entered, uint8 dir, int entireExit, int map1Pid, int map2Pid, int map3Pid, int map4Pid )
{
    uint[] pids = { uint( map1Pid ), uint( map2Pid ), uint( map3Pid ), uint( map4Pid ) };
    ShowElevator( player, 0, pids, entireExit );
}
// лифт, в котором меньше чем 4 этажа
// 1ый параметр - номер гекса, на который попадет игрок
// 2о1 параметр - типа лифта (от 1 до 8. см. _defines.fos, секцию // Elevators)
// 3ий..5ый параметры - коды протоипов карт
void t_Elevator( Critter& player, Scenery& trigger, bool entered, uint8 dir, int entireExit, int elevatorType, int map1Pid, int map2Pid, int map3Pid )
{
    uint[] pids = { uint( map1Pid ) };
    if( map2Pid > 0 )
        ArrayPushBack( pids, uint( map2Pid ) );
    if( map3Pid > 0 )
        ArrayPushBack( pids, uint( map3Pid ) );
    ShowElevator( player, elevatorType, pids, entireExit );
}
