#ifndef RADIATION
#define RADIATION

#include "_utils.fos"
#include "radiation_h.fos"
#include "repair_h.fos"

void AffectRadiation( Critter& cr, int value ) // Export
{
    int body = cr.Stat[ ST_BASE_CRTYPE ];

	if( cr.IsDead() ) { return; }

    if( cr.Stat[ ST_BODY_TYPE ] == BT_ROBOT ) { return; }

    if( IsAnimal( cr ) || IsMutant( cr ) ) { return; }

	Item@ armor = _CritGetItemArmor( cr );
	if( valid( armor ) ) {
		uint16 armorPid = armor.GetProtoId();
		uint det = GetDeteriorationProcent( armor );
		if( ( armorPid == PID_ANTIRAD_COSTUME || armor.Proto.Item_Subtype == ITEM_SUBTYPE_ARMOR_AC45 || armor.Proto.Item_Subtype == ITEM_SUBTYPE_ARMOR_AC50 ) && det < 5 ) {
			return;
		}
	}
    uint[] indexes;
    uint[] rates;
    bool isActive = cr.GetTimeEvents( CTE_RADIATION, indexes, null, rates ) != 0;
    int  levelVal = cr.Stat[ ST_RADIATION_LEVEL ];
    int  resistVal = cr.Stat[ ST_RADIATION_RESISTANCE ];

    if( value >= 0 )
        value -= value * resistVal / 100;
    cr.StatBase[ ST_RADIATION_LEVEL ] = CLAMP( levelVal + value, 0, 2000 );
    levelVal = cr.Stat[ ST_RADIATION_LEVEL ];

    if( value > RADIATION_HIGH_DOSE )
        cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_RADIATION_HIGH_DOSE );

    if( levelVal >= RADIATION_DAMAGE_VALUE )
    {
        if( cr.Damage[ DAMAGE_RADIATED ] == 0 )
            cr.DamageBase[ DAMAGE_RADIATED ] = 1;
    }
    else
    {
        if( cr.Damage[ DAMAGE_RADIATED ] != 0 )
            cr.DamageBase[ DAMAGE_RADIATED ] = 0;
    }

    if( isActive )   // Try begin event with new effects
    {
        uint stage = rates[ 0 ];
        uint newStage = GetRadiationStage( levelVal );
        if( stage != newStage )
            cr.ChangeTimeEvent( indexes[ 0 ], 0, stage );
    }
    else     // Try start new event
    {
        int stage1Val = TABLE_STAGE_VALUE( 1 );
        if( levelVal >= stage1Val )
            cr.AddTimeEvent( "cte_Radiation", 0, CTE_RADIATION );
    }

    if( levelVal >= RADIATION_DEAD_DOSE )
    {
        cr.ToDead( ANIM2_DEAD_FUSED, null );
        cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_RADIATION_DIE );
    }
}

void DropRadiation( Critter& cr ) // Export
{
    bool isActive = cr.GetTimeEvents( CTE_RADIATION, null, null, null ) != 0;
    if( isActive )
    {
        uint stage = GetRadiationStage( cr.Stat[ ST_RADIATION_LEVEL ] );
        ChangeStage( cr, stage, false );
        cr.EraseTimeEvents( CTE_RADIATION );
    }
    cr.StatBase[ ST_RADIATION_LEVEL ] = 0;
    if( cr.Damage[ DAMAGE_RADIATED ] != 0 )
        cr.DamageBase[ DAMAGE_RADIATED ] = 0;
}

uint cte_Radiation( Critter& cr, int identifier, uint& stage )
{
    int body = cr.Stat[ ST_BASE_CRTYPE ];
    if( cr.IsDead() ) {
        return REAL_MINUTE( 5 );
	}
	
    uint newStage = GetRadiationStage( cr.Stat[ ST_RADIATION_LEVEL ] );
    uint duration = RADIATION_DURATION;

    if( stage != newStage ) // Set new effects
    {
        ChangeStage( cr, stage, false );
        ChangeStage( cr, newStage, true );
        stage = newStage;
    }
    else     // Erase effects
    {
        ChangeStage( cr, stage, false );
        duration = 0;
    }
    return duration;
}

uint GetRadiationStage( int level )
{
    for( uint i = 0, j = RADIATION_STAGES; i <= j; i++ )
    {
        int valMin = ( i > 0 ? TABLE_STAGE_VALUE( i ) : 0 );
        int valMax = ( i < j ? TABLE_STAGE_VALUE( i + 1 ) : level + 1 );
        if( level >= valMin && level < valMax )
            return i;
    }
    return 0;
}

void ChangeStage( Critter& cr, uint stage, bool gain )
{
    if( stage == 0 )
        return;
    if( gain )
        cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_RADIATION_STAGE( stage ) );

    for( uint i = 0, j = RADIATION_STATS; i < j; i++ )
    {
        uint statIndex = TABLE_STAT_INDEX( i );
        int  statAmount = TABLE_STAT_AMOUNT( i, stage );

        if( statAmount != 0 )
        {
            int curVal = cr.Stat[ statIndex ];

            if( gain )           // Gain effect
            {
                statAmount = -statAmount;
                if( statIndex < STAT_EXT_BEGIN )
                    cr.StatBase[ STAT_EXT_BEGIN + statIndex ] += statAmount;
                else if( statIndex == ST_CURRENT_HP )
                {
                    cr.StatBase[ ST_CURRENT_HP ] += statAmount;
                    if( cr.Stat[ ST_CURRENT_HP ] <= 0 )
					{
						cr.Say( SAY_EMOTE_ON_HEAD, "страдает от радиационного облучения" );
                        //cr.ToDead( ANIM2_DEAD_FUSED, null );
					}
                }
            }
            else             // Reduce effect
            {
                if( statIndex < STAT_EXT_BEGIN )
                    cr.StatBase[ STAT_EXT_BEGIN + statIndex ] += statAmount;
            }

            // Debug messages
            //	curVal=cr.Stat[statIndex]-curVal;
            //	if(curVal>0) cr.SayMsg(SAY_NETMSG,TEXTMSG_GAME,STR_DRUG_STAT_GAIN,"$name @msg game "+STR_STAT_NAME(statIndex)+"@$value"+curVal);
            //	else if(curVal<0) cr.SayMsg(SAY_NETMSG,TEXTMSG_GAME,STR_DRUG_STAT_LOSE,"$name @msg game "+STR_STAT_NAME(statIndex)+"@$value"+(-curVal));
        }
    }
}


uint e_radFlow( uint[]@ values )
{
	if( values is null) { Log("radFlow error: values is null"); return 0; }
    
    Item@ item = GetItem( values[0] );

    if( item is null ) return 0;
	
	uint16 x, y;
	Critter@ owner;
	Item@ cont;
	
	switch( item.Accessory )
	{
		case( ACCESSORY_NONE ): return 0;
		case( ACCESSORY_CRITTER ): 
			@owner = GetCritter( item.CritId );
			if( !valid( owner ) ) return REAL_MINUTE(1);
			x = owner.HexX;
			y = owner.HexY;
		break;
		case( ACCESSORY_HEX ): 
			x = item.HexX;
			y = item.HexY;
		break;
		case( ACCESSORY_CONTAINER ): 
			@cont = GetItem( item.ContainerId );
			if( !valid( cont ) ) return REAL_MINUTE(1);
			x = cont.HexX;
			y = cont.HexY;
		break;
		default: return 0;
	}
	
    Map@ map = GetMap( item.MapId );
    if( map is null ) { Log("radFlow error: map #"+item.MapId+" is null"); return 0; }
    
	
	int dist = item.Val2;
    /*
	int dx = Random( -dist, dist );
    int dy = Random( -dist, dist );
    map.SetText( item.HexX + dx, item.HexY + dy, COLOR_GRAY, ":click:" );	
	*/
	
	Critter@[] critters;
    uint count = map.GetCrittersHex( x, y, dist, FIND_ALL, critters );

    for( uint i = 0; i < count; i++ )
    {
		int step = GetDistantion( x, y, critters[i].HexX, critters[i].HexY );
		int rad = item.Val0 - item.Val1 * step;
		rad = CLAMP( rad, 0, rad ); //Защита от отрицательных значений.
		rad = Random( rad * 0.8, rad ); //20% погрешность при локализации источника
		
		AffectRadiation( critters[i], rad ); //Чувствительность увеличена стократно ( 1.00 раньше == 100 рад теперь ).
		
		Item@ active = critters[i].GetItem( 0, SLOT_HAND1 );//critters[i].GetItem( PID_GEIGER_COUNTER, SLOT_HAND1 );

		if( valid( active ) && active.GetProtoId() == PID_GEIGER_COUNTER && active.Val1 == 1 )
		{
			//map.SetTextMsg( geigers[i].HexX, geigers[i].HexY, COLOR_GRAY, TEXTMSG_GAME, 10354 /*STR_GEIGER_LOOP_CHECK*/, "$rem" + rad );
			critters[i].SayMsg( SAY_WHISP_ON_HEAD, TEXTMSG_GAME, 10354 /*STR_GEIGER_LOOP_CHECK*/, "$rem" + rad );
		}
    }
	
	Item@[] geigers;
	count = map.GetItems( PID_GEIGER_COUNTER, geigers );
	for( uint i = 0; i < count; i++ )
	{
		if( geigers[i].Val1 != 1 ) continue; //Выключенные не ловят.
		int step = GetDistantion( x, y, geigers[i].HexX, geigers[i].HexY );
		int rad = item.Val0 - item.Val1 * step;
		rad = CLAMP( rad, 0, rad ); //Защита от отрицательных значений.
		rad = Random( rad * 0.8, rad ); //20% погрешность при локализации источника
		map.SetTextMsg( geigers[i].HexX, geigers[i].HexY, COLOR_GRAY, TEXTMSG_GAME, 10354 /*STR_GEIGER_LOOP_CHECK*/, "$rem" + rad );
	}
	
	return REAL_SECOND( item.Val3 );
}

void _showRadItem( Item& item, Critter& player, bool entered, uint8 dir ) 
{
	
	Item@ active = player.GetItem( 0, SLOT_HAND1 );

	if( valid( active ) && active.GetProtoId() == PID_GEIGER_COUNTER && active.Val1 == 1 )
	{
		if( entered )
		{	
			player.Say( SAY_NETMSG, "Вы обнаружили источник радиации." ); //И уж дальше сами думайте, что с ним делать))
			if( isGM( player ) )
				UNSETFLAG( item.Flags, ITEM_HIDDEN ); //Делает объект видимым, нужно лишь тестерам да ГМам.
		}
		else
		{
			if( isGM( player ) )
				SETFLAG( item.Flags, ITEM_HIDDEN ); //Делает объект невидимым, нужно лишь тестерам да ГМам. Что бы не сбрасывать видимость - ТПшимся с него в сторону.
		}
	}
}

void radiate( Critter& cr, int VAL, int FADE, int DIST )
{
    Map@ map = cr.GetMap();
    if( not valid( map ) ) {
		cr.Say( SAY_NETMSG, "На глобале нельзя." );
        return;
	}

	item_radiate( map.Id, cr.HexX, cr.HexY, VAL, FADE, DIST, 3, PID_URANIUM_ORE );
}

void unsafe_GM_ItemRadiate( Critter& cr, int p0, int p1, int p2, string@ p3, int[]@ data )
{
	if( !isGM( cr ) ) return;

    Map@ map = cr.GetMap();
    if( not valid( map ) ) {
		cr.Say( SAY_NETMSG, "На глобале нельзя." );
        return;
	}

	if( !valid(data) || data.length() != 7 ) {
		cr.Say( SAY_NETMSG, "Некорректные аргументы вызова!" );
		return;
	}
	item_radiate( map.Id, data[0], data[1], data[2], data[3], data[4], data[5], data[6] );
}

void item_radiate( int mapID, int x, int y, int VAL, int FADE, int DIST, int TIME, int PID )
{
	if( VAL < 0 || FADE < 0 || DIST < 0 || TIME < 0 ) return;
	
	Map@ map = GetMap( mapID );
	if( !valid( map ) ) return;

	Item@ item = map.AddItem( x, y, PID, 1 );
	SETFLAG( item.Flags, ITEM_HIDDEN ); //Делает объект невидимым.
	item.SetEvent( ITEM_EVENT_WALK, "_showRadItem" ); //Позволяет найти объект с помощью счётчика гейгера, встав на нём.
	
	item.Val0 = VAL;
	item.Val1 = FADE;
	item.Val2 = DIST;
	item.Val3 = TIME;

    uint[] values = { item.Id };
    CreateTimeEvent( __FullSecond, "e_radFlow", values, true );
}

#endif //RADIATION