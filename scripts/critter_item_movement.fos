#ifndef CRITTER_ITEM_MOVEMENT
#define CRITTER_ITEM_MOVEMENT

#include "_utils.fos"
#include "wait_time_h.fos"
#include "critter_item_movement_h.fos"

#ifdef __CLIENT
	# define Critter    CritterCl
	# define Item       ItemCl
#endif

// //////////////////////////////////////////////////////////////////////////////////////////////////
// Call on something critter want move item from one slot to another.
// Return true to allow transaction, false to disallow.
// Function must exist on server and client side.

bool critter_check_move_item( Critter& cr, Item& item, uint8 toSlot, Item@ itemSwap )
{
#ifndef __CLIENT
	if( cr.Anim2Life == ANIM2_WINDUP ) {
		cr.ParamBase[ CR_IS_WINDUPED ] = 0;
		cr.SetAnims( COND_LIFE, 0, ANIM2_IDLE );
	}
#endif
	
	//if (item.Proto.Type == 15) return true;
    int fromSlot = item.CritSlot;
	const uint16 pid = item.GetProtoId( );
	// Фикс снятия ошейников и наручников на глобале:
	if( ( pid >= PID_HANDCUFFS_USED && pid <= PID_ROPE_USED && toSlot != SLOT_HAND1 && fromSlot == SLOT_HAND1 ) || 
		 ( pid == PID_COLLAR && ( toSlot != SLOT_HEAD && fromSlot == SLOT_HEAD ) ) )
    {
	
#ifdef __CLIENT
        Message( TEXTMSG_GAME, 12945 );
#endif
		return false;
    }
	
	if( pid == PID_WORKBENCH_TOKEN || pid == PID_FIREPLACE_TOKEN )
	{
#ifndef __CLIENT
        DeleteItem( item );
#endif
		return false;
	}
	
    bool  moveFreeze = false,
          dropFreeze = false;

#ifndef __CLIENT
	if( toSlot == SLOT_GROUND ) 
	{
		uint16 itmPid = item.GetProtoId();
		if( itmPid == PID_SINGLE_SANDBAG || ContainersX1.find( itmPid ) != -1 ) 
		{
			Item@[] ground;
			Map@ map = cr.GetMap();
			if( map.GetItems( cr.HexX, cr.HexY, ground ) > 0 ) 
			{
				for( uint i = 0; i < ground.length(); i++ ) 
				{
					uint16 groundPid = ground[i].GetProtoId();
					
					uint16[] list;
					string thing = "контейнер";
					
					if( itmPid == PID_SINGLE_SANDBAG ) 
					{
						list = Sandbags;
						thing = "мешок";
					} 
					else 
					{
						list = ContainersX1;
					}
					
					if( list.find( groundPid ) != -1 ) 
					{
						cr.Say( SAY_NETMSG, "|0xFFFF00 Необходимо отойти, чтобы установить " + thing + "." );
						return false;
					}
				}
			}
		}
		
		LogItemMovement( cr, item, "кладёт на землю" );
		if( item.IsStackable() ) 
		{
			uint[] values = { item.Id };
			CreateTimeEvent( AFTER( REAL_MS( 1000 ) ), "e_stack_items", values, true );
		}
	} 
	else 
	{
		if( toSlot == SLOT_ARMOR )
			LogItemMovement( cr, item, "одевает" ); 
		if( fromSlot == SLOT_ARMOR )
			LogItemMovement( cr, item, "снимает" );

		if( toSlot == SLOT_HAND1 )
			LogItemMovement( cr, item, "берет в руку" ); 
		if( fromSlot == SLOT_HAND1 )
			LogItemMovement( cr, item, "убирает" );
		
		if( toSlot == SLOT_MISC )
			LogItemMovement( cr, item, "экипирует" ); 
		if( fromSlot == SLOT_MISC )
			LogItemMovement( cr, item, "убирает" );
		
		if( toSlot == SLOT_HEAD )
			LogItemMovement( cr, item, "одевает" ); 
		if( fromSlot == SLOT_HEAD )
			LogItemMovement( cr, item, "снимает" );
		
		if( toSlot == SLOT_BACK )
			LogItemMovement( cr, item, "одевает на спину" ); 
		if( fromSlot == SLOT_BACK )
			LogItemMovement( cr, item, "снимает со спины" );
	}
#endif
	
    // Drop
    if( toSlot == SLOT_GROUND )
        return !dropFreeze;             // q3
		
	if( @itemSwap !is null )
	{	
		const uint16 swapPid = itemSwap.GetProtoId( );
		if( ( swapPid == PID_COLLAR && toSlot == SLOT_HEAD ) || ( swapPid >= PID_HANDCUFFS_USED && swapPid <= PID_ROPE_USED && toSlot == SLOT_HAND1 ) )
			return false;
	}
    // If busy, then allow only hands item swapping
    bool handsSwap = ( ( fromSlot == SLOT_HAND1 && toSlot == SLOT_HAND2 ) || ( fromSlot == SLOT_HAND2 && toSlot == SLOT_HAND1 ) );
    if( cr.IsPlayer() && valid( itemSwap ) && !handsSwap )
        return false;

    if( cr.IsPlayer() && moveFreeze && !handsSwap )
        return false;                          // q3

    // Weapon animation
    if( cr.IsPlayer() && toSlot == SLOT_HAND1 )
    {
        if( item.GetType() == ITEM_TYPE_WEAPON && !IsCritterAnim1( cr.CrType, item.Proto.Weapon_Anim1 ) ) {
            return false;
		}
    }

    // Armor animation
    if( toSlot == SLOT_ARMOR )
    {
        if( item.GetType() != ITEM_TYPE_ARMOR )
            return false;
        if( item.Proto.Slot != SLOT_INV )
            return false;

		uint16 pid = item.GetProtoId();
		uint16 skin = cr.Stat[ ST_BASE_CRTYPE ];
		if( skin == 0 ) //Стандартный скин М/Ж
			skin = ( cr.Stat[ ST_GENDER ] == GENDER_MALE ? CRTYPE_DEFAULT_M : CRTYPE_DEFAULT_F );
			
		bool isMutePlayer = skin_supermute.find( skin ) != -1,
			 isRoboPlayer = skin_robot.find( skin ) != -1,
			 isMuteArmor = armor_supermute_pids.find( pid ) != -1;
		
		if( isRoboPlayer || isMutePlayer != isMuteArmor )
			return false;
    }

    // Custom slot checks
    if( toSlot > SLOT_ARMOR ) // Для миск, головы и спины требуется индикатор в прототипе
    {
        if( toSlot != item.Proto.Slot )
            return false;
    }

    // Allow moving
    return true;
}

#ifdef __SERVER

#include "speed_h.fos"

// Call on critter item moved.
import void ChangeWindup( Critter& cr, bool ignore_bussy ) from "main";
import void checkAnimalBait( Map& map, uint16 x, uint16 y ) from "test";

void critter_move_item( Critter& cr, Item& item, uint8 fromSlot )
{
	uint8 toSlot = item.CritSlot;

	if( toSlot == SLOT_GROUND )
		checkAnimalBait( cr.GetMap(), cr.HexX, cr.HexY );	

	if( toSlot == SLOT_HEAD || fromSlot == SLOT_HEAD )
	{	
		ArmorEffects( cr, 1 );
		int signH = ( toSlot == SLOT_HEAD ? int(1) : -1 );
		switch( item.Proto.HeadItem_Perk )
        {
			case ( HEAD_PERK_COOL ):
				if( cr.StatBase[ ST_CHARISMA ] > 2 )
                	cr.StatBase[ ST_CHARISMA_EXT ] += 1 * signH;
                break;
            case ( HEAD_PERK_GLASSES ):
				if( cr.StatBase[ ST_PERCEPTION ] <= 3 )
				{
					cr.StatBase[ ST_PERCEPTION_EXT ] += 2 * signH;
				}
                break;
			case HEAD_PERK_VERY_COOL:
				if( cr.StatBase[ ST_CHARISMA ] > 2 )
					cr.StatBase[ ST_CHARISMA_EXT ] += 2 * signH;
				break;
			case HEAD_PERK_LUCKY_CHARM:
				cr.StatBase[ ST_LUCK_EXT ] += 1 * signH;
				break;
			case HEAD_PERK_COOL_LUCKY_CHARM:
				cr.StatBase[ ST_CHARISMA_EXT ] += 1 * signH;
				cr.StatBase[ ST_LUCK_EXT ] += 1 * signH;
				break;
			case HEAD_PERK_COOL_GLASSES:
				if( cr.StatBase[ ST_PERCEPTION ] <= 3 )
				{
					cr.StatBase[ ST_PERCEPTION_EXT ] += 2 * signH;
					cr.StatBase[ ST_CHARISMA_EXT ] += 1 * signH;
				}
				break;
		}
		cr.StatBase[ ST_CURRENT_HEAD_ITEM_PERK ] = ( toSlot == SLOT_HEAD ? item.Proto.HeadItem_Perk : 0 );
		//face mask
		uint16 pid = item.GetProtoId();
		if( toSlot == SLOT_HEAD && HidefaceMasks.find( pid ) != -1 ) {
			SETFLAG( cr.ParamBase[ CR_HIDEFACE_ITM ], ITM_FACE_MASK );
		} else {
			UNSETFLAG( cr.ParamBase[ CR_HIDEFACE_ITM ], ITM_FACE_MASK );
		}
		ArmorEffects( cr, 1 );
	}	
		
	if( cr.ParamBase[ CR_IS_WINDUPED ] != 0 && fromSlot == SLOT_HAND1 && item.GetType() == ITEM_TYPE_WEAPON )
		ChangeWindup( cr, true );
	
    if( item.GetType() == ITEM_TYPE_ARMOR && ( fromSlot == SLOT_ARMOR || toSlot == SLOT_ARMOR ) ) { //Снятие/одевание брони и одежды:
	
		bool isMale = ( cr.Stat[ ST_GENDER ] == GENDER_MALE ); //пол персонажа
		uint armor_skin = ( isMale ? item.Proto.Armor_CrTypeMale : item.Proto.Armor_CrTypeFemale );
		uint skin_base = cr.Stat[ ST_BASE_CRTYPE ]; //хранит в себе значение скина "под бронёй"
		
		if( skin_base == 0 ) { //Стандартный скин М/Ж
			skin_base = ( isMale ? CRTYPE_DEFAULT_M : CRTYPE_DEFAULT_F );
		}
		
		uint crType = skin_base; //главная рабочая переменная функции
		uint16 pid = item.GetProtoId(); //номер прототипа брони

		if( GetCritterAnimType( cr.CrType ) != ANIM_TYPE_3D ) 
		{ //Увы, 3Д не завезли, только 2Д:
			if( toSlot == SLOT_ARMOR ) 
			{ //Одеваем броню:
				if( skin_robe.find( armor_skin ) != -1 && ( skin_small.find( skin_base ) != -1 || skin_deadclaw.find( skin_base ) != -1 ) ) 
				{
					crType = CRTYPE_SMALL_ROBE; //Дети и карлики в маленьких робах.
				} 
				else 
				{ //Супермутанты и их брони:
					if( skin_supermute.find( skin_base ) < skin_supermute.find( armor_skin ) ) 
					{
						switch( pid )
						{
							case( PID_MUTARMOR_LEATHER ):
							{
								crType = skin_nightkin.find( cr.Stat[ ST_BASE_CRTYPE ] ) != -1 ? CRTYPE_NIGHTKIN_JACKET : CRTYPE_SUPERMUTE_JACKET;
								break;
							}
							case( PID_MUTARMOR_METAL ):
							{
								crType = skin_nightkin.find( cr.Stat[ ST_BASE_CRTYPE ] ) != -1 ? CRTYPE_NIGHTKIN_METAL : CRTYPE_SUPERMUTE_METAL;
								break;
							}
							case( PID_MUTARMOR_METAL_MK2 ):
							{
								crType = skin_nightkin.find( cr.Stat[ ST_BASE_CRTYPE ] ) != -1 ? CRTYPE_NIGHTKIN_METAL_BLACK : CRTYPE_SUPERMUTE_METAL_BLACK;
								break;
							}
							default:
							{
								crType = skin_nightkin.find( cr.Stat[ ST_BASE_CRTYPE ] ) != -1 ? CRTYPE_NIGHTKIN_NORMAL : CRTYPE_SUPERMUTE_NORMAL;
								crType = cr.Stat[ ST_BASE_CRTYPE ];
								break;
							}
						}
					} 
					else 
					{ //Все кроме детей, карликов и супермутантов:
						if( skin_armor.find( skin_base ) != -1 ) {
							if( skin_armor.find( armor_skin ) > skin_armor.find( skin_base ) ) 
							{
								crType = armor_skin; //Броне-скины заменялся реально одетой броней только если та выше их по "защищённости" (следующая в списке скинов)
							} 
							else 
							{
								crType = skin_base;
							}
						} 
						else if( skin_robe.find( skin_base ) != -1 ) 
						{
							if ( skin_armor.find( armor_skin ) != -1 ) 
							{
								crType = armor_skin; //Скины халатов меняются лишь на броню.
							}
						} 
						else 
						{ //Если, в итоге, дефолтный скин - это не броня и не халат:
							bool foundIt = false;
							int skin_armor_level = ( isMale ? skin_armor_levels_male.find( armor_skin ) : skin_armor_levels_female.find( armor_skin ) ) + 1;
							for( uint n = 0; n < skin_packs.length(); n++ ) { //Находим тот набор, которому принадлежит дефолтный скин персонажа
								int skin_level = skin_packs[n].find( skin_base );
								
								if( skin_level >= 0 ) { //Нашли наш пак скинов:
									if( cr.Param[ QST_GAMEMODE ] == GAME_TEST ) 
									{
										cr.Say( SAY_NORM, skin_level + " -> " + (skin_armor_level+1) + " of " + skin_packs[n].length() );
									}
									
									if( skin_level < skin_armor_level && skin_packs[n].length() > uint( skin_armor_level + 1 ) ) {
										crType = skin_packs[n][skin_armor_level]; //Заменяем, если уровень брони выше нашего уровня скина.
										foundIt = true;
									}
									break;
								}
							}
							
							if( !foundIt ) 
							{
								if( skin_armor.find( armor_skin ) != -1 || skin_robe.find( armor_skin ) != -1 ) 
								{
									crType = ArmorSkin( cr, armor_skin ); //Броня и халаты меняют любой социальный/боевой скин.
								} 
								else if( skin_male.find( skin_base ) != -1 || skin_female.find( skin_base ) != -1 || skin_ghoul.find( skin_base ) != -1 ) 
								{
										//Тут мог размещаться механ смены социальных скинов при одевании обычных броней.
								} 
								else { //Если дефолтный скин не социальный:
								}
							}
						}
					}
				}
				
				uint index = skin_armor.find( crType );
				if( skin_base == CRTYPE_BLACK_TRIBAL && index < 37 ) {
					crType = 150;
				}
				
				if( item.Proto.Item_Subtype == ITEM_SUBTYPE_ARMOR_AC45 || item.Proto.Item_Subtype == ITEM_SUBTYPE_ARMOR_AC50 ) { //Power armor protection system
					PAAuth( cr, item );
				}
				//Flags for face, avatar and description hiding items
				if( HidefaceHoods.find( pid ) != -1 ) {
					SETFLAG( cr.ParamBase[ CR_HIDEFACE_ITM ], ITM_ARMOR_HOOD );
				}
				if( HidefaceArmor.find( pid ) != -1 ) {
					SETFLAG( cr.ParamBase[ CR_HIDEFACE_ITM ], ITM_ARMOR_SUIT );
				}
				if( ArmorHelmets.find( pid ) != -1 ) {
					SETFLAG( cr.ParamBase[ CR_HIDEFACE_ITM ], ITM_ARMOR_HELMET );
				}
			} else {
				if( HidefaceHoods.find( pid ) != -1 ) {
					UNSETFLAG( cr.ParamBase[ CR_HIDEFACE_ITM ], ITM_ARMOR_HOOD );
				}
				if( HidefaceArmor.find( pid ) != -1 ) {
					UNSETFLAG( cr.ParamBase[ CR_HIDEFACE_ITM ], ITM_ARMOR_SUIT );
				}
				if( ArmorHelmets.find( pid ) != -1 ) {
					UNSETFLAG( cr.ParamBase[ CR_HIDEFACE_ITM ], ITM_ARMOR_HELMET );
				}
			}
			ArmorEffects( cr, 1 );
		}
		
		//cr.Say( SAY_NETMSG, "" + cr.CrType + " -> " + crType + " / " + armor_skin + " / " + skin_base );
		if( cr.CrType != crType ) {
			cr.ChangeCrType( crType );
			ChangeCritterSpeed( cr );
		}

        // Armor modifiers
        // Also look Armor perk validation in critter_init
        int sign = ( toSlot == SLOT_ARMOR ? int(1) : -1 );

        switch( item.Proto.Armor_Perk )
        {
			case ARMOR_PERK_POWERED:         // +3 strength, +30 radiation resist
				cr.StatBase[ ST_STRENGTH_EXT ] += 3 * sign;
				cr.StatBase[ ST_RADIATION_RESISTANCE_EXT ] += 30 * sign;
				cr.StatBase[ ST_CARRY_WEIGHT ] += item.Proto.Weight * sign;
				break; 
			case ARMOR_PERK_COMBAT:         // +20 radiation resist
				cr.StatBase[ ST_RADIATION_RESISTANCE_EXT ] += 20 * sign;
				break;
			case ARMOR_PERK_ADVANCED_I:     // +4 strength, +60 radiation resist
				cr.StatBase[ ST_STRENGTH_EXT ] += 4 * sign;
				cr.StatBase[ ST_RADIATION_RESISTANCE_EXT ] += 60 * sign;
				cr.StatBase[ ST_CARRY_WEIGHT ] += item.Proto.Weight * sign;
				break;
			case ARMOR_PERK_ADVANCED_II:         // +4 strength, +75 radiation resist
				cr.StatBase[ ST_STRENGTH_EXT ] += 4 * sign;
				cr.StatBase[ ST_RADIATION_RESISTANCE_EXT ] += 75 * sign;
				cr.StatBase[ ST_CARRY_WEIGHT ] += item.Proto.Weight * sign;
				break;
			case ARMOR_PERK_CHARISMA:         // +1 charisma
				if( cr.Stat[ ST_CHARISMA ] > 2 )
					cr.StatBase[ ST_CHARISMA_EXT ] += 1 * sign;
				break;
			case ARMOR_PERK_ECZO:         // +2 strength, +50 radiation resist
				cr.StatBase[ ST_STRENGTH_EXT ] += 2 * sign;
				cr.StatBase[ ST_RADIATION_RESISTANCE_EXT ] += 50 * sign;
				cr.StatBase[ ST_CARRY_WEIGHT ] += item.Proto.Weight * sign;
				break; 
			case ARMOR_PERK_ECZO_2:         // +3 strength, +10 radiation resist
				cr.StatBase[ ST_STRENGTH_EXT ] += 3 * sign;
				cr.StatBase[ ST_RADIATION_RESISTANCE_EXT ] += 10 * sign;
				cr.StatBase[ ST_CARRY_WEIGHT ] += item.Proto.Weight * sign;
				break; 			
			case ARMOR_PERK_UGLY:         // -1 charisma
				cr.StatBase[ ST_CHARISMA_EXT ] -= 1 * sign;
				break;
			case ARMOR_PERK_ANTIRAD:         // +70 radiation resist
				cr.StatBase[ ST_RADIATION_RESISTANCE_EXT ] += 70 * sign;
				break;			
			case ARMOR_PERK_VERY_COOL:         // +2 charisma
				if( cr.Stat[ ST_CHARISMA ] > 2 )
					cr.StatBase[ ST_CHARISMA_EXT ] += 2 * sign;
				break;			
			default:
				break;
        }
        cr.StatBase[ ST_CURRENT_ARMOR_PERK ] = ( toSlot == SLOT_ARMOR ? item.Proto.Armor_Perk : 0 );
    }
	
	if( cr.IsNpc() ) {
		cr.Wait( GetActionTime( ACTION_MOVE_ITEM, cr ) );
	}
}

// ####################################################################################################
// #                                            PowerArmour auth                                      #
// ####################################################################################################
void PAAuth( Critter& cr, Item& armor )
{
	if( armor.Val9 == 10 ) {
		if( cr.Id == uint ( armor.Val8 ) ) {
			string[] gndrPA = { "Приятный женский", "Приятный мужской", "Тёплый ламповый", "Бездушный сухой", "Зловещий холодный" };
			string gndr = cr.Stat[ ST_GENDER ] == 1 ? "хозяйка" : "хозяин";
			cr.Say( SAY_NETMSG, "|0xFF00FF " +gndrPA[ armor.Id % 5 ]+ " электронный голос: |0xF8F993 Личность распознана. Приветствую, " +gndr+"." );
		
		} else {
			cr.AddTimeEvent( "cte_PAAuthFail", REAL_SECOND( 10 ), CTE_DRAGGING, 0 ); 
			cr.Say( SAY_EMOTE_ON_HEAD, "Нарастающий гул реактора" ); 
		}
		
	} else if( armor.Val9 == 5 ) { 
		armor.Val9 = 10; 
		armor.Val8 = cr.Id; 
	}
}

uint cte_PAAuthFail( Critter& cr, int identifier, uint& rate )
{
	Item@ armor = cr.GetItem( 0, SLOT_ARMOR );
	if( valid( armor ) && ( armor.Proto.Item_Subtype == ITEM_SUBTYPE_ARMOR_AC45 || armor.Proto.Item_Subtype == ITEM_SUBTYPE_ARMOR_AC50 ) && armor.Val9 == 10 ) {
		cr.MoveItem( armor.Id, 1, SLOT_GROUND );
		
		if( cr.Karma[ KARMA_SEPARATED ] == 0 ) { //BOS aligment - need change to different shit depending on armor
			cr.ToDead( ANIM2_DEAD_PULSE_DUST, null ); 
			
		} else {
			cr.ToKnockout( KNOCKOUT_ANIM2_DEFAULT( ( Random( 0, 1 ) == 0 ) ), 1000, cr.HexX, cr.HexY );
			cr.Say( SAY_EMOTE_ON_HEAD, "Получает разряд и выброс из брони" );
		}
	}
	return 0;
}

// ####################################################################################################
// #                                            Hide Face                                             #
// ####################################################################################################

void ArmorEffects( Critter& cr, int8 sign )
{
	bool hidename = B_Showname( cr );
	int QST = cr.Param[ QST_MEDIUM ];
	bool update = false;

	if( sign == 1 && hidename ) {
		if( ABS(QST) != 2 ) {
			cr.Say( SAY_EMOTE, "Скрывает лицо" );
			cr.ParamBase[ QST_MEDIUM ] = 2;
			update = true;
		}
	} else {
		if( QST == 2 ) {
			cr.Say( SAY_EMOTE, "Показывает лицо" );
			cr.ParamBase[ QST_MEDIUM ] = 0;
			update = true;
		}
	}

	Item@ item = cr.GetItem( 0, SLOT_ARMOR );
	if( valid( item ) ) {
		uint PID = item.GetProtoId();
		if( PID == PID_POWERED_ARMOR || PID == PID_POWERED_ARMOR_NEVADA || PID == PID_HYENA_PA || PID == PID_HYENA_PA_MK2 ) {
			cr.ChangeCrType( ArmorSkin( cr, CRTYPE_PA ) ); 
		}
		
		if( PID == PID_HARDENED_POWER_ARMOR ) { 
			cr.ChangeCrType( ArmorSkin( cr, CRTYPE_PA_HARDY ) ); 
		}
	}

	if( update ) {
		Critter@[] crs;
		GetAllPlayers( crs );
		for( uint i = 0, l = crs.length(); i < l; i++ ) { crs[ i ].RunClientScript( "client_main@NamesUpdater", 0, 0, 0, null, null ); }
	}
}

bool B_Showname( Critter& cr )
{
	int param = cr.ParamBase[ CR_HIDEFACE_ITM ];
	
	if( FLAG( param, ITM_FACE_MASK ) ) {
		return true;
	} else if( FLAG( cr.Param[ MIO_FLAGS ], ITEM_HIDDEN ) ) {
		if( FLAG( param, ITM_ARMOR_HOOD ) || FLAG( param, ITM_ARMOR_SUIT ) ) {
			return true;
		}
	}
	return false;
}

uint ArmorSkin( Critter& cr, uint skin )
{
	if( !B_Showname( cr ) )
	{
		if( skin == CRTYPE_PA ) {
			if( cr.Stat[ ST_BASE_CRTYPE ] == CRTYPE_SULIK_TRIBAL ) {
				skin = CRTYPE_SULIK_PA;
			} else {
				skin = CRTYPE_PA_HEADLESS; 
			}
		} else if( skin == CRTYPE_PA_HARDY ) { 
			skin = CRTYPE_PA_HARDY_HEADLESS; 
		}
	}
	return skin;
}
#endif

#ifdef __SERVER
//Autostack items upon drop to ground - maybe move to somwhere else
uint e_stack_items( uint[]@ values ) 
{
    uint itemId = values[0];
    Item@ item = GetItem( itemId );
	if( !valid( item ) ) { return 0; }
	
    if( item.Accessory != ACCESSORY_HEX ) { return 0; }
	
	uint16 x = 0, y = 0;
    Map@ map = item.GetMapPosition( x, y );

    Item@[] items;
    uint count = map.GetItems ( x, y, items );
    for ( uint i = 0; i < count; i++ ) {
        if( !valid( items[i] ) || !items[i].IsStackable() ) { continue; }
		
        uint16 protoid = items[i].GetProtoId();
        uint itemCount = items[i].GetCount();

        for ( uint j = i + 1; j < count; j++ ) {
			if( !valid( items[j] ) ) { continue; }

            if(  protoid == items[j].GetProtoId() ) {
                itemCount += items[j].GetCount();
                DeleteItem( items[j] );
                @items[j] = null;
            }
        }

        items[i].SetCount( itemCount );
		
		switch( protoid ) 
		{
			case( PID_BOTTLE_CAPS):
				CoinAmountChanger( items[i], itemCount );
				break;
			case( PID_SHELL_CASING):
				ShellAmountChanger( items[i], itemCount );
				break;
		}
        items[i].Update( );
    }
    return 0;
}

// Change PicMap for dropped coins - Util func
void CoinAmountChanger( Item& item, uint amount)
{
    if( amount <= 8 ) {
		item.PicMap = CoinAmoutHash[ amount ];
	} else {
		item.PicMap = CoinAmoutHash[ 0 ];
	}
	
    item.Update();
}

// Change PicMap for shells - Util func
void ShellAmountChanger( Item& item, uint amount)
{
    if( amount <= 8 ) {
		item.PicMap = ShellAmoutHash[ amount ];
	} else {
		item.PicMap = ShellAmoutHash[ 0 ];
	}
	
    item.Update();
}

// Steal container or armor
bool StealContainerOrArmor( Critter& cr, Critter@ targetCr, Item@ targetItem )
{
	bool LootedRucksack = false;
	Item@[] RuckSacks;
	
	bool isCritter = valid( targetCr );
	
	if( isCritter ) {
		targetCr.GetItems( -1, RuckSacks );
	} else if( valid( targetItem ) ) {
		targetItem.GetItems( uint( -1 ), RuckSacks );
	} else {
		return false;
	}
	
	for( uint i = 0, iEnd = RuckSacks.length(); i < iEnd; i++ ) {
		int pid = RuckSacks[i].GetProtoId();
		bool isContainer = RuckSacks[i].GetType() == ITEM_TYPE_CONTAINER;
		bool isBag = (pid == PID_BAG);
		bool isPack = (pid == PID_BACKPACK);
		if( isBag || isPack || isContainer ) {
			if( !isGM( cr ) ) {
				string action_text = "Снимает " + (isPack ? "рюкзак" : "что-то" );
				cr.Say(SAY_EMOTE, action_text );
				CrimeLog( cr, crInfo( cr ) + strlwr( action_text ) + " у " + crInfo( targetCr ) );
				MoveItem( RuckSacks[i], 1, cr.GetMap(), cr.HexX, cr.HexY );
				targetCr.Say( SAY_NETMSG, "Вы не в силах сопротивляться, пока у вас отбирают " + (isPack ? "рюкзак" : "что-то" ) + "." );
				cr.TimeoutBase[ TO_SK_STEAL ] = __FullSecond + REAL_SECOND( 15 );
			} else {
				MoveItem( RuckSacks[i], 1, cr );
				string action_text = (isPack ? "рюкзак" : "что-то" ) + ( isCritter ? " у игрока" : " с тела" );
				cr.Say( SAY_NETMSG, "Вы забрали " + action_text + "."  );
				CrimeLog( cr, crInfo( cr ) + " забирает ГМкой " + action_text + " " + crInfo( targetCr ) );
			}
			LootedRucksack = true;
			return true;
		}
	}
	
	if( isCritter && !LootedRucksack ) {
		Item@[] armors;
		uint count = targetCr.GetItems( SLOT_ARMOR, armors );
		if( count == 0 || !valid( armors[0] ) ) {
			cr.Say( SAY_NETMSG, "Из этого ничего не вышло." );
			return true;
		}
		
		CrimeLog( cr, crInfo( cr ) + " пытается снять броню " + crInfo( targetCr ) );
		cr.Say( SAY_EMOTE, "пытается снять броню" );
		cr.Say( SAY_NETMSG, "Вы снимаете с цели всё что можете." );
		targetCr.Say( SAY_NETMSG, "Вашу броню пытаются снять!" );
		
		if( uint( cr.Stat[ ST_LAST_STEAL_CR_ID ] ) == targetCr.Id ) {
			cr.TimeoutBase[ TO_SK_STEAL ] = __FullSecond + REAL_SECOND( 15 );
			cr.StatBase[ ST_STEAL_COUNT ] ++;
			TryToTakeArmor( cr, targetCr );
		} else {
			if( isGM( cr ) ) {
				cr.Say( SAY_NETMSG, "Вы забрали у персонажа броню." );
				CrimeLog( cr, crInfo( cr ) + " снимает ГМкой броню с " + crInfo( targetCr ) );
				cr.StatBase[ ST_STEAL_COUNT ] = 7;
				TryToTakeArmor( cr, targetCr );
			}
			cr.StatBase[ ST_STEAL_COUNT ] = 0;
			cr.StatBase[ ST_LAST_STEAL_CR_ID ] = targetCr.Id;
		}
		return true;
	}
	return false;
}

int[][] armor_delay = {
	{ PID_POWERED_ARMOR, PID_HARDENED_POWER_ARMOR, PID_ADVANCED_POWER_ARMOR, PID_ADVANCED_POWER_ARMOR_MK2 },
	{ PID_PURPLE_ROBE, PID_BLACK_ROBE, PID_SANDROBE },
	{ PID_LEATHER_JACKET, PID_CURED_LEATHER_ARMOR, PID_CURED_LEATHER_ARMOR_MK_II },
	{ PID_LEATHER_ARMOR, PID_LEATHER_ARMOR_MK_II, PID_LEATHER_ARMOR_MK_III },
	{ PID_METAL_ARMOR, PID_METAL_ARMOR_MK_II, PID_TESLA_ARMOR},
};

void TryToTakeArmor( Critter& cr, Critter& target ) 
{
	bool success = false;
	Item@[] armors;
	uint count = target.GetItems( SLOT_ARMOR, armors );
	
	if( count == 0 || !valid( armors[0] ) ) { return; }
	int armor = armors[0].GetProtoId();
	
	if( armor_delay[0].find( armor ) != -1 ) { return; } //ПАшки неснимаемые.
	
	uint delay = cr.Stat[ST_STEAL_COUNT], i = 1, iEnd = armor_delay.length();
			
	for( ; i < iEnd; i++ ) {
		if( armor_delay[i].find( armor ) != -1 ) {
			success = true;
			break;
		}
	}
	
	if( delay >= 6 ) { 
		success = true;
	}
	
	if( success && delay >= i) {
		MoveItem( armors[0], 1, cr );
		target.Say(SAY_NETMSG, "С вас сняли броню.");
		cr.Say(SAY_NETMSG, "Вы сняли броню с жертвы.");
		CrimeLog( cr, crInfo( cr ) + " снимает броню с " + crInfo( target ) );
	} else {
		cr.Say( SAY_NETMSG, "Итерация №" + delay + " из " +( i == 5 ? 6 : i ) + "." );
	}
}

#endif // __SERVER

#endif //CRITTER_ITEM_MOVEMENT