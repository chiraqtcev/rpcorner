// Author: Mio
// Панель взаимодействия с миром.

#include "_utils.fos"
#include "effects_h.fos"
#include "critter_status_h.fos"
#include "speed_h.fos"

// Основные.
import string Colorizing( int number, string[] list, int[] listX ) from "mio_deviants_toolkit";
import string Dictkeys( int number, string[] list, int[] listX ) from "mio_deviants_toolkit";
import int MenuChoice( int storage, uint answerI, string cell, bool rec ) from "mio_deviants_toolkit";
import string[] StatusMaker( Critter& initiator, Critter@ target, string[] list, int[] listX, uint8[] listV ) from "mio_deviants_toolkit";

// Упаковка.
import int BitUnpacker( int storage, uint8 index, uint8 bit ) from "mio_deviants_toolkit";
import int BitZeroing( int storage, uint8 index, uint8 bit ) from "mio_deviants_toolkit";
import int BitPacker( int cell, int storage, uint8 index, uint8 bit ) from "mio_deviants_toolkit";
import int BitChange( int number, int storage, uint8 index, uint8 bit ) from "mio_deviants_toolkit";

// Сторонние.
import void PlayMusic( Map& map, string& musicName, uint pos, uint repeat ) from "media";
import uint CountMapPlayers( Map@ map ) from "manager";

// ####################################################################################################
// #                                         Obvious Control                                          #
// ####################################################################################################

#define TARGETID								( ST_VAR0 )					// Параметр криттера содержащий ID криттера, с которым происходит взаимодействие.
#define TARGETPID								( ST_VAR1 )					// Параметр криттера содержащий PID, с которым происходит взаимодействие.
#define MENU_STORAGE							( ST_VAR2 )					// Параметр криттера содержащий выборы игрока в меню.
#define MENU_PAGE								( ST_VAR3 )					// Параметр криттера содержащий дополнительные данные меню-журналов.

#define NUMBER_CHESTS							( 9 )						// Количество сундуков в сокроVVishнице.


// Пачки.
#define NUM_MENU_PAGE							( 1 )						// Страница. Начальный индекс.
#define BIT_MENU_PAGE							( 4 )						// 
#define NUM_MENU_SIGN							( 32 )						// Знак. Начальный индекс.
#define BIT_MENU_SIGN							( 1 )						// 

#define STARTING_POINT							( 1 )						// Начало отсчёта.
#define INDEX									# ( X ) ( X - STARTING_POINT )

// Checks.
#define CH_BOOL									( 1 )
#define CH_COUNT								( 2 )
#define CH_ST_BOOL								( 3 )
#define CH_ST_COUNT								( 4 )
#define CH_ITEM_BOOL							( 5 )
#define CH_ITEM_COUNT							( 6 )

// Types.
#define TYPE_NONE								( 0 )
#define TYPE_ITEM								( 1 )
#define TYPE_MAP								( 2 )
#define TYPE_CRITTER							( 3 )
#define TYPE_CRITTER_PARAM						( 4 )
#define TYPE_CRITTER_NEEDS						( 5 )
#define TYPE_CRITTER_COMBAT						( 6 )
#define TYPE_CRITTER_DIFFERENT					( 7 )
#define TYPE_LOC_NAVIGATION						( 8 )

string[][] listMAPS =	{
							{ "Кузница душ", "Сон", "Совнгард", "Преисподняя" },
							{ "Верхняя палуба", "Палуба 1", "Палуба 2", "Палуба 3", "Палуба 4", "Башня" },
							{ "Подстанция", "Магазины", "Пирс", "Холм", "Шахта", "Руины", "Бродвей", "Лагерь", "Склады" },
							{ "СФ порт", "СФ центр", "НКР", "Нью-Рено" }
						};

int[][] listMAPSX =		{ {
							 92, 0,		320, 210,
							 93, 0,		300, 170,
							 95, 0,		130,  70,
							300, 0,		166, 171
						},{
							110, 0,		190, 220,
							110, 1,		220, 200,
							110, 2,		220, 200,
							110, 3,		220, 200,
							110, 4,		220, 200,
							110, 5,		210, 270
						},{
							102, 0,		165, 223,
							103, 0,		197, 218,
							104, 0,		191, 228,
							105, 0,		181, 198,
							105, 1,		197, 196,
							106, 0,		181, 172,
							107, 0,		167, 174,
							108, 0,		167, 160,
							109, 0,		160, 210
						},{
							114, 0,		170, 215,
							117, 0,		165, 178,
							111, 0,		157, 167,
							112, 0,		259, 175
						} };



// ####################################################################################################
// #                                           Compression                                            #
// ####################################################################################################

void MenuMaker( Critter& initiator, string[] list, string@ headline, string@ pointer ) // Генератор менюшек.
{
	uint8 length = list.length();
	initiator.ShowScreen( SCREEN_DIALOGBOX, length, pointer );
	initiator.Say( SAY_DIALOGBOX_TEXT, headline );
	for( uint8 i = 0; i < length; i++ ) { initiator.Say( SAY_DIALOGBOX_BUTTON( i ), Centering( list[ i ] ) ); }
	initiator.Say( SAY_DIALOGBOX_BUTTON( length ), Centering( "Отмена" ) );
}
void MenuInputMaker( Critter& player, string@ Pointer, string@ Headline )
{
	player.ShowScreen( SCREEN_SAY, 0, Pointer );
	player.Say( SAY_SAY_TITLE, Headline );
}
void InputApply( Critter& player, Critter& targetCr, uint param, string& answerS, bool merge )
{
	if( answerS.length() > 0 )
	{
		int number = 0;
		StrToInt( answerS, number );
		if( merge ) { targetCr.ParamBase[ param ] += number; } else { targetCr.ParamBase[ param ] = number; }
		//player.Say( SAY_NETMSG, UINTColor( COLOR_WHITE )+"Изменён параметр " + param + " на " + number + " у ID: " + targetCr.Id );
		ChangeCritterSpeed( targetCr );
	}
}

void ShortRec( Critter& player, string cell, uint num ) { player.ParamBase[ MENU_STORAGE ] = MenuChoice( player.Param[ MENU_STORAGE ], num, cell, true ); }
void PageReset( Critter& player ) { player.ParamBase[ MENU_PAGE ] = BitZeroing( player.Param[ MENU_PAGE ], INDEX( NUM_MENU_PAGE ), BIT_MENU_PAGE ); }
void Empty( Critter& player, uint answerI, string& answerS ) { null; }

// ================================================== Обработчики ==================================================

uint8 Divinity( Critter& cr )
{
	uint8 Dev;
	if( false ) { Dev = 0; } else { Dev = cr.GetAccess(); }
	return Dev;
}
string Access( Critter& cr )
{
	uint8 Accnum = Divinity( cr ); 
	string[] Colorlist =  {        COLOR_GREEN, COLOR_LRED,    COLOR_GRAY,  COLOR_EMOTE };
	int[] Barlist =       {                  0,          1,             2,            3 };
	string[] Statuslist = { "Развлекайте меня",   "Тестер", "Исполнители",  "Вершители" };
	return "Каста: " +Colorizing( Accnum, Colorlist, Barlist ) + Dictkeys( Accnum, Statuslist, Barlist ) + UINTColor( COLOR_TEXT );
}
string SPECIAL( Critter& cr )
{
	int8 sum = -40;
	int8 sum_eff = -40;
	for( uint8 i = 0; i < 7; i++ ) { sum += cr.ParamBase[ i ]; sum_eff += cr.Param[ i ]; }
	uint buffcolor = ( sum_eff - sum ) == 0 ? COLOR_GRAY : ( ( sum_eff - sum ) > 0 ? COLOR_MLBLUE : COLOR_LRED );
	string[] Colorlist =  { COLOR_LRED, COLOR_GRAY, COLOR_LRED };
	int[] Barlist =       {      -40,          0,         1 };
	return Colorizing( sum, Colorlist, Barlist )+"  [ SPECIAL: " +( sum == 0 ? "Баланс" : ""+sum ) +" ]  " + UINTColor( buffcolor )+"Баф: "+( sum_eff - sum ) + UINTColor( COLOR_TEXT );
}
string LVL( Critter& cr )
{
	int8 lvl = cr.Param[ ST_LEVEL ];
	string[] Colorlist =  { COLOR_LRED, COLOR_GREEN, COLOR_GRAY };
	int[] Barlist =       {          0,           4,         10 };
	return Colorizing( lvl, Colorlist, Barlist )+"Ур: " +lvl + UINTColor( COLOR_TEXT );
}
uint COUNTING_EXP( uint8 level )
{
	uint sum = 0;
	for( uint8 i = 1; i <= level; i++ ) { sum += i * 1000; }
	return sum;
}
string Fill( int num )
{
	string space = ( num > 99 ) ? "" : ( num > 9 ? "  " : "   " );
	uint rescolor = ( num > 0 ? COLOR_GREEN : COLOR_DRED );
	return space + UINTColor( rescolor ) + num + UINTColor( COLOR_DDGREEN );
}
string MenuInfo( Critter& player, uint8 Type )
{
	string TXT = "";
	if( Type == TYPE_CRITTER )
	{
		string Invis = "  *"+player.Param[ QST_INVIS ];
		if( player.IsPlayer() )
		{
			string ID = "ID: "+player.Id;
			string Name = UINTColor( COLOR_GRAY )+"  [ "+GetPlayerName( player.Id )+" ]" + UINTColor( COLOR_TEXT );
			string Stats = SPECIAL( player );
			string lvl = LVL( player );
			string Team = "Команда: "+player.Param[ ST_TEAM_ID ];

			TXT += Access( player ) +"\n"+ID +Name +Invis +"\n"+lvl+Stats +"\n"+Team;
		}
		else
		{
			int typeAI = player.ParamBase[ MERC_TYPE ];
			string[] listAI = { "Контроль", "Болванка", "Манекен", "Монстр", "Рейдер", "Охрана", "Мутант", "Респавн", "Зерг раш" };
			string stringAI = listAI[ typeAI ];
			TXT += "Хозяин: "+player.Param[ MERC_MASTER_ID ] +"\nКоманда: "+player.Param[ ST_TEAM_ID ] +"\nAI: "+stringAI +"\nДиалог: "+player.Param[ ST_DIALOG_ID ] +"\nPID: "+player.GetProtoId();
		}
		return TXT;
	}
	if( Type == TYPE_CRITTER_PARAM )
	{
		string[] stats = { "S", "P", "E", "C", "I", "A", "L" };
		int8 stbase = 0;
		int8 stext = 0;
		int8 difference = 0;
		string Table1 = "";
		string Table2 = "\n";
		string space1;
		string space2;
		for( uint8 i = 0; i < 7; i++ )
		{
			stbase = player.ParamBase[ i ];
			stext = player.Param[ i ];
			difference = stext - stbase;
			space1 = stbase > 9 ? "" : " ";
			space2 = stbase > 9 ? "" : " ";
			uint buffcolor1 = ( difference == 0 ? COLOR_DARK : ( difference > 0 ? COLOR_MLBLUE : COLOR_LRED ) );
			uint buffcolor2 = ( stbase < 4 ? COLOR_DDGREEN : ( stbase < 8 ? COLOR_DGREEN : COLOR_LGREEN ) );
			Table1 += UINTColor( buffcolor1 )	+stats[ i ]		+space1		+stext	+"   ";
			Table2 += UINTColor( buffcolor2 )	+stats[ i ]		+space2		+stbase	+"   ";
		}
		TXT += Table1 + Table2 + UINTColor( COLOR_DDGREEN );

		TXT += "\n";
		string[] skilllist = { "Лёгкое оружие", "Тяжёлое оружие", "Энергооружие", "Рукопашная", "Xолодное оружие", "Метательное оружие", "Санитар", "Доктор", "Скрытность", "Взлом замков", "Воровство", "Ловушки", "Наука", "Ремонт", "Красноречие", "Торговля", "Азартные игры", "Выживание" };
		uint8 tag;
		for( uint8 i = TAG_SKILL1; i <= TAG_SKILL4; i++ )
		{
			tag = player.Param[ i ];
			if( tag != 0 ) { TXT += "\n"+skilllist[ tag - 200 ]+": " +player.Skill[ tag ]+"%"; }
		}
		return TXT;
	}
	if( Type == TYPE_CRITTER_NEEDS )
	{
		uint8 level = player.Param[ ST_LEVEL ];
		string lvl = LVL( player );
		uint nextlvlexp = COUNTING_EXP( level );
		int exp = player.Param[ ST_EXPERIENCE ];
		TXT += lvl + UINTColor( COLOR_GRAY );
		TXT += "\nДо уровня: " +( nextlvlexp - exp );
		TXT += "\nБаллы: " +player.Param[ ST_UNSPENT_SKILL_POINTS ];
		TXT += "\nКарма: " +player.Param[ ST_KARMA ] +"/"+ player.Param[ ST_PLAYER_KARMA ];
		return TXT;
	}
	if( Type == TYPE_CRITTER_COMBAT )
	{
		string R_NORMAL =  Fill( player.Param[ ST_NORMAL_ABSORB ]  ) +"/"+ Fill( player.Param[ ST_NORMAL_RESIST ]  ) +" - "+ Fill( player.ParamBase[ ST_NORMAL_ABSORB ]  ) +"/"+ Fill( player.ParamBase[ ST_NORMAL_RESIST ]  );
		string R_LASER =   Fill( player.Param[ ST_LASER_ABSORB ]   ) +"/"+ Fill( player.Param[ ST_LASER_RESIST ]   ) +" - "+ Fill( player.ParamBase[ ST_LASER_ABSORB ]   ) +"/"+ Fill( player.ParamBase[ ST_LASER_RESIST ]   );
		string R_FIRE =    Fill( player.Param[ ST_FIRE_ABSORB ]    ) +"/"+ Fill( player.Param[ ST_FIRE_RESIST ]    ) +" - "+ Fill( player.ParamBase[ ST_FIRE_ABSORB ]    ) +"/"+ Fill( player.ParamBase[ ST_FIRE_RESIST ]    );
		string R_PLASMA =  Fill( player.Param[ ST_PLASMA_ABSORB ]  ) +"/"+ Fill( player.Param[ ST_PLASMA_RESIST ]  ) +" - "+ Fill( player.ParamBase[ ST_PLASMA_ABSORB ]  ) +"/"+ Fill( player.ParamBase[ ST_PLASMA_RESIST ]  );
		string R_ELECTRO = Fill( player.Param[ ST_ELECTRO_ABSORB ] ) +"/"+ Fill( player.Param[ ST_ELECTRO_RESIST ] ) +" - "+ Fill( player.ParamBase[ ST_ELECTRO_ABSORB ] ) +"/"+ Fill( player.ParamBase[ ST_ELECTRO_RESIST ] );
		string R_EMP =     Fill( player.Param[ ST_EMP_ABSORB ]     ) +"/"+ Fill( player.Param[ ST_EMP_RESIST ]     ) +" - "+ Fill( player.ParamBase[ ST_EMP_ABSORB ]     ) +"/"+ Fill( player.ParamBase[ ST_EMP_RESIST ]     );
		string R_EXPLODE = Fill( player.Param[ ST_EXPLODE_ABSORB ] ) +"/"+ Fill( player.Param[ ST_EXPLODE_RESIST ] ) +" - "+ Fill( player.ParamBase[ ST_EXPLODE_ABSORB ] ) +"/"+ Fill( player.ParamBase[ ST_EXPLODE_RESIST ] );
		TXT += UINTColor( COLOR_DDGREEN );
		TXT +=      "Норм      "  +R_NORMAL ;
		TXT += "\n"+"Лазер     "  +R_LASER  ;
		TXT += "\n"+"Огонь     "  +R_FIRE   ;
		TXT += "\n"+"Плазма   "   +R_PLASMA ;
		TXT += "\n"+"Электро  "   +R_ELECTRO;
		TXT += "\n"+"ЭМИ        " +R_EMP    ;
		TXT += "\n"+"Взрыв    "   +R_EXPLODE;
		return TXT;
	}
	if( Type == TYPE_CRITTER_DIFFERENT )
	{
		string HEALING =      Fill( player.Param[ ST_HEALING_RATE ]         ) +" - "+ Fill( player.ParamBase[ ST_HEALING_RATE ]         );
		string R_POISON =     Fill( player.Param[ ST_POISON_RESISTANCE ]    ) +" - "+ Fill( player.ParamBase[ ST_POISON_RESISTANCE ]    );
		string R_RADIATION =  Fill( player.Param[ ST_RADIATION_RESISTANCE ] ) +" - "+ Fill( player.ParamBase[ ST_RADIATION_RESISTANCE ] );
		string MELEE_DAMAGE = Fill( player.Param[ ST_MELEE_DAMAGE ]         ) +" - "+ Fill( player.ParamBase[ ST_MELEE_DAMAGE ]         );
		string ARMOR_CLASS =  Fill( player.Param[ ST_ARMOR_CLASS ]          ) +" - "+ Fill( player.ParamBase[ ST_ARMOR_CLASS ]          );
		string CARRY_WEIGHT = Fill( player.Param[ ST_CARRY_WEIGHT ] *0.001  ) +" - "+ Fill( player.ParamBase[ ST_CARRY_WEIGHT ] *0.001  );
		TXT +=      UINTColor( COLOR_GRAY )+"Рукоп. повр. " +MELEE_DAMAGE ;
		TXT += "\n"+UINTColor( COLOR_GRAY )+"Класс брони "  +ARMOR_CLASS  ;
		TXT += "\n";
		TXT += "\n"+"Уров. лечен. "   +HEALING     ;
		TXT += "\n"+"Уст. к яду    "  +R_POISON    ;
		TXT += "\n"+"Уст. к рад.    " +R_RADIATION ;
		TXT += "\n"+"Макс. груз    "  +CARRY_WEIGHT ;
		return TXT;
	}
	if( Type == TYPE_ITEM )
	{
		Item@ item = GetItem( player.Param[ TARGETID ] );
		if( item is null ) { return ""; }

		TXT += "PID: "+item.GetProtoId() +"\nID: "+item.Id +"\nФлаги: "+item.Flags;
		return TXT;
	}
	if( Type == TYPE_LOC_NAVIGATION )
	{
		string[][] listLOC =	{
									{ "Зазеркалье", "ЗАЗЕРКАЛЬЕ" },
									{ "Танкер", "ТАНКЕР" },
									{ "Побережье", "ПОБЕРЕЖЬЕ" },
									{ "Города", "ГОРОДА" }
								};
		uint8 page = BitUnpacker( player.Param[ MENU_PAGE ], INDEX( NUM_MENU_PAGE ), BIT_MENU_PAGE );

		Location@ loc;
		uint16 locPID =  0;
		Map@ map;
		uint8 mapIndex = 0;
		string cancer = "";
		uint8 sum = 0;
		string space;
		for( uint8 i = 0, l = listMAPS.length(); i < l; i++ )
		{
			for( uint8 ii = 0, ll = listMAPS[ i ].length(); ii < ll; ii++ )
			{
				locPID =   listMAPSX[ i ][ ( ii * 4 ) + 0 ];
				@ loc = GetLocationByPid( locPID, 0 );
				if( loc is null ) { Log( "Локация отсутствует!" ); return ""; }
				mapIndex = listMAPSX[ i ][ ( ii * 4 ) + 1 ];
				@ map = loc.GetMapByIndex( mapIndex );
				if( map is null ) { Log( "Карта отсутствует!" ); return ""; }
				sum += CountMapPlayers( map );
			}
			space = ( sum > 9 ) ? "" : "  ";
			cancer = ( sum > 0 ? UINTColor( COLOR_MLBLUE )+"[ "+space+sum+" ]" : UINTColor( COLOR_DRED )+"[  -  ]" );
			sum = 0;

			if( i > 0 ) { TXT += "\n"; }
			TXT += cancer + " ";
			if( i == page ) { TXT += UINTColor( COLOR_GREEN )+listLOC[ i ][ 1 ]; } else { TXT += UINTColor( COLOR_DDGREEN )+listLOC[ i ][ 0 ]; }
		}
		return TXT;
	}

	return "Ошибка. Обратитесь в прокуратуру.";
}
void Dispatcher( Critter& player, uint answerI, string& answerS ) // Координатор меню.
{
	ShortRec( player, "MENU_CHOICE", answerI );

	int storage = 		player.Param[ MENU_STORAGE ];
	uint8 branch = 		MenuChoice( storage, 0, "MENU_BRANCH", false );
	uint8 depth = 		MenuChoice( storage, 0, "MENU_DEPTH", false );
	uint8 count = 		MenuChoice( storage, 0, "MENU_COUNT", false );

	bool BACK = 		( answerI == count-1 );
	if( depth == 0 )	{ BACK = false; }
	if( BACK )			{ depth--; ShortRec( player, "MENU_DEPTH", depth ); }

	uint8 menumark_1 = 	MenuChoice( storage, 0, "MENU_MENUMARK_1", false );
	uint8 menumark_2 = 	MenuChoice( storage, 0, "MENU_MENUMARK_2", false );

	//player.Say( SAY_NETMSG, "dpt: "+depth +" - answerI: "+answerI +"/"+count );

	if( branch == 0 )
	{
		if( depth == 0 )
		{
			if( BACK ) { CP_BASIC( player ); return; }																	// Рекурсия.
			if( answerI == 0 ) { MenuSTORAGE( player, answerI, "" ); }													// Склад			- Меню.
			if( answerI == 1 ) { MenuInputMaker( player, "InputID", "ID" ); return; }									// Доступ по ID		- Логика.
			if( answerI == 2 ) { MenuMUSIC( player, answerI, "" ); }													// Музыка			- Меню.
			if( answerI == 3 ) { MenuSOUND( player, answerI, "" ); }													// Звуки			- Меню.
			if( answerI == 4 ) { MenuSOUND2( player, answerI, "" ); }													// Звуки2			- Меню.
			if( answerI == 5 ) { MenuWEATHER( player, answerI, "" ); }													// Погода			- Меню.
			if( answerI == 6 ) { 																						//Включить косто-ГМку
				player.ParamBase[ MERC_MASTER_ID ] = 0; 
				return;
			}												
			ShortRec( player, "MENU_MENUMARK_1", answerI );
			ShortRec( player, "MENU_DEPTH", depth+1 );
			return;
		}

		if( menumark_1 == 0 )
		{
			if( depth == 1 ) { Storage( player, answerI, "" ); return; }												// Склад			- Логика.
		}
		if( menumark_1 == 2 )
		{
			if( depth == 1 ) { AudioMusic( player, answerI, "" ); return; }												// Музыка			- Логика.
		}
		if( menumark_1 == 3 )
		{
			if( depth == 1 ) { AudioSound( player, answerI, "" ); return; }												// Звуки			- Логика.
		}
		if( menumark_1 == 4 )
		{
			if( depth == 1 ) { AudioSound2( player, answerI, "" ); return; }											// Звуки2			- Логика.
		}
		if( menumark_1 == 5 )
		{
			if( depth == 1 ) { Rain( player, answerI, "" ); return; }													// Погода			- Логика.
		}
	}
	if( branch == 1 )
	{
		Critter@ targetCr = GetCritter( player.Param[ TARGETID ] );
		if( targetCr is null ) { return; }

		if( depth == 0 )
		{
			if( BACK ) { CP_CRITTER( player, targetCr ); return; }														// Рекурсия.
			if( answerI == 0 ) { MenuSITUATION( player, answerI, "" ); }												// Ситуации			- Меню.
			if( answerI == 1 ) { ShowContainer( player, targetCr, TRANSFER_FAR_CRIT ); return; }					// Инвентарь.
			if( answerI == 2 ) { WarpNAVIGATION( player, answerI, "" ); }												// Варп				- Меню.
			if( answerI == 3 ) { MenuPARAM( player ); }																	// Параметры		- Меню.
			if( answerI == 4 ) { MenuCHARACTER( player, answerI, "" ); }												// Персонаж/НПЦ		- Меню.
			ShortRec( player, "MENU_MENUMARK_1", answerI );
			ShortRec( player, "MENU_DEPTH", depth+1 );
			return;
		}

		if( menumark_1 == 0 )
		{
			if( depth == 1 )
			{
				if( BACK ) { MenuSITUATION( player, answerI, "" ); return; }											// Ситуации			- Возврат.
				if( answerI == 0 ) { MenuInputMaker( player, "InputEXPERIENCE", "Начислить" ); return; }				// Опыт				- Меню.
				if( answerI == 1 ) { MenuInputMaker( player, "InputSKILLPOINTS", "Начислить" ); return; }				// Баллы навыков	- Меню.
				if( answerI == 2 ) { MenuInputMaker( player, "InputKARMA", "Начислить" ); return; }						// Карма			- Меню.
				if( answerI == 3 ) { MenuInputMaker( player, "InputHP", "Выставить" ); return; }						// Здоровье			- Меню.
				if( answerI == 4 ) { MenuInputMaker( player, "InputKNOCK", "- ОД" ); return; }							// Отключка			- Меню.
				if( answerI == 5 ) { MenuInputMaker( player, "InputDARK", "Секунды" ); return; }						// Пелена			- Меню.
				if( answerI == 6 ) { MenuDAMAGES( player, answerI, "" ); }												// Травмы			- Меню.
				if( answerI == 7 ) { MenuDEATH( player, answerI, "" ); }												// Изничтожить		- Меню.
				if( answerI == 8 ) { MenuHEAL( player, answerI, "" ); }													// Исцелить			- Меню.
				ShortRec( player, "MENU_MENUMARK_2", answerI );
				ShortRec( player, "MENU_DEPTH", depth+1 );
				return;
			}

			if( menumark_2 == 6 ) { ChangeDAMAGES( player, answerI, "" ); return; }										// Травмы			- Логика.
			if( menumark_2 == 7 ) { ChangeDEATH( player, answerI, "" ); return; }										// Изничтожить		- Логика.
			if( menumark_2 == 8 ) { ChangeHEAL( player, answerI, "" ); return; }										// Исцелить			- Логика.
		}
		if( menumark_1 == 2 )
		{
			if( depth == 1 ) { ProcessorNAVIGATION( player, answerI, "" ); return; }									// Варп				- Логика.
		}
		if( menumark_1 == 3 )
		{
			if( depth == 1 )
			{
				if( BACK ) { MenuPARAM( player ); return; }																// Параметры		- Возврат.
				if( answerI == 0 ) { MenuSPECIAL( player, answerI, "" ); }												// SPECIAL			- Меню.
				if( answerI == 1 ) { MenuCombatSKILLS( player, answerI, "" ); }											// Боевые навыки	- Меню.
				if( answerI == 2 ) { MenuDifferentSKILLS( player, answerI, "" ); }										// Разные навыки	- Меню.
				if( answerI == 3 ) { PageReset( player ); MenuPERK( player, answerI, "" ); }							// Перки			- Меню.
				if( answerI == 4 ) { PageReset( player ); MenuTRAIT( player, answerI, "" ); }							// Трейты			- Меню.
				if( answerI == 5 ) { MenuMODES( player, answerI, "" ); }												// Режимы			- Меню.
				ShortRec( player, "MENU_MENUMARK_2", answerI );
				ShortRec( player, "MENU_DEPTH", depth+1 );
				return;
			}

			if( menumark_2 == 0 ) { MenuInputMaker( player, "InputSPECIAL", "Начислить" ); return; }					// SPECIAL			- Логика.
			if( menumark_2 == 1 ) { MenuInputMaker( player, "InputCombatSKILLS", "Выставить" ); return; }				// Боевые навыки	- Логика.
			if( menumark_2 == 2 ) { MenuInputMaker( player, "InputDifferentSKILLS", "Выставить" ); return; }			// Разные навыки	- Логика.
			if( menumark_2 == 3 ) { ProcessorPERK( player, answerI, "" ); return; }										// Перки			- Логика.
			if( menumark_2 == 4 ) { ProcessorTRAIT( player, answerI, "" ); return; }									// Трейты			- Логика.
			if( menumark_2 == 5 ) { ChangeMODES( player, answerI, "" ); return; }										// Режимы			- Логика.
		}
		if( menumark_1 == 4 )
		{
			if( depth == 1 )
			{
				if( BACK ) { MenuCHARACTER( player, answerI, "" ); return; }											// Персонаж/НПЦ		- Возврат.
				if( targetCr.IsPlayer() )
				{
					if( answerI == 0 ) { MenuBODY( player, answerI, "" ); }												// Тело				- Меню.
					if( answerI == 1 ) { MenuFACTIONS( player, answerI, "" ); return; }									// Фракции			- ?
					if( answerI == 2 ) { MenuGAMEMODE( player, answerI, "" ); }											// Игровой режим	- Меню.
					if( answerI == 3 ) { ChangeVISION( player, answerI, "" ); return; }									// Всевидение		- Логика.
					if( answerI == 4 ) { MenuSINF( player, answerI, "" ); }												// SINF				- Меню.
				}
				else
				{
					if( answerI == 0 ) { MenuST_AI_ID( player, answerI, "" ); }											// NPC ИИ			- Меню.
					if( answerI == 1 ) { MenuInputMaker( player, "InputMERC_MASTER_ID", "ID Хозяина" ); return; }		// NPC Хозяин		- Логика.
					if( answerI == 2 ) { MenuInputMaker( player, "InputST_TEAM_ID", "ID Команды" ); return; }			// NPC Команда		- Логика.
					if( answerI == 3 ) { MenuInputMaker( player, "InputST_DIALOG_ID", "ID Диалога" ); return; }			// NPC Диалог		- Логика.
					if( answerI == 4 ) { MenuInputMaker( player, "InputST_NPC_ROLE", "Выставить" ); return; }			// NPC Роль			- Логика.
				}
				ShortRec( player, "MENU_MENUMARK_2", answerI );
				ShortRec( player, "MENU_DEPTH", depth+1 );
				return;
			}

			if( targetCr.IsPlayer() )
			{
				if( menumark_2 == 0 ) { ChangeBODY( player, answerI, "" ); return; }									// Тело				- Логика.
				if( menumark_2 == 2 ) { ChangeGAMEMODE( player, answerI, "" ); return; }								// Игровой режим	- Логика.
				if( menumark_2 == 4 ) { ChangeSINF( player, answerI, "" ); return; }									// SINF				- Логика.
			}
			else
			{
				if( menumark_2 == 0 ) { ChangeST_AI_ID( player, answerI, "" ); return; }								// NPC ИИ			- Логика.
			}
		}
	}
	if( branch == 2 )
	{
		Item@ item = GetItem( player.Param[ TARGETID ] );
		if( item is null ) { return; }

		if( depth == 0 )
		{
			if( BACK ) { CP_ITEM( player, item ); return; }																// Рекурсия.
			if( answerI == 0 ) { MenuVALS( player, answerI, "" ); }														// Переменные		- Меню.
			if( answerI == 1 ) { MenuITEMFLAGS( player, answerI, "" ); }												// Флаги			- Меню.
			if( answerI == 2 ) { MenuSCRIPT( player, answerI, "" ); }													// Назначить скрипт	- Меню.
			ShortRec( player, "MENU_MENUMARK_1", answerI );
			ShortRec( player, "MENU_DEPTH", depth+1 );
			return;
		}

		if( menumark_1 == 0 )
		{
			if( depth == 1 ) { MenuInputMaker( player, "ChangeVALS", "Выставить" ); return; }							// Переменные		- Логика.
		}
		if( menumark_1 == 1 )
		{
			if( depth == 1 ) { ChangeITEMFLAGS( player, answerI, "" ); return; }										// Флаги			- Логика.
		}
		if( menumark_1 == 2 )
		{
			if( depth == 1 ) { ChangeScriptDoor( player, answerI, "" ); return; }										// Назначить скрипт	- Логика.
		}
	}
}



// ####################################################################################################
// #                                               MENU                                               #
// ####################################################################################################

void unsafe_CONTROL_PANEL( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ param4 )
{
	player.ParamBase[ MENU_STORAGE ] = 0;

	if( param2 == 0 )
	{
		CP_BASIC( player );
		return;
	}
	if( param2 == 1 )
	{
		Critter@ targetCr = GetCritter( param0 );
		if( targetCr is null ) { return; }
		CP_CRITTER( player, targetCr );
		return;
	}
	if( param2 == 2 )
	{
		Item@ item = GetItem( param0 );
		if( item is null ) { return; }
		CP_ITEM( player, item );
		return;
	}
	if( param2 == 3 )
	{
		CP_HEX( player );
		return;
	}
}

void CP_HEX( Critter& player )
{
	ShortRec( player, "MENU_BRANCH", 3 );
	string[] list = { "Телепорты", "Склады", "Мобо-спауны", "Монстро-спауны", "Обновить спауны", "Всевиденье", "Музыка", "Дождь", "Инфовидение", "Открыть контейнер №", "debug mode" };
	MenuMaker( player, list, MenuInfo( player, TYPE_MAP ), "Dispatcher" );
}



// ####################################################################################################
// #                                            Main Menu                                             #
// ####################################################################################################

void CP_BASIC( Critter& player )
{
	ShortRec( player, "MENU_BRANCH", 0 );
	string[] list = { "Склад", "Доступ по ID", "Музыка", "Звуки", "Музыка экшен", "Погода", "Косто-ГМка" };
	MenuMaker( player, list, MenuInfo( player, TYPE_NONE ), "Dispatcher" );
}

// ================================================== Склад ==================================================

void MenuSTORAGE( Critter& player, uint answerI, string& answerS )
{
	string[] list = { "Социальное", "Инструменты", "Медицина", "Нямка", "Хлам", "Одежда", "Взрывчатка", "Патроны", "Оружие", "*Сортировка*", "<<< Назад" };
	ShortRec( player, "MENU_COUNT", list.length() );
	MenuMaker( player, list, "Тип предметов:", "Dispatcher" );
}

void Storage( Critter& player, uint answerI, string& answerS )
{
	if( answerI == NUMBER_CHESTS ) { CleanStorage( player, answerI ); return; }

	Map@ map = GetMapByPid( MAP_HELL, 0 );
	uint16 x = 0, y = 0;
	map.GetEntireCoords( answerI+1, 0, x, y );
	Item@ Cont = map.GetItem( x, y, 245 );
	CheckItems( Cont, answerI );
	ShowContainer( player, Cont, TRANSFER_FAR_CONT );
	player.ParamBase[ ST_LAST_CONT_ID ] = Cont.Id;
}
void CheckItems( Item& cont, uint type )
{
	Item@ item;
	for( int8 i = 0, l = listStorage[ type ].length()-1; l >= i; l-- )
	{
		@ item = cont.GetItem( listStorage[ type ][ l ], 0 );
		if( !valid( item ) )
		{
			@ item = cont.AddItem( listStorage[ type ][ l ], 1, 0 );
			if( item.IsStackable() ) { item.SetCount( 50 ); }
		}
		if( item.IsStackable() && item.GetCount() < 10 ) { item.SetCount( 50 ); }
	}
}
void CleanStorage( Critter& player, uint count )
{
	Map@ map = GetMapByPid( MAP_HELL, 0 );
	uint16 x = 0, y = 0;
	Item@ cont;
	Item@ item;
	Item@[] all;
	for( uint i = 0; i < count; i++ )
	{
		map.GetEntireCoords( i+1, 0, x, y );
		@ cont = map.GetItem( x, y, 245 );
		cont.GetItems( uint( -1 ), all );
		DeleteItems( all );
		for( int ii = 0, ll = int( listStorage[ i ].length()-1 ); ll >= ii; ll-- )
		{
			@ item = cont.AddItem( listStorage[ i ][ ll ], 1, 0 );
			if( item.IsStackable() ) { item.SetCount( 50 ); }
		}
	}
	MenuSTORAGE( player, 0, "" );
	// cont.Update();
}
uint[][] listStorage =
{
    {   // Социальное

    },{ // Инструменты

    },{ // Медицина

    },{ // Нямка

    },{ // Хлам

    },{ // Одежда

    },{ // Взрывчатка

    },{ // Патроны

    },{ // Оружие

    }
};

// ================================================== Доступ по ID ==================================================

void InputID( Critter& player, uint answerI, string& answerS )
{
	Critter@ targetCr;
	if( answerS.length() > 0 )
	{
		int ID = 0;
		StrToInt( answerS, ID );
		@ targetCr = GetCritter( ID );
		if( !valid( targetCr ) ) { return; }
		player.ParamBase[ MENU_STORAGE ] = 0;
		CP_CRITTER( player, targetCr );
	}
	else { Dispatcher( player, answerI, "" ); }
}

// ================================================== Музыка ==================================================

void MenuMUSIC( Critter& player, uint answerI, string& answerS )
{
	string[] list = 	{   "*ВЫКЛЮЧИТЬ*",
							"2:08 Friend Of Ours",
							"3:36 Alternate Ending",
							"2:01 An Apple",
							"1:17 Cops & Cobblers",
							"2:09 Enemy of State",
							"0:49 For Better",
							"0:54 Fresh Meat",
							"1:10 Red Dragon",
							"3:44 Splintered Past",
							"0:58 Hot Food Hop",
							"1:29 The Works",
							"2:27 Trials",
							"2:59 Whiskey Heat",
							"<<< Назад"
						};
	ShortRec( player, "MENU_COUNT", list.length() );
	MenuMaker( player, list, "Проиграть:", "Dispatcher" );
}
void AudioMusic( Critter& player, uint answerI, string& answerS )
{
	string[] playlist = {   "None.ogg",
							"A_Friend_Of_Ours.ogg",
							"Alternate_Ending.ogg",
							"An_Apple_And_A_Tree.ogg",
							"Cops_And_Cobblers.ogg",
							"Enemy_Of_The_State.ogg",
							"For_Better_For_Worse.ogg",
							"Fresh_Meat.ogg",
							"Red_Dragon.ogg",
							"Splintered_Past.ogg",
							"The_Hot_Food_Hop.ogg",
							"The_Works.ogg",
							"Trials_And_Tribulations.ogg",
							"Whiskey_Heat.ogg"
						};
	Map@ map = player.GetMap();
	PlayMusic( map, playlist[ answerI ], 1, 0 );
	MenuMUSIC( player, answerI, "" );
}

// ================================================== Звуки ==================================================

void MenuSOUND( Critter& player, uint answerI, string& answerS )
{
	string[] list = 	{   "2:47 Бар",
							"3:10 Блюз",
							"2:32 Твист",
							"3:59 Вегас",
							"3:13 Империя",
							"2:05 Терминатор",
							"4:15 Охотники",
							"1:38 Черепашки",
							"3:10 Параноид",
							"1:17 Кошмар",
							"2:28 Ад",
							"1:22 Буря",
							"3:44 TNT AC/DC",
						    "0:03 Бензопила",
							"<<< Назад"
						};
	string WARNING = UINTColor( COLOR_LRED )+"\n\n!!!НАЛОЖЕНИЕ ВМЕСТО ЗАМЕНЫ!!!";
	ShortRec( player, "MENU_COUNT", list.length() );
	MenuMaker( player, list, "Проиграть:"+WARNING, "Dispatcher" );
}
void AudioSound( Critter& player, uint answerI, string& answerS )
{
	string[] playlist = {   "javabar.ogg",
							"darksideblues.ogg",
							"twistagain.ogg",
							"waytovegas.ogg",
							"imperialmarch0.ogg",
							"terminator2.ogg",
							"ghostbusters.ogg",
							"tmnt.ogg",
							"paranoid.ogg",
							"trip_bad1.ogg",
							"under_2.ogg",
							"vet_2.ogg",
							"tnt.ogg",
							"saw.ogg"
						};
	Map@ map = player.GetMap();
	PlayMusic( map, "None.ogg", 1, 0 );
	map.PlaySound( playlist[ answerI ] );
	MenuSOUND( player, answerI, "" );
}

// ================================================== Звуки ==================================================

void MenuSOUND2( Critter& player, uint answerI, string& answerS )
{
	string[] list = 	{   "5:11 Drums_of_Battle",
							"5:29 The_Swarm",
							"5:50 The_Rain_of_Steel",
							"5:10 Strength_in_Unity",
							"4:29 Surrounded",
							"5:05 Always_Victorious",
							"5:20 Against_the_Odds",
							"2:50 Бой HoMM1",
							"2:40 Бой HoMM2",
						    "2:23 Бой HoMM3",
							"3:15 Бой HoMM4",
							"3:49 EyeoftheTiger",
							"3:40 NoRetreatNoSurrender",
							"4:32 WeFightforLove",
							"<<< Назад"
						};
	string WARNING = UINTColor( COLOR_LRED )+"\n\n!!!НАЛОЖЕНИЕ ВМЕСТО ЗАМЕНЫ!!!";
	ShortRec( player, "MENU_COUNT", list.length() );
	MenuMaker( player, list, "Проиграть:"+WARNING, "Dispatcher" );
}
void AudioSound2( Critter& player, uint answerI, string& answerS )
{
	string[] playlist = {   "F1_Drums_of_Battle.ogg",
							"F2_The_Swarm.ogg",
							"F3_The_Rain_of_Steel.ogg",
							"F4_Strength_in_Unity.ogg",
							"F5_Surrounded.ogg",
							"F6_Always_Victorious.ogg",
							"F7_Against_the_Odds.ogg",
							"Combat_01_HoMM_III.ogg",
							"Combat_02_HoMM_III.ogg",
							"Combat_03_HoMM_III.ogg",
							"Combat_04_HoMM_III.ogg",
							"EyeoftheTiger.ogg",
							"NoRetreatNoSurrender.ogg",
							"WeFightforLove.ogg"
						};
	Map@ map = player.GetMap();
	PlayMusic( map, "None.ogg", 1, 0 );
	map.PlaySound( playlist[ answerI ] );
	MenuSOUND2( player, answerI, "" );
}

// ================================================== Погода ==================================================

void MenuWEATHER( Critter& player, uint answerI, string& answerS )
{
	string[] list = { "Нет", "Грибной", "Моросит", "Дождь", "Ливень", "Гроза", "<<< Назад" };
	ShortRec( player, "MENU_COUNT", list.length() );
	MenuMaker( player, list, "Погода:", "Dispatcher" );
}

void Rain( Critter& player, uint answerI, string& answerS )
{
	Map@ map = player.GetMap();
	uint[] Rain = { 0, 50, 100, 150, 200, 255 };
	string[] listSound = { "None.ogg", "rain_1.ogg", "rain_1.ogg", "Storm_1R.ogg", "Storm_1R.ogg", "Groza_1.ogg" };

	const uint[] RainmapPids =
	{
		10, 12, 14, 16, 18, 20, 22, 24, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 69, 73, //Перфекшен
		103, 107, 109, 111, 113, 115, 123, 126, 128, 130, 133, 135, 137, 139, 141, 143, 146, 148, 151, 153, 155, 157, 159, 172, 174, 176, 178, 180, 183, 196 // Ривердейл
	};

	for( uint i = 0; i < RainmapPids.length(); i++ )
	{
		@ map = GetMapByPid( RainmapPids[ i ], 0 );
		if( map is null ) { continue; }

		map.SetRain( Rain[ answerI ] );
		map.PlaySound( listSound[ answerI ] );
	}
	MenuWEATHER( player, answerI, "" );
}



// ####################################################################################################
// #                                           Critter Menu                                           #
// ####################################################################################################

void CP_CRITTER( Critter& player, Critter& targetCr )
{
	ShortRec( player, "MENU_BRANCH", 1 );
	player.ParamBase[ TARGETID ] = targetCr.Id;
	targetCr.ParamBase[ TARGETID ] = player.Id;

	string pilot = targetCr.IsPlayer() ? "Персонаж" : "НПЦ";
	string[] list = { "Ситуации", "Инвентарь", "Варп прыжок", "Параметры", pilot };
	MenuMaker( player, list, MenuInfo( targetCr, TYPE_CRITTER ), "Dispatcher" );
}

// ================================================== Ситуации ==================================================

void MenuSITUATION( Critter& player, uint answerI, string& answerS )
{
	Critter@ targetCr = GetCritter( player.Param[ TARGETID ] );
	if( targetCr is null ) { return; }

	string[] list = { "Опыт", "Баллы навыков", "Карма", "Здоровье", "Кнокаут", "Мрак", "Травмы", "Изничтожить", "Исцелить", "<<< Назад" };
	ShortRec( player, "MENU_COUNT", list.length() );
	MenuMaker( player, list, MenuInfo( targetCr, TYPE_CRITTER_NEEDS ), "Dispatcher" );
}

// -------------------------------------------------- Опыт --------------------------------------------------

void InputEXPERIENCE( Critter& player, uint answerI, string& answerS )
{
	Critter@ targetCr = GetCritter( player.Param[ TARGETID ] );
	if( targetCr is null ) { return; }

	InputApply( player, targetCr, ST_EXPERIENCE, answerS, true );
	MenuSITUATION( player, answerI, "" );
}

// -------------------------------------------------- Баллы навыков --------------------------------------------------

void InputSKILLPOINTS( Critter& player, uint answerI, string& answerS )
{
	Critter@ targetCr = GetCritter( player.Param[ TARGETID ] );
	if( targetCr is null ) { return; }

	InputApply( player, targetCr, ST_UNSPENT_SKILL_POINTS, answerS, true );
	MenuSITUATION( player, answerI, "" );
}

// -------------------------------------------------- Карма --------------------------------------------------

void InputKARMA( Critter& player, uint answerI, string& answerS )
{
	Critter@ targetCr = GetCritter( player.Param[ TARGETID ] );
	if( targetCr is null ) { return; }

	InputApply( player, targetCr, ST_KARMA, answerS, true );
	MenuSITUATION( player, answerI, "" );
}

// -------------------------------------------------- Здоровье --------------------------------------------------

void InputHP( Critter& player, uint answerI, string& answerS )
{
	Critter@ targetCr = GetCritter( player.Param[ TARGETID ] );
	if( targetCr is null ) { return; }

	InputApply( player, targetCr, ST_CURRENT_HP, answerS, false );
	MenuSITUATION( player, answerI, "" );
}

// -------------------------------------------------- Отключка --------------------------------------------------

void InputKNOCK( Critter& player, uint answerI, string& answerS )
{
	Critter@ targetCr = GetCritter( player.Param[ TARGETID ] );
	if( targetCr is null ) { return; }

	if( answerS.length() > 0 )
	{
		int number = 0;
		StrToInt( answerS, number );
		if( !targetCr.IsDead() ) { targetCr.ToKnockout( KNOCKOUT_ANIM2_DEFAULT( ( Random( 0, 1 ) == 0 ) ), number, targetCr.HexX, targetCr.HexY ); }
	}
	MenuSITUATION( player, answerI, "" );
}

// -------------------------------------------------- Пелена --------------------------------------------------

void InputDARK( Critter& player, uint answerI, string& answerS )
{
	Critter@ targetCr = GetCritter( player.Param[ TARGETID ] );
	if( targetCr is null ) { return; }

	if( answerS.length() > 0 )
	{
		int number = 0;
		StrToInt( answerS, number );
		FlushScreen( targetCr, COLOR_BLACK, COLOR_BLACK, number*1000 );
	}
	MenuSITUATION( player, answerI, "" );
}

// -------------------------------------------------- Травмы --------------------------------------------------

void MenuDAMAGES( Critter& player, uint answerI, string& answerS )
{
	Critter@ targetCr = GetCritter( player.Param[ TARGETID ] );
	if( targetCr is null ) { return; }

	string[] list = { "Травма глаз",    "Правая рука",    "Левая рука",    "Правая нога",    "Левая нога" };
	int[] listX =   {    DAMAGE_EYE, DAMAGE_RIGHT_ARM, DAMAGE_LEFT_ARM, DAMAGE_RIGHT_LEG, DAMAGE_LEFT_LEG };
	uint8[] listV = {    CH_ST_BOOL,       CH_ST_BOOL,      CH_ST_BOOL,       CH_ST_BOOL,      CH_ST_BOOL };
	string[] listfix = StatusMaker( player, targetCr, list, listX, listV );
	listfix.insertLast( "<<< Назад" );
	ShortRec( player, "MENU_COUNT", listfix.length() );
	MenuMaker( player, listfix, "Ломай меня полностью!", "Dispatcher" );
}

void ChangeDAMAGES( Critter& player, uint answerI, string& answerS )
{
	Critter@ targetCr = GetCritter( player.Param[ TARGETID ] );
	if( targetCr is null ) { return; }

	int[] listX = { DAMAGE_EYE, DAMAGE_RIGHT_ARM, DAMAGE_LEFT_ARM, DAMAGE_RIGHT_LEG, DAMAGE_LEFT_LEG };
	if( targetCr.DamageBase[ listX[ answerI ] ] == 0 ) { targetCr.DamageBase[ listX[ answerI ] ] = 1; } else { targetCr.DamageBase[ listX[ answerI ] ] = 0; }

	MenuDAMAGES( player, answerI, "" );
}

// -------------------------------------------------- Изничтожить --------------------------------------------------

void MenuDEATH( Critter& player, uint answerI, string& answerS )
{
	string[] list = { "Инфаркт", "Вырвать бок", "Разрыв очередью", "Очередью", "Электрошок", "В порошок", "Поделить на два", "В соплю", "На куски", "Поджарить", "Танец огня", "<<< Назад" };
	ShortRec( player, "MENU_COUNT", list.length() );
	MenuMaker( player, list, "Карать жалкое смертное:", "Dispatcher" );
}

void ChangeDEATH( Critter& player, uint answerI, string& answerS )
{
	Critter@ targetCr = GetCritter( player.Param[ TARGETID ] );
	if( targetCr is null ) { return; }

	uint16 deadType = ( answerI == 0 ) ? ( Random( 0, 1 ) == 0 ? ANIM2_DEAD_FRONT : ANIM2_DEAD_BACK ) : ( answerI + ANIM2_DEAD_BLOODY_SINGLE-1 );
	targetCr.ToDead( deadType, null );
}

// -------------------------------------------------- Исцелить --------------------------------------------------

void MenuHEAL( Critter& player, uint answerI, string& answerS )
{
	string[] list = { "Воскресить", "Восполнить ОЗ", "Травмы", "Вред. эффекты", "Ранения", "Привыкания", "Полное лечение", "<<< Назад" };
	ShortRec( player, "MENU_COUNT", list.length() );
	MenuMaker( player, list, "Стимулировать разные члены тела:", "Dispatcher" );
}

void ChangeHEAL( Critter& player, uint answerI, string& answerS )
{
	Critter@ targetCr = GetCritter( player.Param[ TARGETID ] );
	if( targetCr is null ) { return; }

	uint8 Alles = 7;
	if( answerI == 0 || answerI == Alles )
	{
		if( targetCr.IsDead() )
		{
			targetCr.ToLife();
			targetCr.ToKnockout( KNOCKOUT_ANIM2_DEFAULT( Random( 0, 1 ) == 0 ? true : false ), 10, targetCr.HexX, targetCr.HexY );
		}
	}
	if( answerI == 1 || answerI == Alles )
	{
		targetCr.ParamBase[ ST_CURRENT_HP ] = targetCr.Param[ ST_MAX_LIFE ];
	}
	if( answerI == 2 || answerI == Alles )
	{
		for( uint16 i = DAMAGE_BEGIN; i <= DAMAGE_END; i++ ) { targetCr.DamageBase[ i ] = 0; }
	}
	if( answerI == 3 || answerI == Alles )
	{
		targetCr.ParamBase[ ST_POISONING_LEVEL ] = 0;							// Отравление.
		targetCr.ParamBase[ ST_RADIATION_LEVEL ] = 0;							// Облучение.
		ChangeStatus( targetCr, CR_STATUS_BLOOD_TOXIC, 0, false );				// Сепсис.
	}
	if( answerI == 4 || answerI == Alles )
	{
		targetCr.ParamBase[ BP_BLOOD_LOSS ] = 0;								// Потеря крови.
		targetCr.ParamBase[ ST_BLEED ] = 0;										// Кровотечение.
		ChangeStatus( targetCr, CR_STATUS_BULLET_OVER, 0, false );				// Пулевое ранение.
		ChangeStatus( targetCr, CR_STATUS_HEAVY_DMG, 0, false );				// Тяжёлое рарение.
		ChangeStatus( targetCr, CR_STATUS_BLEED, 0, false );					// Кровотечение.
	}
	if( answerI == 5 || answerI == Alles )
	{
		for( uint16 i = ADDICTION_BEGIN; i <= ADDICTION_END; i++ ) { targetCr.ParamBase[ i ] = 0; }
	}

	ChangeCritterSpeed( targetCr );

	MenuHEAL( targetCr, answerI, "" );
}

// ================================================== Варп прыжок ==================================================

void WarpNAVIGATION( Critter& player, uint answerI, string& answerS )
{
	Critter@ targetCr = GetCritter( player.Param[ TARGETID ] );
	if( targetCr is null ) { return; }

	int pages = player.Param[ MENU_PAGE ];
	uint8 page = BitUnpacker( pages, INDEX( NUM_MENU_PAGE ), BIT_MENU_PAGE );
	uint8 size = listMAPS[ page ].length();

	Location@ loc;
	uint16 locPID =  0;
	Map@ map;
	uint8 mapIndex = 0;
	uint8 CMP = 0;
	string cancer;
	player.ShowScreen( SCREEN_DIALOGBOX, size+3, "Dispatcher" );
	player.Say( SAY_DIALOGBOX_TEXT, MenuInfo( targetCr, TYPE_LOC_NAVIGATION ) );
	for( uint8 i = 0; i < size; i++ )
	{
		locPID = listMAPSX[ page ][ ( i * 4 ) + 0 ];
		@ loc = GetLocationByPid( locPID, 0 );
		if( loc is null ) { Log( "Локация отсутствует!" ); return; }
		mapIndex = listMAPSX[ page ][ ( i * 4 ) + 1 ];
		@ map = loc.GetMapByIndex( mapIndex );
		if( map is null ) { Log( "Карта отсутствует!" ); return; }
		CMP = CountMapPlayers( map );
		cancer = CMP > 0 ? "["+CMP+"] " : "";
		player.Say( SAY_DIALOGBOX_BUTTON( i ), Centering( cancer+listMAPS[ page ][ i ] ) );
		CMP = 0;
	}
	player.Say( SAY_DIALOGBOX_BUTTON( size ), Centering( " Конец >" ) );
	player.Say( SAY_DIALOGBOX_BUTTON( size+1 ), Centering( "< Начало" ) );
	player.Say( SAY_DIALOGBOX_BUTTON( size+2 ), Centering( "<<< Назад" ) );
	player.Say( SAY_DIALOGBOX_BUTTON( size+3 ), Centering( "Отмена" ) );
	ShortRec( player, "MENU_COUNT", size+3 );
}

void ProcessorNAVIGATION( Critter& player, uint answerI, string& answerS )
{
	Critter@ targetCr = GetCritter( player.Param[ TARGETID ] );
	if( targetCr is null ) { return; }

	int pages = player.Param[ MENU_PAGE ];
	uint8 page = BitUnpacker( pages, INDEX( NUM_MENU_PAGE ), BIT_MENU_PAGE );
	uint8 count = MenuChoice( player.Param[ MENU_STORAGE ], 0, "MENU_COUNT", false );
	uint8 size = count-4;

	if( answerI < count - 3 )
	{
		WarpPoint( player, answerI, "" );
		return;
	}
	if( answerI == count - 3 )
	{
		if( page+1 >= listMAPSX.length() ) { WarpNAVIGATION( player, answerI, "" ); return; }
		player.ParamBase[ MENU_PAGE ] = BitPacker( page+1, pages, INDEX( NUM_MENU_PAGE ), BIT_MENU_PAGE );
	}
	if( answerI == count - 2 )
	{
		if( page-1 < 0 ) { WarpNAVIGATION( player, answerI, "" ); return; }
		player.ParamBase[ MENU_PAGE ] = BitPacker( page-1, pages, INDEX( NUM_MENU_PAGE ), BIT_MENU_PAGE );
	}
	WarpNAVIGATION( player, answerI, "" );
}
void WarpPoint( Critter& player, uint answerI, string& answerS )
{
	Critter@ targetCr = GetCritter( player.Param[ TARGETID ] );
	if( targetCr is null ) { return; }

	int pages = player.Param[ MENU_PAGE ];
	uint8 page = BitUnpacker( pages, INDEX( NUM_MENU_PAGE ), BIT_MENU_PAGE );

	uint16 locPID =   listMAPSX[ page ][ ( answerI * 4 ) + 0 ];
	uint8  mapIndex = listMAPSX[ page ][ ( answerI * 4 ) + 1 ];
	uint16 hexX =     listMAPSX[ page ][ ( answerI * 4 ) + 2 ];
	uint16 hexY =     listMAPSX[ page ][ ( answerI * 4 ) + 3 ];

	int[] pointers = { hexX, hexY, locPID, mapIndex };
	Warp( targetCr, pointers, true );
}
void Warp( Critter& targetCr, int[] @ pointer, bool longjump )
{
	if( !longjump ) { targetCr.TransitToHex( pointer[ 0 ], pointer[ 1 ], targetCr.Dir ); return; }

	Location@ loc = GetLocationByPid( def( pointer[ 2 ], targetCr.GetMap().Id ), 0 );
	if( !valid( loc ) ) { Log( "Локация отсутствует!" ); return; }

	Map@ map = loc.GetMapByIndex( pointer[ 3 ] );
	if( !valid( map ) ) { Log( "Карта отсутствует!" ); return; }

	targetCr.SetWorldPos( loc.WorldX, loc.WorldY );
	targetCr.TransitToMap( map.Id, pointer[ 0 ], pointer[ 1 ], 6, true );
}

// ================================================== Параметры ==================================================

void MenuPARAM( Critter& player )
{
	Critter@ targetCr = GetCritter( player.Param[ TARGETID ] );
	if( targetCr is null ) { return; }

	string[] list = { "SPECIAL", "Боевые навыки", "Разные навыки", "Бонусы", "Особенности", "Режимы", "<<< Назад" };
	ShortRec( player, "MENU_COUNT", list.length() );
	MenuMaker( player, list, MenuInfo( targetCr, TYPE_CRITTER_PARAM ), "Dispatcher" );
}

// -------------------------------------------------- SPECIAL --------------------------------------------------

void MenuSPECIAL( Critter& player, uint answerI, string& answerS )
{
	Critter@ targetCr = GetCritter( player.Param[ TARGETID ] );
	if( targetCr is null ) { return; }

	string[] list = {      "Сила",  "Восприятие", "Выносливость",   "Обаяние",  "Интеллект",  "Ловкость",     "Удача" };
	int[] listX =   { ST_STRENGTH, ST_PERCEPTION,   ST_ENDURANCE, ST_CHARISMA, ST_INTELLECT,  ST_AGILITY,     ST_LUCK };
	uint8[] listV =   { CH_ST_COUNT,   CH_ST_COUNT,    CH_ST_COUNT, CH_ST_COUNT,  CH_ST_COUNT, CH_ST_COUNT, CH_ST_COUNT };
	string[] listfix = StatusMaker( player, targetCr, list, listX, listV );
	listfix.insertLast( "<<< Назад" );
	ShortRec( player, "MENU_COUNT", listfix.length() );
	MenuMaker( player, listfix, MenuInfo( targetCr, TYPE_CRITTER_PARAM ), "Dispatcher" );
}

void InputSPECIAL( Critter& player, uint answerI, string& answerS )
{
	Critter@ targetCr = GetCritter( player.Param[ TARGETID ] );
	if( targetCr is null ) { return; }

	InputApply( player, targetCr, MenuChoice( player.Param[ MENU_STORAGE ], 0, "MENU_CHOICE", false ), answerS, true );
	MenuSPECIAL( player, answerI, "" );
}

// -------------------------------------------------- Боевые навыки --------------------------------------------------

void MenuCombatSKILLS( Critter& player, uint answerI, string& answerS )
{
	Critter@ targetCr = GetCritter( player.Param[ TARGETID ] );
	if( targetCr is null ) { return; }

	string[] list = {  "Стрелковое",   "Крупное",    "Энергооружие", "Рукопашня",       "Холодное",   "Метание" };
	int[] listX =   { SK_SMALL_GUNS, SK_BIG_GUNS, SK_ENERGY_WEAPONS,  SK_UNARMED, SK_MELEE_WEAPONS, SK_THROWING };
	uint8[] listV = {   CH_ST_COUNT, CH_ST_COUNT,       CH_ST_COUNT, CH_ST_COUNT,      CH_ST_COUNT, CH_ST_COUNT };
	string[] listfix = StatusMaker( player, targetCr, list, listX, listV );
	listfix.insertLast( "<<< Назад" );
	ShortRec( player, "MENU_COUNT", listfix.length() );
	MenuMaker( player, listfix, MenuInfo( targetCr, TYPE_CRITTER_COMBAT ), "Dispatcher" );
}

void InputCombatSKILLS( Critter& player, uint answerI, string& answerS )
{
	Critter@ targetCr = GetCritter( player.Param[ TARGETID ] );
	if( targetCr is null ) { return; }

	InputApply( player, targetCr, MenuChoice( player.Param[ MENU_STORAGE ], 0, "MENU_CHOICE", false ) + 200, answerS, false );
	MenuCombatSKILLS( player, answerI, "" );
}

// -------------------------------------------------- Разные навыки --------------------------------------------------

void MenuDifferentSKILLS( Critter& player, uint answerI, string& answerS )
{
	Critter@ targetCr = GetCritter( player.Param[ TARGETID ] );
	if( targetCr is null ) { return; }

	string[] list = {     "Санитар",    "Доктор", "Скрытность", "Взлом замков", "Воровство",   "Ловушки",     "Наука",    "Техника", "Красноречие",  "Торговля", "Шулерство",    "Выживание" };
	int[] listX =   { SK_FIRST_AID,   SK_DOCTOR,     SK_SNEAK,    SK_LOCKPICK,    SK_STEAL,    SK_TRAPS,  SK_SCIENCE,    SK_REPAIR,     SK_SPEECH,   SK_BARTER, SK_GAMBLING, SK_OUTDOORSMAN };
	uint8[] listV = {  CH_ST_COUNT, CH_ST_COUNT,  CH_ST_COUNT,    CH_ST_COUNT, CH_ST_COUNT, CH_ST_COUNT, CH_ST_COUNT,  CH_ST_COUNT,   CH_ST_COUNT, CH_ST_COUNT, CH_ST_COUNT,    CH_ST_COUNT };
	string[] listfix = StatusMaker( player, targetCr, list, listX, listV );
	listfix.insertLast( "<<< Назад" );
	ShortRec( player, "MENU_COUNT", listfix.length() );
	MenuMaker( player, listfix, MenuInfo( targetCr, TYPE_CRITTER_DIFFERENT ), "Dispatcher" );
}

void InputDifferentSKILLS( Critter& player, uint answerI, string& answerS )
{
	Critter@ targetCr = GetCritter( player.Param[ TARGETID ] );
	if( targetCr is null ) { return; }

	InputApply( player, targetCr, MenuChoice( player.Param[ MENU_STORAGE ], 0, "MENU_CHOICE", false ) + 206, answerS, false );
	MenuDifferentSKILLS( player, answerI, "" );
}

// -------------------------------------------------- Бонусы --------------------------------------------------

void MenuPERK( Critter& player, uint answerI, string& answerS )
{
	Critter@ targetCr = GetCritter( player.Param[ TARGETID ] );
	if( targetCr is null ) { return; }

	int pages = player.Param[ MENU_PAGE ];
	uint8 page = BitUnpacker( pages, INDEX( NUM_MENU_PAGE ), BIT_MENU_PAGE );
	uint8 sign = BitUnpacker( pages, INDEX( NUM_MENU_SIGN ), BIT_MENU_SIGN );
	uint16 begin = PERK_BEGIN + ( page * 10 );
	uint16 end = CLAMP( begin+10, PERK_BEGIN, PERK_END );
	uint8 size = end - begin;

	player.ShowScreen( SCREEN_DIALOGBOX, size+5, "Dispatcher" );
	player.Say( SAY_DIALOGBOX_TEXT, "Страница: "+( page + 1 ) );
	for( uint16 i = 0; i < size; i++ ) { player.SayMsg( SAY_DIALOGBOX_BUTTON( i ), TEXTMSG_GAME, ( 10000 + begin + i ) * 10 + 1 ); }
	player.Say( SAY_DIALOGBOX_BUTTON( size ), Centering( "*Вывести список*" ) );
	player.Say( SAY_DIALOGBOX_BUTTON( size+1 ), Centering( sign == 0 ? "Действие: - - -" : "Действие: +++" ) );
	player.Say( SAY_DIALOGBOX_BUTTON( size+2 ), Centering( " Конец >" ) );
	player.Say( SAY_DIALOGBOX_BUTTON( size+3 ), Centering( "< Начало" ) );
	player.Say( SAY_DIALOGBOX_BUTTON( size+4 ), Centering( "<<< Назад" ) );
	player.Say( SAY_DIALOGBOX_BUTTON( size+5 ), Centering( "Отмена" ) );
	ShortRec( player, "MENU_COUNT", size+5 );
}

void ProcessorPERK( Critter& player, uint answerI, string& answerS )
{
	Critter@ targetCr = GetCritter( player.Param[ TARGETID ] );
	if( targetCr is null ) { return; }

	int pages = player.Param[ MENU_PAGE ];
	uint8 page = BitUnpacker( pages, INDEX( NUM_MENU_PAGE ), BIT_MENU_PAGE );
	int8 sign = BitUnpacker( pages, INDEX( NUM_MENU_SIGN ), BIT_MENU_SIGN );
	uint8 count = MenuChoice( player.Param[ MENU_STORAGE ], 0, "MENU_COUNT", false );

	uint16 begin = PERK_BEGIN + ( page * 10 );
	uint16 end = CLAMP( begin+10, PERK_BEGIN, PERK_END+1 );
	uint8 size = end - begin;

	if( answerI < count - 5 )
	{
		uint16 perk = begin + answerI;
		if( sign == 0 )
		{
			if( targetCr.ParamBase[ perk ] > 0 )
			{
				targetCr.ParamBase[ perk ]--;
				player.Say( SAY_NETMSG, UINTColor( COLOR_WHITE )+"Уменьшен перк ["+perk+"] ("+targetCr.Param[ perk ]+")"+" у игрока "+targetCr.Id );
			}
			else { player.Say( SAY_NETMSG, UINTColor( COLOR_WHITE )+"Перк отсутствует." ); }
		}
		else
		{
			targetCr.ParamBase[ perk ]++;
			player.Say( SAY_NETMSG, UINTColor( COLOR_WHITE )+"Увеличен перк ["+perk+"] ("+targetCr.Param[ perk ]+")"" у игрока "+targetCr.Id );
		}
	}
	if( answerI == count - 5 )
	{
		player.Say( SAY_NETMSG, UINTColor( COLOR_WHITE )+"------------ Список перков ------------" );
		for( uint16 i = PERK_BEGIN; i <= PERK_END+1; i++ )
		{
			if( targetCr.Param[ i ] != 0 ) { player.SayMsg( SAY_NETMSG, TEXTMSG_GAME, ( 10000 + i ) * 10 + 1 ); }
		}
		player.Say( SAY_NETMSG, UINTColor( COLOR_WHITE )+"--------------------------------------" );
	}
	if( answerI == count - 4 )
	{
		sign = sign == 0 ? 1 : 0;
		player.ParamBase[ MENU_PAGE ] = BitPacker( sign, pages, INDEX( NUM_MENU_SIGN ), BIT_MENU_SIGN );
	}
	if( answerI == count - 3 )
	{
		if( begin + size >= PERK_END ) { MenuPERK( player, answerI, "" ); return; }
		player.ParamBase[ MENU_PAGE ] = BitPacker( page+1, pages, INDEX( NUM_MENU_PAGE ), BIT_MENU_PAGE );
	}
	if( answerI == count - 2 )
	{
		if( page - 1 < 0 ) { MenuPERK( player, answerI, "" ); return; }
		player.ParamBase[ MENU_PAGE ] = BitPacker( page-1, pages, INDEX( NUM_MENU_PAGE ), BIT_MENU_PAGE );
	}
	MenuPERK( player, answerI, "" );
}

// -------------------------------------------------- Особенности --------------------------------------------------

void MenuTRAIT( Critter& player, uint answerI, string& answerS )
{
	Critter@ targetCr = GetCritter( player.Param[ TARGETID ] );
	if( targetCr is null ) { return; }

	int pages = player.Param[ MENU_PAGE ];
	uint8 page = BitUnpacker( pages, INDEX( NUM_MENU_PAGE ), BIT_MENU_PAGE );
	uint8 sign = BitUnpacker( pages, INDEX( NUM_MENU_SIGN ), BIT_MENU_SIGN );
	uint16 begin = TRAIT_BEGIN + ( page * 10 );
	uint16 end = CLAMP( begin+10, TRAIT_BEGIN, TRAIT_END+1 );
	uint8 size = end - begin;

	player.ShowScreen( SCREEN_DIALOGBOX, size+5, "Dispatcher" );
	player.Say( SAY_DIALOGBOX_TEXT, "Страница: "+( page + 1 ) );
	for( uint16 i = 0; i < size; i++ ) { player.SayMsg( SAY_DIALOGBOX_BUTTON( i ), TEXTMSG_GAME, ( 10000 + begin + i ) * 10 + 1 ); }
	player.Say( SAY_DIALOGBOX_BUTTON( size ), Centering( "*Вывести список*" ) );
	player.Say( SAY_DIALOGBOX_BUTTON( size+1 ), Centering( sign == 0 ? "Действие: - - -" : "Действие: +++" ) );
	player.Say( SAY_DIALOGBOX_BUTTON( size+2 ), Centering( " Конец >" ) );
	player.Say( SAY_DIALOGBOX_BUTTON( size+3 ), Centering( "< Начало" ) );
	player.Say( SAY_DIALOGBOX_BUTTON( size+4 ), Centering( "<<< Назад" ) );
	player.Say( SAY_DIALOGBOX_BUTTON( size+5 ), Centering( "Отмена" ) );
	ShortRec( player, "MENU_COUNT", size+5 );
}

void ProcessorTRAIT( Critter& player, uint answerI, string& answerS )
{
	Critter@ targetCr = GetCritter( player.Param[ TARGETID ] );
	if( targetCr is null ) { return; }

	int pages = player.Param[ MENU_PAGE ];
	uint8 page = BitUnpacker( pages, INDEX( NUM_MENU_PAGE ), BIT_MENU_PAGE );
	int8 sign = BitUnpacker( pages, INDEX( NUM_MENU_SIGN ), BIT_MENU_SIGN );
	uint8 count = MenuChoice( player.Param[ MENU_STORAGE ], 0, "MENU_COUNT", false );

	uint16 begin = TRAIT_BEGIN + ( page * 10 );
	uint16 end = CLAMP( begin+10, TRAIT_BEGIN, TRAIT_END+1 );
	uint8 size = end - begin;

	if( answerI < count - 5 )
	{
		uint16 trait = begin + answerI;
		if( sign == 0 )
		{
			if( targetCr.ParamBase[ trait ] > 0 )
			{
				targetCr.ParamBase[ trait ]--;
				player.Say( SAY_NETMSG, UINTColor( COLOR_WHITE )+"Удалён трейт ["+trait+"] ("+targetCr.Param[ trait ]+")"+" у игрока "+targetCr.Id );
			}
			else { player.Say( SAY_NETMSG, UINTColor( COLOR_WHITE )+"Трейт отсутствует." ); }
		}
		else
		{
			if( targetCr.ParamBase[ trait ] <= 0 )
			{
				targetCr.ParamBase[ trait ]++;
				player.Say( SAY_NETMSG, UINTColor( COLOR_WHITE )+"Добавлен трейт ["+trait+"] ("+targetCr.Param[ trait ]+")"" у игрока "+targetCr.Id );
			}
			else { player.Say( SAY_NETMSG, UINTColor( COLOR_WHITE )+"Трейт уже имеется." ); }
		}
	}
	if( answerI == count - 5 )
	{
		player.Say( SAY_NETMSG, UINTColor( COLOR_WHITE )+"----------- Список трейтов ------------" );
		for( uint16 i = TRAIT_BEGIN; i <= TRAIT_END; i++ )
		{
			if( targetCr.Param[ i ] != 0 ) { player.SayMsg( SAY_NETMSG, TEXTMSG_GAME, ( 10000 + i ) * 10 + 1 ); }
		}
		player.Say( SAY_NETMSG, UINTColor( COLOR_WHITE )+"--------------------------------------" );
	}
	if( answerI == count - 4 )
	{
		sign = sign == 0 ? 1 : 0;
		player.ParamBase[ MENU_PAGE ] = BitPacker( sign, pages, INDEX( NUM_MENU_SIGN ), BIT_MENU_SIGN );
	}
	if( answerI == count - 3 )
	{
		if( begin + size >= TRAIT_END ) { MenuTRAIT( player, answerI, "" ); return; }
		player.ParamBase[ MENU_PAGE ] = BitPacker( page+1, pages, INDEX( NUM_MENU_PAGE ), BIT_MENU_PAGE );
	}
	if( answerI == count - 2 )
	{
		if( page - 1 < 0 ) { MenuTRAIT( player, answerI, "" ); return; }
		player.ParamBase[ MENU_PAGE ] = BitPacker( page-1, pages, INDEX( NUM_MENU_PAGE ), BIT_MENU_PAGE );
	}
	MenuTRAIT( player, answerI, "" );
}

// -------------------------------------------------- Режимы --------------------------------------------------

void MenuMODES( Critter& player, uint answerI, string& answerS )
{
	Critter@ targetCr = GetCritter( player.Param[ TARGETID ] );
	if( targetCr is null ) { return; }

	string[] list = {    "Неуязвимость", "Несбиваемость", "Непихаемость", "Неворуемость", "Нелутаемость",         "Нет травм",           "Патроны",     "NoPVP",  "Нет бега",     "Стоять" };
	int[] listX =   { MODE_INVULNERABLE,   MODE_NO_KNOCK,   MODE_NO_PUSH,  MODE_NO_STEAL,   MODE_NO_LOOT, MODE_NO_LOOSE_LIMBS, MODE_UNLIMITED_AMMO, MODE_NO_PVP, MODE_NO_RUN, MODE_NO_WALK };
	uint8[] listV = {        CH_ST_BOOL,      CH_ST_BOOL,     CH_ST_BOOL,     CH_ST_BOOL,     CH_ST_BOOL,          CH_ST_BOOL,          CH_ST_BOOL,  CH_ST_BOOL,  CH_ST_BOOL,   CH_ST_BOOL };
	if( targetCr.IsNpc() )
	{
		string[] listNPC = { "Не говорит",     "Только наличные",   "Не торгует",   "Забывает врагов" };
		int[] listXNPC =   { MODE_NO_TALK, MODE_BARTER_ONLY_CASH, MODE_NO_BARTER, MODE_NO_ENEMY_STACK };
		uint8[] listVNPC = {   CH_ST_BOOL,            CH_ST_BOOL,     CH_ST_BOOL,          CH_ST_BOOL };
		for( uint8 i = 0, l = listNPC.length(); i < l; i++ )
		{
			list.insertLast( listNPC[ i ] );
			listX.insertLast( listXNPC[ i ] );
			listV.insertLast( listVNPC[ i ] );
		}
	}
	string[] listfix = StatusMaker( player, targetCr, list, listX, listV );
	listfix.insertLast( "<<< Назад" );
	ShortRec( player, "MENU_COUNT", listfix.length() );
	MenuMaker( player, listfix, MenuInfo( targetCr, TYPE_CRITTER_PARAM ), "Dispatcher" );
}

void ChangeMODES( Critter& player, uint answerI, string& answerS )
{
	Critter@ targetCr = GetCritter( player.Param[ TARGETID ] );
	if( targetCr is null ) { return; }

	int[] listX = { MODE_INVULNERABLE, MODE_NO_KNOCK, MODE_NO_PUSH, MODE_NO_STEAL, MODE_NO_LOOT, MODE_NO_LOOSE_LIMBS, MODE_UNLIMITED_AMMO, MODE_NO_PVP, MODE_NO_RUN, MODE_NO_WALK, MODE_NO_TALK, MODE_BARTER_ONLY_CASH, MODE_NO_BARTER, MODE_NO_ENEMY_STACK, MODE_NO_HOME };
	if( targetCr.ModeBase[ listX[ answerI ] ] == 0 ) { targetCr.ModeBase[ listX[ answerI ] ] = 1; } else { targetCr.ModeBase[ listX[ answerI ] ] = 0; }

	MenuMODES( player, answerI, "" );
}

// ================================================== Персонаж/НПЦ ==================================================

void MenuCHARACTER( Critter& player, uint answerI, string& answerS )
{
	Critter@ targetCr = GetCritter( player.Param[ TARGETID ] );
	if( targetCr is null ) { return; }

	string[] list = {};
	if( targetCr.IsPlayer() )
	{
		string vision = targetCr.Param[ QST_VISION ] == 0 ? "- " : "+ ";
		string[] listMODE = { "* Ошибка *", "* Душа *", "* Блатной *", "* Обычный *", "* Зверь *", "* Подопытный *" };
		string[] listPlayer = { "Тело", "Фракции", listMODE[ targetCr.ParamBase[ QST_GAMEMODE ] + 1 ], vision+"Всевидение", "Инфовидение", "<<< Назад" };
		for( uint8 i = 0, l = listPlayer.length(); i < l; i++ ) { list.insertLast( listPlayer[ i ] ); }
	}
	else
	{
		string[] listNPC = { "Поведение", "Хозяин", "Команда", "Диалог", "NPC ROLE", "<<< Назад" };
		for( uint8 i = 0, l = listNPC.length(); i < l; i++ ) { list.insertLast( listNPC[ i ] ); }
	}

	ShortRec( player, "MENU_COUNT", list.length() );
	MenuMaker( player, list, MenuInfo( targetCr, TYPE_CRITTER ), "Dispatcher" );
}

// -------------------------------------------------- Тело --------------------------------------------------

void MenuBODY( Critter& player, uint answerI, string& answerS )
{
	Critter@ targetCr = GetCritter( player.Param[ TARGETID ] );
	if( targetCr is null ) { return; }

	string[] list = {   "Возраст" };
	int[] listX =   {      ST_AGE };
	uint8[] listV = { CH_ST_COUNT };
	string[] listfix = StatusMaker( player, targetCr, list, listX, listV );

	string[][] genderlist =   { { "Мальчик",  "Парень", "Мужчина",  "Старик" },
								{ "Девочка", "Девушка", "Женщина", "Старуха" },
								{     "Оно",     "Оно",     "Оно",     "Оно" } };
	int[] barlist =             {         0,        16,        30,        40 };
	listfix.insertLast( Dictkeys( player.Param[ ST_AGE ], genderlist[ player.Param[ ST_GENDER ] ], barlist ) );
	listfix.insertLast( "<<< Назад" );
	ShortRec( player, "MENU_COUNT", listfix.length() );
	MenuMaker( player, listfix, MenuInfo( targetCr, TYPE_CRITTER ), "Dispatcher" );
}

void ChangeBODY( Critter& player, uint answerI, string& answerS )
{
	Critter@ targetCr = GetCritter( player.Param[ TARGETID ] );
	if( targetCr is null ) { return; }

	if( answerI == 0 ) { MenuInputMaker( player, "InputAGE", "Возраст" ); return; }
	if( answerI == 1 ) { ChangeGender( player, answerI, "" ); return; }
}
void InputAGE( Critter& player, uint answerI, string& answerS )
{
	Critter@ targetCr = GetCritter( player.Param[ TARGETID ] );
	if( targetCr is null ) { return; }

	InputApply( player, targetCr, ST_AGE, answerS, false );
	MenuBODY( player, answerI, "" );
}
void ChangeGender( Critter& player, uint answerI, string& answerS )
{
	Critter@ targetCr = GetCritter( player.Param[ TARGETID ] );
	if( targetCr is null ) { return; }

	if( targetCr.Param[ ST_GENDER ] == 0 ) { targetCr.ParamBase[ ST_GENDER ] = 1; } else { targetCr.ParamBase[ ST_GENDER ] = 0; }
	MenuBODY( player, answerI, "" );
}

// -------------------------------------------------- Фракции --------------------------------------------------

void MenuFACTIONS( Critter& player, uint answerI, string& answerS )
{
	player.Say( SAY_NETMSG, UINTColor( COLOR_LRED )+"Здесь могла бы быть ваша реклама." );
	MenuCHARACTER( player, answerI, "" );
}

// -------------------------------------------------- Игровой режим --------------------------------------------------

void MenuGAMEMODE( Critter& player, uint answerI, string& answerS )
{
	Critter@ targetCr = GetCritter( player.Param[ TARGETID ] );
	if( targetCr is null ) { return; }

	string[] list = { "Душа", "Блатной", "Обычный", "Зверь", "Подопытный", "<<< Назад" };
	ShortRec( player, "MENU_COUNT", list.length() );
	MenuMaker( player, list, MenuInfo( targetCr, TYPE_CRITTER ), "Dispatcher" );
}

void ChangeGAMEMODE( Critter& player, uint answerI, string& answerS )
{
	Critter@ targetCr = GetCritter( player.Param[ TARGETID ] );
	if( targetCr is null ) { return; }

	targetCr.ParamBase[ QST_GAMEMODE ] = answerI;
	string[] list = { "Душа", "Блатной", "Обычный", "Зверь", "Подопытный" };
	player.Say( SAY_NETMSG, UINTColor( COLOR_WHITE )+"Режим игры: "+list[ answerI ] );
	MenuGAMEMODE( player, answerI, "" );
}

// -------------------------------------------------- Всевидение --------------------------------------------------

void ChangeVISION( Critter& player, uint answerI, string& answerS )
{
	Critter@ targetCr = GetCritter( player.Param[ TARGETID ] );
	if( targetCr is null ) { return; }

	targetCr.ParamBase[ QST_VISION ] = ( targetCr.Param[ QST_VISION ] == 0 ? 250 : 0 );
	MenuCHARACTER( player, answerI, "" );
}

// -------------------------------------------------- Инфовидение --------------------------------------------------

void MenuSINF( Critter& player, uint answerI, string& answerS )
{
	Critter@ targetCr = GetCritter( player.Param[ TARGETID ] );
	if( targetCr is null ) { return; }

	string[] list =    { "Логины игроков", "ID в описании", "ID над головой",     "ID в чате", "ID итемов в чате", "Координаты гекса",   "Сообщения аркад", "Спрайты курсора" };
	int[] listX =      {      ITEM_HIDDEN,       ITEM_FLAT,    ITEM_NO_BLOCK, ITEM_SHOOT_THRU,    ITEM_LIGHT_THRU,     ITEM_MULTI_HEX, ITEM_WALL_TRANS_END,    ITEM_TWO_HANDS };
	string[] listfix = {};
	for( uint8 i = 0, l = listX.length(); i < l; i++ ) { listfix.insertLast( ( FLAG( targetCr.Param[ CR_SINF_MODE ], listX[ i ] ) ? "+" : "-" ) + " " + list[ i ] ); }
	listfix.insertLast( "<<< Назад" );
	ShortRec( player, "MENU_COUNT", listfix.length() );
	MenuMaker( player, listfix, "Настройки для котят.\nМии-и-иу! ^_^", "Dispatcher" );
}

void ChangeSINF( Critter& player, uint answerI, string& answerS )
{
	Critter@ targetCr = GetCritter( player.Param[ TARGETID ] );
	if( targetCr is null ) { return; }

	int[] listX = {      ITEM_HIDDEN,       ITEM_FLAT,    ITEM_NO_BLOCK, ITEM_SHOOT_THRU,    ITEM_LIGHT_THRU,     ITEM_MULTI_HEX, ITEM_WALL_TRANS_END,    ITEM_TWO_HANDS };
	int Smode = targetCr.Param[ CR_SINF_MODE ];
	if( FLAG( Smode, listX[ answerI ] ) ) { UNSETFLAG( Smode, listX[ answerI ] ); } else { SETFLAG( Smode, listX[ answerI ] ); }
	targetCr.ParamBase[ CR_SINF_MODE ] = Smode;
	targetCr.RunClientScript( "client_main@_sinf", Smode, 0, 0, null, null );
	MenuSINF( player, answerI, "" );
}



// ================================================== НПЦ ==================================================



// -------------------------------------------------- Поведение --------------------------------------------------

void MenuST_AI_ID( Critter& player, uint answerI, string& answerS )
{
	Critter@ targetCr = GetCritter( player.Param[ TARGETID ] );
	if( targetCr is null ) { return; }
	string[] list = { "Контроль", "Болванка", "Манекен", "Монстр", "Рейдер", "Охрана", "Мутант", "Респавн", "Зерг раш", "<<< Назад" };
	ShortRec( player, "MENU_COUNT", list.length() );
	MenuMaker( player, list, MenuInfo( targetCr, TYPE_CRITTER ), "Dispatcher" );
}

void ChangeST_AI_ID( Critter& player, uint answerI, string& answerS )
{
	Critter@ targetCr = GetCritter( player.Param[ TARGETID ] );
	if( targetCr is null ) { return; }

	targetCr.ParamBase[ MERC_TYPE ] = MenuChoice( player.Param[ MENU_STORAGE ], 0, "MENU_CHOICE", false );
	MenuST_AI_ID( player, answerI, "" );
}

// -------------------------------------------------- ID Хозяина --------------------------------------------------

void InputMERC_MASTER_ID( Critter& player, uint answerI, string& answerS )
{
	Critter@ targetCr = GetCritter( player.Param[ TARGETID ] );
	if( targetCr is null ) { return; }

	InputApply( player, targetCr, MERC_MASTER_ID, answerS, false );
	MenuCHARACTER( player, answerI, "" );
}

// -------------------------------------------------- ID Команды --------------------------------------------------

void InputST_TEAM_ID( Critter& player, uint answerI, string& answerS )
{
	Critter@ targetCr = GetCritter( player.Param[ TARGETID ] );
	if( targetCr is null ) { return; }

	InputApply( player, targetCr, ST_TEAM_ID, answerS, false );
	MenuCHARACTER( player, answerI, "" );
}

// -------------------------------------------------- ID Диалога --------------------------------------------------

void InputST_DIALOG_ID( Critter& player, uint answerI, string& answerS )
{
	Critter@ targetCr = GetCritter( player.Param[ TARGETID ] );
	if( targetCr is null ) { return; }

	InputApply( player, targetCr, ST_DIALOG_ID, answerS, false );
	MenuCHARACTER( player, answerI, "" );
}

// -------------------------------------------------- NPC_ROLE --------------------------------------------------

void InputST_NPC_ROLE( Critter& player, uint answerI, string& answerS )
{
	Critter@ targetCr = GetCritter( player.Param[ TARGETID ] );
	if( targetCr is null ) { return; }

	InputApply( player, targetCr, ST_NPC_ROLE, answerS, false );
	MenuCHARACTER( player, answerI, "" );
}

// -------------------------------------------------- ХХХ --------------------------------------------------



// ####################################################################################################
// #                                            Item Menu                                             #
// ####################################################################################################

void CP_ITEM( Critter& player, Item& item )
{
	ShortRec( player, "MENU_BRANCH", 2 );
	player.ParamBase[ TARGETID ] = item.Id;

	string[] list = { "Переменные", "Флаги", "Назначить скрипт" };
	MenuMaker( player, list, MenuInfo( player, TYPE_ITEM ), "Dispatcher" );
}

// ================================================== Переменные ==================================================

void MenuVALS( Critter& player, uint answerI, string& answerS )
{
	Item@ item = GetItem( player.Param[ TARGETID ] );
	if( item is null ) { return; }

	string[] list = { item.Val0+" Val0", item.Val1+" Val1", item.Val2+" Val2", item.Val3+" Val3", item.Val4+" Val4", item.Val5+" Val5", item.Val6+" Val6", item.Val7+" Val7", item.Val8+" Val8", item.Val9+" Val9", "<<< Назад" };
	ShortRec( player, "MENU_COUNT", list.length() );
	MenuMaker( player, list, MenuInfo( player, TYPE_ITEM ), "Dispatcher" );
}

void ChangeVALS( Critter& player, uint answerI, string& answerS )
{
	Item@ item = GetItem( player.Param[ TARGETID ] );
	if( item is null ) { return; }

	if( answerS.length() > 0 )
	{
		int number = 0;
		StrToInt( answerS, number );
		switch( MenuChoice( player.Param[ MENU_STORAGE ], 0, "MENU_CHOICE", false ) )
		{
			case 0: item.Val0 = number; break;
			case 1: item.Val1 = number; break;
			case 2: item.Val2 = number; break;
			case 3: item.Val3 = number; break;
			case 4: item.Val4 = number; break;
			case 5: item.Val5 = number; break;
			case 6: item.Val6 = number; break;
			case 7: item.Val7 = number; break;
			case 8: item.Val8 = number; break;
			case 9: item.Val9 = number; break;
		}
	}
	MenuVALS( player, answerI, "" );
}

// ================================================== Флаги ==================================================

void MenuITEMFLAGS( Critter& player, uint answerI, string& answerS )
{
	Item@ item = GetItem( player.Param[ TARGETID ] );
	if( item is null ) { return; }

	int[] listMask = { ITEM_CAN_PICKUP,   ITEM_CAN_USE, ITEM_NO_HIGHLIGHT, ITEM_NO_BLOCK, ITEM_SHOOT_THRU,    ITEM_FLAT, ITEM_LIGHT_THRU,       ITEM_LIGHT, ITEM_NO_LIGHT_INFLUENCE };
	string[] list =  {   "Подбираемый", "Используемый",     "Нет обводки",  "Проходимый",      "Прострел",    "Плоский",  "Не блок свет", "Источник света",           "Игнор света" };
	uint8[] listV =  {         CH_BOOL,        CH_BOOL,           CH_BOOL,       CH_BOOL,         CH_BOOL,      CH_BOOL,         CH_BOOL,          CH_BOOL,                 CH_BOOL };
	int[] listX = {};
	for( uint i = 0, l = list.length(); i < l; i++ ) { listX.insertLast( FLAG( item.Flags, listMask[ i ] ) == true ? 1 : 0 ); }
	string[] listfix = StatusMaker( player, null, list, listX, listV );
	listfix.insertLast( "<<< Назад" );
	ShortRec( player, "MENU_COUNT", listfix.length() );
	MenuMaker( player, listfix, MenuInfo( player, TYPE_ITEM ), "Dispatcher" );
}

void ChangeITEMFLAGS( Critter& player, uint answerI, string& answerS )
{
	Item@ item = GetItem( player.Param[ TARGETID ] );
	if( item is null ) { return; }

	int[] listX = { ITEM_CAN_PICKUP, ITEM_CAN_USE, ITEM_NO_HIGHLIGHT, ITEM_NO_BLOCK, ITEM_SHOOT_THRU, ITEM_FLAT, ITEM_LIGHT_THRU, ITEM_LIGHT, ITEM_NO_LIGHT_INFLUENCE };
	if( FLAG( item.Flags, listX[ answerI ] ) ) { UNSETFLAG( item.Flags, listX[ answerI ] ); } else { SETFLAG( item.Flags, listX[ answerI ] ); }
	item.Update();

	MenuITEMFLAGS( player, answerI, "" );
}

// -------------------------------------------------- Назначить скрипт --------------------------------------------------

void MenuSCRIPT( Critter& player, uint answerI, string& answerS )
{
	Item@ item = GetItem( player.Param[ TARGETID ] );
	if( item is null ) { return; }

	string[] list = { "Автозакрытие", "<<< Назад" };
	ShortRec( player, "MENU_COUNT", list.length() );
	MenuMaker( player, list, MenuInfo( player, TYPE_ITEM ), "Dispatcher" );
}

import bool ScriptDoor( Item& door ) from "item";
void ChangeScriptDoor( Critter& player, uint answerI, string& answerS )
{
	Item@ item = GetItem( player.Param[ TARGETID ] );
	if( item is null ) { return; }
	if( item.GetType() != ITEM_TYPE_DOOR && item.GetType() != ITEM_TYPE_CONTAINER ) { player.Say( SAY_NETMSG, UINTColor( COLOR_LRED )+"Только для дверей и контейнеров." ); return; }

	if( ScriptDoor( item ) ) { player.Say( SAY_NETMSG, UINTColor( COLOR_WHITE )+"Автозакрытие: " + item.Id ); }

	MenuSCRIPT( player, answerI, "" );
}

// -------------------------------------------------- ХХХ --------------------------------------------------






