#ifndef FURNITURE
#define FURNITURE

#include "_utils.fos"
#include "furniture_h.fos"
#include "lockers_h.fos"

import bool critter_use_item( Critter& cr, Item& item, Critter@ targetCr, Item@ targetItem, Scenery@ targetScen, uint param ) from "main";

//import bool FurnitureCheck( Item@ item ) from "furniture";
bool FurnitureCheck( Item@ item )
{
	if( !valid( item ) || isFurniture( item ) ) return false;
	
	InitFurnitures();
	
	ProtoItem@ proto = GetProtoItem( item.GetProtoId() );
	if( !valid( proto ) ) return false;
	
	int pid = furnitures.findPIDbyPic( proto.PicMap );
	if( pid == -1 ) return false;
	
	if( !replacedBy( item, pid ) )
		return false;
	
	item.PicMap = proto.PicMap;
	SETFLAG( item.Flags, ITEM_CAN_USE );
	item.SetScript( "furniture@_InitFurniture" );
	item.Update();
	
	return true;
}

FurnitureList@ furnitures;
void InitFurnitures()
{
	if( valid( furnitures ) ) return;
	//TODO: Нормально проименовать все эти циферки пидов сценери.
	@furnitures = @CreateFurniture( "Единый список мебели")
	//	.add( Furniture( "Имя для скрипта", PID_крафтаемого_объекта, изображения "при повороте" ) )
		.add( Furniture( "Деревянный стул", PID_CR_WOOD_CHAIR ).add(2670).add(2676).add(2663) )
		.add( Furniture( "Удобный стул", PID_CR_CMFRT_CHAIR ).add(2672).add(2677).add(2662) )
		.add( Furniture( "Металлический стул", PID_CR_METAL_CHAIR ).add(2673).add(2674).add(2664) )
		.add( Furniture( "Стул с тканевой обивкой", PID_CR_RAGS_CHAIR ).add(2671).add(2675).add(2665) )
		.add( Furniture( "Спальный мешок", PID_CR_SLP_BAG ).add(2209) )
		.add( Furniture( "Матрас", PID_CR_MTRS ).add(2207) )
		.add( Furniture( "Двойная кровать", PID_CR_BD_DBL_BED ).add(2211) )
		.add( Furniture( "Простенькая кровать'", PID_CR_JNK_BED ).add(2212) )
		.add( Furniture( "Лежак", PID_CR_SUN_BED).add(2949) )
		.add( Furniture( "Удобная кровать", PID_CR_WOOD_BED ).add(2680) )
		.add( Furniture( "Роскошная кровать", PID_CR_LUX_BED ).add(2681) )
		.add( Furniture( "Деревянный стол", PID_CR_WOOD_TBL ) )
		.add( Furniture( "Круглый деревянный стол", PID_CR_WOOD_TBL_GD ) )
		.add( Furniture( "Небольшой металлический стол", PID_CR_MT_TBL_SMALL ) )
		.add( Furniture( "Овальный металлический стол", PID_CR_MT_TBL_OVAL ) )
		.add( Furniture( "Большой металлический стол", PID_CR_MT_TBL_BG ).add(2062).add(2606).add(2608) )
		.add( Furniture( "Большой металлический стол с покрытием", PID_CR_MT_TBL_BG_ALT ).add(2607).add(2609) )
		.add( Furniture( "Металлический рабочий стол", PID_CR_MT_TBL_WR ).add(187) )
		.add( Furniture( "Ржавый рабочий стол", PID_CR_JNK_TBL_WR ).add(184) )
		.add( Furniture( "Большой деревянный стол", PID_CR_WOOD_TBL_DINNER ).add(167) )
		.add( Furniture( "Деревянный рабочий стол", PID_CR_WOOD_TBL_WR ).add(8248) )
		.add( Furniture( "Ящик", PID_CR_BOX ).add(8254).add(368).add(370) )
		.add( Furniture( "Деревянный шкаф", PID_CR_WOOD_CAB_SMALL ).add(63).add(15440) )
		.add( Furniture( "Деревянный полки", PID_CR_WOOD_SHELF ).add(247).add(8260) )
		.add( Furniture( "Шкафчик", PID_CR_JNK_CAB ).add(189).add(8252).add(8253).add(132).add(134).add(133).add(135) )
		.add( Furniture( "Грибная грядка", PID_MUSHBED_EMPTY ).add(1628) )
		.add( Furniture( "Офисное кресло", PID_CR_OF_CHAIR ).add(2053).add(2054).add(2052) )
		.add( Furniture( "Офисное кресло", PID_CR_OF_CHAIR_2 ).add(2057).add(2059).add(2060) )
		.add( Furniture( "Офисное кресло", PID_CR_OF_CHAIR_3 ) .add(16329).add(16330) .add(16328) )
		.add( Furniture( "Кустарный диванчик", PID_CR_JNK_SOFA ).add(2097).add(2098) .add (2099) .add (2100) )
		.add( Furniture( "Ковер", PID_CR_CARPET ).add(2377).add(2378) .add(16505) .add(16506) .add(16507) .add(16508) )
		.add( Furniture( "Сушилка для шкур", PID_CR_CARPET ) )
		.add( Furniture( "Алтарь", PID_CR_ALTAR ).add(4502).add(4503).add(4504) )
		.add( Furniture( "Дикарская подставка", PID_CR_STAND ).add(4506).add(4507).add(4508) )
		.add( Furniture( "Деревянный стол с настольной лампой", PID_CR_WOOD_TBL_LP ).add(3644) )
		.add( Furniture( "Кол", PID_CR_STAKE ).add(3225).add(3226).add(3227) )
		.add( Furniture( "Тачка", PID_CR_CART ).add(4525).add(2368) )
		.add( Furniture( "Мини-холодос", PID_ICE_CHEST_LEFT ).add(PID_ICE_CHEST_RIGHT) )		
		.add( Furniture( "Больше кресло", PID_CR_ARM_CHAIR ).add(2231) )
		.add( Furniture( "Армейская кровать", PID_CR_ARM_BED ) )
		.add( Furniture( "Компостная бочка", PID_SHIT_BAREL_EMPTY ).add( PID_SHIT_BAREL_FULL ).add(2397).add(2396).add(2005).add(2006).add(4599).add(4600).add(2315) )
		.add( Furniture( "Компостная ванна", PID_SHIT_BATH_X_EMPTY ).add( PID_SHIT_BATH2_Y_EMPTY ).add( PID_SHIT_BATH1_X_FULL ).add( PID_SHIT_BATH2_Y_FULL ) )
		.add( Furniture( "Сундук", PID_CR_CHEST ).add(367).add(369) )
		.add( Furniture( "Контейнер", PID_IBOX_O ).add( PID_IBOX_OT ) )
		.add( Furniture( "Контейнер", PID_IBOX_N ).add( PID_IBOX_NT ) )
		.add( Furniture( "Скамья", PID_CR_WOOD_BENCH ).add(2262) )
		.add( Furniture( "Барный Стул", PID_CR_BAR_CHAIR ).add(15278).add(15275).add(15276).add(15279) )
		.add( Furniture( "Табурет", PID_CR_TABOURET ) )
		.add( Furniture( "Баррикада из мешков с песком", PID_SANDBAG_BARRICADE ).add(4780).add(4781).add(4782).add(4783).add(4784).add(4785).add(4786).add(4787).add(4788).add(4789).add(4790).add(4791).add(4792).add(4793).add(4794).add(4795).add(4796).add(4797).add(4798).add(4799) )
		.add( Furniture( "Деревянная баррикада", PID_WOOD_WALL ).add(5112).add(5113).add(23538).add(6955) )    
		
		;
}

class MenuFuriture: CenteredMenuHandler {
	uint m_map_id;
	uint m_target_id;

	MenuFuriture(Map& map, Item& target) {
		m_map_id = map.Id;
		m_target_id = target.Id;
	}

	bool MenuUpdate( Critter& cr, iDialogBox& menu )
	{
		Map@ map = GetMap( m_map_id );
		Item@ furniture = GetItem( m_target_id );
		if( map is null || furniture is null ) {
			return false;
		}
		
		bool isDragging = cr.GetTimeEvents( CTE_FURNITURE_DRAGGING, null, null, null ) > 0;

		if( canSwitchLootability( cr, furniture ) ) {
			if( menu.Button( FLAG( furniture.Flags, ITEM_CAN_PICKUP ) ? "Закрепить" : "Открепить" ) ) {
				if( isDragging ) { 
					StopDragging( cr, furniture ); 
				}
				
				SwitchLootability( cr, furniture );
				return true;
			}
			
		} else {
			if( furniture.LockerId != 0 ) {
				if( menu.Button( FLAG( furniture.LockerCondition, LOCKER_LOCKED ) ? "Отпереть" : "Запереть" ) ) {
					if( !IsKeyAviable( cr, furniture.LockerId ) ) {
						LogCrimeMovement( cr, furniture, "не может без ключа открыть мебель" ); 
						SEM( cr, "У вас нет подходящего ключа." );
						LockerBudge( furniture );
					} else {
						Item@ hand = cr.GetItem( 0, SLOT_HAND1 );
						if( !valid( hand ) ) {
							SYNM( cr, "Возьмите ключ или ключницу в руку." );
						} else {
							critter_use_item( cr, hand, null, furniture, null, 0 );
						}
					}
					return true;
				}
			} else if( menu.Button( "Демонтировать" ) ) {
				if( isDragging ) { 
					StopDragging( cr, furniture );
				}
				
				Item@ hand = cr.GetItem( 0, SLOT_HAND1 );
				critter_use_item( cr, hand, null, furniture, null, 0 );

				return true;
			}			
		}
		
		if( menu.Button( "Повернуть" ) ) {
			Rotate( cr, furniture );
			return true;
		}
		
		if( menu.Button( ( isDragging ? "Перестать" : "Начать" ) + " толкать" ) ) {
			Drag( cr, furniture );	
			return false;
		}
		
		bool canUse = true;
		string text = "";
		if( canPickup( cr, furniture ) ) {
			if( menu.Button( "Поднять" ) ) {
				if( isDragging ) { 
					StopDragging( cr, furniture );
				}
				Pickup( cr, furniture );	
				return false;
			}
		} else if( isContainer( furniture ) ) {
			string action = "";
			bool isChangeble = furniture.Proto.Container_Changeble;
			if( isChangeble ) {
				action = FLAG( furniture.LockerCondition, LOCKER_ISOPEN ) ? "Закрыть" : "Открыть";
			} else {
				action = "Содержимое";
			}
			
			if( menu.Button( action ) ) {
				if( isDragging ) { 
					StopDragging( cr, furniture );
				}
				UseSkillOnLocker( cr, furniture, SKILL_PICK_ON_GROUND );
				Critter@[] critters;
				uint8 crs = map.GetCrittersHex( furniture.HexX, furniture.HexY, 20, FIND_ALL | FIND_ONLY_PLAYERS, critters );
				for( uint8 i = 0, l = critters.length(); i < l; i++ ) { 
					critters[ i ].RunClientScript( "client_main@SoundDoor", critters[ i ].Id, furniture.Id, 0, null, null ); 
				}
				return false;
			}
			
			if( isContainer( furniture ) && menu.Button( "Взломать" ) ) {
				if( isDragging ) { 
					StopDragging( cr, furniture );
				}
				UseSkillOnLocker( cr, furniture, SK_LOCKPICK );	
				return false;
			}
		}
		return true;
	}

	string@ Description(Critter& cr) {
		string info;
		Item@ furniture = GetItem( m_target_id );
		float max_weight = cr.Stat[ ST_CARRY_WEIGHT ] * ContainerBonusWeight( furniture ) * 0.001;
		float cont_weight = ItemsWeight( furniture ) * 0.001;
		
		info += StyledText( "", "Вес: ", cont_weight + " / " + max_weight );
		
		if( cr.Param[ QST_GAMEMODE ] == GAME_TEST ) {
			info += " [" + cr.Stat[ ST_CARRY_WEIGHT ] * 0.001 + " x " + ContainerBonusWeight( furniture ) + "]";
		}
		
		info += "\n";
		
		if( isContainer( furniture ) ) {		
			info += StyledText( "\n", "Объём: ", ContainmentVolume( furniture ) + " / " + furniture.Proto.Container_Volume );
		}
		
		return info;
	}
	
	string@ ButtonCancel() {
        return ButtonDecorator( "Скрыть меню", null );
    }
}

bool StartMenuFuriture( Critter& cr, Item& target)
{
	Map@ map = cr.GetMap();
	if( map is null ) {
		return false;
	}
	
	OpenMenu( cr, "Мебель", MenuFuriture( map, target ) );

	return true;
}

void StopDragging( Critter& cr, Item& item )
{
	item.SetScript( "_InitStopped" );
	cr.Say( SAY_EMOTE_ON_HEAD, "перестаёт толкать" );
	cr.EraseTimeEvents( CTE_FURNITURE_DRAGGING );
	LogItemMovement( cr, item, "перестаёт толкать мебель (" + cr.HexX + ", " + cr.HexY + ")" ); 
}

void _InitFurniture( Item& furniture, bool firstTime )
{
	furniture.SetEvent( ITEM_EVENT_USE, "_Use" );
	furniture.SetEvent( ITEM_EVENT_SKILL, "_Skill" );
}

bool _Use( Item& item, Critter& cr, Critter@ onCritter, Item@ onItem, Scenery@ onScenery )
{
	return false;
}
	
bool _Skill( Item& furniture, Critter& cr, int skill )
{
	switch( skill )
	{
		case( SK_FIRST_AID ): return Drag( cr, furniture );			
		case( SK_TRAPS ): 
			return Rotate( cr, furniture, false );
		case( SK_REPAIR ): return SwitchLootability( cr, furniture );
		case( SKILL_PICK_ON_GROUND ): return StartMenuFuriture( cr, furniture );
		case( SKILL_PUT_CONT ): return FailedAttempt( cr, "Это сюда не влезет." );
	}
	return false;
}

bool FailedAttempt( Critter& cr, string text )
{
	SEM( cr, text );
	return true;
}

bool canPickup( Critter& cr, Item& furniture ) 
{
	bool DoorOrContainer = ( isContainer( furniture ) || furniture.GetType() == ITEM_TYPE_DOOR );
	bool isPickingUp = true;

	if( !isGM(cr) && ( !FLAG( furniture.Flags, ITEM_CAN_PICKUP ) || furniture.Durability > 0 ) )
	{
		if( DoorOrContainer )
			isPickingUp = false;
		else 
			return false;
	}
	
	return isPickingUp;
}

//Должен вернуть false что бы движок поднял предмет обычным путём.
bool Pickup( Critter& cr, Item& furniture ) 
{
	bool DoorOrContainer = ( isContainer( furniture ) || furniture.GetType() == ITEM_TYPE_DOOR );
	bool isPickingUp = true;

	if( !isGM(cr) && ( !FLAG( furniture.Flags, ITEM_CAN_PICKUP ) || furniture.Durability > 0 ) ) {
		if( DoorOrContainer ) {
			isPickingUp = false;
		} else {
			LogItemMovement( cr, furniture, "не может поднять вмонтированную мебель" ); 
			SEM( cr, "Требуется демонтаж." );
			return true;
		}
	}
	
	if( DoorOrContainer && !isPickingUp )
	{
		if( furniture.Proto.Container_Changeble )
		{
			if( FLAG( furniture.LockerCondition, LOCKER_JAMMED ) || FLAG( furniture.LockerCondition, LOCKER_BROKEN ) || FLAG( furniture.LockerCondition, LOCKER_NOOPEN ) )
			{
				LogItemMovement( cr, furniture, "не может поднять запертую мебель" ); 
				SEM( cr, "Из этого ничего не вышло." );
				return true;
			}
			
			if( FLAG( furniture.LockerCondition, LOCKER_ISOPEN ) )
			{
				LogItemMovement( cr, furniture, "закрывает мебель-контейнер" ); 
				furniture.LockerClose();
				return true;
			}
			
			if( FLAG( furniture.LockerCondition, LOCKER_ELECTRO ) ) {
				LogCrimeMovement( cr, furniture, "вводит код электронного для замка мебели" ); 
				cr.RunClientScript( "client_screen_codedoor@ShowScreen", furniture.Id, furniture.Val1, 0, "Введите код", null );
				return true;
			}

			if( FLAG( furniture.LockerCondition, LOCKER_LOCKED ) ) {
				if( !IsKeyAviable( cr, furniture.LockerId ) ) {
					LogCrimeMovement( cr, furniture, "не может без ключа открыть мебель" ); 
					SEM( cr, "Заперто." );
					LockerBudge( furniture );
					return true;
				}
			}
		}
		
		if( !furniture.Proto.Container_Changeble || !FLAG( furniture.LockerCondition, LOCKER_ISOPEN ) ) {
			if( furniture.Proto.Container_Changeble ) {
				furniture.LockerOpen();
			}
			
			ShowContainer( cr, furniture, furniture.Proto.GroundLevel ? TRANSFER_HEX_CONT_DOWN : TRANSFER_HEX_CONT_UP );
			LogItemMovement( cr, furniture, "заглядывает внутрь" ); 
			return true;
		}
		
		SEM( cr, "Что-то пошло не так." );
		LogItemMovement( cr, furniture, "безуспешно взаимодействует с" ); 			
		return true;
	}
	
	if( DoorOrContainer && furniture.Proto.Container_Changeble ) {
		LogItemMovement( cr, furniture, "закрывает мебель" );
		furniture.LockerClose();
	}

	int freeWeight = cr.Stat[ ST_CARRY_WEIGHT ] - ItemsWeight( cr ),
		contWeight = ItemsWeight( furniture );
		
	if( !isGM(cr) && freeWeight < contWeight ) {
		SEM( cr, "Слишком тяжело." );
		LogItemMovement( cr, furniture, "не может поднять тяжёлую мебель" );
		return true;
	}

	if( DoorOrContainer ) {
		UNSETFLAG( furniture.Flags, ITEM_CAN_USE );
	}
	
	MoveItem( furniture, 1, cr );
	LogItemMovement( cr, furniture, "поднимает мебель (" + cr.HexX + ", " + cr.HexY + ")" );
	return true;
}


bool canSwitchLootability( Critter& cr, Item& furniture )
{
	if( !isGM(cr) && furniture.Durability > 0 )
		return false;
	
	return true;
}

//import bool SwitchLootability( Critter& cr, Item& furniture ) from "furniture";
bool SwitchLootability( Critter& cr, Item& furniture )
{
	if( !isGM(cr) && furniture.LockerId != 0 )
	{
		LogCrimeMovement( cr, furniture, "не может сдвинуть мебель, запертую на замок" );
		SEM( cr, "Данный объект так просто не сдвинуть. Сначала снимите замок." );	
		return true;
	}
	
	bool DoorOrContainer = ( isContainer( furniture ) || furniture.GetType() == ITEM_TYPE_DOOR );
	
	string state = "";
	if( !FLAG( furniture.Flags, ITEM_CAN_PICKUP ) ) {
		UNSETFLAG( furniture.Flags, ITEM_CAN_USE );
		SETFLAG( furniture.Flags, ITEM_CAN_PICKUP );
		state = "поднимаем";
	} else {
		SETFLAG( furniture.Flags, ITEM_CAN_USE );
		UNSETFLAG( furniture.Flags, ITEM_CAN_PICKUP );
		state = "неподъёмен";
	}		
	
	SYNM( cr, "Предмет " + state + ". Что бы изменить состояние - используйте ремонт." );	
	LogItemMovement( cr, furniture, "меняет состояние мебели на '" + state + "'" );
	return true;
}

bool Rotate( Critter@ cr, Item& furniture, bool clockwise = true )
{
	InitFurnitures();
	return furnitures.rotate( cr, furniture, clockwise );
}

bool Drag( Critter@ cr, Item& furniture ) //exported
{
	if( cr.IsRuning )
	{
		SYNM( cr, "Персонаж в режиме бега, шагните разок чтобы сбросить режим." );
		return true;
	}
	
	InitFurnitures();
	return furnitures.Drag( cr, furniture );
}

void _InitDragging( Item& item, bool firstTime )
{
	SETFLAG( item.Flags, ITEM_NO_BLOCK );
	item.SetEvent( ITEM_EVENT_WALK, "e_DragMoving" );
	
	_InitFurniture( item, firstTime );
	item.Update();
}

void _InitStopped( Item& item, bool firstTime )
{
	if( !FLAG( item.Flags, ITEM_FLAT ) )
		UNSETFLAG( item.Flags, ITEM_NO_BLOCK );
	else
		SETFLAG( item.Flags, ITEM_NO_BLOCK );

	item.SetEvent( ITEM_EVENT_WALK, null );
	item.HolderCr = 0;
	
	_InitFurniture( item, firstTime );
	item.Update();
}

void e_DragMoving( Item& item, Critter& cr, bool entered, uint8 dir ) 
{
	if( !entered || item.HolderCr != int(cr.Id) ) return;

	Map@ map = cr.GetMap();
	uint16   x = cr.HexX, y = cr.HexY;
	map.MoveHexByDir( x, y, dir, 1 );
	
	if( !map.IsHexPassed( x, y ) )
	{
		map.SetText( item.HexX, item.HexY, COLOR_LGRAY, ":стук:" );
		StopDragging( cr, item );
		return;
	}
	
	DraggingSound( map, item, x, y );
	
	MoveItem( item, 1, map, x, y );
}

uint cte_DraggingFurniture( Critter& cr, int identifier, uint& rate )
{
	Item@ furniture = GetItem( rate );
	if( !valid( furniture ) )
		return 0;
	
	uint dist = GetDistantion( cr.HexX, cr.HexY, furniture.HexX, furniture.HexY );
	
	Map@ map = cr.GetMap();
	if( map.Id != furniture.MapId )
		dist = 0;
	
	uint16   x = cr.HexX, y = cr.HexY;
	map.MoveHexByDir( x, y, cr.Dir, 1 );

	bool stopped = dist > 2 || !valid( map )
							|| cr.IsRuning || cr.IsDead() || cr.IsKnockout()
							|| cr.StatBase[ ST_LAST_CONT_ID ] != int(rate)
							|| !map.IsHexPassed( x, y )
							;

	if( stopped )
	{
		if( !map.IsHexPassed( x, y ) )
		{
			Item@ furniture = GetItem( rate );
			map.SetText( furniture.HexX, furniture.HexY, COLOR_LGRAY, ":стук:" );
		}
		StopDragging( cr, furniture );
		return 0;
	}

	
	setCartPicMap( furniture, cr.Dir );
	
	DraggingSound( map, furniture, x, y );
	MoveItem( furniture, 1, map, x, y );

	int freeWeight = cr.Stat[ ST_CARRY_WEIGHT ] * ContainerBonusWeight( furniture ),
		contWeight = ItemsWeight( furniture );
		
	if( !isGM(cr) && freeWeight < contWeight ) 
	{
		Item@ furniture = GetItem( rate );
		map.SetText( furniture.HexX, furniture.HexY, COLOR_LGRAY, ":скрип:" );
		StopDragging( cr, furniture );
		return 0;
	}
	
	return REAL_MS( 500 );
}

void DraggingSound( Map& map, Item& furniture, uint x, uint y )
{
	if( furniture.HexX == x && furniture.HexY == y ) { return;
	}
	
	bool isCart = furniture.GetProtoId() == PID_CR_CART;

	string sound = "";
	
	
	if( isCart ) {	
		string[]CartSoundNames = { "cart1.ogg",  "cart2.ogg" };
		sound = CartSoundNames[ Random( 0, CartSoundNames.length() - 1 ) ];
	} else {
		string[] DraggingSoundNames = { "FurnitureDragging1.ogg",  "FurnitureDragging2.ogg", "FurnitureDragging3.ogg", "FurnitureDragging4.ogg", "FurnitureDragging5.ogg" };
		sound = DraggingSoundNames[ Random( 0, DraggingSoundNames.length() - 1 ) ];
	}

	map.PlaySound( sound, furniture.HexX, furniture.HexY, 5 );
}

void CheckCartPicMap( Item& furniture ) 
{
	if( furniture.GetProtoId() != PID_CR_CART ) return;
	
	uint[] values = { furniture.Id };
	CreateTimeEvent( __FullSecond + REAL_SECOND( 1 ), "furniture@e_checkCartPicMap", values, true );
}

uint e_checkCartPicMap( uint[]@ values )
{
	if( !valid( values ) || values.length() != 1 ) return 0;
	
	Item@ cart = GetItem( values[0] );
	if( !valid( cart ) ) return 0;
	
	setCartPicMap( cart, cart.FurnitureState );
	
	return 0;
}

bool setCartPicMap( Item& furniture, uint dir )
{
	if( furniture.GetProtoId() != PID_CR_CART ) return false;
	
	if( int(dir) != furniture.FurnitureState ) {
		furniture.FurnitureState = dir;
		furniture.PicMap = GetStrHash( "art\\items\\misc\\cart\\cart_dir" + dir + ".fofrm" );
	}
	
	Item_SetFrame( furniture, LoadedPercent( furniture ) / 20 );
	
	furniture.Update();
	
	return true;
}

bool isFurniture( Item@ item ) //exported
{
	if( !valid( item ) ) return false;
	
	InitFurnitures();
	
	return furnitures.has( item.GetProtoId() ) && item.GetScriptId() != 0;
}

FurnitureList@ CreateFurniture( string name )
{
	return FurnitureList( name );
}

class FurnitureList
{
	string name;
	Furniture@[] list;
	
	FurnitureList( string name ) {
		this.name = name;
	}
	
	int findPIDbyPic( uint PicMap ) {
		int pid = -1;
		for( uint i = 0, l = list.length(); i < l; i++ ) {
			pid = list[i].findPIDbyPic( PicMap );
			if( pid != -1 )
				break;
		}
		return pid;
	}
	
	FurnitureList@ add( Furniture@ item ) {
		list.insertLast( item );
		return this;
	}
		
	bool rotate( Critter@ cr, Item& furniture, bool clockwise = true ) {
		for( uint i = 0; i < list.length(); i++ ) {
			if( list[i].Rotate( furniture, clockwise ) ) {
				LogItemMovement( cr, furniture, "поворачивает " + ( clockwise ? "по" : "против" ) + " часовой" );
				return true;
			}
		}
			
		return false;
	}
	
	bool Drag( Critter& cr, Item& furniture ) 
	{
		if( furniture.HolderCr != 0 && furniture.HolderCr != int(cr.Id) ) {
			cr.Say( SAY_NORM, "*пытается остановить*" );
			return true;
		}
		
		if( cr.GetTimeEvents( CTE_FURNITURE_DRAGGING, null, null, null ) > 0 ) {
			StopDragging( cr, furniture );
			return true;
		}
		
		if( furniture.GetType() == ITEM_TYPE_DOOR ) {
			return false;
		}
		
		if( !isGM(cr) && furniture.LockerId != 0 ) {
			LogCrimeMovement( cr, furniture, "не может сдвинуть мебель, запертую на замок" );
			SEM( cr, "Данный объект так просто не сдвинуть. Сначала снимите замок." );	
			return true;
		}
		
		if( !isGM(cr) && ( !FLAG( furniture.Flags, ITEM_CAN_PICKUP ) || furniture.Durability > 0 ) ) {
			LogCrimeMovement( cr, furniture, "не может толкать вмонтированную мебель" ); 
			SEM( cr, "Требуется демонтаж." );
			return true;
		}
		
		if( FLAG( furniture.LockerCondition, LOCKER_JAMMED ) || FLAG( furniture.LockerCondition, LOCKER_BROKEN ) || FLAG( furniture.LockerCondition, LOCKER_NOOPEN ) ) {
			LogCrimeMovement( cr, furniture, "не может толкать заблокированную мебель" ); 
			SEM( cr, "Из этого ничего не вышло." );
			return true;
		}
		
		if( ( furniture.Proto.Container_Changeble && !FLAG( furniture.LockerCondition, LOCKER_ISOPEN ) ) || FLAG( furniture.LockerCondition, LOCKER_LOCKED ) ) {
			LogCrimeMovement( cr, furniture, "пытается укатить закрытую мебель" ); 
			SEM( cr, "Нельзя перемещать закрытую и запертую мебель." );
			return true;
		}

		int freeWeight = cr.Stat[ ST_CARRY_WEIGHT ] * ContainerBonusWeight( furniture ),
			contWeight = ItemsWeight( furniture );
			
		if( !isGM(cr) && freeWeight < contWeight ) {
			SEM( cr, "Слишком тяжело." );
			LogItemMovement( cr, furniture, "не может толкать тяжёлую мебель" );
			return true;
		}

		cr.Say( SAY_EMOTE_ON_HEAD, "толкает" );
		
		furniture.SetScript( "_InitDragging" );
		furniture.HolderCr = cr.Id;
		
		cr.StatBase[ ST_LAST_CONT_ID ] = furniture.Id;
		cr.AddTimeEvent( "cte_DraggingFurniture", 0, CTE_FURNITURE_DRAGGING, furniture.Id );		
		
		LogItemMovement( cr, furniture, "толкает мебель (" + cr.HexX + ", " + cr.HexY + ")" );
		return true;
	}
	
	bool has( uint pid )
	{
		for( uint i = 0; i < list.length(); i++ ) {
			if( list[i].has( pid ) ) {
				return true;
			}
		}
		return false;
	}
}

Furniture@ CreateFurniture( string name, uint basePID )
{
	return Furniture( name, basePID );
}

class Furniture
{
	uint basePID;
	string name;
	uint[] pids;
	
	Furniture( string name, uint basePID )
	{
		this.name = name;
		this.basePID = basePID;
		this.pids.insertLast( basePID );
	}
	
	int findPIDbyPic( uint PicMap ) 
	{
		if( SamePic( PicMap, basePID ) )
			return basePID;
		
		for( uint i = 1, l = pids.length(); i < l; i++ )
			if( SamePic( PicMap, pids[i] ) )
				return basePID;
			
		return -1;
	}
	
	void set( uint[] pids )
	{
		this.pids = pids;
	}
	
	bool has( uint pid )
	{
		if( basePID == pid ) return true;
		
		// for( uint i = 0; i < pids.length(); i++ ) {
			// if( pids[i] == pid ) {
				// return true;
			// }
		// }
		return false;
	}
	
	Furniture@ add( uint rotation_picture_pid )
	{
		if( rotation_picture_pid != 0 ) {
			pids.insertLast( rotation_picture_pid );
		}
		return this;
	}
	
	bool setPic( Item& target )
	{
		return setPic( target, target.FurnitureState );
	}

	bool setPic( Item& target, uint index )
	{
		if( index >= pids.length() ) { return false;
		}
		
		return setItemPic( target, pids[index] );
	}
	
	bool ChangeState( Item& target, bool clockwise = true )
	{
		if( clockwise ) {
			target.FurnitureState++;
		} else {
			target.FurnitureState--;
		}
		
		int state = target.FurnitureState;
		
		if( state >= int( pids.length() ) ) {
			target.FurnitureState = 0;
			return true;
		}
		
		if( state < 0 ) {
			target.FurnitureState = pids.length() - 1;
			return true;
		}
		
		return true;
	}
	
	bool Rotate( Item& target, bool clockwise = true )
	{
		if( target.GetProtoId() != basePID || pids.length() == 0 ) { return false;
		}
		
		if( !setCartPicMap( target, ( target.FurnitureState + ( clockwise ? 1 : 6 ) ) % 6 ) ) {
			ChangeState( target, clockwise );
		}
		
		setPic( target );
		return true;
	}
}

bool setItemPic( Item& target, uint protoPID )
{
	if( protoPID == 0 ) return false;
	
	ProtoItem@ proto = GetProtoItem( protoPID );
	if( !valid( proto ) ) return false;
	
	target.PicMap = proto.PicMap;
	target.PicInv = proto.PicMap;
	target.Update();
	return true;
}

void Item_SetFrame( Item& item, uint8 frame ) // Sprite& sprite) // ItemCl& itemCl
{
    item.AnimStayBegin      = frame;
    item.AnimStayEnd        = frame;
    item.AnimShowBegin      = frame;
    item.AnimShowEnd        = frame;
    item.AnimHideBegin      = frame;
    item.AnimHideEnd        = frame;

    return;
}

bool ContainerCheck( Critter& cr, Item@ container, Item@ target )
{
    Map@ map = cr.GetMap();
    if( !valid( map ) ) { return false; }
	if( !valid( container ) && !valid( target ) ) { return false; }
	
	uint16 containerPid = container.GetProtoId();
	if( ContainersX1.find( containerPid ) == -1 ) { return false; }
	
	uint16 targetPid = target.GetProtoId();
	if( ContainersX3.find( targetPid ) != -1 ) {
		SEM( cr, "Вы не можете сделать стэк контейнеров выше." );
		return false;
	}

	Critter@[] critters; 
	map.GetCrittersHex( target.HexX, target.HexY, 0, FIND_LIFE_AND_KO, critters );
	if( critters.length() > 0 ) {
		SEM( cr, "Существо мешает установить контейнер." );
		return false;
	}
	
	Item@[] shadows;
	if( map.GetItems( target.HexX, target.HexY, shadows ) > 0 ) {
		for( uint i = 0; i < shadows.length(); i++ ) {
			if( shadows[i].GetProtoId() == PID_SHADOW ) {
				SEM( cr, "Вышедший в оффлайн игрок на этой точке мешает установить контейнер." );
				return false;
			}
		}
	}
	
	if( valid( container ) && valid( target ) )
		AddContainer( cr, container, target, map );
	return true;
}

void AddContainer( Critter& cr, Item& container, Item& target, Map& map )
{
	if( valid( container ) && valid( target ) ) {	
		Item@[] stuff_container;
		container.GetItems( uint( -1 ), stuff_container );
		Item@[] stuff_target;
		target.GetItems( uint( -1 ), stuff_target );
		
		uint16 hx = target.HexX, hy = target.HexY;
		uint16 oldPid = target.GetProtoId();
		uint16 newPid;
		uint16 containerPid = container.GetProtoId();
		if( containerPid == PID_IBOX_O ) {
			switch( oldPid ) 
			{
				case( PID_IBOX_O ):
					newPid = PID_IBOX_OO;
					break;
				case( PID_IBOX_N ):
					newPid = PID_IBOX_NO;
					break;
				case( PID_IBOX_OO ):
					newPid = PID_IBOX_OOO;
					break;
				case( PID_IBOX_ON ):
					newPid = PID_IBOX_ONO;
					break;
				case( PID_IBOX_NO ):
					newPid = PID_IBOX_NOO;
					break;
				case( PID_IBOX_NN ):
					newPid = PID_IBOX_NNO;
					break;
			}
		} else {
			switch( oldPid ) 
			{
				case( PID_IBOX_O ):
					newPid = PID_IBOX_ON;
					break;
				case( PID_IBOX_N ):
					newPid = PID_IBOX_NN;
					break;
				case( PID_IBOX_OO ):
					newPid = PID_IBOX_OON;
					break;
				case( PID_IBOX_ON ):
					newPid = PID_IBOX_ONN;
					break;
				case( PID_IBOX_NO ):
					newPid = PID_IBOX_NON;
					break;
				case( PID_IBOX_NN ):
					newPid = PID_IBOX_NNN;
					break;
			}
		}
		
		Item@ newContainer = map.AddItem( hx, hy, newPid, 1 );
		if( stuff_container.length() > 0 ) {
			MoveItems( stuff_container, newContainer, 0 );
		}
		
		if( stuff_target.length() > 0 ) {
			MoveItems( stuff_target, newContainer, 0 );
		}
		
		DeleteItem( target );
		_SubItem( container, 1 );
		newContainer.Update();
		Map@ map = cr.GetMap();
		map.PlaySound( "CLANK.ACM", newContainer.HexX, newContainer.HexY, 10 );
	}
}

#endif //FURNITURE