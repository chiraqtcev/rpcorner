// code door screen
// pm

#include "_client_defines.fos"
#include "client_gui_h.fos"
#include "_colors.fos"
#include "_defines.fos"

#define CODE_LENGTH      ( 5 )
#define BUTTON_ERASE     ( 0 )
#define BUTTON_NUMBER    ( 1 )
#define BUTTON_OPEN      ( 2 )
#define BUTTON_CLOSE     ( 3 )

string codeText = "";

class  ScreenMain : IGUIScreenCallbackShow, IGUIScreenCallbackHide
{
    IGUIScreenOpt@ screenOpt;
    InputCode @ Code;
    NumberButton @ Button;
    uint  doorId;
    uint8 codeLength;
    bool  codeSet;
    bool  text;

    void OnShow( int p0, int p1, int p2 )
    {
        // SetCode("123");
        codeLength = p1 + 1;
        doorId = p0;
        codeSet = ( p2 != 0 ? true : false );
        SetCode( codeText );
        text = true;
    }

    void OnHide( int p0, int p1, int p2 )
    {}

    uint8 GetCodeLegth()
    {
        return Code.GetCode().length();
    }

    void EraseCode()
    {
        Code.EraseCode();
    }

    void SetCode( string code )
    {
        Code.SetCode( code );
    }

    uint GetDoorId()
    {
        return doorId;
    }

    uint16 GetCode()
    {
        int code = 0;
        StrToInt( Code.GetCode(), code );
        return code;
    }


}

class InputCode : IGUIElementCallbackInit
{
    IGUIElementOpt @ elementOpt;
    ScreenMain@ Instance;

    InputCode( ScreenMain & instance )
    {
        @Instance = instance;
        @Instance.Code = this;

    }

    void OnInit()
    {
        @elementOpt = GUI_GetElementOptions();
        // elementOpt.Text("enter code", FONT_FALLOUT,COLOR_GREEN,0,FT_CENTERX|FT_CENTERY|FT_BORDERED);
    }

    void EraseCode()
    {
        string sTemp = elementOpt.GetText();
        sTemp.resize( sTemp.length() - 1 );
        elementOpt.Text( sTemp, FONT_FALLOUT, COLOR_GREEN, 0, FT_CENTERX | FT_CENTERY | FT_BORDERED );
    }

    void SetCode( string code )
    {
        string sTemp = elementOpt.GetText() + code;
        // if(sTemp == "enter code") sTemp = code;
        if( sTemp.length() > Instance.codeLength )
            sTemp = code;
        elementOpt.Text( "" + sTemp, FONT_FALLOUT, COLOR_GREEN, 0, FT_CENTERX | FT_CENTERY | FT_BORDERED );
        Instance.text = false;
    }

    string GetCode()
    {
        return elementOpt.GetText();
    }

    uint8 GetCodeLegth()
    {
        return elementOpt.GetText().length();
    }
}

class NumberButton : IGUIElementCallbackInit, IGUIElementCallbackMouseClick // , IGUIElementCallbackDraw
{

    ScreenMain@ Instance;
    InputCode @ Code;

    uint8 ButtonClass;
    uint8 ButtonNumber;

    NumberButton( ScreenMain & instance )
    {
        @Instance = instance;
        @Instance.Button = this;
    }

    void OnInit()
    {}

    void OnMouseClick( int click )
    {
        switch( ButtonClass )
        {
        case BUTTON_ERASE:
            if( Instance.GetCodeLegth() > 0 && !Instance.text )
                Instance.EraseCode();
            break;
        case BUTTON_NUMBER:
            if( Instance.GetCodeLegth() < Instance.codeLength || Instance.text )
                Instance.SetCode( "" + ButtonNumber );
            break;
        case BUTTON_OPEN:
            if( !Instance.text )
                RunServerScriptUnsafe( "general_unsafe@unsafe_openCodeDoor", Instance.GetDoorId(), Instance.GetCode(), Instance.codeSet ? 1 : 0, "", null );
            break;
        case BUTTON_CLOSE:
            ::HideScreen( 0, 2, 2, 2 );
            break;
        }
    }
}

class TestScreenButtonShow : IGUIElementCallbackMouseClick
{
    void OnMouseClick( int click )
    {
        // Message("GUITestScreenButtonShow::OnMouseClick "+click);
        ::ShowScreen( CLIENT_SCREEN_CODEDOOR, 30, 3, 3 );
    }
}

void ShowScreen( int p0, int p1, int p2, string@ + p3, int[] @ + p4 )
{
    codeText = p3;
    ShowScreen( CLIENT_SCREEN_CODEDOOR, p0, p1, p2 );
}

void HideScreen( int p0, int p1, int p2, string@ + p3, int[] @ + p4 )
{
    GUI_HideScreen( CLIENT_SCREEN_CODEDOOR, 0, 0, 0 );
}

void InitCodedoorScreen() // Export
{
    ScreenMain screenMain();
    GUI_CreateScreen( CLIENT_SCREEN_CODEDOOR, "codeScreen.png" )
    .CallbackHide( screenMain )
    .CallbackShow( screenMain )
    .CloseOnMiss( true )
    .AutoCursor( true, CURSOR_DEFAULT );

    InputCode InputCodeB( screenMain );
    GUI_AddScreenElement( CLIENT_SCREEN_CODEDOOR, "keyCodeEnter.png", 0, 0 )
    .CallbackInit( InputCodeB )
    .TextInput( true, 5, COLOR_LGREEN );

    NumberButton ButtonErase( screenMain );
    GUI_AddScreenElement( CLIENT_SCREEN_CODEDOOR, "keyCodeKey_new.png", 155, 265 )
    .CallbackInit( ButtonErase )
    .CallbackMouseClick( ButtonErase )
    .Text( "<", FONT_FALLOUT, COLOR_SAND, 0, FT_CENTERX | FT_CENTERY | FT_BORDERED )
    .DownPic( "keyCodeKeyDown_new.png" );
    ButtonErase.ButtonClass = BUTTON_ERASE;

    NumberButton ButtonOpen( screenMain );
    GUI_AddScreenElement( CLIENT_SCREEN_CODEDOOR, "keyCodeKey_new.png", 15, 265 )
    .CallbackInit( ButtonOpen )
    .CallbackMouseClick( ButtonOpen )
    .Text( "OP", FONT_FALLOUT, COLOR_SAND, 0, FT_CENTERX | FT_CENTERY | FT_BORDERED )
    .DownPic( "keyCodeKeyDown_new.png" );
    ButtonOpen.ButtonClass = BUTTON_OPEN;
    /*
       NumberButton ButtonClose(screenMain);
       GUI_AddScreenElement(CLIENT_SCREEN_CODEDOOR,"keyCodeKey_new_close.png",215, 5)
            .CallbackInit(ButtonClose)
            .CallbackMouseClick(ButtonClose)
            //.Text("C, FONT_FALLOUT,COLOR_SAND,0,FT_CENTERX|FT_CENTERY|FT_BORDERED)
            .DownPic("keyCodeKeyDown_new.png");
       ButtonClose.ButtonClass = BUTTON_CLOSE;
     */
    uint16 axistX = 0, axistY = 0;

    for( uint8 i = 0; i <= 9; i++ )
    {


        NumberButton ButtonNumber( screenMain );
        GUI_AddScreenElement( CLIENT_SCREEN_CODEDOOR, "keyCodeKey_new.png", i != 0 ? 15 + axistX : 85, i != 0 ? 85 + axistY : 265 )
        .CallbackInit( ButtonNumber )
        .CallbackMouseClick( ButtonNumber )
        .Text( "" + i, FONT_FALLOUT, COLOR_SAND, 0, FT_CENTERX | FT_CENTERY | FT_BORDERED )
        .DownPic( "keyCodeKeyDown_new.png" );
        ButtonNumber.ButtonClass = BUTTON_NUMBER;
        ButtonNumber.ButtonNumber = i;

        if( i % 3 == 0 && i != 0 )
        {
            axistX = 0;
            axistY += 60;
        }
        else
        {
            i != 0 ? axistX += 70 : 0;
        }

    }
}
