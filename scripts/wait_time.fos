// generic and helper fucntions for wait time calculation override
// both client and server

#ifndef WAIT_TIME
#define WAIT_TIME

#include "_utils.fos"
#include "wait_time_h.fos"


// the mode is actual mode, means 4 high bits are aim, 4 low bits are use mode (to use it for both weapons and other items)
uint GetProtoTime( ProtoItem& prot, uint8 mode, CritterMutual@ crit )
{
	uint time = _GetProtoWaitTime( prot, mode&0x0F ); // 16 uses limit, more than enough
	
	return time;
}

uint GetSkillTime( int sk, CritterMutual@ crit )
{
	uint time = _GetSkillWaitTime(sk);

	return time;
}

uint GetActionTime( int action, CritterMutual@ crit )
{
	uint time = _GetActionWaitTime(action);
	
	if( action == ACTION_DAMAGE_FORCE || action == ACTION_DAMAGE ) {
		return( time / 2 );
	}
	
	return time;
}

uint GetProtoWindupTime( ProtoItem& prot, uint8 mode, CritterMutual@ crit)
{
	uint time = 0;
	uint8 use = mode & 0x0F;
	uint8 aim = ( mode >> 4 ) & 0x0F;

	if( ( _WeaponAim( prot, use ) && ( aim > HIT_LOCATION_NONE ) ) ) {
		time = _GetProtoWindupTime( prot );
	} else {
		time = _GetProtoWindupTime( prot ) * 0.5;
	}
	return time;
}

#endif // WAIT_TIME