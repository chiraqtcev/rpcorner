#ifndef POISON
#define POISON

#include "_utils.fos"
#include "poison_h.fos"

void AffectPoison( Critter& cr, int value )
{
    int body = cr.Stat[ ST_BODY_TYPE ];

    if( IsMutant( cr ) )
        return;
	
    if( cr.IsDead() )
        return;
	
	if( IsAnimal( cr ) )
	{
		cr.StatBase[ ST_POISONING_LEVEL ] = 0;
		return;
	}
	
    uint[] indexes;
    uint[] durations;
    bool isActive = cr.GetTimeEvents( CTE_POISON, indexes, durations, null ) != 0;
    int  levelVal = cr.Stat[ ST_POISONING_LEVEL ];
    int  resistVal = cr.Stat[ ST_POISON_RESISTANCE ];

    if( value > 0 )
	{
        value -= value * resistVal / 100;
    }
	else if( levelVal == 0 )
	{
        return;
	}
	
    cr.StatBase[ ST_POISONING_LEVEL ] = CLAMP( levelVal + value, 0, 2000 );
	
    levelVal = cr.Stat[ ST_POISONING_LEVEL ];

    uint strNum = 0;
    if( levelVal == 0 )
	{
        strNum = STR_POISON_FREE;
    }
	else if( value > 0 )
	{
        strNum = STR_POISON_GAIN;
    }
	else if( value < 0 )
	{
        strNum = STR_POISON_REDUCE;
    }
	
	if( strNum != 0 )
	{
        cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, strNum );
	}
	
    if( levelVal > 0 )
	{
        if( cr.Damage[ DAMAGE_POISONED ] == 0 )
		{
            cr.DamageBase[ DAMAGE_POISONED ] = 1;
		}
		
        if( levelVal > 100 )
		{
            int hp = CLAMP( levelVal - 50, 1, 50 );
				cr.StatBase[ ST_CURRENT_HP ] -= hp;
        }
    }
	else
	{
        if( cr.Damage[ DAMAGE_POISONED ] != 0 )
		{
            cr.DamageBase[ DAMAGE_POISONED ] = 0;
		}
    }

    if( isActive ) // Try hurry event, if new stage aviable
	{
        if( levelVal == 0 )
		{
            cr.EraseTimeEvents( CTE_POISON );
        }
		else
		{
            uint oldDuration = durations[ 0 ];
			uint newDuration = GetPoisonDuration( cr );
            if( newDuration < oldDuration )
			{
                cr.ChangeTimeEvent( indexes[ 0 ], newDuration, 0 );
			}
		}
    }
	else
	{    // Try start new event
		cr.AddTimeEvent( "cte_Poison", GetPoisonDuration( cr ), CTE_POISON );
    }
}

void DropPoison( Critter& cr )
{
    cr.EraseTimeEvents( CTE_POISON );
    cr.StatBase[ ST_POISONING_LEVEL ] = 0;
    if( cr.Damage[ DAMAGE_POISONED ] != 0 )
	{
        cr.DamageBase[ DAMAGE_POISONED ] = 0;
	}
}

uint cte_Poison( Critter& cr, int identifier, uint& rate )
{
    if( cr.IsDead() )
	{
        return REAL_MINUTE(1);
	}
	
    int levelVal = cr.Stat[ ST_POISONING_LEVEL ];
    if( levelVal > 0 )
	{
        cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_POISON_PROCESS );
        cr.StatBase[ ST_POISONING_LEVEL ] = CLAMP( levelVal - 2, 0, 2000 );
        cr.StatBase[ ST_CURRENT_HP ]--;
		
        if( levelVal > 50 )
		{
			uint[] durations;
			uint[] indexes;
			uint amount = cr.GetTimeEvents( CTE_VOMIT, indexes, durations, null );
			if( amount < 1 )
			{
				cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_FEEL_SICK);
				uint vomitTime = Random( 5, 15 );
				cr.AddTimeEvent( "cte_vomit", REAL_MINUTE( vomitTime ), CTE_VOMIT, 0 );
				vomitTime --;
				cr.AddTimeEvent( "cte_vomit_warn", REAL_MINUTE( vomitTime ), CTE_VOMIT_WARN, 0 );
			}
		}
		
		if( cr.StatBase[ ST_CURRENT_HP ] <= getDeathHitPoints( cr ) )
		{
            cr.ToDead( Random( 0, 1 ) == 0 ? ANIM2_DEAD_FRONT : ANIM2_DEAD_BACK, null );
			cr.ParamBase[ CR_DEATH_STAGE ] = 100;
		}
	}

    if( cr.Stat[ ST_POISONING_LEVEL ] == 0 )
	{
        cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_POISON_FREE );
        if( cr.Damage[ DAMAGE_POISONED ] != 0 )
		{
            cr.DamageBase[ DAMAGE_POISONED ] = 0;
		}
        return 0;
    }

    return GetPoisonDuration( cr );
}

uint GetPoisonDuration( Critter& cr )
{
    int duration = POISON_BASE_DURATION;
    int levelVal = cr.Stat[ ST_POISONING_LEVEL ];
    if( levelVal == 0 )
	{
        return 0;
	}
    
	duration -= levelVal * POISON_DURATION_SUB;
    if( duration <= 0 )
	{
        duration = REAL_SECOND( 1 );
	}
	
	if( cr.IsKnockout() )
	{
		duration *= 2;
	}
    return duration;
}

void CheckPoisonEvent( Critter& cr )
{
	if( cr.GetTimeEvents( CTE_POISON, null, null, null ) == 0 && cr.Stat[ ST_POISONING_LEVEL ] > 0 )
	{
		cr.AddTimeEvent( "poison@cte_Poison", GetPoisonDuration( cr ), CTE_POISON );
	}
}

void AffectPoisonByCritter( Critter& cr, int value, Critter& atacker )
{
    int body = cr.Stat[ ST_BODY_TYPE ];

    if( body == BT_RADSCORPION || body == BT_FLOATER || body == BT_CENTAUR || body == BT_ALIEN )
	{ // Убрал воздействие яда на некоторых животных.
		if( cr.IsPlayer() )
		{
            cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, 12814 );
        }
		return;
    }

    if( cr.IsDead() )
	{
        return;
	}
	
    uint[] indexes;
    uint[] durations;
    bool isActive = cr.GetTimeEvents( CTE_POISON, indexes, durations, null ) != 0;
    int  levelVal = cr.Stat[ ST_POISONING_LEVEL ];
    int  resistVal = cr.Stat[ ST_POISON_RESISTANCE ];

    if( value > 0 )
	{
        value -= value * resistVal / 100;
    }
	else if( levelVal == 0 )
	{
        return;
	}
    cr.StatBase[ ST_POISONING_LEVEL ] = CLAMP( levelVal + value, 0, 2000 );
    levelVal = cr.Stat[ ST_POISONING_LEVEL ];

    uint strNum = 0;
    if( levelVal == 0 )
	{
        strNum = STR_POISON_FREE;
    }
	else if( value > 0 )
	{
        strNum = STR_POISON_GAIN;
	}
	else if( value < 0 )
	{
        strNum = STR_POISON_REDUCE;
	}
	
	if( strNum != 0 )
	{
        cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, strNum );
	}
	
    if( levelVal > 0 )
	{
        if( cr.Damage[ DAMAGE_POISONED ] == 0 )
		{
			cr.DamageBase[ DAMAGE_POISONED ] = 1;
		}
		
        if( levelVal > 100 )
		{
            int hp = ( levelVal - 100 ) / 2;
            if( cr.StatBase[ ST_CURRENT_HP ] <= getDeathHitPoints( cr ) )
			{
                cr.ToDead( Random( 0, 1 ) == 0 ? ANIM2_DEAD_FRONT : ANIM2_DEAD_BACK, null );
                if( valid( atacker ) && cr.IsNpc() )
				{
                    atacker.ParamBase[ ST_EXPERIENCE ] += cr.Param[ ST_KILL_EXPERIENCE ];
				}
			}
            cr.StatBase[ ST_POISONING_LEVEL ] = 100;
        }
    }
	else
	{
        if( cr.Damage[ DAMAGE_POISONED ] != 0 )
		{
			cr.DamageBase[ DAMAGE_POISONED ] = 0;
		}
    }

    if( isActive ) // Try hurry event, if new stage aviable
	{ 
		if( levelVal == 0 )
		{
            cr.EraseTimeEvents( POISON_IDENTIFIER_BY_CR );
        }
		else
		{
            uint oldDuration = durations[ 0 ];
            uint newDuration = GetPoisonDuration( cr );
            if( newDuration < oldDuration )
			{
                cr.ChangeTimeEvent( indexes[ 0 ], newDuration, 0 );
			}
		}
    }
	else     // Try start new event
	{
		cr.AddTimeEvent( "cte_Poison_By_Cr", GetPoisonDuration( cr ), POISON_IDENTIFIER_BY_CR, atacker.Id );
    }
}

uint cte_Poison_By_Cr( Critter& cr, int identifier, uint& rate )
{
    Critter@ attacker = GetCritter( rate );
    if( cr.IsDead() )
	{
        return 100;
	}
	
    int levelVal = cr.Stat[ ST_POISONING_LEVEL ];
    if( levelVal > 0 )
	{
        cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_POISON_PROCESS );
        cr.StatBase[ ST_POISONING_LEVEL ] = CLAMP( levelVal - 2, 0, 2000 );
        int damageCount = levelVal / 6;
        if( damageCount > 0 )
		{
            cr.StatBase[ ST_CURRENT_HP ] -= damageCount;
		}
        
		if( cr.StatBase[ ST_CURRENT_HP ] <= getDeathHitPoints( cr ) )
		{
            cr.ToDead( Random( 0, 1 ) == 0 ? ANIM2_DEAD_FRONT : ANIM2_DEAD_BACK, null );
            if( valid( attacker ) && cr.IsNpc() )
			{
                attacker.ParamBase[ ST_EXPERIENCE ] += cr.Param[ ST_KILL_EXPERIENCE ];
            }
			return 0;
        }
		
    }

    if( cr.Stat[ ST_POISONING_LEVEL ] == 0 )
	{
        cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_POISON_FREE );
        if( cr.Damage[ DAMAGE_POISONED ] != 0 )
		{
            cr.DamageBase[ DAMAGE_POISONED ] = 0;
		}
        return 0;
    }
    return 0;
}

uint cte_vomit( Critter& cr, int identifier, uint& rate )
{
	if( cr.IsDead() )
	{
		return 0; 
	}
	
	Map@ map = cr.GetMap();
	if( !valid( map ) )
	{
		return 0;	
	}
	
	_CritAnimatePickup( cr );
	cr.SayMsg( SAY_EMOTE, TEXTMSG_TEXT, STR_EMOTE_VOMITS );
	map.PlaySound( "puke.ogg", cr.HexX, cr.HexY, 5 );
	uint16 hx = cr.HexX, hy = cr.HexY;
	map.MoveHexByDir( hx, hy, cr.Dir, 1 );
	map.AddItem( hx, hy, PID_SHIT_SMALL, 1 );
	cr.ParamBase[ ST_THIRST ] -= 20;
	cr.ParamBase[ ST_POISONING_LEVEL ] = CLAMP( cr.ParamBase[ ST_POISONING_LEVEL ] - 10, 0, 100 );
	cr.ParamBase[ ST_DRUNK ] -= 20;
	
	return 0; 
}

uint cte_vomit_warn( Critter& cr, int identifier, uint& rate )
{
	if( cr.IsDead() )
	{
		return 0; 
	}
	
	Map@ map = cr.GetMap();
	if( !valid( map ) )
	{
		return 0;	
	}
	
	cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_ABOUT_TO_VOMIT );
	
	return 0; 
}

#endif //POISON