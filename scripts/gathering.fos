// Author: Anuri

#ifndef GATHERING
#define GATHERING

#include "_utils.fos"
#include "gathering_h.fos"
#include "critter_status_h.fos"
#include "combat_h.fos"
#include "effects_h.fos"

uint e_TiredenessTimeout( uint[]@ values )
{
	Critter@cr = GetCritter( values[0] ); 
	if( cr.ParamBase[ CR_JETTED ] == 0 ) 
	{
		int fatigue_per_action = ACTION_FATIGUE_BASE - ( ( cr.Stat[ ST_STRENGTH ] * ACTION_F_RATE_STR ) + ( cr.Stat[ ST_ENDURANCE ] * ACTION_F_RATE_END ) );
		int fatigue = CLAMP( fatigue_per_action, ACTION_FATIGUE_MIN, ACTION_FATIGUE_MAX );
		cr.TimeoutBase[ TO_TIREDNESS ] = __FullSecond + cr.Timeout[ TO_TIREDNESS ] + REAL_SECOND( fatigue );
	}
	return 0;
}

bool act( Critter& cr ) {
	if( IsTired( cr ) ) return false;

	if( cr.ParamBase[ CR_JETTED ] == 0 ) 
	{
		int fatigue_per_action = ACTION_FATIGUE_BASE - ( ( cr.Stat[ ST_STRENGTH ] * ACTION_F_RATE_STR ) + ( cr.Stat[ ST_ENDURANCE ] * ACTION_F_RATE_END ) );
		int fatigue = CLAMP( fatigue_per_action, ACTION_FATIGUE_MIN, ACTION_FATIGUE_MAX );
		cr.TimeoutBase[ TO_TIREDNESS ] = __FullSecond + cr.Timeout[ TO_TIREDNESS ] + REAL_SECOND( fatigue );			
	}
	
	cr.Animate( 0, ANIM2_USE, null, true, true );
	cr.StatBase[ ST_CURRENT_AP ] -= 10 * 100;
	cr.Wait( 500 );
	
	return true;
}

bool IsTired( Critter& cr )
{
	uint timeout_limit = ( cr.Stat[ST_ENDURANCE] * PHASE_TIMEOUT_RATE ) + PHASE_TIMEOUT_BASE;
	int timeout = CLAMP( timeout_limit, PHASE_TIMEOUT_MIN, PHASE_TIMEOUT_MAX );
	
	if( cr.Timeout[ TO_TIREDNESS ] > REAL_SECOND( timeout ) )
	{
		cr.SayMsg( SAY_EMOTE_ON_HEAD, TEXTMSG_TEXT, STR_EMOTE_PANTING );
		cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_TOO_TIRED );
		
		if( !isGM( cr ) )
		{
			return true;
		}
	}
	return false;
}

bool Accident( Critter& cr, int skillNum )
{
	if( Random( 1, 200 * SKILL_ROLL_SIMPLIFIER ) <= ( CRITICAL_FAILURE_BASE - ( cr.SkillBase[ skillNum ] / 30 ) ) )
	{
		Item@ hand = _CritGetItemHand( cr );
		uint8 mode = 0;
		ProtoItem@ weapon, ammo;
		if( valid( hand ) )
		{
			
			mode = hand.Mode;
			@weapon = GetProtoItem( hand.GetProtoId() );
			
			if( skillNum == SK_REPAIR && ( weapon.Type == ITEM_TYPE_WEAPON && hand.Proto.Weapon_MaxAmmoCount > 0 ) )
			{
				uint ammoCount = hand.AmmoCount;
				Map@ map = cr.GetMap(); 
				string sound = "WAX1XXX1.ACM";
				sound[ 2 ] = _WeaponSoundId( weapon, _WeaponModeUse( mode ) );
				map.PlaySound( sound );
				hand.AmmoCount --;
				hand.Update();
			}
		}
		
		uint damage;
		int8 bleed = -1;
		int flag = 0;
		
		int severity = Random( 1, 100 );
		if( severity > 65 && ( Random( 1, 100 ) < ( cr.Stat[ST_LUCK] * 2 ) ) )
		{	
			cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_AVOID_INJURY );
			severity = severity - 35;
		}
		if( severity <= 5 )
		{
			cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_BRUISED );
			damage = 15;
			cr.SayMsg( SAY_EMOTE, TEXTMSG_TEXT, STR_EMOTE_RUBS_BRUISE );
		}
		else if( severity >= 6 && severity <= 35 )
		{			
			cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_SMALL_CUT );
			damage = 20;
			bleed = 20;
			cr.SayMsg( SAY_EMOTE, TEXTMSG_TEXT, STR_EMOTE_SHOUTS_IN_PAIN );
		}
		else if( severity >= 36 && severity <= 85 )
		{			
			cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_DEEP_CUT );
			damage = 30;
			bleed = 40;
			flag = CR_STATUS_HEAVY_DMG;
			cr.SayMsg( SAY_EMOTE, TEXTMSG_TEXT, STR_EMOTE_GRABS_WOUND );
		}
		else if( severity >= 86 && severity <= 95 )
		{			
			cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_HEAVY_INJURY );
			damage = 40;
			bleed = 50;
			flag = CR_STATUS_HEAVY_DMG;
			uint random = Random( 0, 3 );
			switch( random )
			{
				case( 0 ):
					cr.ParamBase[ DAMAGE_RIGHT_ARM ] = 1;	
					break;
				case( 1 ):
					cr.ParamBase[ DAMAGE_LEFT_ARM ] = 1;	
					break;
				case( 2 ):
					cr.ParamBase[ DAMAGE_RIGHT_LEG ] = 1;	
					break;
				case( 3 ):
					cr.ParamBase[ DAMAGE_LEFT_LEG ] = 1;	
					break;
			}
			cr.SayMsg( SAY_EMOTE, TEXTMSG_TEXT, STR_EMOTE_SCREAMS_PAIN );
		}
		else
		{
			cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_EYE_INJURY );
			damage = 50;
			bleed = 60;
			flag = CR_STATUS_HEAVY_DMG;	
			cr.ParamBase[ DAMAGE_EYE ] = 1;				
			cr.SayMsg( SAY_EMOTE, TEXTMSG_TEXT, STR_EMOTE_SCREAMS_AGONY );
		}
		
		if( flag != -1 )
		{ 
			SETFLAG( cr.StatBase[ ST_CRSTATUS ], flag );
		}
		
		InjureCritter( cr, damage, DAMAGE_NORMAL, cr.Dir, cr.Id );
		
		if( bleed != -1 )
		{ 
			BleedCritter( cr, bleed );
		}

		FlushScreen( cr, COLOR_RED, 0, 5000 );
	}
	return true;
}

void PlayGatheringSound( Critter& cr, Map& map, string& sound, int distance )
{
	Critter@[] players;
	map.GetCrittersHex( cr.HexX, cr.HexY, distance, FIND_ALL | FIND_ONLY_PLAYERS, players );
	int[] val = { distance };
	for( uint i = 0; i < players.length(); i++ )
	{
		Critter@ player = players[i];
		if( valid( player ) )
		{
			player.RunClientScript( "fofmod@__PlaySound", map.Id, cr.HexX, cr.HexY, sound, val );
		}
	}
}
#endif	// GATHERING