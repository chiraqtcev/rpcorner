#ifndef GEIGER
#define GEIGER

#include "_utils.fos"
#include "geiger_h.fos"

bool UseGeiger( Critter& cr, Item& geiger ) // Export
{
    if( geiger.Val1 == 1 )
    {
        geiger.Val1 = 0;
        if( geiger.Val3 != 0 )
            EraseTimeEvent( geiger.Val3 );
        cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_GEIGER_OFF );
    }
    else
    {
        if( geiger.Val2 == 0 )
        {
            cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_GEIGER_NO_CHARGES );
            return true;
        }

        cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_GEIGER_FIRST_CHECK, "$rem" + cr.Stat[ ST_RADIATION_LEVEL ] );

        geiger.Val2--;
        if( geiger.Val2 == 0 )
        {
            cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_GEIGER_NO_CHARGES );
        }
        else
        {
            // Turn on and loop
            geiger.Val1 = 1;
            geiger.Val3 = CreateTimeEvent( __FullSecond + GEIGER_DURATION, "e_Geiger", geiger.Id, true );
            cr.PlaySound( "geiger_active.ogg", true );
        }
    }

    geiger.Update();
    return true;
}

bool UseItemOnGeiger( Critter& cr, Item& geiger, Item& item ) // Export
{
    uint16 itemPid = item.GetProtoId();
    if( ( itemPid == PID_SMALL_ENERGY_CELL || itemPid == PID_MICRO_FUSION_CELL ) && geiger.Val2 < geiger.Proto.StartValue_2 )
    {
        uint needCharge = geiger.Proto.StartValue_2 - geiger.Val2;
        uint charge = ( itemPid == PID_SMALL_ENERGY_CELL ? GEIGER_ENERGY_CHARGE : GEIGER_FUSION_CHARGE );
        uint needItems = needCharge / charge;
        if( ( needCharge % charge ) != 0 )
            needItems++;
        if( needItems > item.GetCount() )
            needItems = item.GetCount();
        geiger.Val2 += needItems * charge;
        if( geiger.Val2 > geiger.Proto.StartValue_2 )
            geiger.Val2 = geiger.Proto.StartValue_2;
        geiger.Update();
        _SubItem( item, needItems );
        cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_GEIGER_ADD_CHARGE );
    }
    else
    {
        cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_GEIGER_NOTHING );
    }
    return true;
}

bool UseSkillOnGeiger( Critter& cr, Item& geiger, int skill ) // Export
{
    if( skill < 0 )
        return false;                                         // Pick, move

    if( skill == SK_SCIENCE )
    {
        cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_GEIGER_CUR_CHARGE, "$cur" + geiger.Val2 + "$max" + geiger.Proto.StartValue_2 );
    }
    else
    {
        cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_GEIGER_NOTHING );
    }
    return true;
}

uint e_Geiger( uint[] @ values )
{
    Item@ geiger = GetItem( values[ 0 ] );
    if( not valid( geiger ) )
        return 0;

    if( geiger.Val1 == 0 )
        return 0;                    // Off
    if( geiger.Val2 > 0 )
        geiger.Val2--;

    // Show rems
    if( geiger.Accessory == ACCESSORY_CRITTER )
    {
        Critter@ cr = GetCritter( geiger.CritId );
        if( valid( cr ) )
        {
            cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_GEIGER_LOOP_CHECK, "$rem" + cr.Stat[ ST_RADIATION_LEVEL ] );
            if( geiger.Val2 == 0 )
            {
                cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_GEIGER_NO_CHARGES );
                cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_GEIGER_OFF );
                cr.PlaySound( "geiger_active.ogg", true );
            }
        }
    }
    else if( geiger.Accessory == ACCESSORY_HEX )
    {
        uint16 hx = 0, hy = 0;
        Map@   map = geiger.GetMapPosition( hx, hy );
        if( valid( map ) )
        {
            Critter@[] critters;
            map.GetCrittersHex( hx, hy, GEIGER_HEX_RANGE - 1, FIND_ALL, critters );
            // Calculate aprox value of radiation
            uint aproxValue = 0;
            for( uint i = 0, j = critters.length(); i < j; i++ )
            {
                Critter@ cr = critters[ i ];
                uint     value = cr.Stat[ ST_RADIATION_LEVEL ] * ( GEIGER_HEX_RANGE - GetDistantion( cr.HexX, cr.HexY, hx, hy ) ) / GEIGER_HEX_RANGE;
                if( value > aproxValue )
                    aproxValue = value;
            }
            // Show to all
            map.SetTextMsg( hx, hy, COLOR_GRAY, TEXTMSG_GAME, STR_GEIGER_LOOP_CHECK, "$rem" + aproxValue );
			map.PlaySound( "geiger_active.ogg", geiger.HexX, geiger.HexY, 3 );
        }
    }

    if( geiger.Val2 == 0 ) // Turn off
    {
        geiger.Val1 = 0;
        geiger.Val3 = 0;
    }

    geiger.Update();
    return geiger.Val2 == 0 ? 0 : GEIGER_DURATION;
}

#endif //GEIGER