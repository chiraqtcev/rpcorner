// Author: cvet, heX, Tab10id
#include "_utils.fos"
// #include "stdlib_h_old.fos"
// #include "stdlib_scenery.fos"
#include "scenery_tree.fos"
#include "stdlib_h.fos"

void s_Dialog( Item& item, bool flag )
{
	Log( "Item #" + item.Id + " PID " + item.GetProtoId() + " - " + itemName( item ) + " [" + ( flag ? "+" : "-" ) + "]" );
}

bool s_Dialog( Critter& player, Scenery& scenery ,int skill, Item@ item )
{
	Log("Player #" + player.Id + " used skill " + skill + " at " + scenery.ProtoId );
	return false;
}

bool s_Dialog( Critter& player, Scenery& scenery, int skill, Item@ item, int dialogId )
{
    // Запускаем диалог, если игрок не применял к сценери скилл или итем
    if( skill == -1 && not valid( item ) )
    {
        return RunDialog( player, dialogId, scenery.HexX, scenery.HexY, false );
    }
    return false;
}

bool s_DoorControl( Critter& player, Scenery& scenery, int skill, Item@ item, int entireNum, int toOpen )
{
    if( toOpen == 1 )
    {
        DoorControl( player, entireNum, true );
    }
    else
    {
        DoorControl( player, entireNum, false );
    }
    return true;
}

bool s_Water( Critter& player, Scenery& scenery, int skill, Item@ item)
{
	if(!(item is null)){
		uint pid = 0;
		if(item.GetProtoId() == PID_BOTTLE_GLASS){
			pid = PID_NUKA_COLA;
		}else{
			player.Say(SAY_NETMSG, "Не подходящий предмет.");
		}
		
		return true;
	}
	
	return false;
}
/*
   bool s_TransitToMap(Critter& player, Scenery& scenery, int skill, Item@ item, int locPid, int mapIndex, int entire)
   {
        return TransitToMap(player, locPid, mapIndex, entire);
   }
 */
