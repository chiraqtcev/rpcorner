// Author: Anuri

#include "_utils.fos"
#include "_ltp.fos"
#include "gathering_h.fos"

import uint8 checkSand( Map& map, uint16 tx, uint16 ty ) from "qmap_sand";

const string[] ShovelSounds = { "pickaxe_mine1.ogg", "pickaxe_mine2.ogg", "pickaxe_mine3.ogg", "pickaxe_mine4.ogg", "pickaxe_mine5.ogg", "pickaxe_mine6.ogg", "pickaxe_mine7.ogg", "pickaxe_mine8.ogg" };

void tryGetSand( Critter& cr, Item& shovel, int hexX, int hexY ) 
{
	Map@ map = cr.GetMap();
	if( !valid( map ) ) { return; }
	
	if( GetDistantion( cr.HexX, cr.HexY, hexX, hexY ) > 1 ) {
		cr.Say( SAY_NETMSG, "|0xFFFF00 Попробуйте копать ближе к себе." );
		return;
	}
	
	uint8 sand_flags = 0; 	
	sand_flags = checkSand( map, H2T( hexX ), H2T( hexY ) );
	
	if( sand_flags == 0 ) {
		cr.Say( SAY_NETMSG, "|0xFFFF00 В этом месте нет пригодного песка." );
		return;
	}
	
	Preparedigging( cr, shovel );
}

bool ltp_inited = false;
void ltp_init() {
	LTPREG( LTP_DIGGING, process_digging )
	ltp_inited = true;
}

bool Preparedigging( Critter& cr, Item@ tool ) 
{
	Map@ map = cr.GetMap();
    if( !valid( map ) ) { return false; }
	if( !valid( tool ) ) { return false; }

   	uint toolPid = tool.GetProtoId();
	if( toolPid != PID_SHOVEL && toolPid != PID_shove3 ) { return false; }

	if( tool.CritSlot != SLOT_HAND1 ) {
		cr.Say( SAY_NETMSG, "|0xFFFF00 Возьмите инструмент в руку." );
		return false;
	}

	if( IsTired( cr ) ) { return false; }
	if( cr.IsInjured() ) { 
		cr.Say( SAY_NETMSG, "|0xFF0000 Вы травмированы и не в состоянии копать." );
		return false; 
	}
	
	start_digging( cr, tool );
	return true;
}

bool start_digging( Critter& cr, Item& tool )
{
	if(!ltp_inited) {
		ltp_init();
	}
	
	if( valid( tool ) ) {	
		uint hit_pause = ACTION_PAUSE_BASE - (cr.Stat[ST_AGILITY] * ACTION_PAUSE_BONUS_RATE );
		uint action_pause = CLAMP( hit_pause, ACTION_PAUSE_MIN, ACTION_PAUSE_MAX );

		uint[] values = { cr.Id, tool.Id };
		CreateTimeEvent( AFTER( REAL_MS( 700 ) ), "e_diggingSound", values, false);
		CreateTimeEvent( AFTER( REAL_MS( 1000 ) ), "gathering@e_TiredenessTimeout", cr.Id, true);	
		_CritAnimateSwing(cr);
		StartProcess( cr, LTP_DIGGING, 0, tool.Id, 0, action_pause );
		return true;
	}
	return false;
}

uint process_digging( Critter@ cr, int& param0, int& param1, int& param2 )
{
    LTPROCESS( cr, param0, LTP_DIGGING )
	uint hit_pause = ACTION_PAUSE_BASE - (cr.Stat[ST_AGILITY] * ACTION_PAUSE_BONUS_RATE );
	uint action_pause = CLAMP( hit_pause, ACTION_PAUSE_MIN, ACTION_PAUSE_MAX );
    Item@ tool = GetItem( param1 );

	if( IsTired( cr ) ) 
    { 
        StopProcess( cr );
        return 0;
    }

  	if( valid( tool ) )
    {
      	param0++;
		Item@ tool = cr.GetItem( 0, SLOT_HAND1 );
		if( valid( tool ) )
		{
			uint digging_rage = ( cr.Skill[ SK_OUTDOORSMAN ] * 2 ) + ( cr.Stat[ ST_STRENGTH ] * 20 ) + OBJECT_DPA_BASE; 
			int sequence_length = ceil( float( ( OBJECT_HP_BASE ) / ( CLAMP( digging_rage, OBJECT_DPA_MIN, OBJECT_DPA_MAX ) ) ) );
			
			if( param0 > sequence_length ) {
				param0 -= sequence_length;
				
				uint16 lootPid = PID_SAND;
				uint amount = 1;
				cr.AddItem( lootPid, amount );
				string inform = "Вы добыли: \n";
				inform += "- ";
				inform += "|0xFFFF00 " + _GetProtoName( lootPid );
				inform += "|0x3CF800  - ";
				inform += "|0xFFFF00 " + amount;
				inform += "|0x3CF800  шт.";
				cr.Say( SAY_NETMSG, inform );
			}
			
			_CritAnimateSwing(cr);
			uint[] values = { cr.Id };
			CreateTimeEvent( AFTER( REAL_MS( 700 ) ), "e_diggingSound", values, false );
			CreateTimeEvent( AFTER( REAL_MS( 1000 ) ), "gathering@e_TiredenessTimeout", cr.Id, true );
			return action_pause;
		}
    }
	return 0;
}

uint e_diggingSound( uint[]@ values )
{
	Critter@ cr = GetCritter(values[0]);
	Map@ map = cr.GetMap();
	map.PlaySound( ShovelSounds[ Random( 0, ShovelSounds.length() -1 ) ], cr.HexX, cr.HexY, 5 );
	return 0;
}