#ifndef WATERWORKS
#define WATERWORKS

#include "_utils.fos"
#include "waterworks_h.fos"
#include "_ltp.fos"
#include "gathering_h.fos"
#include "food_h.fos"
#include "flask_h.fos"
#include "drugs_h.fos"
#include "radiation_h.fos"

class MenuWell: CenteredMenuHandler {
    uint well_id;
    uint map_id;
	
    MenuWell(Item& well, Map& map) {
        well_id = well.Id;
        map_id = map.Id;
    }

    bool MenuUpdate( Critter& cr, iDialogBox& menu ) {
		
        Map@ map = GetMap( map_id );
        Item@ well = GetItem( well_id );
		
		if( map is null || well is null ) {
            return false;
        }

		Item@ bucket = well.GetItem( PID_EMPTY_BUCKET, 0 );
		Item@ bucket2 = well.GetItem( PID_WATER_BUCKET, 0 );
		Item@ chain = well.GetItem( PID_CHAIN, 0 );

		if( isGM( cr ) ) {
			string type = _GetProtoName( well.WATERSOURCE_DNA );
			if(  menu.Button( type ) ) {
				if( well.WATERSOURCE_DNA == PID_GLASS_BOTTLE_DIRTY_FULL_PRT ) {
					well.WATERSOURCE_DNA = PID_GLASS_BOTTLE_FULL_PRT;
				} else {
					well.WATERSOURCE_DNA = PID_GLASS_BOTTLE_DIRTY_FULL_PRT;
				}
			}
		}
		
		if( well.BROKEN != BROKEN_MECHANICS ) {
			
			if( ( valid( bucket ) || valid( bucket2 ) || well.BUCKET_POSITION > 0 ) && valid( chain ) ) 
			{ 
				@ bucket = valid( bucket) ? bucket : bucket2;
				if( well.BUCKET_POSITION == 0 ) {
					if( menu.Button( "Опустить ведро" ) ) {
						well.BUCKET_POSITION = CLAMP( ( 10 - well.REMAINING_CHARGE / 100 ), 1, 10);
						well.REMAINING_CHARGE += bucket.REMAINING_USES;
						
						if( well.REMAINING_CHARGE > well.MAX_CHARGE ) {
							well.REMAINING_CHARGE = well.MAX_CHARGE;
						}
						
						DeleteItem( bucket );
						PlayChainSound( map, well );
						return true;
					}
				} else {
					if( menu.Button( "Поднять ведро" ) ) {
						start_waterwell( cr, well );
						return false;
					}
				}
			}
			if( well.BUCKET_POSITION == 0 ) {
				if( menu.Button( "Осмотреть колодец" ) ) {
					ShowContainer( cr, well, TRANSFER_HEX_CONT_UP );
					return false;
				}
			}
		}
		return true;
    }
	
	// UI менюхи
    string@ Description( Critter& cr ) {
		Item@ well = GetItem(well_id);
		string info;
		string chargeInfo;
		string bucketInfo;
		string chainInfo;
		string bucketPos;
		string positionDisc;
		
		if( well.STATE != BROKEN_MECHANICS ) {
			if( ( valid( well.GetItem( PID_EMPTY_BUCKET, 0 ) ) || valid(well.GetItem( PID_WATER_BUCKET, 0 ) ) || well.BUCKET_POSITION != 0 ) ) {
				
				well.BUCKET_POSITION > 0 ? bucketInfo = "\nВедро спущено." : bucketInfo = "\nВедро на месте.";
			} else {
				bucketInfo = "\nВедра нет!";
			}

			if( valid( well.GetItem( PID_CHAIN, 0 ) ) ) {
				
			chainInfo =	"\nЦепь на месте.";
			} else {
				chainInfo = "\nВедро не чем привязать.";
			}
			
			well.REMAINING_CHARGE >= 700 ? chargeInfo = "отчетливо видна." : well.REMAINING_CHARGE <= 3 ? chargeInfo = "не видна." : chargeInfo = "поблескивает в глубине.";
			
			if( well.BUCKET_POSITION != 0 ) {
				
				well.BUCKET_POSITION >= 7 ? positionDisc = "почти полностью размотана." : well.BUCKET_POSITION <= 3 ? positionDisc = "практически не размотана." : positionDisc = "размотана на половину.";
				
				bucketPos = "\nЦепь " + positionDisc;
			}
			
			info += "Вода " + chargeInfo;
			info += "\n " + bucketInfo;
			info += "\n " + chainInfo;
			info += "\n " + bucketPos;
		} else {
			info = "Колодец сломан, требуется ремонт";
		}
        return info;
    }
	
    string@ ButtonCancel() {
        return ButtonDecorator( "Скрыть меню", null );
    }
	
    void OnMenuDraw(Critter& cr) {
        cr.Say(SAY_NETMSG, DebugMenu(cr));
    }
}

// точка входа из main.fos при юзе рукой
void StartMenuWell( Critter& cr, Item& well) // exported
{
    Map@ map = cr.GetMap();
    if( map is null ) {
        return;
    }

    iMenuHandler@ handler = MenuWell(well, map);
    iDialogBox@ menu = OpenMenu( cr, "Колодец", handler );
}

void PlayChainSound( Map& map, Item & well ) {
	map.PlaySound( "wellChain.ogg", well.HexX, well.HexY, 5 );
	uint[] values = {well.Id, map.Id};
	CreateTimeEvent( AFTER( REAL_SECOND( 3 ) ), "e_Splash", values, false );
}

uint e_Splash( uint[]@ values ) {
	
	int itemId = values[0];
	Item@ well = GetItem( itemId );
	int mapId = values[1];
	Map@ map = GetMap( mapId );
	map.PlaySound( "BucketSplash.ogg", well.HexX, well.HexY, 5 );
	return 0;
}

// LongTimeProcess
bool ltp_waterwell_inited = false;
void ltp_waterwell_init()
{
	LTPREG( LTP_WATERWELL, process_waterwell )
	ltp_waterwell_inited = true;
}

bool start_waterwell( Critter& cr, Item& well )
{
	if(!ltp_waterwell_inited) { 
		ltp_waterwell_init();
	}
	
	Map@ map = cr.GetMap();		
	
	if( valid( well ) ) {
		
		StartProcess( cr, LTP_WATERWELL, 0, 0, well.Id, 0 );
		return true;
	}
	return false;
}

uint process_waterwell( Critter@ cr, int& param0, int& param1, int& param2 )
{
 	LTPROCESS( cr, param0, LTP_WATERWELL )
	uint hit_pause = ACTION_PAUSE_BASE - ( cr.Stat[ST_AGILITY] * ACTION_PAUSE_BONUS_RATE );
	uint action_pause = CLAMP( hit_pause, ACTION_PAUSE_MIN, ACTION_PAUSE_MAX );
	Item@ well = GetItem( param2 );
	Map@ map = cr.GetMap();
	
  	if( valid( well ) && valid( map ) ) {
		
		_CritAnimateUse(cr);
		uint autoemote = Random( 1, 10 );
		if( autoemote == 10 ) { 
			cr.Say( SAY_EMOTE, "Крутит бобину" );
		}
		
		param0++;
		
		CreateTimeEvent( AFTER( REAL_MS( 1000 ) ), "gathering@e_TiredenessTimeout", cr.Id, true);
		
		well.BUCKET_POSITION --; 
		
		map.PlaySound( WellReelSounds[ Random( 0, WellReelSounds.length() -1 ) ], well.HexX, well.HexY, 5 );
		
		if ( well.BUCKET_POSITION != 0 ) {

			return action_pause;
		
		} else if( well.BUCKET_POSITION < 0 ) {
			
			well.BUCKET_POSITION = 0;
			uint[] values = {well.Id, map.Id};
			CreateTimeEvent( AFTER( REAL_SECOND( 3 ) ), "e_Splash", values, false );
			cr.Say( SAY_NETMSG, "|0xFFFF00 Ведро сорвалось и улетело вниз..." );
			return 0;
			
		} else {
			
			if( well.REMAINING_CHARGE > 0 ) {
				Item@ fullBucket = well.AddItem( PID_WATER_BUCKET, 1, 0 );
			
				if( well.REMAINING_CHARGE < fullBucket.Proto.Partial_Item ) {
					fullBucket.REMAINING_USES = well.REMAINING_CHARGE;
					well.REMAINING_CHARGE = 0;
				} else {
					fullBucket.REMAINING_USES = fullBucket.Proto.Partial_Item;
					well.REMAINING_CHARGE -= fullBucket.Proto.Partial_Item;
				}
				
				fullBucket.EXTRA_WEIGHT = fullBucket.REMAINING_USES * 100;
				fullBucket.BUCKET_DNA = well.WATERSOURCE_DNA;
				fullBucket.Update();
				
			} else {
				well.AddItem( PID_EMPTY_BUCKET, 1, 0 );
			}
			
			map.SetText( well.HexX, well.HexY, COLOR_LGRAY, ":ведро показалось:" );
		}			
	}
	return 0;
}

//~run waterworks _WellsInit 0 0 0
void _WellsInit(Critter& player, int param0, int param1, int param2)
{
	FoceWellsCharge();
}

void FoceWellsCharge()
{
    Map@[] maps;
    for( int i = 0, iend = GetAllMaps( 0, maps ); i < iend; i++)
	{   
		CheckMapWellEvent( maps[i] );
	}
}

bool CheckMapWellEvent( Map& map )
{
	Item@[] activeWells;
	for( int i = 0, iend = Wells.length(); i < iend; i++ ) {
		map.GetItems( Wells[i], activeWells );
	}
	
	if( activeWells.length != 0 ) {
		
		for( int i = 0, iend = activeWells.length(); i < iend; i++ ) {
			Item@ well = activeWells[i];
			
			if( !valid( well ) ) { return false; }
			if( well.EVENT > 0 ) { return false; }
			
			uint[] values = { well.Id };
			well.EVENT = CreateTimeEvent( AFTER( WATER_FILL_TIME ), "e_WellCharge", values, true );
			values.resize(0);
		}
	}

	activeWells.resize(0);
    return false;
} 

uint e_WellCharge( uint[] @ values ) 
{
	Item@ well = GetItem( values[ 0 ] );
	if( !valid( well ) ) { return 0; }
	
	Map@ map = GetMap( well.MapId );
	if( !valid( map ) ) { return 0; }
	
	well.REMAINING_CHARGE += CLAMP( Random( 50, 150 ), 0, well.MAX_CHARGE );
	if( well.REMAINING_CHARGE > well.MAX_CHARGE ) {
		well.REMAINING_CHARGE = well.MAX_CHARGE;
	}
	return WATER_FILL_TIME;
}

//WATERPUMP
bool isFlask( Critter& cr, Item& waterPump )
{
	if( valid( waterPump ) ){
		
		Item@ flask = _CritGetItemHand( cr );
		if( !valid( flask) ) { return false; }
		
		uint16 handPid = flask.GetProtoId();
		if( Flasks.find( handPid ) != -1 && ( flask.DRINK_DNA == waterPump.WATERSOURCE_DNA || flask.DRINK_DNA == 0 ) ) {
			return true;
		}
	}
	return false;
}


// Интерактивное меню ку3, точка входа main.fos
class MenuWaterPump: CenteredMenuHandler {
    uint waterPump_id;
    uint map_id;
	uint level;
	
    MenuWaterPump(Item& waterPump, Map& map) 
    {
        waterPump_id = waterPump.Id;
        map_id = map.Id;
		level = 0;
    }

    bool MenuUpdate( Critter& cr, iDialogBox& menu ) 
    {
        Map@ map = GetMap(map_id);
        Item@ waterPump = GetItem(waterPump_id);
	
        if( map is null || waterPump is null )
            return false;
		
		if( isGM( cr ) )
		{
			string type = _GetProtoName( waterPump.WATERSOURCE_DNA );
			if( menu.Button( type ) ) 
			{
				if( waterPump.WATERSOURCE_DNA == PID_GLASS_BOTTLE_DIRTY_FULL_PRT )
					waterPump.WATERSOURCE_DNA = PID_GLASS_BOTTLE_FULL_PRT;
				else
					waterPump.WATERSOURCE_DNA = PID_GLASS_BOTTLE_DIRTY_FULL_PRT;
			}
		
			if( waterPump.BROKEN == 0 && menu.Button( "сломать" ) ) 
				waterPump.BROKEN = 1; 
			else if(waterPump.BROKEN != 0 && menu.Button( "починить" ) )
				waterPump.BROKEN = 0;
		}
		
		if( waterPump.BROKEN != BROKEN_MECHANICS ) 
		{
			if( waterPump.STATE > 0 ) 
			{
				if( menu.Button( "Выключить" ) ) 
				{
					waterPump.STATE = 0;
					EraseTimeEvent( waterPump.EVENT );
					waterPump.EVENT = 0;
					setAnimState( waterPump );
					return false;
				}
				
				if( waterPump.REMAINING_CHARGE > 0 ) 
				{
					if( menu.Button( "Набрать воды" ) ) 
					{						
						if( !hasItem( cr, PID_BOTTLE_GLASS, SLOT_HAND1 ) && !hasItem( cr, waterPump.WATERSOURCE_DNA, SLOT_HAND1 ) && !isFlask( cr, waterPump ) ) 
						{ 
							cr.Say( SAY_NETMSG, "|0xFFFF00 У вас нет подходящей тары в руках." );
							return true;
						}

						start_gathering_water( cr, waterPump );
						return false;
						
					} 

					if ( menu.Button( "Попить" ) ) 
					{
						Item@ consumedDrink = cr.AddItem( waterPump.WATERSOURCE_DNA, 1 );
						consumedDrink.REMAINING_USES = 2;
						ProccessDrink( cr, cr, consumedDrink );
						_SubItem( consumedDrink, 1 );
						waterPump.REMAINING_CHARGE --;
						return true;
					}
				}
				
			} 
			else if( menu.Button( "Включить" ) ) 
			{
				waterPump.STATE = 1;
				EraseTimeEvent( waterPump.EVENT );
				uint[] values = { waterPump.Id };
				waterPump.EVENT = CreateTimeEvent( AFTER( PUMP_FILL_TIME / waterPump.PUMP_EFFICIENCY ), "e_WaterPumpCharge", values, true );
				setAnimState( waterPump );
				return true;
			}
		}
		return true;
    }
	
	// UI менюхи
    string@ Description( Critter& cr ) {
	
		Item@ waterPump = GetItem( waterPump_id );

		string info = "Водяной насос № ";
		info += "|0xFFFF00 " + waterPump.Id + "\n";
		
		info += "|0x3CF800 Помпа ";
		if( waterPump.WATERSOURCE_DNA == PID_GLASS_BOTTLE_DIRTY_FULL_PRT )
			info += "|0xFF0000 не ";
		info += "|0x3CF800 фильтрует воду. \n";
		
		if( waterPump.BROKEN == BROKEN_MECHANICS )
			info += "|0x3CF800 Насос выведен из строя \n";
			
		if( waterPump.BROKEN == BROKEN_FILTER ) 
			info += "|0x3CF800 Фильтр выведен из строя \n";
	
		float remCharge = waterPump.REMAINING_CHARGE;
		float amount = remCharge / 10.0f;
		info += "|0x3CF800 В баках: ";
		info += "|0xFFFF00 " + amount;
		info += "|0x3CF800  / ";
		float maxCharge = waterPump.MAX_CHARGE;
		float maxAmount = maxCharge / 10.0f;
		info += "|0xFFFF00 " + maxAmount;
		info += "|0x3CF800  л.";

		if( waterPump.ENERGY != waterPump.NEED_ENERGY )
			info += "\n|0xFF0000 Нехватка энергии!";
        
        return info;
    }
	
    string@ ButtonCancel() {
        return ButtonDecorator( "Закрыть меню", null );
    }
}

// точка входа из main.fos при юзе рукой
void StartMenuWaterPump( Critter& cr, Item& waterPump ) // exported
{
    Map@ map = cr.GetMap();
    if( map is null ) 
        return;
  
    iMenuHandler@ handler = MenuWaterPump( waterPump, map );
    iDialogBox@ menu = OpenMenu( cr, "Водяной насос", handler );
}

bool ltp_gathWater_inited = false;
void ltp_gathWater_init()
{
	LTPREG( LTP_GATHER_WATER, process_gather_water )
	ltp_gathWater_inited = true;
}

bool start_gathering_water( Critter& cr, Item& waterPump )
{
	if(!ltp_gathWater_inited) { 
		ltp_gathWater_init();
	}
	
	Map@ map = cr.GetMap();		
	
	if( valid( waterPump ) ) {
		
		if( waterPump.REMAINING_CHARGE < 1 ) {
			cr.Say( SAY_NETMSG, "|0xFFFF00 Воды больше нет." );
			return false;
		}
	
		if( waterPump.STATE < 1 ) {
			cr.Say( SAY_NETMSG, "|0xFFFF00 Помпа отключена. Включите ее сначала." );
			return false;
		}
		
		if( !hasItems( cr, Flasks, SLOT_HAND1 ) && !hasItem( cr, PID_BOTTLE_GLASS, SLOT_HAND1 ) && !hasItem( cr, waterPump.WATERSOURCE_DNA, SLOT_HAND1 ) && !isFlask( cr, waterPump ) ) { 
			cr.Say( SAY_NETMSG, "|0xFFFF00 У вас нет подходящей тары в руках." );
			return false;
		}

		uint hit_pause = ACTION_PAUSE_BASE - (cr.Stat[ST_AGILITY] * ACTION_PAUSE_BONUS_RATE );
		uint action_pause = CLAMP( hit_pause, ACTION_PAUSE_MIN, ACTION_PAUSE_MAX );
		map.PlaySound( "homebrew_pouring.ogg", cr.HexX, cr.HexY, 5 );
		
		cr.SetAnims( COND_LIFE, 0, ANIM2_CROUCH );
		
		StartProcess( cr, LTP_GATHER_WATER, 0, 0, waterPump.Id, action_pause );
		return true;
	}
	return false;
}

uint process_gather_water( Critter@ cr, int& param0, int& param1, int& param2 )
{
    LTPROCESS( cr, param0, LTP_GATHER_WATER )
	uint hit_pause = ACTION_PAUSE_BASE - ( cr.Stat[ST_AGILITY] * ACTION_PAUSE_BONUS_RATE );
	uint action_pause = CLAMP( hit_pause, ACTION_PAUSE_MIN, ACTION_PAUSE_MAX );
  	Item@ waterPump = GetItem( param2 );
	
  	if( valid( waterPump ) ) {
		
      	if( ( !hasItem( cr, PID_BOTTLE_GLASS ) && !hasItem( cr, waterPump.WATERSOURCE_DNA ) && !isFlask( cr, waterPump ) ) || waterPump.REMAINING_CHARGE < 1 ) {
			string TXT = ( !hasItem( cr, PID_BOTTLE_GLASS ) || !hasItem( cr, waterPump.WATERSOURCE_DNA ) ) ? " У Вас закончилась тара." : " Вы разлили всю воду по бутылкам.";
			cr.Say( SAY_NETMSG, "|0xFFFF00" + TXT );
			
			cr.SetAnims(COND_LIFE, 0, ANIM2_IDLE);
			return 0;
		}
		
		uint autoemote = Random( 1, 10 );
		if( autoemote == 10 ) { cr.Say( SAY_EMOTE_ON_HEAD, "Наполняет ёмкость" );
		}
		
		if( hasItem( cr, waterPump.WATERSOURCE_DNA ) ) {
			
			Item@ waterBottlePrt = getItem( cr, waterPump.WATERSOURCE_DNA );
			if( waterBottlePrt.REMAINING_USES < waterBottlePrt.Proto.Partial_Item ) {
				
				waterPump.REMAINING_CHARGE --;
				waterBottlePrt.REMAINING_USES ++;
				waterBottlePrt.EXTRA_WEIGHT = waterBottlePrt.REMAINING_USES * 100;

				Map@ map = cr.GetMap();
				map.PlaySound( "homebrew_pouring.ogg", cr.HexX, cr.HexY, 5 );
								
				waterBottlePrt.Update();
				
			} else {
			
				Item@ waterBottle = null;
				if( waterPump.WATERSOURCE_DNA == PID_GLASS_BOTTLE_FULL_PRT ) {
					@ waterBottle = cr.AddItem( PID_GLASS_BOTTLE_FULL, 1 );
				} else {
					@ waterBottle = cr.AddItem( PID_GLASS_BOTTLE_DIRTY_FULL, 1 );
				}
				_SubItem( waterBottlePrt , 1 );
				
				cr.Say( SAY_NETMSG, "|0xFFFF00 Вы полностью наполнили бутылку водой" );
				
				waterBottle.Update();
			}

			return action_pause;
			
		} else if( isFlask( cr, waterPump ) ){
			Item@ flask = _CritGetItemHand( cr );
			if( ( flask.Proto.Partial_Item - flask.REMAINING_USES ) > 0 ) {
				
				waterPump.REMAINING_CHARGE --;
				if( flask.REMAINING_USES == 0 ) {
					ChangeProto( flask );	
				}
				
				flask.REMAINING_USES ++;
				flask.EXTRA_WEIGHT = flask.REMAINING_USES * 100;

				if( flask.DRINK_DNA == 0 ) {
					flask.DRINK_DNA = waterPump.WATERSOURCE_DNA;
				}

				Map@ map = cr.GetMap();
				map.PlaySound( "homebrew_pouring.ogg", cr.HexX, cr.HexY, 5 );
			
				flask.Update();
			} else {
				cr.SetAnims( COND_LIFE, 0, ANIM2_IDLE );
				cr.Say( SAY_NETMSG, "|0xFFFF00 Вы полностью наполнили ёмкость водой" );
				return 0;
			}
			
		} else {
		
			Item@ bottle = cr.GetItem( PID_BOTTLE_GLASS, -1 );
			_SubItem( bottle , 1 );
		
			Item@ waterBottlePrt = cr.AddItem( waterPump.WATERSOURCE_DNA, 1 );
			
			Item@ hands = cr.GetItem( 0, SLOT_HAND1 );
			if( valid( hands ) ) {
				cr.MoveItem( hands.Id, hands.GetCount(), SLOT_INV );
			}
			
			cr.MoveItem( waterBottlePrt.Id, waterBottlePrt.GetCount(), SLOT_HAND1 );
		
			waterPump.REMAINING_CHARGE --;
			waterBottlePrt.REMAINING_USES ++;
			waterBottlePrt.EXTRA_WEIGHT = waterBottlePrt.REMAINING_USES * 100;

			Map@ map = cr.GetMap();
			map.PlaySound( "homebrew_pouring.ogg", cr.HexX, cr.HexY, 5 );
				
			waterBottlePrt.Update();
		}
		
		return action_pause;
    }
	cr.SetAnims( COND_LIFE, 0, ANIM2_IDLE );
	return 0;
}

void setAnimState( Item& item )
{
	if( item.STATE == 1 ) {	
		SETFLAG( item.Flags, ITEM_SHOW_ANIM );
		UNSETFLAG( item.Flags, ITEM_SHOW_ANIM_EXT );
	} else {
		UNSETFLAG( item.Flags, ITEM_SHOW_ANIM );
		SETFLAG( item.Flags, ITEM_SHOW_ANIM_EXT );
	}
	item.Update();
}

//~run waterworks _WaterPumpsInit 0 0 0
void _WaterPumpsInit(Critter& player, int param0, int param1, int param2)
{
	FoceWaterPumpsCharge();
}

//import void FoceWellsCharge() from "waterworks";
void FoceWaterPumpsCharge()
{
    Map@[] maps;
    for( int i = 0, iend = GetAllMaps( 0, maps ); i < iend; i++)
	{   
		CheckMapWaterPumpEvent( maps[i] );
	}
}

bool CheckMapWaterPumpEvent( Map& map )
{
	Item@[] activeWaterPumps;

	map.GetItems( PID_OBJECT_WATERPUMP, activeWaterPumps );
	
	if( activeWaterPumps.length != 0 ) 
	{
		
		for( int i = 0, iend = activeWaterPumps.length(); i < iend; i++ ) 
		{
			Item@ waterPump = activeWaterPumps[i];
			
			if( !valid( waterPump ) ) { return false; }
			if( waterPump.EVENT > 0 ) { return false; }
			
			uint[] values = { waterPump.Id };
			
			if( waterPump.PUMP_EFFICIENCY < 1 ) {
				waterPump.PUMP_EFFICIENCY = 1;
			}
	
			waterPump.EVENT = CreateTimeEvent( AFTER( PUMP_FILL_TIME / waterPump.PUMP_EFFICIENCY ), "e_WaterPumpCharge", values, true );
			values.resize(0);
		}
	}

	activeWaterPumps.resize(0);
    return false;
} 

uint e_WaterPumpCharge( uint[] @ values ) 
{
	Item@ waterPump = GetItem( values[ 0 ] );
	if( !valid( waterPump ) ) 
		return 0; 
	
	Map@ map = GetMap( waterPump.MapId );
	if( !valid( map ) ) { return 0; }

	if( waterPump.BROKEN != 0 )
	{
		EraseTimeEvent( waterPump.EVENT );
		waterPump.EVENT = 0;
		return 0;		
	}

	if( waterPump.ENERGY == waterPump.NEED_ENERGY )
	{
		waterPump.ENERGY = 0;
		waterPump.REMAINING_CHARGE ++;
	}
	
	if( waterPump.REMAINING_CHARGE > waterPump.MAX_CHARGE )
		waterPump.REMAINING_CHARGE = waterPump.MAX_CHARGE;
	
	if( waterPump.PUMP_EFFICIENCY < 1 )
		waterPump.PUMP_EFFICIENCY = 1;
	
	return PUMP_FILL_TIME / waterPump.PUMP_EFFICIENCY;
}

//Character Washing
bool ltp_washing_inited = false;
void ltp_washing_init()
{
    LTPREG( LTP_WASHING, process_washing )
    ltp_washing_inited = true;
}

void start_washing( Critter& player, bool handsOnly ) //exported
{
    if( !ltp_washing_inited ) {
        ltp_washing_init();
	}
	
	StartProcess( player, LTP_WASHING, handsOnly ? 1 : 0, 1000 );
}

uint process_washing( Critter@ cr, int& param0, int& param1, int& param2 )
{
    LTPROCESSD( LTP_WASHING )
	cr.Say( SAY_EMOTE_ON_HEAD, "Моет" + ( param0 == 1 ? " руки" : "ся" ) );
	cr.ParamBase[ CR_DIRTINESS ] -= 1 + Random( 0, cr.ParamBase[ CR_DIRTINESS ] * 0.2 );
	
	if( cr.ParamBase[ CR_DIRTINESS ] <= 0 ) {
		cr.Say( SAY_NETMSG, "|0xFF0000 Вы помылись." );
		return 0;
	}
    return 2000;
}

bool useWater( Critter& cr )
{
	uint[][] water_bottles = 
	{
		{ PID_GLASS_BOTTLE_DIRTY_FULL, PID_BOTTLE_GLASS },
		{ PID_GLASS_BOTTLE_FULL, PID_BOTTLE_GLASS }, 
		{ PID_CLEAN_WATER2, PID_BOTTLE_GLASS },
	};
	
	Item@ water = null;
	int n = -1;
	
	for( uint i = 0; i < water_bottles.length(); i++ )
	{
		if( water_bottles[i].length() < 2 ) continue;
		@water = cr.GetItem( water_bottles[i][0], -1 );

		if( valid(water) ) 
		{	
			if( water_bottles[i][0] == PID_GLASS_BOTTLE_DIRTY_FULL ) {
				AffectRadiation( cr, 1 );
			}
			
			cr.AddItem( water_bottles[i][1], 1 );

			Map@ map = cr.GetMap();	
			map.PlaySound( "splash.ogg", cr.HexX, cr.HexY, 5 );	
			_SubItem( water, 1 );
			return true;
		}
	}
	
	return false;
}

bool isHandWasher( int water_source )
{
	uint[] hand_washers = { 2615, 2619, PID_BADYA, PID_WELL_1, PID_WELL_2, PID_NEW_WELL };
	return hand_washers.find(water_source) != -1;
}

bool PrepareCleaning( Critter& player, Critter& target, int water_source )
{
	if( water_source == 0 ) //Если нет стороннего источника воды
	{
		if( !useWater( player ) && !useWater( target ) )
		{
			player.Say( SAY_NETMSG, "У вас нет воды для этого." );
			return false;
		}
	}
	else 
	{
		if( !isHandWasher( water_source ) ) //Если моешься в душе, а не просто руки с мылом помыл.
		{
			//Тут будет выпадение вещей из инвентаря, поломка раций и износ брони/оружия.
			Map@ map = player.GetMap();	
			map.PlaySound( "shower.ogg", player.HexX, player.HexY, 5 );	
		}
		else
		{
			Map@ map = player.GetMap();	
			if( water_source == PID_BADYA || water_source == PID_WELL_1 || water_source == PID_WELL_2 || water_source == PID_NEW_WELL ) {
				map.PlaySound( "splash.ogg", player.HexX, player.HexY, 5 );
			} else {
				map.PlaySound( "water_running.ogg", player.HexX, player.HexY, 5 );	
			}
		}
	}
	
	return true;
}

void Cleaning( Critter& player, uint soap_pid, int water_source )
{
	Cleaning( player, player, soap_pid, water_source );
}

void Cleaning( Critter& player, Critter& target, uint soap_pid, int water_source )
{
	if( PrepareCleaning( player, target, water_source ) )
		SoapEffect( player, target, soap_pid, water_source );
}

void SoapEffect( Critter& player, Critter& target, uint soap_pid, int water_source )
{
	Critter@ owner = @player;
	Item@ soap = getSoap( player, soap_pid );
	if( !valid( soap ) ) {
		@soap = getSoap( target, soap_pid );
		
		if( valid( soap ) ) {
			@owner = @target;
		}
	}
	
	bool isHandsOnly = isHandWasher( water_source );
	
	int pid = valid(soap) ? soap.GetProtoId() : 0;
	switch( pid )
	{
		case( PID_ITSOAP01 ):
			owner.Say( SAY_NETMSG, "|0xFFFF00 Вы используете новый кусок мыла." );
			_SubItem( soap, 1 );
			@soap = owner.AddItem( PID_ITSOAP01_PRT, 1 );
			
		case( PID_ITSOAP01_PRT ):
			target.Say( SAY_EMOTE_ON_HEAD, "Моет" + ( isHandsOnly ? " руки" : "ся" ) + " хозяйственным мылом" );
			target.ParamBase[ CR_DIRTINESS ] = ( target.ParamBase[ CR_DIRTINESS ] * 0.8 ) - 5;

			soap.Val0--;
			soap.Update();
			if( soap.Val0 < 1 )
			{
				owner.Say( SAY_NETMSG, "|0xFFFF00 Вы использовали последние крохи мыла." );
				_SubItem( soap, 1 );
			}
			break;
		
		case( PID_FPSHL6 ):
			owner.Say( SAY_NETMSG, "|0xFFFF00 Вы используете новый кусок мыла." );
			_SubItem( soap, 1 );
			@soap = owner.AddItem( PID_FPSHL6_PRT, 1 );
			
		case( PID_FPSHL6_PRT ):
			target.Say( SAY_EMOTE_ON_HEAD, "Моет" + ( isHandsOnly ? " руки" : "ся" ) + " душистым мылом" );
			target.ParamBase[ CR_DIRTINESS ] = ( target.ParamBase[ CR_DIRTINESS ] * 0.6 ) - 10;
			
			if( target.ParamBase[ CR_DIRTINESS ] <= 0 && target.GetTimeEvents( CTE_ROTTEN, null, null, null ) < 1 ) {
				target.Say( SAY_NETMSG, "Помывшись душистым мылом, вы стали приятнее окружающим." );
				SetDrug( target, PID_SOAP_DRUG_CHARISMA );
			}
			soap.Val0--;
			soap.Update();
			if( soap.Val0 < 1 ) {
				owner.Say( SAY_NETMSG, "|0xFFFF00 Вы использовали последние крохи мыла." );
				_SubItem( soap, 1 );
			}
			break;
		
		default:
			target.Say( SAY_EMOTE_ON_HEAD, "Ополаскивает" + ( isHandsOnly ? " руки" : "ся" ) );
			target.ParamBase[ CR_DIRTINESS ] -= 1 + Random( 0, target.ParamBase[ CR_DIRTINESS ] * 0.2 );
			
			if( water_source > 0 ) {
				start_washing( target, isHandsOnly );
			}
			break;
	}
}

Item@ getSoap( Critter& player, uint soap_pid )
{
	Item@ soap;
	uint[] soap_pids = { PID_ITSOAP01_PRT, PID_FPSHL6_PRT, PID_ITSOAP01, PID_FPSHL6 };
	for( uint i = 0, l = soap_pids.length(); i < l; i++ ) {
		@soap = player.GetItem( soap_pid == 0 ? soap_pids[i] : soap_pid, -1 );
		if( valid( soap ) ) {
			break;
		}
	}
	return soap;
}


// Контейнеры с водой
void StartWaterBarrelMenu( Critter& cr, Item& barrel ) // exported
{
    Map@ map = cr.GetMap();
    if( map is null )
        return;

    iMenuHandler@ handler = WaterBarrelMenu( barrel );
    iDialogBox@ menu = OpenMenu( cr, "Меню", handler );
}

class WaterBarrelMenu: CenteredMenuHandler {

    int contID;

    WaterBarrelMenu( Item& container ) 
    {
        contID = container.Id;
    }

    bool MenuUpdate( Critter& cr, iDialogBox& menu ) 
    {
    	Item@ container = GetItem( contID );
		if( !valid( container ) )
			return false;

		if( menu.Button( "Набрать воды" ) )
		{   
			if( !hasItem( cr, PID_BOTTLE_GLASS, SLOT_HAND1 ) && !hasItem( cr, container.WATERSOURCE_DNA, SLOT_HAND1 ) && !isFlask( cr, container ) ) 
			{ 
				cr.Say( SAY_NETMSG, "|0xFFFF00 У вас нет подходящей тары в руках." );
				return true;
			}

			start_gathering_water( cr, container );
			return false;        
		} 

		if( menu.Button( "Залить воды" ) )
		{   
			if( container.BARREL_CHARGE >= container.BARREL_MAX_CHARGE )
			{
				cr.Say( SAY_NETMSG, "|0xFFFF00 Контейнер заполнен." );
				return true;				
			}

			if( !hasItems( cr, WaterBottles, SLOT_HAND1 ) )
			{
				cr.Say( SAY_NETMSG, "|0xFFFF00 У вас нет подходящей тары в руках." );
				return true;				
			}

			Item@ item = _CritGetItemHand( cr );

			if( container.BARREL_CHARGE == 0 )
			{
				if( item.GetProtoId() == PID_GLASS_BOTTLE_FULL || item.GetProtoId() == PID_GLASS_BOTTLE_FULL_PRT )
					container.BARREL_DNA = PID_GLASS_BOTTLE_FULL_PRT;
				else
					container.BARREL_DNA = PID_GLASS_BOTTLE_DIRTY_FULL_PRT;
			}

			if( ( item.GetProtoId() == PID_GLASS_BOTTLE_FULL || item.GetProtoId() == PID_GLASS_BOTTLE_FULL_PRT ) && container.BARREL_DNA != PID_GLASS_BOTTLE_FULL_PRT )
			{
				cr.Say( SAY_NETMSG, "|0xFFFF00 У вас нет подходящей тары в руках." );
				return true;
			}

			if( ( item.GetProtoId() == PID_GLASS_BOTTLE_DIRTY_FULL || item.GetProtoId() == PID_GLASS_BOTTLE_DIRTY_FULL_PRT ) && container.BARREL_DNA != PID_GLASS_BOTTLE_DIRTY_FULL_PRT )
			{
				cr.Say( SAY_NETMSG, "|0xFFFF00 У вас нет подходящей тары в руках." );
				return true;
			}

			if( item.GetProtoId() == PID_GLASS_BOTTLE_FULL || item.GetProtoId() == PID_GLASS_BOTTLE_DIRTY_FULL )
				container.BARREL_CHARGE += 5;
			else
				container.BARREL_CHARGE += item.REMAINING_USES;

			cr.AddItem( PID_BOTTLE_GLASS, 1 );
			_SubItem( item, 1 );			
			return true;        
		} 

        return true;
    }
    
    // UI менюхи
    string@ Description( Critter& cr ) 
    {
		string info;
		Item@ container = GetItem( contID );
		if( !valid( container ) )
			return "Ошибка!";

		if( container.BARREL_CHARGE > container.BARREL_MAX_CHARGE )
			container.BARREL_CHARGE = container.BARREL_MAX_CHARGE;

       info += "> [ |0xFFFF00 " + _GetProtoName( container.GetProtoId() ) + " |0x3CF800 ]\n";
       info += "Жидкость: |0xFFFF00 " + _GetProtoName( container.BARREL_DNA ) + " |0x3CF800 \n";
       info += "Заполнено: |0xFFFF00 " + container.BARREL_CHARGE / 10.0f + "/" + container.BARREL_MAX_CHARGE / 10.0f + "л.";
       return info;
    }
    
    string@ ButtonCancel()
    {
        return ButtonDecorator( "Закрыть меню", null );
    }
    
    bool ShouldRedraw( Critter& cr )
    {
        return false;
    }
}


#endif //WATERWORKS