#include "_client_defines.fos"
#include "_colors.fos"
#include "_defines.fos"

class CTimeout
{
    int  PositionX;
    int  PositionY;
    uint IndentY;
    uint NameColor;
    uint ValueColor;
    uint Font;
    uint FontFlags;


    CTimeout()
    {
        this.PositionX = 15;
        this.PositionY = 40;
        this.IndentY = 10;
        this.NameColor = COLOR_LGREEN;
        this.ValueColor = COLOR_LGREEN;
        this.Font = FONT_FALLOUT;
        this.FontFlags = 0;
    }
}
CTimeout Timeouts;

string spelling( uint value, string opt1, string opt2, string opt3 )
{
    string result;
    if( value == 1 || ( value % 10 == 1 && value != 11 ) )
        result = opt1;
    else if( ( value > 1 && value < 5 ) || ( value > 20 && value % 10 > 1 && value % 10 < 5 ) )
        result = opt2;
    else if( ( value > 4 && value < 21 ) || value % 10 > 4 || value % 10 == 0 )
        result = opt3;
    return result;
}

int draw_timeouts( CritterCl& critter, uint skill, string skillname, int x, int y )
{
    int timeout = critter.Timeout[ skill ];
    timeout /= __TimeMultiplier;

    if( timeout > 0 )
    {
        string text = "";

        uint   day, hour, minute, second;
        string d = "", h = "", m = "", s = "";

        day = timeout / 86400;
        hour = timeout % 86400 / 3600;
        minute = timeout % 86400 % 3600 / 60;
        second = timeout % 86400 % 3600 % 60;

        if( second > 0 )
            s = second + spelling( second, " секунда", " секунды", " секунд" );
        if( minute > 0 )
            m = minute + spelling( minute, " минута", " минуты", " минут" ) + ( second > 0 ? ", " : "" );
        if( hour > 0 )
            h = hour + spelling( hour, " час", " часа", " часов" ) + ( ( minute > 0 || second > 0 ) ? ", " : "" );
        if( day > 0 )
            d = day + spelling( day, " день", " дня", " дней" ) + ( ( hour > 0 || minute > 0 || second > 0 ) ? ", " : "" );

        text = d + h + m + s;
        DrawText( skillname + ":    " + text, x, y, __ScreenWidth, 10, Timeouts.ValueColor, Timeouts.Font, Timeouts.FontFlags );
        y += Timeouts.IndentY;

    }

    return ( y );
}

void show_timeouts()
{

    CritterCl@ critter = GetChosen();

    if( GetCurrentMapPid() == 0 )
        return;

    int x = Timeouts.PositionX;
    int y = Timeouts.PositionY;

    for( uint i = 0; i < 8; ++i )
    {
        if( i == 0 && critter.Timeout[ TO_REPLICATION ] > 0 )
            y = draw_timeouts( critter, TO_REPLICATION, "Репликация", x, y );
        if( i == 1 && critter.Timeout[ TO_BATTLE ] > 0 && !IsTurnBased() )
            y = draw_timeouts( critter, TO_BATTLE, "Боевой", x, y );
        if( i == 2 && critter.Timeout[ TO_SK_STEAL ] > 0 )
            y = draw_timeouts( critter, TO_SK_STEAL, "Воровство", x, y );
        if( i == 3 && critter.Timeout[ TO_SK_LOCKPICK ] > 0 )
            y = draw_timeouts( critter, TO_SK_LOCKPICK, "Взлом", x, y );
        if( i == 4 && critter.Timeout[ TO_SK_SCIENCE ] > 0 )
            y = draw_timeouts( critter, TO_SK_SCIENCE, "Наука", x, y );
        if( i == 5 && critter.Timeout[ TO_SK_REPAIR ] > 0 )
            y = draw_timeouts( critter, TO_SK_REPAIR, "Ремонт", x, y );
        if( i == 6 && critter.Timeout[ TO_SK_DOCTOR ] > 0 )
            y = draw_timeouts( critter, TO_SK_DOCTOR, "Доктор", x, y );
        if( i == 7 && critter.Timeout[ TO_SK_FIRST_AID ] > 0 )
            y = draw_timeouts( critter, TO_SK_FIRST_AID, "Санитар", x, y );
    }
}
