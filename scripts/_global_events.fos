#ifndef __GLOBAL_EVENTS__
#define __GLOBAL_EVENTS__

string@ GetDateString()
{
    return ( __Year + "_" + __Month + "_" + __Day );
}

string@ GetDateString( int delta )
{
    uint16 year = 0, month = 0, day_of_week = 0, day = 0, hour = 0, minute = 0, second = 0;

    GetGameTime( __FullSecond + delta, year, month, day, day_of_week, hour, minute, second );

    return ( year + "_" + month + "_" + day );
}

#ifdef __MAIN_MODULE__
	import bool manager_start() from "manager";
	import uint manager_loop() from "manager";
	import void manager_critter_init( Critter& cr, bool firstTime ) from "manager";
	import void manager_critter_finish( Critter& cr, bool toDelete ) from "manager";
	import void manager_critter_idle( Critter& cr ) from "manager";
	import void manager_critter_dead( Critter& cr, Critter@ killer ) from "manager";
	import void manager_critter_respawn( Critter& cr ) from "manager";
	import void manager_map_critter_in( Map& map, Critter& cr ) from "manager";
	import void manager_map_critter_out( Map& map, Critter& cr ) from "manager";
	import void manager_world_save() from "manager";
	import bool manager_player_registration( uint ip, string& name, uint& textMsg, uint& strNum ) from "manager";
	import bool manager_player_login( uint ip, string& name, uint id, uint& textMsg, uint& strNum ) from "manager";
	import bool manager_critter_attacked( Critter& critter, Critter& attacker ) from "manager";
#endif // __MAIN_MODULE__

#ifndef __MAIN_MODULE__

shared interface iManagerModule {
    bool manager_init();
}
shared interface iManager_loop {
    uint global_loop();
}
shared interface iManager_critter_init {
    bool global_critter_init( Critter& cr, bool firstTime );
}
shared interface iManager_critter_finish {
    bool global_critter_finish( Critter& cr, bool toDelete );
}
shared interface iManager_critter_idle {
    bool global_critter_idle( Critter& cr );
}
shared interface iManager_critter_dead {
    bool global_critter_dead( Critter& cr, Critter@ killer );
}
shared interface iManager_critter_respawn {
    bool global_critter_respawn( Critter& cr );
}
shared interface iManager_map_critter_in {
    bool global_map_critter_in( Map& map, Critter& cr );
}
shared interface iManager_map_critter_out {
    bool global_map_critter_out( Map& map, Critter& cr );
}
shared interface iManager_world_save {
    bool global_world_save();
}
shared interface iManager_player_registration {
    bool global_player_registration( uint ip, string& name, uint& textMsg, uint& strNum );
}
shared interface iManager_player_login {
    bool global_player_login( uint ip, string& name, uint id, uint& textMsg, uint& strNum );
}
shared interface iManager_time {
    bool global_time( int8 type );
}
shared interface iManager_critter_attacked {
    bool global_critter_attacked( Critter& critter, Critter& attacker );
}
shared interface iManagerElement
{
    iManagerModule@ GetLink();
    uint            GetId();
    string& GetName();
    uint&   GetEventFlags();
    int8&   GetTimeChangeCall();
    uint8   GetPriority();
}

# define MANAGER_EVENT_LOOP                   ( 0x1 )
# define MANAGER_EVENT_CRITTER_INIT           ( 0x2 )
# define MANAGER_EVENT_CRITTER_FINISH         ( 0x4 )
# define MANAGER_EVENT_CRITTER_IDLE           ( 0x8 )
# define MANAGER_EVENT_CRITTER_DEAD           ( 0x10 )
# define MANAGER_EVENT_CRITTER_RESPAWN        ( 0x20 )
# define MANAGER_EVENT_MAP_CRITTER_IN         ( 0x40 )
# define MANAGER_EVENT_MAP_CRITTER_OUT        ( 0x80 )
# define MANAGER_EVENT_WORLD_SAVE             ( 0x100 )
# define MANAGER_EVENT_PLAYER_REGISTRATION    ( 0x200 )
# define MANAGER_EVENT_PLAYER_LOGIN           ( 0x400 )
# define MANAGER_EVENT_TIME                   ( 0x800 )
# define MANAGER_EVENT_CRITTER_ATTACKED       ( 0x10000 )

# define TIME_NEW_MINUTE                      ( 0x1 )
# define TIME_NEW_HOUR                        ( 0x2 )
# define TIME_NEW_DAY                         ( 0x3 )
# define TIME_NEW_MONTH                       ( 0x5 )
# define TIME_NEW_YEAR                        ( 0x6 )
# define TIME_NEW_WEEK                        ( 0x10 )                         // не назначать в ModuleElement, только проверять при срабатывании

# ifndef __MANAGER_MODULE__
import iManagerElement@ manager_add_module( iManagerModule@ link, string& name, uint8 priority ) from "manager";
# endif        // __MANAGER_MODULE__

#endif // __MAIN_MODULE__

#endif // __GLOBAL_EVENTS__
