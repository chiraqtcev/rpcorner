// Number Input Screen

#include "_client_defines.fos"
#include "client_gui_h.fos"
#include "_utils.fos"

#define BUTTON_ERASE     ( 0 )
#define BUTTON_NUMBER    ( 1 )
#define BUTTON_OPEN      ( 2 )
#define BUTTON_CLOSE     ( 3 )

string panelText = "";

class  ScreenMain : IGUIScreenCallbackShow, IGUIScreenCallbackHide
{
    IGUIScreenOpt@ screenOpt;
    InputDigits @ Digits;
    NumberButton @ Button;
    uint itemId;
    int type;
	uint8 numLength;
    bool  text;

    void OnShow( int p0, int p1, int p2 )
    {
        numLength = 4;
		itemId = p0;
		type = p1;
        SetNum( panelText );
        text = true;
    }

    void OnHide( int p0, int p1, int p2 )
    {}
    
	uint8 GetNumLegth()
    {
        return Digits.GetNum().length();
    }
	
	void EraseDigits()
    {
        Digits.EraseDigits();
    }
	
    void SetNum( string digits )
    {
        Digits.SetNum( digits );
    }

    uint GetitemId()
    {
        return itemId;
    }
	
	uint16 GetNum()
    {
        int digits = 0;
        StrToInt( Digits.GetNum(), digits );
        return digits;
    }
	
	int GetType()
	{
		return type;
	}
}

class InputDigits : IGUIElementCallbackInit
{
    IGUIElementOpt @ elementOpt;
    ScreenMain@ Instance;

    InputDigits( ScreenMain & instance )
    {
        @Instance = instance;
        @Instance.Digits = this;

    }

    void OnInit()
    {
        @elementOpt = GUI_GetElementOptions();
    }

    void EraseDigits()
    {
        string sTemp = elementOpt.GetText();
        sTemp.resize( sTemp.length() - 1 );
        elementOpt.Text( sTemp, FONT_FALLOUT, COLOR_GREEN, 0, FT_CENTERX | FT_CENTERY | FT_BORDERED );
    }

    void SetNum( string digits )
    {
        string sTemp = elementOpt.GetText() + digits;
		if( sTemp.length() > Instance.numLength )
		{
			sTemp = digits;
		}
		elementOpt.Text( "" + sTemp, FONT_FALLOUT, COLOR_GREEN, 0, FT_CENTERX | FT_CENTERY | FT_BORDERED );
        Instance.text = false;
    }

    string GetNum()
    {
        return elementOpt.GetText();
    }
	
	uint8 GetNumLegth()
    {
        return elementOpt.GetText().length();
    }
}

class NumberButton : IGUIElementCallbackInit, IGUIElementCallbackMouseClick
{

    ScreenMain@ Instance;
    InputDigits @ Digits;

    uint8 ButtonClass;
    uint8 ButtonNumber;

    NumberButton( ScreenMain & instance )
    {
        @Instance = instance;
        @Instance.Button = this;
    }

    void OnInit()
    {}

    void OnMouseClick( int click )
    {
        switch( ButtonClass )
        {
			case( BUTTON_ERASE ):
			{
				if( Instance.GetNumLegth() > 0 && !Instance.text )
				{
					Instance.EraseDigits();
				}
				break;
			}
			case( BUTTON_NUMBER ):
			{
				if( Instance.GetNumLegth() < Instance.numLength || Instance.text )
				{
					Instance.SetNum( "" + ButtonNumber );
				}
				break;
			}
			case( BUTTON_OPEN ):
			{
				if( !Instance.text )
				{
					RunServerScriptUnsafe( "general_unsafe@unsafe_inputDigits", Instance.GetitemId(), Instance.GetNum(), Instance.GetType(), "", null );
				}
				break;
			}
			case( BUTTON_CLOSE ):
				::HideScreen( 0, 2, 2, 2 );
				break;
        }
    }
}

class TestScreenButtonShow : IGUIElementCallbackMouseClick
{
    void OnMouseClick( int click )
    {
        ::ShowScreen( CLIENT_SCREEN_NUMPAD, 30, 3, 3 );
    }
}

void ShowScreen( int p0, int p1, int p2, string@ + p3, int[] @ + p4 )
{
    panelText = p3;
    ShowScreen( CLIENT_SCREEN_NUMPAD, p0, p1, p2 );
}

void HideScreen( int p0, int p1, int p2, string@ + p3, int[] @ + p4 )
{
    GUI_HideScreen( CLIENT_SCREEN_NUMPAD, 0, 0, 0 );
}

void InitNumpadScreen()
{
    ScreenMain screenMain();
    GUI_CreateScreen( CLIENT_SCREEN_NUMPAD, "codeScreen.png" )
    .CallbackHide( screenMain )
    .CallbackShow( screenMain )
    .CloseOnMiss( true )
    .AutoCursor( true, CURSOR_DEFAULT );

    InputDigits InputDigitsB( screenMain );
    GUI_AddScreenElement( CLIENT_SCREEN_NUMPAD, "keyCodeEnter.png", 0, 0 )
    .CallbackInit( InputDigitsB )
    .TextInput( true, 5, COLOR_LGREEN );

    NumberButton ButtonErase( screenMain );
    GUI_AddScreenElement( CLIENT_SCREEN_NUMPAD, "keyCodeKey_new.png", 155, 265 )
    .CallbackInit( ButtonErase )
    .CallbackMouseClick( ButtonErase )
    .Text( "<", FONT_FALLOUT, COLOR_SAND, 0, FT_CENTERX | FT_CENTERY | FT_BORDERED )
    .DownPic( "keyCodeKeyDown_new.png" );
    ButtonErase.ButtonClass = BUTTON_ERASE;

    NumberButton ButtonOpen( screenMain );
    GUI_AddScreenElement( CLIENT_SCREEN_NUMPAD, "keyCodeKey_new.png", 15, 265 )
    .CallbackInit( ButtonOpen )
    .CallbackMouseClick( ButtonOpen )
    .Text( "OP", FONT_FALLOUT, COLOR_SAND, 0, FT_CENTERX | FT_CENTERY | FT_BORDERED )
    .DownPic( "keyCodeKeyDown_new.png" );
    ButtonOpen.ButtonClass = BUTTON_OPEN;

    uint16 axistX = 0, axistY = 0;

    for( uint8 i = 0; i <= 9; i++ )
    {
        NumberButton ButtonNumber( screenMain );
        GUI_AddScreenElement( CLIENT_SCREEN_NUMPAD, "keyCodeKey_new.png", i != 0 ? 15 + axistX : 85, i != 0 ? 85 + axistY : 265 )
        .CallbackInit( ButtonNumber )
        .CallbackMouseClick( ButtonNumber )
        .Text( "" + i, FONT_FALLOUT, COLOR_SAND, 0, FT_CENTERX | FT_CENTERY | FT_BORDERED )
        .DownPic( "keyCodeKeyDown_new.png" );
        ButtonNumber.ButtonClass = BUTTON_NUMBER;
        ButtonNumber.ButtonNumber = i;

        if( i % 3 == 0 && i != 0 )
        {
            axistX = 0;
            axistY += 60;
        }
        else
        {
            i != 0 ? axistX += 70 : 0;
        }
    }
}
