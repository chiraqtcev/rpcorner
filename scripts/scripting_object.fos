//Basic class and interface for scripting item objects
//by Jonathan Joestar

shared interface ScriptingObject
{
	void itemFinish(Item& item, bool deleted);
	
	bool itemAttack(Item& item, Critter& crit, Critter& target);
	
	bool itemUse(Item& item, Critter& crit, Critter@ onCritter, Item@ onItem, Scenery@ onScenery);

	bool itemUseOn(Item& item, Critter& crit, Item@ usedItem);
	
	bool itemSkillUse(Item& item, Critter& crit, int skill);
	
	void itemDrop(Item& item, Critter& crit);
	
	void itemMove(Item& item, Critter& crit, uint8 fromSlot);
	
	void itemWalk(Item& item, Critter& crit, bool entered, uint8 dir);	
	
	array<int> getProtoIds();
}

shared interface Lookup
{
	ScriptingObject@ lookup(int protoId);
	
	void appendScriptingObjects(ScriptingObject@ scriptingObject);
}

shared class GenericObject : ScriptingObject
{
	GenericObject()
	{
	}

	void itemFinish(Item& item, bool deleted)
	{
		return;
	}
	
	bool itemAttack(Item& item, Critter& crit, Critter& target)
	{
		return false;
	}
	
	bool itemUse(Item& item, Critter& crit, Critter@ onCritter, Item@ onItem, Scenery@ onScenery)	
	{
		return false;
	}
	
	bool itemUseOn(Item& item, Critter& crit, Item@ usedItem)
	{
		return false;
	}
	
	bool itemSkillUse(Item& item, Critter& crit, int skill)
	{
		return false;
	}
	
	void itemDrop(Item& item, Critter& crit)
	{
		return;
	}
	
	void itemMove(Item& item, Critter& crit, uint8 fromSlot)
	{
		return;
	}
	
	void itemWalk(Item& item, Critter& crit, bool entered, uint8 dir)
	{
		return;
	}	
	
	array<int> getProtoIds()
	{
		array<int> arr;
		return arr;
	}
}
