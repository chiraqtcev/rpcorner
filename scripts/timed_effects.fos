//~run drugs go 0 0 0
void go( Critter& cr, int a, int b, int c )
{
	cr.Say( SAY_NORM, "Let's begin! #" + AddEffect( SayCr, values( cr.Id, 1 ), 2 ) );
}

/* TASKS:
	1) Конвертирование values в адекватные сущности ещё на этапе обработки (формирования "заявки на эффект") в менеджере;
	2) Рефакторинг, логгирование, вынос самих funcdef в отдельный файл;
*/

///NOTE: Страшный ужасный костыль, т.к. адекватную модель поведения я засуну в 'class uintArray'.
uint[] values( int arg0 = -1, int arg1 = -1, int arg2 = -1, int arg3 = -1, int arg4 = -1, int arg5 = -1, int arg6 = -1, int arg7 = -1, int arg8 = -1, int arg9 = -1 )
{
	uint[] result = {};

	if( arg0 != -1 ) result.insertLast( arg0 );
	if( arg1 != -1 ) result.insertLast( arg1 );
	if( arg2 != -1 ) result.insertLast( arg2 );
	if( arg3 != -1 ) result.insertLast( arg3 );
	if( arg4 != -1 ) result.insertLast( arg4 );
	if( arg5 != -1 ) result.insertLast( arg5 );
	if( arg6 != -1 ) result.insertLast( arg6 );
	if( arg7 != -1 ) result.insertLast( arg7 );
	if( arg8 != -1 ) result.insertLast( arg8 );
	if( arg9 != -1 ) result.insertLast( arg9 );
	
	return result;
}

uint SayCr( uint[] values )
{///NOTE: На этом этапе, в values функции хранятся лишь релевантные данные, без `Effect.id` из менеджера!
	uint len = values.length();
	
	if( len == 0 ) return 0; ///TODO: remove that garbage
	
	Critter@ cr = GetCritter( values[0] );///TODO: Entity behaviour function 'say/show/hint ( text, text_args )'
	if( !valid( cr ) ) return 0;///TODO: Inform about failure (this could be handled by 'class Entity')
	
	cr.Say( SAY_NORM, "SayCr effect: " + enlistUINT( values, ", ", "[", "]" ) );
	
	///TODO: Correct values data extraction and usage
	int repeat_delay = len > 1 ? values[1] : 0;
	///TODO: Changing Effect values data, using link from the EffectManager
		//int repeat_count = len > 3 ? values[3] : 0;
	if( Random( 0, 2 ) == 0 )
		return repeat_delay;
	else //66% drop on each iteration 
		return 0;
}

///TODO: class uintArray {} //-> behaviours of 'uint[] values' 

class Entity
{
	Critter@ cr;
	Item@ item;
	Effect@ effect;
	///TODO: Scenery, maps, strings, arrays, effects, OOP e.t.c.
	
	Entity( Critter@ cr )
	{
		@this.cr = cr;
	}

	Entity( Item@ item )
	{
		@this.item = item;
	}

	Entity( Effect@ effect )
	{
		@this.effect = effect;
	}
}

funcdef uint EffectProcessing( uint[] values );
class Effect
{
	///TODO: Entity@[] targets;
	
	uint id;
	uint beginSecond;
	uint[] values;
	
	EffectProcessing@ function;
	
	///TODO: Active/passive states
	///TODO: Dependencies, and calling another effect lists

	Effect( EffectProcessing@ function, uint[] values, uint beginSecond )
	{
		this.beginSecond = beginSecond;
		
		@this.function = function;
		this.values = values;//Debug?
	}

	uint run()
	{
		if( !valid( function ) )
		{	
			Log("Function !valid");
			return 0;///TODO: Inform about broken delegate links.
		}
		return function( values );///TODO: Inform about fails.
	}
	
	///TODO: List of active/passive effects;
}

EffectManager@ effects = EffectManager();
class EffectManager
{
	Effect@[] list;
	
	EffectManager() 
	{ 
		this.clear();
	}
	
	void clear()
	{
		list.resize(0); 
	}	
	
	uint run( uint id )
	{
		for( uint i = 0, len = list.length(); i < len; i++ )
			if( list[i].id == id )
				return list[i].run();
			///TODO: remove, delete, log state of 'runned effects'
		
		Log("There is no id " + id );
		
		return 0;///TODO: Inform about 'no matches found'.
	}
	
	EffectManager@ add( Effect@ item )
	{
		item.id = lastId();
		list.insertLast( item );				
		
		return this;
	}
	
	uint lastId() 
	{ 
		uint result = list.length();
		return result == 0 ? 0 : result - 1; 
	}
}

uint AddEffect( EffectProcessing@ function, uint[] values, uint seconds )
{
	///TODO: Maybe, reorder structure at this point - move whole logic and controlls into the EffectManager
	values.insertLast( effects.add( Effect( function, values, AFTER( REAL_SECOND( seconds ) ) ) ).lastId() );
	///NOTE: Делает внутреннюю привязку самоназначенного id Effect-а к движковому ивенту. Костыль? Похоже на то...
	
	return CreateTimeEvent( AFTER( REAL_SECOND( seconds ) ), "e_TimeEvent", values, true );
}

uint e_TimeEvent( uint[]@ values )
{
	if( !valid( values ) || values.length() == 0 )
	{
		Log( "!valid input" );
		return 0;///TODO: Log info about such wasted events.
	}
	
	return effects.run( values[ values.length() - 1 ] );
}