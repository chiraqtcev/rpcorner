#define HITCHANCE_MODULE

#include "hitchance_h.fos"
//import uint GetActiveItemAttackDistantion( CritterCl& cr ) from "parameters";
// Defines from header file.
// Дефайны из хедер файла.

// #define  MAX_SKILL				(200)	// Максимальная величина навыка, который влияет на общее вычисление всей вжух-движухи.
// #define  EFF_PERCENT				(80)	// Процент от максимальной дальности действия оружия при котором точность из 95% переходит в вычисление Falloff. Изменив эту цифу, автоматически будет пересчитан Falloff.
// #define  MAX_HITCHANCE			(95)	// Состояние нирваны. Nuff said.
// #define  BLIND_PENALTY_HTH		(10)    // Пенальти за разбитый глаз для MAX_HITCHANCE мили. Не используется.
// #define  BLIND_PENALTY_RNG		(15)	// Пенальти за разбитый глаз для MAX_HITCHANCE на дистанции. Не используется.
// #define  ARM_PENALTY_HTH			(15)	// Пенальти к навыку за поврежденную конечность в мили. Не используется.
// #define  LEG_PENALTY_HTH			(15)	// Пенальти к навыку за поврежденную конечность в мили. Не используется.
// #define  ARM_PENALTY_RNG			(20)	// Пенальти к навыку за поврежденную конечность на дистанции. Не используется.
											// Каждое пенальти увеличивается за каждую единицу "поломки" конечности. Максимум х3.

// • Вычисление происходит при вычислении дистанции между целью и атакующим.
// • Зависит от максимальной дальности оружия.
// • Эффективная дистанция равна EFF_PERCENT процентам от целого числа Максимальной дистанции.
  // *Прим.: Итоговое число EFF_PERCENT в формуле гибкое и настраиваемое - оружейные трейты, перки, преки игрока и т.д.*
// • Если эффективная дистанция больше или равна дистанции до цели, то шанс попасть = 95% при навыке 200.
   // *Прим.: Максимальный навык задается дефайном и на данный момент равен 200. Следующий этап - сделать смысл прокачивать навык выше и зависиомть от прицельного выстрела и выбора конечности. Прокачивая навык выше, будет расти эффективная дистанция при выстрелах прицельных, при 300 навыка приближаясь к 75% в глаз от макс. дистанции оружия, примерно.*
// • Линейная зависимость после  80% (Эффективная дистанция) и до  100%(Максимальная дистанция), которая называется  Falloff. Falloff - это состояние, когда с 95% шанса попасть он скатится в ноль. Скорость скатывания тоже задана дефайном. (т.э. не будет халявных шансов попасть при околонулевом навыке).


/*Точность, промахи и уклонения.
- Изменить и упростить формулу расчета точности под Эффективную Дистанцию и Максимальную Дистанцию ведения боя у оружия.
- Эффективная дистанция боя зависит напрямую от боевого навыка персонажа.
- Максимальная дистанция боя неизменна.
- У оружия будет требование в виде поинтов SPECIAL, при прохождении которого при стрельбе не будет штрафов.
Пример:
Если условный кап боевого навыка - 200%.
Если требование в виде поинтов ASPECT соблюдено.

У персонажа 200% навыка, оружие имеет Максимальную Дистанцию 100.
Эффективная Дистанция будет 80 гексов.
Радиус 0 - 80 - шанс попасть 95%. 
Радиус 100 - шанс попасть 5%. 
Линейная зависимость между дистанциями 80 и 100 - от 95% до 5% шанса попадания.
Это базовая механика работы. Цифры штрафов и то, что будет влиять на изменение шанса попасть не учтено. Подразумевается, что любые бонусы и штрафы будут влиять на итоговый % навыка участвующий при расчете Эффективной Дистанции.
Соответственно, 80% от максимальной дистанции - дефайн в формуле, выше получить нельзя если нету дополнительной механики.
Получить 80% эти для гарантанированного (95%) шанса попасть возможно только при наличии максимального навыка.

*SPREAD - число дефайнящее ширину конуса разлета пуль.
BULLET_HIT_MAX - задает условия максимального кол-ва пуль в линию попадающих, в процентах от полной очереди.
RECOIL - снижение шанса попасть для каждой последующей пули в очереди.

"шанс попасть" это наш кап навыка в %.

BULLET_HIT_MAX = 60% от очереди, какая-нибудь 10мм СМГ будет стрелать 10ю пулями в фулл-ауто режиме.
RECOIL будет стоять 10, т.э. на каждую последующую пулю будет штраф навыка.

Итого чтобы попасть всеми 60, тебе нужно подходить ближе расчетной эффективной дистанции. */

//int to_hit( CritterCl& chosen, CritterCl& target, ProtoItem& weapon, uint8 weaponMode )
int client_to_hit(CritterMutual& cr, CritterMutual& target, ProtoItem@ weapon, uint8 weaponMode)
{
	return to_hit(cr, target, weapon, weaponMode, null);
}

int to_hit( CritterMutual& cr, CritterMutual& target, ProtoItem@ weapon, uint8 weaponMode, ProtoItem@ ammo) 
{
	uint8 use				= _WeaponModeUse( weaponMode );
    uint8 aim				= _WeaponModeAim( weaponMode ); //TODO: Учитывать.
    int wpnMaxDist			= _WeaponMaxDist( weapon, use );
    uint skillNum			= _WeaponSkill   ( weapon, use );
    int skillVal			= int(cr.Skill[skillNum]);       
    int effDistance		= wpnMaxDist * skillVal / MAX_SKILL * EFF_PERCENT / 100; //TODO: Проверить логику.

	
	uint8 weaponSubtype = WS_UNARMED;
	switch( skillNum )
	{
		case(SK_SMALL_GUNS):
		case(SK_BIG_GUNS):
		case(SK_ENERGY_WEAPONS):weaponSubtype = WS_GUN; break;
								
		case(SK_THROWING):	 	weaponSubtype = WS_THROWING; break;

		case(SK_MELEE_WEAPONS): weaponSubtype = WS_MELEE; break;
	}
    bool   isHthAttack = ( weaponSubtype == WS_MELEE || weaponSubtype == WS_UNARMED );
	
	
	int  dist = GetCrittersDistantion( cr, target );
    if ( dist > wpnMaxDist )
        return 0;

    int hitChance = 0;
	
	
    if( isHthAttack )
    {
        hitChance = MAX_HITCHANCE;
        return hitChance;
    }

	//TODO: Проверить логику.
    if (dist <= effDistance)
    {
        hitChance = MAX_HITCHANCE;
    }
    else
    {
        int diffFromEff = dist - effDistance;
        int falloff = wpnMaxDist * (100 - EFF_PERCENT) / 100; 
        if (diffFromEff > falloff)
        {
            hitChance = 0;
        }
        else
        {
            hitChance = MAX_HITCHANCE * CLAMP( (falloff - diffFromEff) / MAX(falloff, 1), 0, 1);
        }
    }

    return CLAMP( hitChance, 0, MAX_HITCHANCE );
}

#ifdef __CLIENT

// Callback. Функция - её объявление и определение.
uint8 CalcEffRange (CritterCl@ source, ItemCl@ weapon)
{
	uint8  use				= _WeaponModeUse( weapon.Mode );
	int  wpnMaxDist			= _WeaponMaxDist( weapon.Proto, use );
	uint skillNum			= _WeaponSkill  ( weapon.Proto, use );
	int  skillVal			= int(source.Skill[skillNum]);            // 
	uint8 effRange		    = wpnMaxDist * skillVal / MAX_SKILL * EFF_PERCENT / 100;//your Effective Distance, linear buildup
	// Message(""+effRange);
    return CLAMP(effRange, 1, wpnMaxDist); //GetActiveItemAttackDistantion(source)); 
}
// Getter. Возвращает указатель на функцию "CalcEffRange" типа "distCalcFunc".
/*
distCalcFunc@ GetCalcFunc()
{
	return CalcEffRange;
}
*/
#endif