//OOP Objects representing Item behavior lookup engine
//by Jonathan Joestar

#include "scripting_object.fos"

ClassesLookup@ classesLookup;

shared class ClassesLookup : Lookup
{
	array<ScriptingObject@> scriptingObjects;

	ClassesLookup()
	{
		initialize();
	}
	
	private void initialize()
	{
		Log("Initialization started");
	}
	
	ScriptingObject@ lookup(int protoId)
	{
		//Log("looking up for scripting item for " + protoId);

		ScriptingObject@ scriptingObject = null;
		for( uint i = 0; i < this.scriptingObjects.length(); i++)
		{
			ScriptingObject@ currentObject = this.scriptingObjects[i];
			if(currentObject.getProtoIds().find(protoId) > -1)
			{
				@scriptingObject = currentObject;
				break;
			}
		}
		
		if( @scriptingObject == null )
		{
			Log("Cannot lookup scripting item for ProtoId = " + protoId);
			@scriptingObject = GenericObject();
		}
		
		return scriptingObject;
	}
	
	void appendScriptingObjects(ScriptingObject@ scriptingObject)
	{
		Log("appendScriptingObjects with " + scriptingObject.getProtoIds()[0]);

		this.scriptingObjects.insertLast(scriptingObject);
	}

}

Lookup@ getClassesLookup()
{
	if( @classesLookup == null )
	{
		@classesLookup = ClassesLookup(); 
	}
	
	return classesLookup;
}

void appendScriptingObject(ScriptingObject@ scriptingObject)
{
	getClassesLookup().appendScriptingObjects(scriptingObject);
}