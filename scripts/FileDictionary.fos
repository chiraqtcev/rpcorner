#define FILENAME	"text\\DynamicDialogs.MSG"

dictionary data;
void enlistData( Critter& cr )
{
	string@[] keys;
	uint max = data.keys( keys );
	
	string value;
	for( uint i = 0; i < max; i++ )
	{
		value = "[N/A]";
		if( !data.get( keys[i], value ) )
		{
			Log( "Failed to get data key value at '" + keys[i] + "'." );
			continue;
		}
		
		cr.Say( SAY_NETMSG, i + ") '" + keys[i] + "' '" + value + "';" );
	}
}

void enlistFile( Critter& cr, bool original = false )
{
	file f;
	if( f.open( FILENAME, "r" ) == -1 )
	{
		cr.Say( SAY_NETMSG, "Failed to find file." );
		return;
	}
	
	uint n = 0;
	string line;
	string@[]@ text;
	while( !f.isEndOfFile() )
	{
		n++;
		
		f.readLine( line );
		
		if( line.length() < 2 )
			continue; //skips empty lines, used for formatting

		line = substring( line, 0, line.length() - 1 ); //cuts \n symbol
		
		@text = splitEx( line, "@" );
		
		if( text.length() != 2 )
		{
			cr.Say( SAY_NETMSG, "Line #" + n + " has wrong format: '" + line + "'" );
			continue;
		}
		
		if( original )
			line = n + ") '" + line + "';";
		else
			line = n + ") '" + text[0] + "' = '" + text[1] + "';";
		
		cr.Say( SAY_NETMSG, line );
	}
	
	f.close();
}

void save()
{
	file f;
	if( f.open( FILENAME, "w" ) == -1 )
	{
		Log( "Failed to save dynamic lexem dictionary." );
		return;
	}

	string@[] keys;
	uint max = data.keys( keys );
	
	string value;
	for( uint i = 0; i < max; i++ )
	{
		value = "[N/A]";
		if( !data.get( keys[i], value ) )
		{
			Log( "Failed to get data key value at '" + keys[i] + "'." );
			continue;
		}
		
		f.writeString( keys[i] + "@" + value + "\n" );
	}
	f.close();	
}

bool load()
{
	data.deleteAll();
	
	file f;
	if( f.open( FILENAME, "r" ) == -1 )
	{
		Log( "Failed to load dynamic lexem dictionary." );
		return false;
	}
	
	uint n = 0;
	string line;
	string@[]@ text;
	while( !f.isEndOfFile() )
	{
		n++;
		
		f.readLine( line );
		
		if( line.length() < 2 )
			continue; //skips empty lines, used for formatting
		
		line = substring( line, 0, line.length() - 1 );

		@text = splitEx( line, "@" );

		if( !valid( text ) )
		{
			Log( "!valid(text)" );
			continue;
		}
		
		if( text.length() != 2 )
		{
			Log( "Line #" + n + " has wrong format: '" + line + "'" );
			continue;
		}
		
		data.set( text[0], text[1] );
	}
	f.close();
	
	return true;
}

bool data_loaded = false;
string get( string name, bool justValue = false )
{
	if( !data_loaded )
		data_loaded = load();

	string value;	
	if( !data.get( name, value ) )
		value = "???";
	
	return ( justValue ? value : ( "$" + name + value ) );
}

bool set( string name, string@ value )
{
	string text = valid( value ) ? value : "[null]";
	data.set( name, value );
	
	save();
	
	return true;
}