#ifndef HOMEBREW
#define HOMEBREW

#include "_utils.fos"
#include "homebrew_h.fos"
#include "_ltp.fos"
#include "gathering_h.fos"
#include "explode_h.fos"

class Ingredient
{
	uint pid;
	float sugar_level;
	string taste;
	
	Ingredient( uint pid, float sugar_level, string@ taste = null )
	{
		this.pid = pid;
		this.sugar_level = sugar_level;
		this.taste = valid( taste ) ? taste : ( pid + ":" + sugar_level );
	}
}

class IngredientList
{
	Ingredient@[] list;
	
	IngredientList@ add( uint pid, float sugar_level, string@ taste = null ) { return this.add( Ingredient( pid, sugar_level, taste ) ); }
	IngredientList@ add( Ingredient@ item )
	{
		if( valid( item ) )
			list.insertLast( item );
		
		return this;
	}
	
	int length() { return list.length() - 1; }
	
	bool have( uint pid )
	{
		for( int i = 0, l = length(); i <= l; i++ )
			if( list[i].pid == pid )
				return true;
			
		return false;
	}

	int index( uint pid )
	{
		for( int i = 0, l = length(); i <= l; i++ )
			if( list[i].pid == pid )
				return i;
			
		return -1;
	}
	
	float sugar_level( int index )
	{
		if( index < 0 || index > length() )
		{
			DebugLog( "Requested index[" + index + "] out of bounds " + length() + "." );
			return 0;
		}
		
		return list[index].sugar_level;
	}
	
	string taste( int index )
	{
		if( index < 0 || index > length() )
			return "[ " + index + " out of bounds " + length() + " ]";
		
		return list[index].taste;
	}
}

IngredientList@ ingredients;

void checkIngredients()
{
	if( valid( ingredients ) )
		return;
	
	@ingredients = IngredientList()
		.add( PID_MEAT_JERKY, 		0.02f, "крови" )
		.add( PID_CABBAGE, 			0.04f, "капусты" )
		.add( PID_VOKAS, 			0.05f, "орехов" )
		.add( PID_FLAPJACK, 		0.10f, "хлеба" )
		.add( PID_PASLEN, 			0.10f, "паслена" )
		.add( PID_PEYOTE,			0.50f, "пейотля" )
		.add( PID_MUTATED_FRUIT,	0.50f, "мутафруктов" )
		.add( PID_PRETZEL, 			0.13f, "ванили" )
		.add( PID_CORN, 			0.19f, "кукурузы" )
		.add( PID_COOKIE,			0.20f, "печенья" )
		.add( PID_PROTEIN_BAR,		0.29f, "протеина" )
		.add( PID_ITCANDY, 			0.75f, "конфет" )
		.add( PID_CARAMEL2, 		0.98f, "карамели" )
	;
}

bool exist( uint pid )
{
	checkIngredients();
	
	return ingredients.have( pid );
}

int ingredient_index( uint pid )
{
	checkIngredients();
	
	return ingredients.index( pid );
}

float ingredient_sugar_level( int index )
{
	checkIngredients();
	
	return ingredients.sugar_level( index );
}

string ingredient_taste( int index )
{
	checkIngredients();
	
	return ingredients.taste( index );
}

bool ShowMenuBrew( Critter& cr, Item& target ) //exported
{
	Map@ map = cr.GetMap();
    if( !valid( map ) ) 
    {
        return false;
    }
	if( target.PicMap == PIC_POT_CLOSED )
	{
		cr.ShowScreen( SCREEN_DIALOGBOX, 1, "unknown_brew_state" );
		cr.Say( SAY_DIALOGBOX_TEXT, MenuInfoClosed( cr, target ) );
		cr.Say( SAY_DIALOGBOX_BUTTON( 0 ), Centering( "Открыть крышку" ) );
		cr.Say( SAY_DIALOGBOX_BUTTON( 1 ), Centering( "Ничего не делать" ) );
	}
	else if( target.STATE == STATE_PREPARE )
	{
		cr.ShowScreen( SCREEN_DIALOGBOX, 6, "answer_brew" );
		cr.Say( SAY_DIALOGBOX_TEXT, MenuInfoOpen( cr, target )  );
		cr.Say( SAY_DIALOGBOX_BUTTON( 0 ), Centering( "Добавить" ) );
		cr.Say( SAY_DIALOGBOX_BUTTON( 1 ), Centering( "Измельчить" ) );
		cr.Say( SAY_DIALOGBOX_BUTTON( 2 ), Centering( "Попробовать" ) );		
		cr.Say( SAY_DIALOGBOX_BUTTON( 3 ), Centering( "Засыпать Дрожжи" ) );
		cr.Say( SAY_DIALOGBOX_BUTTON( 4 ), Centering( "Вылить все" ) );
		cr.Say( SAY_DIALOGBOX_BUTTON( 5 ), Centering( "Закрыть крышку" ) );
		cr.Say( SAY_DIALOGBOX_BUTTON( 6 ), Centering( "Ничего не делать" ) );
	}
	else if( target.STATE == STATE_WORKING  )
	{
		cr.ShowScreen( SCREEN_DIALOGBOX, 4, "answer_cooking_brew" );
		cr.Say( SAY_DIALOGBOX_TEXT, MenuInfoOpen( cr, target )  );
		cr.Say( SAY_DIALOGBOX_BUTTON( 0 ), Centering( "Закрыть крышку" ) );
		cr.Say( SAY_DIALOGBOX_BUTTON( 1 ), Centering( "Попробовать" ) );
		cr.Say( SAY_DIALOGBOX_BUTTON( 2 ), Centering( "Добавить" ) );
		cr.Say( SAY_DIALOGBOX_BUTTON( 3 ), Centering( "Вылить все" ) );
		cr.Say( SAY_DIALOGBOX_BUTTON( 4 ), Centering( "Ничего не делать" ) );
	}
	else if( target.STATE >= STATE_FINISH  )
	{
		cr.ShowScreen( SCREEN_DIALOGBOX, 5, "answer_cooking_brew_fin" );
		cr.Say( SAY_DIALOGBOX_TEXT, MenuInfoOpen( cr, target )  );
		cr.Say( SAY_DIALOGBOX_BUTTON( 0 ), Centering( "Закрыть крышку" ) );
		cr.Say( SAY_DIALOGBOX_BUTTON( 1 ), Centering( "Попробовать" ) );
		cr.Say( SAY_DIALOGBOX_BUTTON( 2 ), Centering( "Изъять" ) );
		cr.Say( SAY_DIALOGBOX_BUTTON( 3 ), Centering( "Разлить по бутылкам" ) );
		cr.Say( SAY_DIALOGBOX_BUTTON( 4 ), Centering( "Вылить все" ) );
		cr.Say( SAY_DIALOGBOX_BUTTON( 5 ), Centering( "Ничего не делать" ) );
	}
	cr.StatBase[ST_VAR7] = target.Id;
	return true;	
}

void unknown_brew_state( Critter& cr, uint answerI, string& answerS )
{
	if( !UnknownStateActions( cr, answerI ) )
	{
		cr.Say( SAY_NETMSG, "|0xFF0000 Из этого ничего не вышло." );
	}
}
bool UnknownStateActions( Critter& cr, uint answer )
{
	switch( answer )
	{
		case( 0 ): return OpenClose( cr );
		case( 1 ): return false;
	}
	return false;
}

void answer_brew( Critter& cr, uint answerI, string& answerS )
{
	if( !BrewActions( cr, answerI ) )
	{
		cr.Say( SAY_NETMSG, "|0xFF0000 Из этого ничего не вышло." );
	}
}
bool BrewActions( Critter& cr, uint answer )
{
	switch( answer )
	{
		case( 0 ): return AddIngrigient( cr );
		case( 1 ): return start_slicing( cr );
		case( 2 ): return Taste( cr );
		case( 3 ): return AddFerment( cr );	
		case( 4 ): return DisposeBrew( cr );
		case( 5 ): return OpenClose( cr );
		case( 6 ): return false;
	}
	return false;
}

void answer_cooking_brew( Critter& cr, uint answerI, string& answerS )
{
	if( !BrewCookingActions( cr, answerI ) )
	{
		cr.Say( SAY_NETMSG, "|0xFF0000 Из этого ничего не вышло." );
	}
}
bool BrewCookingActions( Critter& cr, uint answer )
{
	switch( answer )
	{
		case( 0 ): return OpenClose( cr );
		case( 1 ): return Taste( cr );
		case( 2 ): return AddIngrigient( cr );
		case( 3 ): return DisposeBrew( cr );
		case( 4 ): return false;
	}
	return false;
}

void answer_cooking_brew_fin( Critter& cr, uint answerI, string& answerS )
{
	if( !BrewFinActions( cr, answerI ) )
	{
		cr.Say( SAY_NETMSG, "|0xFF0000 Из этого ничего не вышло." );
	}
}

bool BrewFinActions( Critter& cr, uint answer )
{
	switch( answer )
	{
		case( 0 ): return OpenClose( cr );
		case( 1 ): return Taste( cr );
		case( 2 ): return AddIngrigient( cr );
		case( 3 ): return start_hb_pouring( cr );
		case( 4 ): return DisposeBrew( cr );
		case( 5 ): return false;
	}
	return false;
}

bool AddIngrigient( Critter& cr )
{
	Map@ map = cr.GetMap();		
	Item@ target = map.GetItem(cr.StatBase[ST_VAR7]);
	if(!valid(target)) 
	{ 
		Log("Потеря указателя на предмет!"); 
		return false; 
	}
	ShowContainer( cr, target, TRANSFER_HEX_CONT_UP );
	return true;
}

bool TransferToPot( Critter& cr, Item& targetItem, Item& cont ) //export to main
{
	if(!valid(cont)) { Log( "Потеря указателя на контейнер!" ); return false; 
	}
	if( cont.STATE > 1 ) { 
		cr.Say( SAY_NETMSG, "|0xFF0000 Брага уже приготовилась, что-то добавлять смысла нет." );	
		return false; 
	}
	if( targetItem.GetType() != ITEM_TYPE_FOOD && targetItem.GetType() != ITEM_TYPE_DRUG && targetItem.GetType() != ITEM_TYPE_DRINK ) {
		cr.Say( SAY_NETMSG, "|0xFF0000 Вам кажется, что из этого браги не сделать." );
		return false; 
	}
	Map@ map = cr.GetMap();
	uint transferAmount = cr.ItemTransferCount();
	uint16 targetItemPid = targetItem.GetProtoId();
	
	if( find_glassed_drinks( targetItem ) == true ) {
		cont.CURRENT_CAPACITY = cont.CURRENT_CAPACITY + ( ( targetItem.Proto.Weight - 150 ) * transferAmount );
		map.PlaySound( "homebrew_pouring.ogg", cr.HexX, cr.HexY, 5 );
		
		switch( targetItemPid ) {
			case(PID_CLEAN_WATER2):
			case(PID_GLASS_BOTTLE_FULL):
				cont.LIQUID_LEVEL = cont.LIQUID_LEVEL + ( ( targetItem.Proto.Weight - 150 ) * transferAmount );
				cr.Say( SAY_EMOTE, "Наливает воду" );
				break;
			case(PID_GLASS_BOTTLE_DIRTY_FULL):
				cont.LIQUID_LEVEL = cont.LIQUID_LEVEL + ( ( targetItem.Proto.Weight - 150 ) * transferAmount );
				cont.HB_POLUTION_LEVEL = cont.HB_POLUTION_LEVEL + ( ( targetItem.Proto.Weight - 150 ) * transferAmount / 10 );
				cr.Say( SAY_EMOTE, "Наливает грязную воду" );
				break;
			case(PID_ATOM_COLA):
			case(PID_ATOM_COLA_SEA):
			case(PID_TURBO_COLA):
			case(PID_NUKA_COLA):
			case(PID_ATOM_COLA_CHERRY):
			case(PID_SUPER_ENERGY_DRINK):
			case(PID_ATOM_COLA_CRAFT):
				cont.LIQUID_LEVEL = cont.LIQUID_LEVEL + ( ( targetItem.Proto.Weight - 260 ) * transferAmount );
				cont.SUGAR_LEVEL = cont.SUGAR_LEVEL + ( ( targetItem.Proto.Weight - 540 ) * transferAmount );				
				cr.Say( SAY_EMOTE, "Наливает газированную воду" );
				break;
			case(PID_BEER):
			case(PID_BEER_LIGHT):
			case(PID_ROOTBEER):
			case(PID_BEER_DARK):
				cont.LIQUID_LEVEL = cont.LIQUID_LEVEL + ( ( targetItem.Proto.Weight - 250 ) * transferAmount );
				cont.SUGAR_LEVEL = cont.SUGAR_LEVEL + ( ( targetItem.Proto.Weight - 550 ) * transferAmount );				
				cr.Say( SAY_EMOTE, "Вливает пиво" );
				break;
			case(PID_GAMMA_GULP_BEER):
				cont.LIQUID_LEVEL = cont.LIQUID_LEVEL + ( ( targetItem.Proto.Weight - 250 ) * transferAmount );
				cont.SUGAR_LEVEL = cont.SUGAR_LEVEL + ( ( targetItem.Proto.Weight - 550 ) * transferAmount );
				cont.HB_POLUTION_LEVEL = cont.HB_POLUTION_LEVEL + 5 * transferAmount;			
				cr.Say( SAY_EMOTE, "Вливает Гамма-гульп пиво" );
				break;
			case(PID_ATOMIC_COCTAIL):
			case(PID_GROG):
			case(PID_BLOODMARRY):
			case(PID_WHISKEY):
			case(PID_WHISKEY_PREWAR):
			case(PID_LIQUER):
			case(PID_ROT_GUT):
			case(PID_ROENTGEN_RUM):
			case(PID_SPIRIT):
			case(PID_BOTTLE_MILCH2):
				cont.LIQUID_LEVEL = cont.LIQUID_LEVEL + ( ( targetItem.Proto.Weight - 150 ) * transferAmount );
				cont.HB_POLUTION_LEVEL = cont.HB_POLUTION_LEVEL + ( ( targetItem.Proto.Weight - 150 ) * transferAmount / 100  );			
				cr.Say( SAY_EMOTE, "Вливает крепкий алкоголь" );
				break;
			default:
				cont.LIQUID_LEVEL = cont.LIQUID_LEVEL + ( ( targetItem.Proto.Weight - 150 ) * transferAmount );
				cr.Say( SAY_EMOTE, "Вливает жидкость" );
				break;
		}
		
		cr.AddItem( PID_BOTTLE_GLASS, transferAmount );
		
		if( find_capped_bottles( targetItem ) == true ) {
			cr.AddItem( PID_REAL_BOTTLE_CAPS, transferAmount );
		}
		
		_SubItem( targetItem, transferAmount );
		
	} else if( find_opened_drinks( targetItem ) == true ) {
		
		cont.CURRENT_CAPACITY = cont.CURRENT_CAPACITY + ( targetItem.REMAINING_USES * 100 );
		map.PlaySound( "homebrew_pouring.ogg", cr.HexX, cr.HexY, 5 );
		
		switch( targetItemPid ) {
			case( PID_CLEAN_WATER2_PRT ):
			case( PID_GLASS_BOTTLE_FULL_PRT ):
				cont.LIQUID_LEVEL = cont.LIQUID_LEVEL + ( targetItem.REMAINING_USES * 100 );
				cr.Say( SAY_EMOTE, "Наливает воду" );
				break;
			case( PID_GLASS_BOTTLE_DIRTY_FULL_PRT ):
				cont.LIQUID_LEVEL = cont.LIQUID_LEVEL + ( targetItem.REMAINING_USES * 100 );
				cont.HB_POLUTION_LEVEL = cont.HB_POLUTION_LEVEL + ( targetItem.REMAINING_USES * 10 );
				cr.Say( SAY_EMOTE, "Наливает грязную воду" );
				break;
			case( PID_ATOM_COLA_PRT ):
			case( PID_ATOM_COLA_SEA_PRT ):
			case( PID_TURBO_COLA_PRT ):
			case( PID_NUKA_COLA_PRT ):
			case( PID_ATOM_COLA_CHERRY_PRT ):
			case( PID_SUPER_ENERGY_DRINK_PRT ):
			case( PID_ATOM_COLA_CRAFT_PRT ):
				cont.LIQUID_LEVEL = cont.LIQUID_LEVEL + ( targetItem.REMAINING_USES * 78 );
				cont.SUGAR_LEVEL = cont.SUGAR_LEVEL + ( targetItem.REMAINING_USES * 22 );
				cr.Say( SAY_EMOTE, "Наливает газированную воду" );
				break;
			case( PID_BEER_PRT ):
			case( PID_BEER_LIGHT_PRT ):
			case( PID_ROOTBEER_PRT ):
			case( PID_BEER_DARK_PRT ):
				cont.LIQUID_LEVEL = cont.LIQUID_LEVEL + ( targetItem.REMAINING_USES * 80 );
				cont.SUGAR_LEVEL = cont.SUGAR_LEVEL + ( targetItem.REMAINING_USES * 20 );				
				cr.Say( SAY_EMOTE, "Вливает пиво" );
				break;
			case( PID_GAMMA_GULP_BEER_PRT ):
				cont.LIQUID_LEVEL = cont.LIQUID_LEVEL + ( targetItem.REMAINING_USES * 80 );
				cont.SUGAR_LEVEL = cont.SUGAR_LEVEL + ( targetItem.REMAINING_USES * 20 );	
				cont.HB_POLUTION_LEVEL = cont.HB_POLUTION_LEVEL + targetItem.REMAINING_USES;			
				cr.Say( SAY_EMOTE, "Вливает Гамма-гульп пиво" );
				break;
			case( PID_ATOMIC_COCTAIL_PRT ):
			case( PID_GROG_PRT ):
			case( PID_BLOODMARRY_PRT ):
			case( PID_WHISKEY_PRT ):
			case( PID_WHISKEY_PREWAR_PRT ):
			case( PID_LIQUER_PRT ):
			case( PID_ROT_GUT_PRT ):
			case( PID_ROENTGEN_RUM_PRT ):
			case( PID_SPIRIT_PRT ):
			case( PID_BOTTLE_MILCH2_PRT ):
				cont.LIQUID_LEVEL = cont.LIQUID_LEVEL + ( targetItem.REMAINING_USES * 100 );
				cont.HB_POLUTION_LEVEL = cont.HB_POLUTION_LEVEL + ( targetItem.REMAINING_USES * 2 );					
				cr.Say( SAY_EMOTE, "Вливает крепкий алкоголь" );
				break;
			default:
				cont.LIQUID_LEVEL = cont.LIQUID_LEVEL + ( targetItem.REMAINING_USES * 100 );
				cr.Say( SAY_EMOTE, "Вливает жидкость" );
				break;
		}
		
		cr.AddItem( PID_BOTTLE_GLASS, 1 );
		_SubItem( targetItem, 1 );
		
	} else {
		
		if( cont.STATE == STATE_PREPARE ) {
			if( ( ( targetItem.Proto.Weight * transferAmount ) + cont.CURRENT_CAPACITY ) <= cont.CAPACITY ) {
				MoveItem( targetItem, transferAmount, cont, 0 );
				cr.Say( SAY_EMOTE, "Добавляет ингридиенты" );
				cont.CURRENT_CAPACITY = cont.CURRENT_CAPACITY + ( targetItem.Proto.Weight * transferAmount );
				cont.STACH_LEVEL = cont.STACH_LEVEL + ( targetItem.Proto.Weight * transferAmount );
			} else {
				cr.Say( SAY_NETMSG, "|0xFF0000 Такое количество ингридиентов сюда уже не добавить." );
				return false;
			}
		} else {
			cr.Say( SAY_NETMSG, "|0xFF0000 Процесс уже идет, Вам кажется, что добавлять твердые примеси не стоит." );
			return false;
		} 
	}
	
	if( cont.CURRENT_CAPACITY >= cont.CAPACITY ) {
		cr.Say( SAY_NETMSG, "|0xFFFF00 Вы заполнили кувшин под крышку." );
		if(cont.LIQUID_LEVEL > 0) {
			map.SetText( cont.HexX, cont.HexY, COLOR_LGRAY, ":вода переливается через край:" );
			cont.CURRENT_CAPACITY = cont.CAPACITY;
			cont.LIQUID_LEVEL = cont.CAPACITY - ( cont.STACH_LEVEL + cont.SUGAR_LEVEL );
		} else {
			cont.CURRENT_CAPACITY = cont.CAPACITY;
		}
		
	}	
	if( cont.LIQUID_LEVEL >= cont.CAPACITY ) {
		cont.LIQUID_LEVEL = cont.CAPACITY;
	}
	ShowContainer( cr, cont, TRANSFER_HEX_CONT_UP );
	return true;
}

bool TransferFromPot( Critter& cr, Item& targetItem, Item& cont )
{
	if(!valid(cont)) { Log( "Потеря указателя на контейнер!" ); return false; 
	}
	uint transferAmount = cr.ItemTransferCount();
	MoveItem( targetItem, transferAmount, cr );
	uint16 targetItemPid = targetItem.GetProtoId();
	cont.CURRENT_CAPACITY = cont.CURRENT_CAPACITY - ( targetItem.Proto.Weight * transferAmount );
	cont.STACH_LEVEL = cont.STACH_LEVEL - ( targetItem.Proto.Weight * transferAmount );
	return true;
}

bool AddFerment( Critter& cr ) 
{
	Map@ map = cr.GetMap();		
	Item@ target = map.GetItem(cr.StatBase[ST_VAR7]);
	if(!valid(target)) { Log("Потеря указателя на предмет!"); return false; 
	}
	Item@ ferment = cr.GetItem( PID_FERMENT, -1 );
	if( !valid(ferment) ) { cr.Say( SAY_NETMSG, "|0xFF0000 У вас кончились дрожжи." ); return false;
	}
	cr.Say( SAY_EMOTE, "Засыпал дрожжи" );
	map.PlaySound( "ROBE.ACM", cr.HexX, cr.HexY, 2 );	
	_SubItem( ferment, 1 );
	cr.AddItem( PID_BANKA_MEH, 1);
	start_brewing( cr, target );
	return true;
}

bool ltp_inited = false;
void ltp_init()
{
	LTPREG( LTP_SLICING, process_slicing )
	ltp_inited = true;
}

bool start_slicing( Critter& cr )
{
	if(!ltp_inited) 
		ltp_init();
	Item@ bladeItem = cr.GetItem( 0, SLOT_HAND1 );
	if( !valid( bladeItem ) )
	{
		cr.Say( SAY_NETMSG, "|0xFFFF00 Вам необходим инструмент для нарезки в руке." );
		return false;
	}	
	uint bladePid = bladeItem.GetProtoId();
	if( blades.find( bladePid ) == -1 )
	{
		cr.Say( SAY_NETMSG, "|0xFFFF00 Вам необходим инструмент для нарезки в руке." );
		return false;
	}
	
	if( IsTired( cr ) ) { return false; }
	
	Map@ map = cr.GetMap();		
	Item@ target = map.GetItem(cr.StatBase[ST_VAR7]);
	if( valid( target ) )
	{
		Item@[] ingredientsCheck;
		if( target.GetItems( uint( -1 ), ingredientsCheck ) == 0 )
		{
			return false;
		}

		uint hit_pause = ACTION_PAUSE_BASE - (cr.Stat[ST_AGILITY] * ACTION_PAUSE_BONUS_RATE );
		uint action_pause = CLAMP( hit_pause, ACTION_PAUSE_MIN, ACTION_PAUSE_MAX );
		uint[] values = { cr.Id };
		CreateTimeEvent( AFTER( REAL_MS( 300 ) ), "e_SlicingSound", values, true);
		CreateTimeEvent( AFTER( REAL_MS( 1000 ) ), "gathering@e_TiredenessTimeout", cr.Id, true);	
		StartProcess( cr, LTP_SLICING, 0, 0, target.Id, action_pause );
		return true;
	}
	return false;
}

uint process_slicing( Critter@ cr, int& param0, int& param1, int& param2 )
{
    LTPROCESS( cr, param0, LTP_SLICING )
	uint hit_pause = ACTION_PAUSE_BASE - (cr.Stat[ST_AGILITY] * ACTION_PAUSE_BONUS_RATE );
	uint action_pause = CLAMP( hit_pause, ACTION_PAUSE_MIN, ACTION_PAUSE_MAX );
  	Item@ target = GetItem( param2 );
	Item@[] stuff;
	target.GetItems( uint( -1 ), stuff );
	uint stuffCount = 0;
	for( uint i=0; i < stuff.length(); i++ )
	{
		stuffCount = stuffCount + stuff[i].GetCount();
	}
  	if( valid( target ) )
    {
      	param0++;
		int sequence_length = stuffCount;
		if( param0 > sequence_length )
		{
			RecalculateSugar( cr, target );
			return 0;
		}
		_CritAnimateUse(cr);
		uint autoemote = Random( 0, 4 );
		if( autoemote == 4 )
		{
			cr.Say( SAY_EMOTE_ON_HEAD, "Измельчает ингридиенты" );
		}
		uint[] values = { cr.Id };
		CreateTimeEvent( AFTER( REAL_MS( 300 ) ), "e_SlicingSound", values, true);
		CreateTimeEvent( AFTER( REAL_MS( 1000 ) ), "gathering@e_TiredenessTimeout", cr.Id, true);
		return action_pause;
    }
	return 0;
}

uint e_SlicingSound( uint[]@ values )
{
	Critter@cr = GetCritter(values[0]); 
	Map@ map = cr.GetMap();
	map.PlaySound( SlicingSoundNames[ Random( 0, SlicingSoundNames.length() -1 ) ], cr.HexX, cr.HexY, 5 );
	return 0;
}

bool RecalculateSugar( Critter& cr, Item& target )
{
	if( !valid( target ) ) { Log("Потеря указателя на предмет!"); return false;
	}
	Item@[] ingredients;
	if( target.GetItems( uint( -1 ), ingredients ) == 0 ) { return false;
	}

	int max_weight_index = -1;
	int max_weight_value = 0;
	for( uint i=0; i < ingredients.length(); i++ )
	{
		float sugar = 0;
        uint ingredientPid = ingredients[i].GetProtoId();
        uint ingredientsCount = ingredients[i].GetCount();
		int index = ingredient_index( ingredientPid );
		if( index != -1 )
        {
			int weight = ingredients[i].Proto.Weight * ingredientsCount;
			
			sugar = weight * ingredient_sugar_level(index); 
            target.SUGAR_LEVEL += sugar;
            target.STACH_LEVEL -= sugar;

            DebugLog( "Сахар: " + ingredients[i].Proto.Weight + " * " + ingredientsCount + " * " + ingredient_sugar_level(index) + " = " + sugar + "." );
			
			int percentage = weight * 100 / target.CURRENT_CAPACITY;
			
			DebugLog( "Пропорция: " + weight + " * " + 100 + " / " + target.CURRENT_CAPACITY + " = " + percentage + "%." );
			
			if( percentage >= 30 && weight > max_weight_value ) 
			{
				max_weight_value = weight;
				max_weight_index = index;
				
				DebugLog( itemName( ingredients[i] ) + " [ " + sugar + " ] меняет вкус браги с " + ingredient_taste(target.HOMEBREW_TYPE) + " на " + ingredient_taste( index ) + "." );
			}
			else
				DebugLog( itemName( ingredients[i] ) + " [ " + sugar + " ] имеет недостаточный вес (" + weight + " / " + max_weight_value + ") или % от общей массы [ " + percentage + " ]." );
        }
		else
		{
			target.HB_POLUTION_LEVEL = target.HB_POLUTION_LEVEL + ingredients[i].Proto.Weight * 10 * ingredientsCount / 100;
			DebugLog( itemName( ingredients[i] ) + " портит вкус." );
		}
		
		DeleteItem( ingredients[i] );
	}	
	
	target.HOMEBREW_TYPE = max_weight_index;
	
	return true;
}

bool start_brewing( Critter& cr, Item& target )
{
	if( !valid( target ) ) { Log("Потеря указателя на предмет!"); return false;
	}
	if( target.LIQUID_LEVEL == 0 || target.SUGAR_LEVEL == 0 ) {
		if( target.LIQUID_LEVEL == 0 ) { cr.Say( SAY_NETMSG, "|0xFF0000 Без воды процесс не начнется, вы зря потратили ценные дрожжи." ); 
		} 
		else { cr.Say( SAY_NETMSG, "|0xFF0000 Без сахара процесс не начнется, вы зря потратили ценные дрожжи." ); 
		}
		return false;
	}
	target.PicMap = PIC_POT_CLOSED;
	target.Update();
	target.STATE = 1;
	uint[] values = {target.Id};
	target.EVENT = CreateTimeEvent( AFTER( SUGAR_FERMENTING_TIME ), "e_Brewing", values, true );
	return true;
}

uint e_Brewing( uint[]@ values ) 
{
	uint itemId = values[0];
	Item@ target = GetItem( itemId );
	if( !valid( target ) ) { Log("Потеря указателя на предмет!"); return 0; 
	}
	
	if( target.SUGAR_LEVEL > 0 && ( ( target.HB_SPIRIT_LEVEL * 100 + target.HB_POLUTION_LEVEL * 100 ) / target.LIQUID_LEVEL ) < MAX_SPIRIT_LEVEL ) {
		target.SUGAR_LEVEL = target.SUGAR_LEVEL - SUGAR_FERMENTING_AMOUNT;
		target.HB_SPIRIT_LEVEL = target.HB_SPIRIT_LEVEL + ( SUGAR_FERMENTING_AMOUNT * FERMENTING_MODIFIER / 100 );
		if( target.STATE > 0 && target.PicMap != PIC_POT_CLOSED ) {
			uint16 HexX=0, HexY=0;
			Map @map = target.GetMapPosition( HexX, HexY );
			map.SetText( target.HexX, target.HexY, COLOR_LGRAY, ":тошнотворный запах:" );
		}
		return SUGAR_FERMENTING_TIME;
	}
	
	target.HB_SPIRIT_LEVEL = CLAMP( ( target.HB_SPIRIT_LEVEL * 100 / target.LIQUID_LEVEL ), 0, MAX_SPIRIT_LEVEL );
	target.STATE = STATE_FINISH;
	
	Item@[] rooted;
	target.GetItems( uint( -1 ), rooted );
	DeleteItems( rooted );
	
	if( target.STACH_LEVEL > 500 ) {
		for( uint i = 0, amount = floor( target.STACH_LEVEL / 500 ); i < amount; i++ ) {
			target.AddItem( PID_SHIT_BIG, 1, 0 );
			target.STACH_LEVEL -= 500;
		}
	}
	
	EraseTimeEvent( target.EVENT );
	target.EVENT = 0;
	return 0;
}

bool OpenClose( Critter& cr )
{
	Map@ map = cr.GetMap();
	if(!valid(map)) { Log("Вызов с глобала!"); return false; 
	}
	Item@ target = map.GetItem(cr.StatBase[ST_VAR7]);
	if(!valid(target)) { Log("Потеря указателя на предмет!"); return false; 
	}
	if( target.PicMap == PIC_POT_CLOSED )  {
		ProtoItem@ proto = GetProtoItem( PID_POT_ALCO );
		target.PicMap = proto.PicMap;
		target.Update();
		cr.Say( SAY_EMOTE, "Открывает крышку" );
		if(target.STATE >= 2) {
			uint[] values = {target.Id};
			target.EVENT = CreateTimeEvent( AFTER( REAL_SECOND( 1 ) ), "e_BrewSmell", values, true );
		}
	} else {
		target.PicMap = PIC_POT_CLOSED;
		target.Update();
		cr.Say( SAY_EMOTE, "Закрывает крышку" );
	}
	if( target.STATE > 0 && target.PicMap != PIC_POT_CLOSED ) {
		map.SetText( target.HexX, target.HexY, COLOR_LGRAY, ":тошнотворный запах:" );
	}
	map.PlaySound( "ROCK.ACM", target.HexX, target.HexY, 3 );  
	ShowMenuBrew ( cr, target );
	return true;
}

uint e_BrewSmell( uint[]@ values ) 
{
	uint itemId = values[0];
	Item@ target = GetItem( itemId );
	if( !valid( target ) ) { Log("Потеря указателя на предмет!"); return 0;
	}
	if( target.STATE >= STATE_FINISH && target.PicMap != PIC_POT_CLOSED ) {
		uint16 HexX=0, HexY=0;
		Map @map = target.GetMapPosition( HexX, HexY );
		map.SetText( target.HexX, target.HexY, COLOR_LGRAY, ":тошнотворный запах:" );
		return REAL_MINUTE( 5 );
	}
	if( target.PicMap == PIC_POT_CLOSED ) {
		EraseTimeEvent( target.EVENT );
		target.EVENT = 0;
	}
	return 0;
}

bool Taste( Critter&cr )
{
	Map@ map = cr.GetMap();
	Item@ target = map.GetItem(cr.StatBase[ST_VAR7]);
	if(!valid(target)) { Log("Потеря указателя на предмет!"); return false; 
	}
	if( target.LIQUID_LEVEL <= 0 ) { cr.Say( SAY_NETMSG, "|0xFFFF00 Пробовать без воды не имеет никакого смысла." ); return false; 
	}
	string result = "";
	string sugar = "";
	string state = target.STATE == 0 ? "водичка" : ( target.STATE == 1 ? "закваска" : "брага" );
	string alcohol = "";
	string polution = "";
	string taste = " со вкусом ";
	if( target.SUGAR_LEVEL <= 0 ) { sugar = "Пресная"; 
	} else if( ( target.SUGAR_LEVEL * 100 / target.LIQUID_LEVEL ) >= 1 && ( target.SUGAR_LEVEL * 100 / target.LIQUID_LEVEL ) <= 5 )  { sugar = "Сладковатая"; 
	} else if( ( target.SUGAR_LEVEL * 100 / target.LIQUID_LEVEL ) >= 6 && ( target.SUGAR_LEVEL * 100 / target.LIQUID_LEVEL ) <= 10 ) { sugar = "Cладкая"; 
	} else { sugar = "Приторная"; 
	}
	if( target.HB_SPIRIT_LEVEL > 0 ) {
		uint calcSpirit = target.STATE == 1? CLAMP( ( target.HB_SPIRIT_LEVEL * 100 / target.LIQUID_LEVEL ), 0, MAX_SPIRIT_LEVEL ) : target.HB_SPIRIT_LEVEL;
		if( calcSpirit >= 1 && calcSpirit <= 7 ) { alcohol = ", слегка горчит алкоголем";
		} else if( calcSpirit >= 8 && calcSpirit <= 15 ) { alcohol = ", горчит алкоголем";
		} else { alcohol = ", сильно горчит алкоголем";
		}
	}
	if( target.HB_POLUTION_LEVEL > 0 )	{
		if( target.HB_POLUTION_LEVEL >= 1 && target.HB_POLUTION_LEVEL <= 10 ) { polution = ", немного отдает тухлятиной.";
		} else if( target.HB_POLUTION_LEVEL >= 11 && target.HB_POLUTION_LEVEL <= 20 ) { polution = ", отдает тухлятиной.";
		} else { polution = ", сильно отдает тухлятиной.";
		}
	}
	if( target.HOMEBREW_TYPE < 0 ) { taste = "";
	} else { taste += ingredient_taste( target.HOMEBREW_TYPE );
	}
	result += sugar + " " + state + taste + alcohol + polution;
	cr.Say( SAY_NETMSG, "|0xFFFF00 Попробовав, Вы определили, что это: " +result );
	ShowMenuBrew ( cr, target );
	return true;
}

bool another_ltp_inited = false;
void another_ltp_init()
{
	LTPREG( LTP_HB_POURING, process_pouring )
	another_ltp_inited = true;
}

bool start_hb_pouring( Critter& cr )
{
	if(!another_ltp_inited) { 
		another_ltp_init();
	}
	Map@ map = cr.GetMap();		
	Item@ target = map.GetItem(cr.StatBase[ST_VAR7]);
	if( valid( target ) ) {
		if( ( target.LIQUID_LEVEL / 100 ) < 1 ) { cr.Say( SAY_NETMSG, "|0xFFFF00 Недостаточно жидкости для перелива." ); return false;
		}
		
		if( !hasItem( cr, PID_BOTTLE_GLASS ) && !hasItem( cr, PID_HOMEBREW_PRT ) ) { cr.Say( SAY_NETMSG, "|0xFFFF00 У вас нет подходящей тары." ); return false;
		}
		
		uint hit_pause = ACTION_PAUSE_BASE - (cr.Stat[ST_AGILITY] * ACTION_PAUSE_BONUS_RATE );
		uint action_pause = CLAMP( hit_pause, ACTION_PAUSE_MIN, ACTION_PAUSE_MAX );
		map.PlaySound( "homebrew_pouring.ogg", cr.HexX, cr.HexY, 5 );
		
		cr.SetAnims( COND_LIFE, 0, ANIM2_CROUCH );
		
		StartProcess( cr, LTP_HB_POURING, 0, 0, target.Id, action_pause );
		return true;
	}
	return false;
}

uint process_pouring( Critter@ cr, int& param0, int& param1, int& param2 )
{
    LTPROCESS( cr, param0, LTP_HB_POURING )
	uint hit_pause = ACTION_PAUSE_BASE - ( cr.Stat[ST_AGILITY] * ACTION_PAUSE_BONUS_RATE );
	uint action_pause = CLAMP( hit_pause, ACTION_PAUSE_MIN, ACTION_PAUSE_MAX );
  	Item@ target = GetItem( param2 );
	
  	if( valid( target ) ) {
		
      	if( ( !hasItem( cr, PID_BOTTLE_GLASS ) && !hasItem( cr, PID_HOMEBREW_PRT ) ) || ( target.LIQUID_LEVEL / 100 ) < 1 ) {
			string TXT = ( ( target.LIQUID_LEVEL / 100 ) < 1 ) ? " Вы разлили всю брагу по бутылкам." : " У Вас закончилась тара.";
			cr.Say( SAY_NETMSG, "|0xFFFF00 " + TXT );
			cr.SetAnims(COND_LIFE, 0, ANIM2_IDLE);
			return 0;
		}
		
		uint autoemote = Random( 1, 10 );
		if( autoemote == 10 ) { cr.Say( SAY_EMOTE_ON_HEAD, "Наполняет бутылку" );
		}
		
		if( hasItem( cr, PID_HOMEBREW_PRT ) ) {
			
			Item@ homebrewPrt = getItem( cr, PID_HOMEBREW_PRT );
			if( homebrewPrt.REMAINING_USES < homebrewPrt.Proto.Partial_Item ) {
				
				target.LIQUID_LEVEL -= 100;
				homebrewPrt.REMAINING_USES ++;
				homebrewPrt.EXTRA_WEIGHT = homebrewPrt.REMAINING_USES * 100;

				Map@ map = cr.GetMap();
				map.PlaySound( "homebrew_pouring.ogg", cr.HexX, cr.HexY, 5 );
				
				homebrewPrt.HOMEBREW_TYPE = target.HOMEBREW_TYPE;
				homebrewPrt.HB_SPIRIT_LEVEL = target.HB_SPIRIT_LEVEL;
				homebrewPrt.HB_POLUTION_LEVEL = target.HB_POLUTION_LEVEL;
				
				homebrewPrt.Update();
				
				if( homebrewPrt.REMAINING_USES == homebrewPrt.Proto.Partial_Item ) {
				
					Item@ homebrew = cr.AddItem( PID_HOMEBREW, 1 );
					
					homebrew.HOMEBREW_TYPE = homebrewPrt.HOMEBREW_TYPE;
					homebrew.HB_SPIRIT_LEVEL = homebrewPrt.HB_SPIRIT_LEVEL;
					homebrew.HB_POLUTION_LEVEL = homebrewPrt.HB_POLUTION_LEVEL;
								
					_SubItem( homebrewPrt , 1 );
				
					cr.Say( SAY_NETMSG, "|0xFFFF00 Вы полностью наполнили бутылку брагой" );
				
					homebrew.Update();
				}
			}
			
			return action_pause;
			
		} else {
		
			Item@ bottle = cr.GetItem( PID_BOTTLE_GLASS, -1 );
			_SubItem( bottle , 1 );
		
			Item@ homebrewPrt = cr.AddItem( PID_HOMEBREW_PRT, 1 );
		
			target.LIQUID_LEVEL -= 100;
			homebrewPrt.REMAINING_USES ++;
			homebrewPrt.EXTRA_WEIGHT = homebrewPrt.REMAINING_USES * 100;

			Map@ map = cr.GetMap();
			map.PlaySound( "homebrew_pouring.ogg", cr.HexX, cr.HexY, 5 );
				
			homebrewPrt.HOMEBREW_TYPE = target.HOMEBREW_TYPE;
			homebrewPrt.HB_SPIRIT_LEVEL = target.HB_SPIRIT_LEVEL;
			homebrewPrt.HB_POLUTION_LEVEL = target.HB_POLUTION_LEVEL;
			
			homebrewPrt.Update();
		}
		
		return action_pause;
    }
	
	cr.SetAnims(COND_LIFE, 0, ANIM2_IDLE);
	return 0;
}

bool DisposeBrew( Critter& cr )
{
	Map@ map = cr.GetMap();
	if(!valid(map)) { Log("Вызов с глобала!"); return false; 
	}
	Item@ target = map.GetItem(cr.StatBase[ST_VAR7]);
	if(!valid(target)) { Log("Потеря указателя на предмет!"); return false; 
	}
	if( target.CURRENT_CAPACITY <= 0 ) { cr.Say( SAY_NETMSG, "|0xFFFF00 Вы опрокинули чан и убедились, что он пуст." ); return false;
	}
	_CritAnimateUse(cr);
	if( target.LIQUID_LEVEL == 0 && target.STACH_LEVEL > 0 ) {
        cr.Say( SAY_EMOTE, "Вытряхивает содержимое кувшина" );
		map.SetText( target.HexX, target.HexY, COLOR_LGRAY, ":ингридиенты рассыпаются по земле:" );
		Item@[] dumpedItems;
        target.GetItems( uint( -1 ), dumpedItems );
		for( uint i = 0; i < dumpedItems.length(); i++ ) {
			DeleteItem( dumpedItems[i] );
			uint16 dumpedItemPid = dumpedItems[i].GetProtoId();
			uint16 dumpedItemsCount = dumpedItems[i].GetCount();
			uint16 hx=0, hy=0;
			hx = target.HexX; hy = target.HexY;
			map.MoveHexByDir( hx, hy, Random( 1, 6 ), 1 );
			if( map.IsHexPassed( hx, hy ) ) {
				map.AddItem( hx, hy, dumpedItemPid, dumpedItemsCount );
			} else {	
				map.AddItem( cr.HexX, cr.HexY, dumpedItemPid, dumpedItemsCount );
			}
		}
	} else if( target.LIQUID_LEVEL >= target.CURRENT_CAPACITY ) {
		map.SetText( target.HexX, target.HexY, COLOR_LGRAY, ":под кувшином образовалась лужа:" );
		cr.Say( SAY_EMOTE, "Выливает содержимое кувшина" );
		map.PlaySound( "splash.ogg", target.HexX, target.HexY, 5 );
	} else {
		cr.Say( SAY_EMOTE, "Выливает содержимое кувшина" );
		map.PlaySound( "splash.ogg", target.HexX, target.HexY, 5 );
		map.SetText( target.HexX, target.HexY, COLOR_LGRAY, ":тошнотворный запах:" );
		Item@[] dumpedItems;
        target.GetItems( uint( -1 ), dumpedItems );
		map.AddItem( target.HexX, target.HexY, PID_SHIT_HUGE, 1 );
		for(uint i=0;i<dumpedItems.length();i++) {
			uint16 dumpedItemPid = dumpedItems[i].GetProtoId();
			uint16 dumpedItemsCount = dumpedItems[i].GetCount();
			uint16 hx=0, hy=0;
			hx = target.HexX; hy = target.HexY;
			map.MoveHexByDir( hx, hy, Random( 1, 6 ), 1 );
			uint16 amount = dumpedItemsCount - Random ( 1, dumpedItemsCount / 2 );
			if(amount > 0) {
				if( map.IsHexPassed( hx, hy ) ) {
					map.AddItem( hx, hy, dumpedItemPid, ( dumpedItemsCount - Random ( 1, dumpedItemsCount ) ) );
				} else {	
					map.AddItem( cr.HexX, cr.HexY, dumpedItemPid, ( dumpedItemsCount - Random ( 1, dumpedItemsCount ) ) );
				}
			}
			DeleteItem( dumpedItems[i] );
		}
	}
	target.STATE = STATE_PREPARE;
	target.CURRENT_CAPACITY = 0;
	EraseTimeEvent( target.EVENT );
	target.EVENT = 0;
	target.LIQUID_LEVEL = 0;
	target.STACH_LEVEL = 0;
	target.SUGAR_LEVEL = 0;
	target.HB_POLUTION_LEVEL = 0;
	target.HOMEBREW_TYPE = -1;
	target.HB_SPIRIT_LEVEL = 0;
	ProtoItem@ proto = GetProtoItem( PID_POT_ALCO );
	target.PicMap = proto.PicMap;
	target.Update();
	return true;
}
	
string MenuInfoClosed( Critter& cr, Item& target)
{
	string TXT = "Крышка плотно закрыта, запаха нет.";
	return TXT;
}			

string MenuInfoOpen( Critter& cr, Item& target)
{
	string TXT = ( target.STATE == STATE_PREPARE ? "Брожение не начнется без" + "\nдрожжей, воды и сахара." + "\nДобавив дрожжи, Вы запустите процесс." : target.STATE == STATE_WORKING ? "Процесс брожения еще идет." : "Похоже, что брожение завершено." );
	float CURRENT_CAPACITY = target.CURRENT_CAPACITY / 1000.0f;
	float CAPACITY = target.CAPACITY / 1000.0f;
	TXT += "\n" + "\nКувшин заполнен на " + CURRENT_CAPACITY + " из " + CAPACITY + " литров.";
	return TXT;
}

#endif //HOMEBREW
