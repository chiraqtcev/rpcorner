// Dynamic Map Objects 64 - client side

#include "_client_defines.fos"
#include "qmap_defines.fos"
#include "_macros.fos"
#include "sprite.fos"

// #include "qmap_h.fos"

// Sprite[] tiles(6);

MapTileData[] MapTileDatabase;

MapTileData@ currMTD = null;

bool         inited = false;

bool         local_enabled = false;

bool         server_enabled = true;

bool         refreshMap = false;
bool         updateTiles = false;

Sprite[] sprites;

#define VALUE_EMPTY (uint(-1))
#define VALUE_ERROR (uint(-2))

uint getSprite( uint hash )
{
    uint sn = VALUE_EMPTY;
    if( hash == 0 )
        return sn;

    for( uint i = 0, len = sprites.length(); i < len; i++ )
    {
        if( sprites[ i ].Id != 0 && sprites[ i ].Hash == hash )
        {
            sn = i;
            break;
        }
    }
    if( sn == VALUE_EMPTY )
    {
        sn = sprites.length();
        sprites.grow( 1 );
        sprites[ sn ].Load( hash, 0 );
        if( sprites[ sn ].Id == 0 )
        {
            sn = VALUE_ERROR;
            sprites.removeLast();
            // Log("Не найден спрайт с хэшем "+hash+" "+int(hash));
            Message( "Не найден спрайт с хэшем " + hash + " " + int(hash) );
        }
    }
//	Message("TileId "+sprites[sn].Id);
    return sn;
}

// uint[] Tiles2Roofs;

void CheckSprites()
{
    /*for(uint i=0, len=Tiles2Roofs.length()/2; i<len; i++)
       {
            NativeSprite@ sprite = GetSpriteDOT(int(Tiles2Roofs[i*2]), Tiles2Roofs[i*2+1]&0xFFFF, Tiles2Roofs[i*2+1]>>16);
            if(sprite !is null)
            {
                    sprite.DrawOrderType=30;
                    sprite.DrawOrderPos+=2000000000;
            }
            else Message("sprite "+Tiles2Roofs[i*2]+" ("+(Tiles2Roofs[i*2+1]&0xFFFF)+":"+(Tiles2Roofs[i*2+1]>>16)+") is null");
       }
       Tiles2Roofs.resize(0);*/
}

/*
   #define QDM_DATA_TILE		(0)
   #define QDM_DATA_HASH		(1)
   #define QDM_DATA_OBJ		(2)

   #define QDM_DATA_TILE_HASHNUM	(0)
   #define QDM_DATA_TILE_EXT		(1)
   #define QDM_DATA_TILE_HEX_X		(2)
   #define QDM_DATA_TILE_HEX_Y		(3)

   #define QDM_DATA_HASH_NUM		(0)
   #define QDM_DATA_HASH_VAL		(1)

   #define QDM_DATA_OBJ_1			(0)
   #define QDM_DATA_OBJ_2			(1)
   #define QDM_DATA_OBJ_3			(2)
   #define QDM_DATA_OBJ_4			(3)

   class DynamicTile
   {
        uint16 HashNum;
        uint16 Reserved0;
        uint16 HexX, HexY;

        void Set(uint16 hs1, uint16 hs2, uint16 hexX, uint16 hexY)
        {
                HashNum=hs1;
                Reserved0=hs2;
                HexX=hexX; HexY=hexY;
        }
   }

   interface QDM_iElement
   {

   }

   interface QDM_iElementType		// tile/hash/obj
   {
        uint id;
   }

   interface QDM_iBufferType // client data
   {
        uint id;
        bool AppendData(QDM_iObjectType[]& buffer, int[]& pack, QDM_PackType& packType);
   }

   interface QDM_iDataPack	// data from server
   {
        QDM_iPackType@ PackType;
        int[]@ GetData();
   }

   interface QDM_iPackType	// 1/2/4/6/8 byte for element
   {
        uint id;
        QDM_iDataType@ DataType;
        uint8 ElementSize;
        uint8 Struct;
   }

   interface QDM_iObjectType
   {
        uint id;
   }

   bool addTileData(DynamicTile[]& data, int[]& data2, uint8 dataType)
   {
        uint len=data.length();
        uint len2=data2.length();

        uint8 format = (dataType&0x3F)+1;

        switch(format)
        {
        case 1:
        case 2:
                break;
        default: return false;
        }

        if(len2==0 || format2%format!=0) return false;

        data.grow(len2/format);

        switch(format)
        {
        case 1:
                for(uint i=0, j=len2; i<j; i++)
                {
                                data[len+i].Set(data2[i]&0xFFFF, 0, (data2[i]>>16)&0xFF, (data2[i]>>24)&0xFF);
                }
        case 2:
                {
                        for(uint i=0, j=len2/2; i<j; i++)
                        {
                                data[len+i].Set(data2[i*2]&0xFFFF, (data2[i*2]>>16)&0xFFFF, data2[i*2+1]&0xFFFF, (data2[i*2+1]>>16)&0xFFFF);
                        }
                }
                break;
        default: return false;
        }


        return true;
   }
 */
class MapTileData
{
    uint Id;
    // uint16 TileHashCount;
    // uint16 TileCount;

    int[] TileHashs;

    int[] Tiles;

    // DynamicTile[] DynamicTiles;

    uint[] TileSprites;

    uint Selected;
    uint SelTick;

    MapTileData()
    {
        Id = 0;

        TileHashs.resize( 0 );
        Tiles.resize( 0 );
        TileSprites.resize( 0 );

        Selected = 0;
        SelTick = 0;
    }

    uint16 TileHashCount()
    {
        return TileHashs.length();
    }

    uint TileCount()
    {
        return Tiles.length() >> 1;
    }

    bool SetFullHash( int[]& data )
    {
        TileHashs.resize( 0 );
        TileHashs = data;

        //Message("SetFullHash, len: "+TileHashCount());

        sprites.resize( 0 );
        ReloadSprites();
        return true;
    }

    bool SetOneHash( uint16 hs, int hash )
    {
        // if(hash_num>250) return false;
        if( hs >= TileHashCount() )
        {
            TileHashs.resize( hs + 1 );
            // TileHashCount=hash_num;
        }

        TileHashs[ hs ] = hash;

        ReloadSprite( hs );

        return true;
    }
/*
        uint16 AddOneHash(int hash) //для локального использования
        {
                if(Id!=uint(-1)) return 0;
                for(uint16 i=0, len=TileHashCount(); i<len; i++)
                {
                        if(TileHashs[i]!=hash) continue;
                        return i;
                }

                //if(TileHashCount>250) return uint8(-1);

                uint t=TileHashCount();

                TileHashs.insertLast(hash);

                ReloadSprite(t);

                //TileHashCount++;

                return t;
        }
 */
    bool LoadTiles( int param, int[]& data )
    {
        bool ck = true;
        uint old_len = TileCount();
        uint data_len = data.length();

        if( param == 2 )
        {
            // тайлы просто дописываются в конец
            ck = ck && DMO64_insertLast( Tiles, data );
        }
        else
        {
            if( data.length() < 1 || data.length() % 2 != 0 )
                ck = false;
            else if( param == 0 )
            {
                DMO64_add( Tiles, data, true );
            }
            else
            {
                // тайлы пишутся поверх с полной очисткой старых
                Tiles.resize( 0 );
                Tiles = data;
            }
        }
        //Message("LoadTiles, old_len: "+old_len+", data: "+data_len+", new_len:"+TileCount());

        updateScreen();

        return ck;
    }

    bool SetTile( uint16 hs, uint16 val, uint16 hexX, uint16 hexY, uint8 layer )
    {
        bool ck = DMO64_set( Tiles, hs, val, DMO64_makeHex( hexX, hexY, layer ), true );

        updateScreen();

        return ck;
    }

    bool ReloadSprites()
    {
        TileSprites.resize( 0 );

        uint len = TileHashCount();

        if( len == 0 )
            return true;

        TileSprites.resize( len );

        /*uint hash = 0, sn = 0;

        for( uint i = 1; i < len; i++ )
        {
            hash = uint( TileHashs[ i ] );

            sn = getSprite( hash );

            TileSprites[ i ] = sn;

            // if(sn!=uint(-1)) Message("Hash #"+i+" is "+sn+"/"+sprites[sn].Id+" ("+hash+")");
            // else Message("Hash #"+i+" is null ("+hash+")");
        }*/

        for( uint i = 1; i < len; i++ ) {
            TileSprites[ i ] = VALUE_EMPTY;
        }

        return true;
    }

    bool ReloadSprite( uint16 hs )
    {
        if( TileSprites.length() < hs + 1 )
        {
            uint len = TileSprites.length();
            TileSprites.resize( hs + 1 );
            for( uint i = len; i < hs; i++ ) {
                TileSprites[ i ] = VALUE_EMPTY;
            }
        }
        TileSprites[ hs ] = VALUE_EMPTY;

        /*if( hs == 0 )
            return true;

        uint hash = uint( TileHashs[ hs ] );

        uint sn = uint( -1 );

        if( hash == 0 )
        {
            TileSprites[ hs ] = sn;
        }
        else
        {
            sn = getSprite( hash );
            TileSprites[ hs ] = sn;
        }*/

        // if(sn!=uint(-1)) Message("Hash #"+hs+" is "+sn+"/"+sprites[sn].Id+" ("+hash+")");
        // else Message("Hash #"+hs+" is null ("+hash+")");

        return true;
    }

    uint LoadSprite( uint16 hash_index ) {
        uint sprite_index = TileSprites[ hash_index ];
        if( sprite_index == VALUE_EMPTY ){
            uint hash = uint( TileHashs[ hash_index ] );
            sprite_index = getSprite( hash );
            TileSprites[ hash_index ] = sprite_index;
        }
        return sprite_index;
    }

    bool Draw()
    {
        CritterCl@ chosen = GetChosen();

        if( chosen is null )
            return false;

        int    x = 0, y = 0;
        uint16 hash_index = 0, val = 0, hexX = 0, hexY = 0;
        uint   sprite_index = 0, spriteId = 0;
        uint8  layer = 0;
        bool regroup_roofs = false;

        // Message("tilecount: "+TileCount()+" array size: "+Tiles.length());
        for( uint i = 0, len = TileCount(); i < len; i++ )
        {
            DMO64_get( Tiles, i, hash_index, val, hexX, hexY, layer );
            // Message(hash_index+" "+hexX+" "+hexY+" "+layer);

            NativeField@ field = GetField( hexX, hexY );
            if( field is null )
                continue;

            bool is_tile = (layer < 2);

            if( is_tile )
            {
                hexX = ( hexX << 1 );
                hexY = ( hexY << 1 );
            } else if( layer == 2 ) {
                field.IsNotPassed = true;
                field.IsNoLight = true;
                field.IsNotRaked = true;
                field.IsWall = true;
            } else if( layer == 3 ) {
                field.IsNotPassed = true;
                field.IsNoLight = true; /*field.IsNotRaked=true;*/
                field.IsScen = true;
            } else if( layer > 4 )
                continue;

            uint len = TileHashCount();
            if( hash_index == 0 || hash_index == 0xFFFF || hash_index >= len)
                continue;

            if( is_tile ) {
                bool is_roof = (layer == 1);
                ChangeTile(TileHashs[hash_index], hexX, hexY, 0, 0, 0, is_roof);
                updateTiles = true;
                Tiles[ i * 2 ] = 0;
                if( is_roof ) {
                    //max_roof_num = UpdateRoofNum(hexX, hexY, GetMaxRoofNum());
                    regroup_roofs = true;
                }
            } else {
                if(!GetHexPos( hexX, hexY, x, y ) || x < -100 || y < -100 || x > __ScreenWidth + 100 || y > __ScreenHeight + 100 )
                    continue;

                sprite_index = LoadSprite(hash_index);

                if( sprite_index == VALUE_EMPTY || sprite_index == VALUE_ERROR || sprites.length() <= sprite_index )
                {
                    continue;
                }
                spriteId = sprites[ sprite_index ].Id;

                if( spriteId == 0 )
                    continue;

                if( layer == 2 )
                {
                    // DrawMapSprite(hexX, hexY, 5001, spriteId, 0, 0, 0);

                    NativeSprite@ sprite = AddMapSprite2( hexX, hexY, spriteId, 0, __MapHexWidth >> 1, __MapHexHeight >> 1, 23, 0 );
                    if( sprite !is null ) {
                        sprite.EggType = 5;
                    }
                    // TestAnim(uint(TileHashs[hash_index]), hexX, hexY, 4); //wtf?
                }
                else if( layer == 3 )
                {
                    // DrawMapSprite(hexX, hexY, 5001, spriteId, 0, 0, 0);

                    NativeSprite@ sprite = AddMapSprite2( hexX, hexY, spriteId, 0, __MapHexWidth >> 1, __MapHexHeight >> 1, 23, 0 );
                    // sprite.EggType = 5;
                }
                else if( layer == 4 )
                {
                    // DrawMapSprite(hexX, hexY, 5001, spriteId, 0, 0, 0);

                    NativeSprite@ sprite = AddMapSprite2( hexX, hexY, spriteId, 0, __MapHexWidth >> 1, __MapHexHeight >> 1, 24, 0 );
                    // sprite.EggType = 5;
                }
            }
        }

        // SortSprites();

        Selected = 0;

        if(regroup_roofs) {
            RegroupRoofs();
        }

        // __ScreenWidth
        // __ScreenHeight

        return true;
    }
    //WIP
    /*
    bool ApplySelection()
    {
        int    x = 0, y = 0;
        uint16 hs = 0, val = 0, hexX = 0, hexY = 0;
        uint   ts = 0, spriteId = 0;
        uint8  layer = 0;

        DMO64_get( Tiles, Selected, hs, val, hexX, hexY, layer );

        if( hs == 0 )
            return false;

        ts = TileSprites[ hs ];
        if( ts == uint( -1 ) || sprites.length() <= ts )
            return false;
        spriteId = sprites[ ts ].Id;

        if( spriteId == 0 )
            return false;

        NativeSprite@ sprite = GetSprite( spriteId, hexX, hexY );
        if( sprite is null )
            return false;

        Message( "Вы видите стену." );
        sprite.ContourType = 1;
        sprite.ContourColor = 0xFFFF0000;

        SelTick = 0;

        return true;
    }

    bool DropSelection()
    {
        int    x = 0, y = 0;
        uint16 hs = 0, val = 0, hexX = 0, hexY = 0;
        uint   ts = 0, spriteId = 0;
        uint8  layer = 0;

        DMO64_get( Tiles, Selected, hs, val, hexX, hexY, layer );

        if( hs == 0 )
            return false;

        ts = TileSprites[ hs ];
        if( ts == uint( -1 ) || sprites.length() <= ts )
        {
            return false;
        }
        spriteId = sprites[ ts ].Id;

        if( spriteId == 0 )
            return false;

        NativeSprite@ sprite = GetSprite( spriteId, hexX, hexY );
        if( sprite is null )
            return false;

        sprite.ContourType = 0;
        sprite.ContourColor = 0;

        Selected = 0;
        SelTick = 0;

        return true;
    }
    
    void Draw_iface()
    {
        CritterCl@ chosen = GetChosen();

        if( chosen is null )
            return;

        int           x = 0, y = 0;
        uint16        hs = 0, val = 0, hexX = 0, hexY = 0;
        uint          ts = 0, spriteId = 0;
        uint8         layer = 0;

        bool          sel_ck = false;

        NativeSprite@ sprite = GetMonitorSprite( 0, 0 );
        if( sprite !is null )
        {
            string str = "SprId: " + sprite.GetSprId();
            str += "(" + sprite.SprId;
            str += ") HexX: " + sprite.HexX;
            str += " HexY: " + sprite.HexY + "\n";

            int x1 = 0, y1 = 0;
            sprite.GetPos( x1, y1 );

            str += "X: " + x1;
            str += " Y: " + y1 + "\n";

            str += "ET: " + sprite.EggType;
            str += " CT: " + sprite.ContourType;
            str += " CC: " + sprite.ContourColor;
            str += " C: " + sprite.Color;
            str += " FM: " + sprite.FlashMask + "\n";

            str += "DOT: " + sprite.DrawOrderType;
            str += " DOP: " + sprite.DrawOrderPos;
            str += " TI: " + sprite.TreeIndex;

            for( uint i = 0, len = TileCount(); i < len; i++ )
            {
                DMO64_get( Tiles, i, hs, val, hexX, hexY, layer );

                if( hexX != sprite.HexX || hexY != sprite.HexY )
                    continue;

                str += "\nDMO: " + i + " hs1: " + hs;

                if( hs == 0 )
                    continue;

                str += " hash: " + uint( TileHashs[ hs ] );

                ts = TileSprites[ hs ];
                if( ts == uint( -1 ) || sprites.length() <= ts )
                {
                    continue;
                }
                spriteId = sprites[ ts ].Id;

                if( spriteId == 0 )
                    continue;

                str += " sprId: " + spriteId;

                if( GetSprId( spriteId, 0 ) != sprite.GetSprId() )
                    continue;

                str += " OK.";

                sel_ck = true;

                if( Selected != i )
                {
                    if( Selected != 0 )
                    {
                        if( !DropSelection() )
                            Message( "Can't drop selection." );
                    }

                    Selected = i;
                    SelTick = GetTick() + 500;
                }
            }

            DrawText( str, __MouseX + 30, __MouseY, 400, 400, 0xFFFF0000, FONT_FALLOUT, FT_BORDERED );
        }

        if( !sel_ck && Selected != 0 )
        {
            if( !DropSelection() )
                Message( "Can't drop selection. (2)" );
        }

        return;
    }
    */
}

/*
   uint prevMapId=0;

   void clickM()
   {
        if(!inited) initTileDraw();

        local_enabled=!local_enabled;
        server_enabled=!local_enabled;

        if(local_enabled)
        {
                if(!(currMTD is null) && currMTD.Id!=0 && currMTD.Id!=uint(-1)) prevMapId=currMTD.Id;
                getMTD(uint(-1));
        }
        else
        {
                @currMTD=null;
                if(prevMapId!=0 && prevMapId!=uint(-1)) @currMTD=findMTD(prevMapId);
        }

   }
 */

/*void initTileDraw()
   {
        inited = true;
   }*/

void DrawMapTiles()
{
    // if(!enabled) return;

    // if(!inited) initTileDraw();

    // DrawMapSprite(uint16 hx, uint16 hy, uint16 effectPid, uint sprId, int sprIndex, int offsX, int offsY)

    // CritterCl@ ch = GetChosen();
    // if(ch is null) return;

    if( !(currMTD is null) && currMTD.Id != 0 )
    {
        bool ck = ( currMTD.Id == uint( -1 ) );

        if( ( server_enabled && !ck ) || ( local_enabled && ck ) )
            currMTD.Draw();
    }

    // for(uint i=0; i<tiles.length(); i++) DrawMapSprite(ch.HexX, ch.HexY-i*2, 2027, tiles[i].Id, 0, 0, 0);
}

MapTileData@ getMTD( uint id )
{
    if( id == 0 )
        return null;

    MapTileData@ mtd = findMTD( id );

    if( mtd is null )
    {
        MapTileDatabase.grow( 1 );
        @mtd = MapTileDatabase.last();
    }

    mtd.Id = id;
    @currMTD = mtd;

    if( mtd is null )
        Message( "mtd is null" );
    return mtd;
}

MapTileData@ findMTD( uint id )
{
    if( id == 0 )
        return null;
    if( !(currMTD is null) && currMTD.Id == id )
        return currMTD;

    for( uint i = 0; i < MapTileDatabase.length(); i++ )
    {
        if( MapTileDatabase[ i ].Id != id )
            continue;
        return MapTileDatabase[ i ];
    }

    return null;
}

uint findMTDi( uint id )
{
    if( id == 0 )
        return uint( -1 );

    for( uint i = 0; i < MapTileDatabase.length(); i++ )
    {
        if( MapTileDatabase[ i ].Id != id )
            continue;
        return i;
    }

    return uint( -1 );
}


/*
   void slth(uint hash)
   {

        MapTileData@ mtd = getMTD(uint(1));
        CritterCl@ ch = GetChosen();

        if(ch is null || mtd is null) return;

        string data = "123456";

        data[0]=uint8(mtd.AddOneHash(int(hash)));
        data[1]=uint8(ch.HexX&0xFF);
        data[2]=uint8((ch.HexX>>8)&0xFF);
        data[3]=uint8(ch.HexY&0xFF);
        data[4]=uint8((ch.HexY>>8)&0xFF);
        data[5]=0;

        mtd.SetTile(data);

        MoveScreen(ch.HexX, ch.HexY, 0);
        Message("ch "+ch.HexX+" "+ch.HexY);

   }

   void build(int var)
   {

        MapTileData@ mtd = findMTD(uint(-1));
        CritterCl@ ch = GetChosen();

        if(ch is null || mtd is null) return;

        if(var==1)
        {
                for(uint i=0; i<5; i++)
                {
                        string text = "art/tiles/gar200"+i+".frm";
                        uint hash = GetStrHash(text);
                        //Message("text ["+text+"] is "+hash);
                        mtd.SetTile(mtd.AddOneHash(int(hash)), ch.HexX+2, ch.HexY+i*2-2, 0);
                }
        }
        else if(var==2)
        {
                string[] nums = {"00","01","03","08","06","07","12","14","15"};
                for(uint i=0; i<9; i++)
                {
                        int x=(1-(i%3));
                        int y=(i/3-1);
                        x*=2; y*=2;
                        string text = "art/tiles/slime"+nums[i]+".frm";
                        uint hash = GetStrHash(text);

                        mtd.SetTile(mtd.AddOneHash(int(hash)), ch.HexX+x, ch.HexY+y, 0);
                }

        }

        MoveScreen(ch.HexX, ch.HexY, 0);

   }
 */

void updateScreen()
{
    refreshMap = true;
}

void qmap_loop()
{
    //void RefreshMap(bool onlyTiles, bool onlyRoof, bool onlyLight)
    if( refreshMap )
    {
        RefreshMap( false, false, false );
        refreshMap = false;
        // Message("RefreshMap");
    }
    if( updateTiles )
    {
        RefreshMap( true, false, false );
        RefreshMap( false, true, false );
        updateTiles = false;
    }

    //WIP
    /*
    if( ( currMTD !is null ) && currMTD.Id != 0 )
    {
        if( currMTD.SelTick != 0 && currMTD.SelTick < GetTick() )
        {
            // if(!
            currMTD.ApplySelection();
            // ) Message("Can't apply selection.");
        }
    }
    */
}

void qmap_iface()
{
    //WIP
    /*
    if( ( __sinf & SINF_SPRITES ) != 0 && ( currMTD !is null ) && currMTD.Id != 0 )
    {
        bool ck = ( currMTD.Id == uint( -1 ) );

        if( ( server_enabled && !ck ) || ( local_enabled && ck ) )
            currMTD.Draw_iface();
    }
    */
}

void __SetFullHash( int id, int count, int param2, string@ param3, int[] @ data )
{
    MapTileData@ mtd = getMTD( uint( id ) );

    // Message("tryMTD "+id);

    if( (mtd is null) || (data is null) )
        return;

    // Message("SetFullHash mapId "+uint(id)+" size "+data.length()+" server_count "+uint(count));

    mtd.SetFullHash( data );

    if( mtd.TileHashCount() != uint( count ) )
        Message( "__SetFullHash error! Invalid data size: " + mtd.TileHashCount() + "!=" + uint( count ) );
}

void __SetOneHash( int id, int hs, int hash, string@ param3, int[] @ param4 )
{
    MapTileData@ mtd = getMTD( uint( id ) );

    // Message("tryMTD "+id);

    // Message("SetOneHash mapId "+uint(id)+" hs "+uint(hs)+" hash "+uint(hash));

    if( !(mtd is null) )
        mtd.SetOneHash( uint16( hs ), hash );
}

void __SetTiles( int id, int count, int param, string@ param3, int[] @ data )
{
    MapTileData@ mtd = getMTD( uint( id ) );

    // Message("tryMTD "+id);

    if( (mtd is null) || (data is null) )
    {
        Message( "mtd or data is null!" );
        return;
    }

    // Message("SetTiles mapId "+uint(id)+" size "+data.length()+" param "+param+" server_count "+uint(count));

    mtd.LoadTiles( param, data );

    if( mtd.TileCount() != uint( count ) )
        Message( "__SetTiles error! Invalid data size: " + mtd.TileCount() + "!=" + uint( count ) );
}

void __SetTile( int id, int data01, int data02, string@ param3, int[] @ param4 )
{
    MapTileData@ mtd = getMTD( uint( id ) );

    // Message("tryMTD "+id);

    if( mtd is null )
        return;

    uint16 hs = uint16( data01 & 0xFFFF ),
           val = uint16( ( data01 >> 16 ) & 0xFFFF ),
           hexX = uint16( data02 & 0xFFF ),
           hexY = uint16( ( data02 >> 12 ) & 0xFFF );
    uint8 layer = uint8( ( data02 >> 24 ) & 0xFF );

    // Message("SetTile mapId "+uint(id)+" hash "+hs+" hexX "+hexX+" hexY "+hexY+" layer "+layer);

    mtd.SetTile( hs, val, hexX, hexY, layer );
}

void __delMTD( int id, int param1, int param2, string@ param3, int[] @ param4 )
{
    uint mtd = findMTDi( uint( id ) );

    // Message("tryMTD "+id);

    if( mtd == uint( -1 ) )
        return;

    if( !(currMTD is null) && ( currMTD.Id == MapTileDatabase[ mtd ].Id ) )
        @currMTD = null;

    sprites.resize( 0 );

    MapTileDatabase.removeAt( mtd );

    // Message("delMTD mapId "+uint(id));
}

uint fast_rnd( uint& seed )
{
    uint offset = 12923;
    uint multiplier = 4079;

    seed = seed * multiplier + offset;
    return seed;
}

uint NoiseSeed = 0;

float Noise2d( int x, int y )
{
    int n = x + y * 75;
    n = ( n << 13 ) ^ n;
    return ( 1.0f - ( ( n * ( n * n * 15731 + NoiseSeed ) + 1376312589 ) & 0x7fffffff ) / 1073741824.0f );
} // 789221

float SmoothNoise2d( int x, int y )
{
    float corners = ( Noise2d( x - 1, y - 1 ) + Noise2d( x + 1, y - 1 ) + Noise2d( x - 1, y + 1 ) + Noise2d( x + 1, y + 1 ) ) / 16,
          sides   = ( Noise2d( x - 1, y )  + Noise2d( x + 1, y )  + Noise2d( x, y - 1 )  + Noise2d( x, y + 1 ) ) /  8,
          center  =  Noise2d( x, y ) / 4;
    return corners + sides + center;
}

import uint[][] @ GetSandHashes() from "qmap_sand";

bool   des_gen_inited = false;
uint[][] sandSprites( HASHES_SAND_MAX );

// #define BLACKWHITE

float[] sandCaps = { 1.0f, 0.05f, 0.05f, 0.05f, -0.05f, -1.0f };
uint[] sandZones = { 0, HASHES_SAND_EDG4, HASHES_SAND_EDG2, HASHES_SAND_EDG3, HASHES_SAND_EDG6, HASHES_SAND_EDG5 };



void InitDesertGenerator()
{
    Message( "DesertGenerator initiation..." );

    string frm = ".frm";

    for( uint i = 1; i <= 9; i++ )
    {
        currMTD.SetOneHash( i, GetStrHash( "art/scenery/tree" + i + frm ) );
    }
    for( uint i = 20; i <= 30; i++ )
    {
        currMTD.SetOneHash( i, GetStrHash( "art/scenery/rock" + i + frm ) );
    }

    currMTD.SetOneHash( 31, GetStrHash( "art/scenery/cac1000.frm" ) );
    currMTD.SetOneHash( 32, GetStrHash( "art/scenery/cac2000.frm" ) );
    currMTD.SetOneHash( 33, GetStrHash( "art/scenery/tirs002.frm" ) );

    for( uint i = 1; i <= 5; i++ )
    {
        currMTD.SetOneHash( 40 + i, GetStrHash( "art/scenery/bone0" + i + frm ) );
    }

    for( uint i = 1; i <= 9; i++ )
    {
        currMTD.SetOneHash( 50 + i, GetStrHash( "art/scenery/weed0" + i + frm ) );
    }
    for( uint i = 10; i <= 26; i++ )
    {
        currMTD.SetOneHash( 50 + i, GetStrHash( "art/scenery/weed" + i + frm ) );
    }

    #ifndef BLACKWHITE
    uint[][] @ sandHashes = GetSandHashes();

    uint k = 80;
    for( uint i = 0; i < HASHES_SAND_MAX; i++ )
    {
        sandSprites[ i ].resize( 0 );
        uint sHlen = sandHashes[ i ].length();

        for( uint j = 0; j < sHlen; j++ )
        {
            if( i == HASHES_SAND_EDG2 && j != 3 )
                continue;
            if( i == HASHES_SAND_EDG4 && j > 2 )
                break;
            if( i == HASHES_SAND_EDG3 && j > 0 )
                break;

            currMTD.SetOneHash( k, sandHashes[ i ][ j ]);
            sandSprites[ i ].insertLast(k);
            k++;
        }
    }
    #endif

    des_gen_inited = true;

    Message( "DesertGenerator inited." );
}

float getXint( float min, float max, float val )
{
    return ( val - min ) / ( max - min );
}

int getInterI( uint a, uint b, float x )
{
    float xx = a * ( 1.0f - x ) + b * x;
    if( ( xx % 1.0f ) < 0.5f )
        return floor( xx );
    else
        return ceil( xx );
}

void GenerateDesert()
{
    CritterCl@ cr = GetChosen();
    if( cr is null )
        return;

    if( currMTD is null )
    {
        Message( "currMTD is null" );
        return;
    }
    currMTD.Tiles.resize( 2 );

    // NoiseSeed = Random(465145, 816953);

    /*if(!des_gen_inited)*/ InitDesertGenerator();

    string dir = "art/tiles/";

    #ifdef BLACKWHITE
    uint[] dataT;
    for( uint i = 1; i <= 20; i++ )
    {
        uint sn = getSprite( GetStrHash( dir + "BaW" + i + ".png" ) );
        if( sn == uint( -1 ) )
        {
            Message( "Load sprite fail." );
            return;
        }
        dataT.insertLast( sn );
    }
    #endif

    // uint16 hx0 = 78, hy0 = 96,
    // hx = 226, hy = 244,
    uint16 hx0 = 86, hy0 = 94,
           hx = 398, hy = 398,
           tw = ( hx - hx0 ) >> 1, th = ( hy - hy0 ) >> 1;

    float[] noiseBuffer;
    GenerateDesert( noiseBuffer, 200 );

    for( uint y = 0; y < 75; y++ )
    {
        for( uint x = 0; x < 75; x++ )
        {
            float val = noiseBuffer[ x + y * 200 ];       // SmoothNoise2d(x/4, y/4)*0.25f+SmoothNoise2d(x/2, y/2)*0.5f+SmoothNoise2d(x, y)*0.25f;

            float simpN = Noise2d( x, y ) + 1;

            #ifndef BLACKWHITE
            uint z = 0;

            for( z = 0; z < sandCaps.length(); z++ )
            {
                if( val < sandCaps[ z ] )
                    continue;
                break;
            }

            if( z == 0 || z >= sandCaps.length() )
            {
                Message( "z error" );
                continue;
            }

            uint[] @ sandspr = sandSprites[ sandZones[ z ] ];
            uint n = 0;
            // float ttn = getXint(sandCaps[z], sandCaps[z-1], val);

            /*if(z==1 || z==5){
                    //uint(floor( (ttn*100)%sandspr.length()));
               }
               else n = uint(floor(ttn*(sandspr.length())));*/

            n = uint( floor( simpN / 2 * sandspr.length() ) );

            //ChangeTile(sandspr[ n ], hx0 + x * 2, hy0 + y * 2, 0, 0, 0, false);
            currMTD.SetTile( sandspr[ n ], 0, hx0 /2+ x, hy0/2 + y, 0 );

            /*
               NativeField@ field = GetField( hx0 + x * 2, hy0 + y * 2 );
               if( field is null )
               continue;

               // field.ChangeTileLayer(false, 0, 5);
               // field.SetTile(false, sprites[sandspr[n]].Id, 1, 0, 0);
               field.SetTile( false, sprites[ sandspr[ n ] ].Id, 0, 0, 0 );
             */
            #endif


            /*if(val>0.05f)
               {
                    SetTile(hx0+x*2, hy0+y*2, false, sprites[data5[Random(0, 8)]].Id, 0, 0, 0);
                    //if(val>0.30f) currMTD.SetTile(Random(20, 30), 0, hx0+x*2, hy0+y*2, 3);
               }
               else if(val>-0.05f)
               {
                    SetTile(hx0+x*2, hy0+y*2, false, sprites[data6[Random(0, 8)]].Id, 0, 0, 0);



                    //if(val>-0.002f) currMTD.SetTile(Random(41, 45), 0, hx0+x*2, hy0+y*2, 4);
               }
               else */
            //if( val > sandCaps[ 1 ] )
            //{
                // SetTile(hx0+x*2, hy0+y*2, false, sprites[data4[Random(0, 8)]].Id, 0, 0, 0);

                //if( val > 0.30f )
                //    currMTD.SetTile( getInterI( 4, 9, simpN / 2 ), 0, hx0 + x * 2, hy0 + y * 2, 3 );

                // if((val>0.15f && val<0.16f) || val>0.35f) currMTD.SetTile(getInterI(4, 9, simpN/2), 0, hx0+x*2, hy0+y*2, 3);
                // else if(val>0.255f && val<0.26f) currMTD.SetTile(getInterI(31, 32, simpN/2), 0, hx0+x*2, hy0+y*2, 2);

                // else if(simpN<-0.95f) currMTD.SetTile(Random(4, 9), 0, hx0+x*2, hy0+y*2, 3);
                // else if(simpN<-0.90f) currMTD.SetTile(Random(51, 76), 0, hx0+x*2, hy0+y*2, 4);
            //}

            if( val > 0.30f) {
                currMTD.SetTile( getInterI( 4, 9, simpN / 2 ), 0, hx0 + x * 2, hy0 + y * 2, 3 );
            } else {
                if(simpN<0.01f) currMTD.SetTile(Random(31, 33), 0, hx0+x*2, hy0+y*2, 2);
                else if(simpN<0.04f) currMTD.SetTile(Random(51, 76), 0, hx0+x*2, hy0+y*2, 4);
            }

            #ifdef BLACKWHITE
            uint val2 = uint( ( val + 1 ) * 10 );
            val2 = CLAMP( val2, 0, 19 );

            //old dll method
            //SetTile( hx0 + x * 2, hy0 + y * 2, false, sprites[ dataT[ val2 ] ].Id, 0, 0, 0 );
            #endif
        }
    }

    /*uint8[] rand4x4(16);
       for(uint i=0; i<16; i++) rand4x4[i]=Random(0, 35);

       uint8[] rand8x8(64);
       for(uint i=0; i<64; i++) rand8x8[i]=Random(0, 30);

       uint8[] rand16x16(256);
       for(uint i=0; i<256; i++) rand16x16[i]=Random(0, 20);

       uint i=0;
       for(int y=cr.HexY-16, y1=cr.HexY+16; y<y1; y+=2)
       {
            for(int x=cr.HexX-16, x1=cr.HexX+16; x<x1; x+=2)
            {
                    //uint8 val = rand2x2[(x0>>3)+(y0>>3)*2]
                    //uint8 val = rand2x2[((i>>3)&1)|((i>>6)&2)]+rand4x4[((i>>2)&3)|((i>>4)&12)]+rand8x8[((i>>1)&7)|((i>>2)&56)]+rand16x16[i];
                    if(val>50) SetTile(x, y, false, sprites[data2[Random(0, 8)]].Id, 0, 0, 0);
                    else SetTile(x, y, false, sprites[data[Random(0, 8)]].Id, 0, 0, 0);
                    i++;
            }
       }*/
}
