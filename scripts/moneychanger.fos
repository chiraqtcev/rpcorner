#include "_utils.fos"

#define FACE_VALUE_5							  				( 5 ) 												// Номинал купюры в 5 долларов
#define FACE_VALUE_20							  				( 20 ) 												// Номинал купюры в 20 долларов
#define FACE_VALUE_100							  				( 100 ) 											// Номинал купюры в 100 долларов
#define FACE_VALUE_U							  				( 0 ) 												// Условные долларовые еденицы

#define COMISSION												( 0.1f )											// Комиссия за сделку по обмену валюты
#define COMISSION_GREEN											( 10 )												// Комиссия за сделку по размену баксов

#define EXCHANGE_RATE_CAPS_TO_COINS								( 1.0f/4.0f )										// Обменный курс крышек на монеты
#define EXCHANGE_RATE_COINS_TO_CAPS								( 4.0f/1.0f )										// Обменный курс монет на крышки
#define EXCHANGE_RATE_CAPS_TO_BACKS								( 1.0f/4.0f )										// Обменный курс крышек на банкноты
#define EXCHANGE_RATE_BACKS_TO_CAPS								( 4.0f/1.0f )										// Обменный курс крышек на банкноты
#define EXCHANGE_RATE_COINS_TO_BACKS							( 1.0f/1.0f )										// Обменный курс монет на банкноты
#define EXCHANGE_RATE_BACKS_TO_COINS							( 1.0f/1.0f )										// Обменный курс банкнот на монеты

const uint16[] Money  = { PID_DOLLAR_100, PID_DOLLAR_20, PID_DOLLAR_5, PID_BOTTLE_CAPS, PID_REAL_BOTTLE_CAPS };
const float[] Value   = { 	 100.0f, 		20.0f, 			5.0f, 			1.0f, 			0.25f 	   		 };

//сюда заходим с данными по обмену денег
bool checkDeal( Critter& player, Critter@ Npc, uint16 CashPid, uint16 CurrencyPid, int amount )
{
	float PlayerCash = _CritCountItem( player, CashPid );
	Log( "Деньги на обмен: " + PlayerCash );
	float NpcCash =  CashCount( Npc );
	Log( "Всего денег у НПЦ: " + NpcCash );
	
	if( PlayerCash >= amount && NpcCash >= amount ) {
		makeDeal( player, Npc, CashPid, CurrencyPid, amount );
		return true;
	}		
	
	return false;
}

// сервис-функция подсчета всех денег
float CashCount( Critter& cr )
{
	float sum = 0.0f;
	
	for( uint i = 0; i < Money.length(); i++ ) {
		if( hasItem( cr, Money[i] ) ) {
			float cashCount = _CritCountItem( cr, Money[i] );
			sum += cashCount * Value[i];
		}
	}

	return sum;
} 

//проводим сделку купли-продажи
bool makeDeal( Critter& player, Critter@ Npc, uint16 CashPid, uint16 CurrencyPid, int amount )
{
	
	int cashIndex = Money.find( CashPid );
	uint cashAmount = ( amount / Value[cashIndex] );
	Item@ Cash = player.GetItem( CashPid, -1 );
	_SubItem( Cash, cashAmount );
	
	Npc.AddItem( PID_BOTTLE_CAPS, ( amount * COMISSION ) );
	
	amount -= amount * COMISSION;
	
	int curIndex = Money.find( CurrencyPid );
	int billsAmount = floor( amount / Value[curIndex] );
	uint ChangeAmount = amount - billsAmount * Value[curIndex];

	player.AddItem( CurrencyPid, billsAmount );
	player.AddItem( PID_BOTTLE_CAPS, ChangeAmount );
	
	return true;
}

//Обмен валюты. Условия для отображения строк в диалоге
//Функция подсчета валюты у криттера
uint howMuchMoney( Critter &cr, int CurrencyPid, int currencySumm ) 
{
	int currencyCount = cr.CountItem( uint16( CurrencyPid ));
	
	if( CurrencyPid == PID_DOLLAR_100 ) 
	{
		currencyCount = currencyCount * FACE_VALUE_100;
		
		if( currencyCount >= currencySumm ) 
		{
			return currencyCount;
		}
	}
	else if( CurrencyPid == PID_DOLLAR_20 )
	{
		currencyCount = currencyCount * FACE_VALUE_20;
		
		if( currencyCount >= currencySumm ) 
		{
			return currencyCount;
		}
	}
	else if( CurrencyPid == PID_DOLLAR_5 )
	{
		currencyCount = currencyCount * FACE_VALUE_5;
		
		if( currencyCount >= currencySumm ) 
		{
			return currencyCount;
		}
	}
	else if( currencyCount >= currencySumm )
	{
		return currencyCount;
	}
	
	return 0;
}

//Функция проверяет, есть ли у НПЦ нужное количество валюты, для обмена, с учетом курса
bool isEnoughMoneyNPC( Critter &player, Critter @npc, int givenCurrencyPid, int recivedCurrencyPid, int summToChange ) 
{
	uint summToRecive = howMuchForMe( givenCurrencyPid, recivedCurrencyPid, summToChange );
	
	if( howMuchMoney( npc, recivedCurrencyPid, summToChange ) >= summToRecive ) 
	{
		return true;
	}
	
	return false;
}

//Функция подсчета итоговой суммы для выдачи клиенту с учетом курса валюты
float howMuchForMe( int givenCurrencyPid, int recivedCurrencyPid, int summToChange ) 
{	
	float exchangeRate = 0.0f;
	
	if( givenCurrencyPid == PID_DOLLAR_100 || givenCurrencyPid == PID_DOLLAR_20 || givenCurrencyPid == PID_DOLLAR_5 ) 
	{
		givenCurrencyPid = FACE_VALUE_U;
	}
	
	if( recivedCurrencyPid == PID_DOLLAR_100 || recivedCurrencyPid == PID_DOLLAR_20 || recivedCurrencyPid == PID_DOLLAR_5 ) 
	{
		recivedCurrencyPid = FACE_VALUE_U;
	}
	
	if( givenCurrencyPid == PID_REAL_BOTTLE_CAPS && recivedCurrencyPid == PID_BOTTLE_CAPS ) 
	{
		exchangeRate = EXCHANGE_RATE_CAPS_TO_COINS;	//1/4
	}
	else if( givenCurrencyPid == PID_BOTTLE_CAPS && recivedCurrencyPid == PID_REAL_BOTTLE_CAPS ) 
	{
		exchangeRate = EXCHANGE_RATE_COINS_TO_CAPS; //4/1
	}
	else if( givenCurrencyPid == PID_REAL_BOTTLE_CAPS && recivedCurrencyPid == FACE_VALUE_U ) 
	{
		exchangeRate = EXCHANGE_RATE_CAPS_TO_BACKS; //1/4
	}
	else if( givenCurrencyPid == FACE_VALUE_U && recivedCurrencyPid == PID_REAL_BOTTLE_CAPS ) 
	{
		exchangeRate = EXCHANGE_RATE_BACKS_TO_CAPS; //4/1
	}
	else if( givenCurrencyPid == PID_BOTTLE_CAPS && recivedCurrencyPid == FACE_VALUE_U ) 
	{
		exchangeRate = EXCHANGE_RATE_COINS_TO_BACKS; //1/1
	}
	else if( givenCurrencyPid == FACE_VALUE_U && recivedCurrencyPid == PID_BOTTLE_CAPS ) 
	{
		exchangeRate = EXCHANGE_RATE_BACKS_TO_COINS; //1/1
	}
	
	float summToRecive = summToChange * exchangeRate;
	
	return summToRecive;
}

//Функция проверяет, есть ли у игрока нужное количество валюты, для обмена
bool isEnoughMoneyPlayer( Critter &player, Critter @npc, int givenCurrencyPid, int recivedCurrencyPid, int summToChange )
{
	uint summToGive = summToChange;
	float commissionCurrencyCount = player.CountItem( PID_BOTTLE_CAPS );
	
	if( howMuchMoney( player, givenCurrencyPid, summToChange ) >= summToGive )
	{
		return true;
	}
	
	return false;
}

//Функция проверяет, есть ли у игрока нужное количество валюты, для оплаты комиссии
bool isEnoughCommission( Critter &player, Critter @npc, int summToChange ) 
{
	float commissionCurrencyCount = player.CountItem( PID_BOTTLE_CAPS );
	float commissionSumm = howMuchCommission( float ( summToChange ));
	
	if( commissionCurrencyCount >= commissionSumm ) 
	{
		return true;
	}
	
	return false;
}

//Функция подсчета коммиссионной суммы
float howMuchCommission( int summToChange ) 
{
	float commissionSumm = summToChange * COMISSION;
	
	return commissionSumm;
}

//Функция выводящая строку в диалоге, если у игрока нет какой либо валюты для обмена
bool notEnoughMoneyPlayer( Critter &player, Critter @npc, int summToChange ) 
{
	int[] CurrencyPids = { PID_BOTTLE_CAPS, PID_REAL_BOTTLE_CAPS, PID_DOLLAR_5 };
	
	for( uint i = 0; i < CurrencyPids.length(); i++ )
	{
		int givenCurrencyPid = CurrencyPids[i];
		
		for( uint y = 0; y < CurrencyPids.length(); y++ )
		{
			int recivedCurrencyPid = CurrencyPids[y];
			
			if( givenCurrencyPid  == recivedCurrencyPid ) continue;
			
			if( isEnoughMoneyPlayer( player, npc, givenCurrencyPid, recivedCurrencyPid, summToChange )) 
			{
				return false;
			}
		}
	}
	
	return true;
}

//Функция выводящая строку в диалоге, если у игрока нет нужной суммы на оплату комиссии
bool cantPayIt( Critter &player, Critter @npc, int minSummToChange ) 
{
	float commissionCurrencyCount = player.CountItem( PID_BOTTLE_CAPS );
	float commissionSumm = howMuchCommission( minSummToChange );
	
	if( commissionCurrencyCount < commissionSumm && !notEnoughMoneyPlayer( player, npc, minSummToChange )) 
	{
		return true;
	}
	
	return false;
}

//Размен долларов. Условия для отображения строк в диалоге
//Функция подсчета долларовых купюр у криттера
uint howMuchGreenYouHave( Critter @cr ) 
{
	uint greenCashTotal = 0;
	uint greenCash100 = cr.CountItem( PID_DOLLAR_100 );
	uint greenCash20 = cr.CountItem( PID_DOLLAR_20 );
	uint greenCash5 = cr.CountItem( PID_DOLLAR_5 );
	greenCashTotal = ( greenCash100 * 100 ) + ( greenCash20 * 20 ) + ( greenCash5 * 5 );
	
	return greenCashTotal;
}

//Функция проверяет, есть ли у НПЦ хоть какие-нибудь доллары, для размена
bool canIChangeGreen( Critter &player, Critter @npc ) 
{
	uint greenCashTotal = howMuchGreenYouHave( npc );
	
	if( greenCashTotal > 0 ) 
	{
		return true;
	}
	
	return false;
}

//Функция выводящая строку в диалоге, если у НПЦ нет какой либо валюты для обмена
bool notEnoughMoneyNPC( Critter &player, Critter @npc, int summToChange ) 
{
	int[] CurrencyPids = { PID_BOTTLE_CAPS, PID_REAL_BOTTLE_CAPS, PID_DOLLAR_100 };
	
	for( uint i = 0; i < CurrencyPids.length(); i++ )
	{
		int givenCurrencyPid = CurrencyPids[i];
		
		for( uint y = 0; y < CurrencyPids.length(); y++ )
		{
			int recivedCurrencyPid = CurrencyPids[y];
			
			if( givenCurrencyPid  == recivedCurrencyPid ) continue;
			
			if( isEnoughMoneyNPC( player, npc, givenCurrencyPid, recivedCurrencyPid, summToChange )) 
			{
				return false;
			}
		}
	}
	
	return true;
}

//Функции подсчета купюр у криттера
bool isEnoughGreen( Critter &cr, int NotePid, int minNoteCount ) 
{
	int NoteCount = cr.CountItem( NotePid );
	
	if( NoteCount >= minNoteCount )
	{
		return true;
	}
	
	return false;
}

//Функция проверяет, есть ли у НПЦ нужное количество долларов для размена
bool isEnoughGreenNPC( Critter &player, Critter @npc, int givenDollrsPid, int recivedDollrsPid, int minNoteCount ) 
{
	if( givenDollrsPid == PID_DOLLAR_100 && recivedDollrsPid == PID_DOLLAR_20 ) 
	{
		return isEnoughGreen( npc, recivedDollrsPid, minNoteCount );
	}
	else if( givenDollrsPid == PID_DOLLAR_100 && recivedDollrsPid == PID_DOLLAR_5 ) 
	{
		return isEnoughGreen( npc, recivedDollrsPid, minNoteCount );
	}
	else if( givenDollrsPid == PID_DOLLAR_20 && recivedDollrsPid == PID_DOLLAR_5 ) 
	{
		return isEnoughGreen( npc, recivedDollrsPid, minNoteCount );
	}
	else if( givenDollrsPid == PID_DOLLAR_20 && recivedDollrsPid == PID_DOLLAR_100 ) 
	{
		return isEnoughGreen( npc, recivedDollrsPid, minNoteCount );
	}
	else if( givenDollrsPid == PID_DOLLAR_5 && recivedDollrsPid == PID_DOLLAR_100 ) 
	{
		return isEnoughGreen( npc, recivedDollrsPid, minNoteCount );
	}
	else if( givenDollrsPid == PID_DOLLAR_5 && recivedDollrsPid == PID_DOLLAR_20 ) 
	{
		return isEnoughGreen( npc, recivedDollrsPid, minNoteCount );
	}
	
	return false;
}

//Функция проверяет, есть ли у игрока нужное количество долларов для размена
bool isEnoughGreenPlayer( Critter &player, Critter @npc, int givenDollrsPid, int recivedDollrsPid, int minNoteCount ) 
{
	if( givenDollrsPid == PID_DOLLAR_100 && recivedDollrsPid == PID_DOLLAR_20 ) 
	{
		return isEnoughGreen( player, givenDollrsPid, minNoteCount );
	}
	else if( givenDollrsPid == PID_DOLLAR_100 && recivedDollrsPid == PID_DOLLAR_5 ) 
	{
		return isEnoughGreen( player, givenDollrsPid, minNoteCount );
	}
	else if( givenDollrsPid == PID_DOLLAR_20 && recivedDollrsPid == PID_DOLLAR_5 ) 
	{
		return isEnoughGreen( player, givenDollrsPid, minNoteCount );
	}
	else if( givenDollrsPid == PID_DOLLAR_20 && recivedDollrsPid == PID_DOLLAR_100 ) 
	{
		return isEnoughGreen( player, givenDollrsPid, minNoteCount );
	}
	else if( givenDollrsPid == PID_DOLLAR_5 && recivedDollrsPid == PID_DOLLAR_100 ) 
	{
		return isEnoughGreen( player, givenDollrsPid, minNoteCount );
	}
	else if( givenDollrsPid == PID_DOLLAR_5 && recivedDollrsPid == PID_DOLLAR_20 ) 
	{
		return isEnoughGreen( player, givenDollrsPid, minNoteCount );
	}
	
	return false;
}

//Функция проверяет, есть ли у игрока нужное количество монет на комиссию по обмену долларов
bool haveSomeCoins( Critter &player, Critter @npc, int greenComissionSumm ) 
{
	int commissionCurrencyCount = player.CountItem( PID_BOTTLE_CAPS );
	
	if( commissionCurrencyCount >= greenComissionSumm ) 
	{
		return true;
	}
	
	return false;
}

//Функция выводящая строку в диалоге, если у игрока нет каких либо купюр для размена
bool notEnoughGreenPlayer( Critter &player, Critter @npc, int summToChange ) 
{
	int[] CurrencyPids = { PID_DOLLAR_100, PID_DOLLAR_20, PID_DOLLAR_5 };
	
	for( uint i = 0; i < CurrencyPids.length(); i++ )
	{
		int givenCurrencyPid = CurrencyPids[i];
		
		for( uint y = 0; y < CurrencyPids.length(); y++ )
		{
			int recivedCurrencyPid = CurrencyPids[y];
			
			if( givenCurrencyPid  == recivedCurrencyPid ) continue;
			
			if( isEnoughGreenPlayer( player, npc, givenCurrencyPid, recivedCurrencyPid, summToChange )) 
			{
				return false;
			}
		}
	}
	
	return true;
}

//Функция выводящая строку в диалоге, если у игрока нет нужной суммы на оплату комиссии
bool cantPayGreen( Critter &player, Critter @npc, int greenComissionSumm, int minSummToChange ) 
{	
	if( !haveSomeCoins( player, npc, greenComissionSumm ) && !notEnoughGreenPlayer( player, npc, minSummToChange )) 
	{
		return true;
	}
	
	return false;
}

//Обмен валюты. Результаты
//Функция забирает меняемую валюту у игрока и передает ее НПЦ. Забирает целевую валюту у НПЦ и передает ее игроку. Забирает у игрока комиссию и передает ее НПЦ
void takeMyMoney( Critter &player, Critter @npc, int givenCurrencyPid, int recivedCurrencyPid, int summToChange ) 
{
	uint summToRecive = howMuchForMe( givenCurrencyPid, recivedCurrencyPid, summToChange );
	uint commissionSumm = howMuchCommission( summToChange );
	
	if( givenCurrencyPid == PID_DOLLAR_5 ) 
	{
		uint givenCount = summToChange / 5;
		
		player.DeleteItem( givenCurrencyPid, givenCount );
		npc.AddItem( givenCurrencyPid, givenCount );
		
		npc.DeleteItem( recivedCurrencyPid, summToRecive );			
		player.AddItem( recivedCurrencyPid, summToRecive );	
		
		player.DeleteItem( PID_BOTTLE_CAPS, commissionSumm );		
		npc.AddItem( PID_BOTTLE_CAPS, commissionSumm );
	}
	else if( recivedCurrencyPid == PID_DOLLAR_5 ) 
	{
		uint recivedCount = summToRecive / 5;
		
		player.DeleteItem( givenCurrencyPid, summToChange );
		npc.AddItem( givenCurrencyPid, summToChange );
		
		npc.DeleteItem( recivedCurrencyPid, recivedCount );			
		player.AddItem( recivedCurrencyPid, recivedCount );
		
		player.DeleteItem( PID_BOTTLE_CAPS, commissionSumm );		
		npc.AddItem( PID_BOTTLE_CAPS, commissionSumm );
	}
	else 
	{
		player.DeleteItem( givenCurrencyPid, summToChange );		//Забираем у игрока меняемую валюту
		npc.AddItem( givenCurrencyPid, summToChange );				//Даем НПЦ меняемую валюту
		
		npc.DeleteItem( recivedCurrencyPid, summToRecive );			//Забираем у НПЦ целевую валюту с учетом курса обмена
		player.AddItem( recivedCurrencyPid, summToRecive );			//Даем игроку целевую валюту с учетом курса обмена
		
		player.DeleteItem( PID_BOTTLE_CAPS, commissionSumm );		//Забираем у игрока сумму комиссии
		npc.AddItem( PID_BOTTLE_CAPS, commissionSumm );				//Даем НПЦ сумму комиссии	
	}
}

//Размен долларов. Результаты
//Функция забирает купюры у игрока и передает их НПЦ. Забирает купюры у НПЦ и передает их игроку. Забирает комиссию у игрока и передает ее НПЦ
void takeMyGreen( Critter &player, Critter @npc, int givenDollrsPid, int recivedDollrsPid ) 
{
	uint greenComissionSumm = COMISSION_GREEN;
	
	if( givenDollrsPid == PID_DOLLAR_100 && recivedDollrsPid == PID_DOLLAR_20 ) 
	{
		player.DeleteItem( givenDollrsPid, 1 );
		npc.AddItem( givenDollrsPid, 1 );
		
		npc.DeleteItem( recivedDollrsPid, 5 );			
		player.AddItem( recivedDollrsPid, 5 );	
		
		player.DeleteItem( PID_BOTTLE_CAPS, greenComissionSumm );		
		npc.AddItem( PID_BOTTLE_CAPS, greenComissionSumm );
	}
	else if( givenDollrsPid == PID_DOLLAR_100 && recivedDollrsPid == PID_DOLLAR_5 ) 
	{
		player.DeleteItem( givenDollrsPid, 1 );
		npc.AddItem( givenDollrsPid, 1 );
		
		npc.DeleteItem( recivedDollrsPid, 20 );			
		player.AddItem( recivedDollrsPid, 20 );	
		
		player.DeleteItem( PID_BOTTLE_CAPS, greenComissionSumm );		
		npc.AddItem( PID_BOTTLE_CAPS, greenComissionSumm );
	}
	else if( givenDollrsPid == PID_DOLLAR_20 && recivedDollrsPid == PID_DOLLAR_5 ) 
	{
		player.DeleteItem( givenDollrsPid, 1 );
		npc.AddItem( givenDollrsPid, 1 );
		
		npc.DeleteItem( recivedDollrsPid, 4 );			
		player.AddItem( recivedDollrsPid, 4 );	
		
		player.DeleteItem( PID_BOTTLE_CAPS, greenComissionSumm );		
		npc.AddItem( PID_BOTTLE_CAPS, greenComissionSumm );
	}
	else if( givenDollrsPid == PID_DOLLAR_20 && recivedDollrsPid == PID_DOLLAR_100 ) 
	{
		player.DeleteItem( givenDollrsPid, 5 );
		npc.AddItem( givenDollrsPid, 5 );
		
		npc.DeleteItem( recivedDollrsPid, 1 );			
		player.AddItem( recivedDollrsPid, 1 );	
		
		player.DeleteItem( PID_BOTTLE_CAPS, greenComissionSumm );		
		npc.AddItem( PID_BOTTLE_CAPS, greenComissionSumm );
	}
	else if( givenDollrsPid == PID_DOLLAR_5 && recivedDollrsPid == PID_DOLLAR_100 ) 
	{
		player.DeleteItem( givenDollrsPid, 20 );
		npc.AddItem( givenDollrsPid, 20 );
		
		npc.DeleteItem( recivedDollrsPid, 1 );			
		player.AddItem( recivedDollrsPid, 1 );	
		
		player.DeleteItem( PID_BOTTLE_CAPS, greenComissionSumm );		
		npc.AddItem( PID_BOTTLE_CAPS, greenComissionSumm );
	}
	else if( givenDollrsPid == PID_DOLLAR_5 && recivedDollrsPid == PID_DOLLAR_20 ) 
	{
		player.DeleteItem( givenDollrsPid, 4 );
		npc.AddItem( givenDollrsPid, 4 );
		
		npc.DeleteItem( recivedDollrsPid, 1 );			
		player.AddItem( recivedDollrsPid, 1 );	
		
		player.DeleteItem( PID_BOTTLE_CAPS, greenComissionSumm );		
		npc.AddItem( PID_BOTTLE_CAPS, greenComissionSumm );
	}
}









