// copybook screen
// pm

#include "_client_defines.fos"
#include "client_gui_h.fos"
#include "_colors.fos"
#include "sprite.fos"
#include "_defines.fos"
#include "_macros.fos"
#include "_itempid.fos"

#define HAND_HOUR      ( 0 )
#define HAND_MINUTE    ( 1 )

ScreenClock screenClock();


class ScreenClock : IGUIScreenCallbackShow, IGUIScreenCallbackHide
{
    IGUIScreenOpt@ screenOpt;
    Hand@[] Hand_;
    Glass@         Glass_;
    // Hand@ HandMinute;

    ScreenClock()
    {
        // Hand_.resize(2);
    }

    void OnShow( int p0, int p1, int p2 )
    {
        // test.Load("photo_face0.png", int(PT_ART_INTRFACE));
        // Message(""+test.Hash);
        @screenOpt = GUI_GetScreenOptions();
        __isClockActive = true;
        uint16[]        clockPids = { PID_BEER, PID_SPIRIT };

        string postfix = "";
        // uint16 clockPid = 0;

        ItemCl@[] items;
        GetChosen().GetItems( -1, items );

        /*
		uint16 index = 0;

        for( uint16 i = 0, j = items.length(); i < j; ++i )
        {
            index = uint16( clockPids.find( items[ i ].GetProtoId() ) );
            if( index != uint16( -1 ) )
                break;
        }

        switch( index )
        {
        case    uint16( -1 ):
            Message( "Вы не носите часов." );
            ::HideScreen( 0, 0, 0, 0 );
            break;
        case    0:
            postfix = "_classic";
            break;
        case    1:
            postfix = "_modern";
            break;
        default:
            break;
        }
		*/
		postfix = "_classic";

        screenOpt.Pic( "clock" + postfix + "0.png", PT_ART_INTRFACE );
        Hand_[ 0 ].Options.Pic( "hand_hour" + postfix + ".fofrm", PT_ART_INTRFACE );
        Hand_[ 1 ].Options.Pic( "hand_minute" + postfix + ".fofrm", PT_ART_INTRFACE );
        Glass_.Options.Pic( "clock_glass" + postfix + ".png", PT_ART_INTRFACE );

        // Message(postfix);

    }

    void OnHide( int p0, int p1, int p2 )
    {
        __isClockActive = false;
    }

}

class Hand : IGUIElementCallbackInit
{
    IGUIElementOpt@ Options;
    ScreenClock @ Instance;
    uint8           HandType;


    Hand( ScreenClock & instance, uint8 type )
    {
        @Instance = instance;
        HandType = type;
    }

    void OnInit()
    {
        @Options = GUI_GetElementOptions();
        @Instance.Hand_[ HandType ] = this;

        // Message(""+__FullSecond);
        uint16 year = 0, month = 0, dayOfWeek = 0, day = 0, hour = 0, minute = 0, second = 0;
        GetGameTime( __FullSecond, year, month, dayOfWeek, day, hour, minute, second );

        if( hour >= 12 )
            hour = ABS( hour - 12 );
        /*
           bool minute_ = false;

           if(HandType == HAND_MINUTE && minute >= 30)
           {
                minute -= 30;
                minute_ = true;
           }*/

        ChangeFrame( HandType != HAND_HOUR ? minute : hour );

        // Message("hour "+hour+" min "+minute);
    }

    void ChangeFrame( uint8 frameNum )
    {
        /*if(HandType == HAND_MINUTE)
           if(minute) Options.Pic("test.fofrm", PT_ART_INTRFACE);
           else Options.Pic("hand_minute.fofrm", PT_ART_INTRFACE);*/
        Options.PicSetFrmCount( frameNum );

        // Message("frame "+frameNum);
    }
}

class Glass : IGUIElementCallbackInit
{
    IGUIElementOpt@ Options;
    ScreenClock @ Instance;

    Glass( ScreenClock & instance )
    {
        @Instance = instance;
    }

    void OnInit()
    {
        @Options = GUI_GetElementOptions();
        @Instance.Glass_ = this;
    }
}

void InitClockScreen()
{
    // ScreenClock screenClock();
    GUI_CreateScreen( CLIENT_SCREEN_CLOCK, "clock_classic0.png" )
    .CallbackShow( screenClock )
    .CallbackHide( screenClock )
    .CanMove( true )
    // .Position(155,111)
    .Modal( false )
    .Multiinstance( true );

    screenClock.Hand_.resize( 2 );

    Hand handHour( screenClock, HAND_HOUR );
    GUI_AddScreenElement( CLIENT_SCREEN_CLOCK, "hand_hour_classic.fofrm", 0, 0 )
    .CallbackInit( handHour );

    Hand handMinute( screenClock, HAND_MINUTE );
    GUI_AddScreenElement( CLIENT_SCREEN_CLOCK, "hand_minute_classic.fofrm", 0, 0 )
    .CallbackInit( handMinute );

    Glass glass( screenClock );
    GUI_AddScreenElement( CLIENT_SCREEN_CLOCK, "clock_glass_classic.png", 0, 0 )
    .CallbackInit( glass );
}

void MoveHand()
{
    uint16 year = 0, month = 0, dayOfWeek = 0, day = 0, hour = 0, minute = 0, second = 0;
    GetGameTime( __FullSecond, year, month, dayOfWeek, day, hour, minute, second );


    if( hour >= 12 )
        hour = ABS( hour - 12 );
    /*
       bool minute_ = false;

       if(minute >= 30)
       {
            minute -= 30;
            minute_ = true;
       }*/

    screenClock.Hand_[ HAND_HOUR ].ChangeFrame( hour );
    screenClock.Hand_[ HAND_MINUTE ].ChangeFrame( minute );
}
