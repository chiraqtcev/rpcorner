class Behaviours
{
	Behaviour[] list;
	
	Behaviours()
	{
		
	}
	
	Behaviours@ add( Behaviour item )
	{
		list.insertLast( item );
		return this;
	}
	
	bool check( Item@ item )
	{
		if( !valid( item ) ) return false;
		
		uint pid = item.GetProtoId();
		
		for( uint i = 0, len = list.length(); i < len; i++ )
			if( list[i].check( pid ) )
			{
				item.SetScript( list[i].script );
				item.Update();
				return true;
			}
			
		return false;
	}
}

class Behaviour
{
	uint[] pids;
	string script;
	
	Behaviour( string script )
	{
		this.script = script;
	}
	
	Behaviour@ pid( uint pid )
	{ //TODO: Check unique
		pids.insertLast( pid );
		return this;
	}
	
	bool check( uint pid )
	{
		for( uint i = 0, len = pids.length(); i < len; i++ )
			if( pid == pids[i] )
				return true;
			
		return false;
	}
}

Behaviours@ behaviours;
void BehavioursSetup()
{
	if( valid( behaviours ) ) return;
		
	@behaviours = Behaviours()
		.add( Behaviour("plant@_InitPlant")
			.pid( PID_RADCVET_SEED )
			.pid( PID_CABBAGE_SEED )
			.pid( PID_CORN_SEED ) )
		.add( Behaviour("handcuffs@_ItemInit")
			.pid( PID_HANDCUFFS ) )	
	;
}

bool UpdateBehaviour( Item& item )
{
	BehavioursSetup();
	
	if( !behaviours.check( item ) )
	{
		DebugLog( "Item #" + item.Id + " / " + item.GetProtoId() + " has no reserved check-init." );
		return false;
	}
	
	return true;
}