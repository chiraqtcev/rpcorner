#ifndef ROBOT_REPAIR
#define ROBOT_REPAIR

#include "_utils.fos"
#include "_ltp.fos"
#include "robot_repair_h.fos"
#include "critter_status_h.fos"

bool ltp_inited = false;
void ltp_init () 
{
	LTPREG ( LTP_ROBOT_REPAIR, process_robot_repair)
	ltp_inited = true;
}

void robotRepairSkill( Critter& cr, Critter& targetCr, bool alreadyAllowed ) 
{
	targetCr.StatBase[ST_VAR0] = cr.Id;
	cr.StatBase[ST_VAR0] = targetCr.Id;
	
	if( targetCr.Id != cr.Id && targetCr.Stat[ST_CURRENT_HP] > -30 && !alreadyAllowed ) {
		targetCr.ShowScreen (SCREEN_DIALOGBOX, 2, "answerRobotRepairSkill");
		targetCr.Say (SAY_DIALOGBOX_TEXT, "Вас хотят осмотреть, согласиться?");
		targetCr.Say (SAY_DIALOGBOX_BUTTON( 0 ), "Да");
		targetCr.Say (SAY_NETMSG, "Вас хотят осмотреть");
	} else {
		answerRobotRepairSkill (targetCr, 0, "");
	}
}

void answerRobotRepairSkill( Critter& targetCr, uint answerI, string& answerS ) 
{
	Critter@ cr = GetCritter (targetCr.StatBase [ST_VAR0]);
	if (cr is null) return;
	
	bool useOnSelf = (cr.Id == targetCr.Id);
	
	uint16 statusFlag = targetCr.StatBase[ ST_CRSTATUS ];
	
	bool welder = (_CritCountItem (cr, PID_WELDING) > 0);
	bool spareParts = (_CritCountItem (cr, PID_CRAFT_M_BARS) > 0);
	
	
	bool isDamaged = false;
	string state = "Повреждения: ";
	
	int maxHP = targetCr.Stat [ST_MAX_LIFE];
	
	if (!isDamaged) state += "нет серьезных повреждений";
	
	cr.StatBase [ST_VAR0] = targetCr.Id;
	
	if (FLAG(statusFlag, CR_STATUS_HEAVY_DMG)) {
		state += ", разгерметизация";
		cr.ShowScreen( SCREEN_DIALOGBOX, 3, "answerRobotRepair1" );
	        cr.Say( SAY_DIALOGBOX_TEXT, state);
	    if (welder) cr.Say( SAY_DIALOGBOX_BUTTON( 0 ), "сварка" );
	    else cr.Say (SAY_DIALOGBOX_BUTTON (0), "Нет сварки");
		if (spareParts) cr.Say( SAY_DIALOGBOX_BUTTON( 1 ), "исп. запчасти" );
		else cr.Say( SAY_DIALOGBOX_BUTTON( 1 ), "нет запчастей" );
		cr.Say (SAY_DIALOGBOX_BUTTON (2), "Осмотр поломок");
	    return;
	}
	
	cr.ShowScreen( SCREEN_DIALOGBOX, 3, "answerRobotRepair1" );
	cr.Say( SAY_DIALOGBOX_TEXT, state);
	cr.Say (SAY_DIALOGBOX_BUTTON (0), "Сварка не нужна");
	if (spareParts) cr.Say( SAY_DIALOGBOX_BUTTON( 1 ), "исп. запчасти" );
	else cr.Say( SAY_DIALOGBOX_BUTTON( 1 ), "нет запчастей" );
	cr.Say (SAY_DIALOGBOX_BUTTON (2), "Осмотр поломок");
}

void answerRobotRepair1 (Critter& player, uint answerI, string& answerS) 
{
	Critter@ targetCr = GetCritter (player.Stat [ST_VAR0]);
	if (targetCr is null) return;
	
	uint16 statusFlag = targetCr.StatBase[ ST_CRSTATUS ];
	bool useOnSelf = (player.Id == targetCr.Id);
	
	int sk = player.Skill [SK_REPAIR];
	
	bool welder = (_CritCountItem (player, PID_WELDING) > 0);
	bool spareParts = (_CritCountItem (player, PID_CRAFT_M_BARS) > 0);
	
	if (answerI == 0 && welder && FLAG(statusFlag, CR_STATUS_HEAVY_DMG)) {
		if (useOnSelf && player.ParamBase [BP_ROBOT_SELF_REPAIR] == 0) {
			player.Say (SAY_NETMSG, "Ваши манипуляторы не позволяют Вам заниматься сваркой");
			robotRepairSkill (player, targetCr, true);
		} else {
			player.Say (SAY_EMOTE, "Занимается сваркой");
			if (sk > Random (0, 140)) {
				ChangeStatus( targetCr, CR_STATUS_HEAVY_DMG, 0, false );
				player.Say (SAY_NETMSG, "Вы успешно заварили разгерметизацию корпуса.");
			} else {
				targetCr.StatBase[ ST_CURRENT_HP ] -= Random (1, 16);
				//targetCr.ParamBase [BP_TORSO_HP] += Random (1, 16);
				player.Say (SAY_NETMSG, "Вы случайно проварили еще одну дырку в корпусе");
			}
			robotRepairSkill (player, targetCr, true);
		}
	} else if (answerI == 0) {
		robotRepairSkill (player, targetCr, true);
	}
	if (answerI == 1 && spareParts) {
		if (useOnSelf && player.ParamBase [BP_ROBOT_SELF_REPAIR] == 0) {
			player.Say (SAY_NETMSG, "Ваши манипуляторы не позволяют Вам поменять у себя запчасти");
			robotRepairSkill (player, targetCr, true);
		} else {
			int i = 0;
			while (i < 7) {
				player.Animate (ANIM1_UNARMED, ANIM2_USE, null, false, true);
				i ++;
			}
			player.Say (SAY_EMOTE, "Меняет запчасти");
			if (!ltp_inited) ltp_init ();
			StartProcess (player, LTP_ROBOT_REPAIR, 10*1000);
		}
	}
	if (answerI == 2) {
		bool damages = false;
		string state = "Поломки: ";

		if (targetCr.Damage [DAMAGE_EYE] > 0) {state+="сенсоры, "; damages = true;}
		if (targetCr.Damage [DAMAGE_RIGHT_ARM] > 0) {state += "п. манипулятор, "; damages = true;}
		if (targetCr.Damage [DAMAGE_LEFT_ARM] > 0) {state += "л. манипулятор, "; damages = true;}
		if (targetCr.Damage [DAMAGE_RIGHT_LEG] > 0) {state += "правый серво, "; damages = true;}
		if (targetCr.Damage [DAMAGE_LEFT_LEG] > 0) {state += "левый серво"; damages = true;}
		
		if (!damages) state += "нет.";
		
		player.ShowScreen (SCREEN_DIALOGBOX, 6, "answerRobotRepairCripple");
		if (targetCr.Damage [DAMAGE_EYE] > 0) player.Say (SAY_DIALOGBOX_BUTTON (0), "Чинить сенсоры");
		else player.Say (SAY_DIALOGBOX_BUTTON (0), "Сенсоры - ок");
		if (targetCr.Damage [DAMAGE_RIGHT_ARM] > 0) player.Say (SAY_DIALOGBOX_BUTTON (1), "Чинить П. Манип");
		else player.Say (SAY_DIALOGBOX_BUTTON (1), "П. Манип - ок");
		if (targetCr.Damage [DAMAGE_LEFT_ARM] > 0) player.Say (SAY_DIALOGBOX_BUTTON (2), "Чинить Л. Манип");
		else player.Say (SAY_DIALOGBOX_BUTTON (2), "Л. Манип - ок");
		if (targetCr.Damage [DAMAGE_RIGHT_LEG] > 0) player.Say (SAY_DIALOGBOX_BUTTON (3), "Чинить П. Серво");
		else player.Say (SAY_DIALOGBOX_BUTTON (3), "П. Серво - ок");
		if (targetCr.Damage [DAMAGE_LEFT_LEG] > 0) player.Say (SAY_DIALOGBOX_BUTTON (4), "Чинить Л. Серво");
		else player.Say (SAY_DIALOGBOX_BUTTON (4), "Л. Серво - ок");
		player.Say (SAY_DIALOGBOX_BUTTON (5), "Назад");
	}
}

void answerRobotRepairCripple (Critter& player, uint answerI, string& answerS) 
{
	Critter@ targetCr = GetCritter (player.Stat [ST_VAR0]);
	if (targetCr is null) return;
	
	bool useOnSelf = (player.Id == targetCr.Id);
	
	bool mechDetail = (_CritCountItem (player, PID_CRAFT_M_STEL) > 0);
	bool motionSensor = (_CritCountItem (player, PID_MOTION_SENSOR) > 0);
	
	int sk = player.Skill [SK_REPAIR];
	
	if (useOnSelf && player.ParamBase [BP_ROBOT_SELF_REPAIR] == 0) {
		player.Say (SAY_NETMSG, "Ваши манипуляторы не позволяют вам починить себя");
		answerRobotRepair1 (player, 2, "");
	} else {
	
		if (answerI == 0 && targetCr.Damage [DAMAGE_EYE] > 0) {
			if (!motionSensor) {
				player.Say (SAY_NETMSG, "Вам нужен сенсор движений.");
				robotRepairSkill (player, targetCr, true);
			} else {
				if (sk > Random (0, 120)) {
					targetCr.DamageBase [DAMAGE_EYE] = 0;
					player.Say (SAY_NETMSG, "Вы успешно заменили сенсоры.");
				} else {
					player.Say (SAY_NETMSG, "Вы не поняли, куда вставлять сенсор.");
				}
			}
		}
		if (answerI == 1 && targetCr.Damage [DAMAGE_RIGHT_ARM] > 0) {
			if (!mechDetail) {
				player.Say (SAY_NETMSG, "Вам нужна сложная механическая деталь.");
				robotRepairSkill (player, targetCr, true);
			} else {
				if (sk > Random (0, 120)) {
					targetCr.DamageBase [DAMAGE_RIGHT_ARM] = 0;
					player.Say (SAY_NETMSG, "Вы успешно заменили детали.");
				} else {
					player.Say (SAY_NETMSG, "Вы не поняли, куда вставлять деталь.");
				}
			}
		}
		if (answerI == 2 && targetCr.Damage [DAMAGE_LEFT_ARM] > 0) {
			if (!mechDetail) {
				player.Say (SAY_NETMSG, "Вам нужна сложная механическая деталь.");
				robotRepairSkill (player, targetCr, true);
			} else {
				if (sk > Random (0, 120)) {
					targetCr.DamageBase [DAMAGE_LEFT_ARM] = 0;
					player.Say (SAY_NETMSG, "Вы успешно заменили детали.");
				} else {
					player.Say (SAY_NETMSG, "Вы не поняли, куда вставлять деталь.");
				}
			}
		}
		if (answerI == 3 && targetCr.Damage [DAMAGE_RIGHT_LEG] > 0) {
			if (!mechDetail) {
				player.Say (SAY_NETMSG, "Вам нужна сложная механическая деталь.");
				robotRepairSkill (player, targetCr, true);
			} else {
				if (sk > Random (0, 120)) {
					targetCr.DamageBase [DAMAGE_RIGHT_LEG] = 0;
					player.Say (SAY_NETMSG, "Вы успешно заменили детали.");
				} else {
					player.Say (SAY_NETMSG, "Вы не поняли, куда вставлять деталь.");
				}
			}
		}
		if (answerI == 4 && targetCr.Damage [DAMAGE_LEFT_LEG] > 0) {
			if (!mechDetail) {
				player.Say (SAY_NETMSG, "Вам нужна сложная механическая деталь.");
				robotRepairSkill (player, targetCr, true);
			} else {
				if (sk > Random (0, 120)) {
					targetCr.DamageBase [DAMAGE_LEFT_LEG] = 0;
					player.Say (SAY_NETMSG, "Вы успешно заменили детали.");
				} else {
					player.Say (SAY_NETMSG, "Вы не поняли, куда вставлять деталь.");
				}
			}
		}
		robotRepairSkill (player, targetCr, true);
	}
}

uint process_robot_repair ( Critter@ cr, int& param0, int& param1, int& param2 ) 
{
	LTPROCESSD (LTP_ROBOT_REPAIR)
	Critter@ targetCr = GetCritter (cr.Stat [ST_VAR0]);
	
	int sk = cr.Skill [SK_REPAIR];
	
	if (sk > Random (0, 80)) {
		targetCr.ParamBase[ST_CURRENT_HP] = targetCr.Stat[ST_MAX_LIFE]; //Впрочем, я бы сделал фиксированный рандом от 20 до 40 ХП за 1 деталь.
		cr.DeleteItem (PID_CRAFT_M_BARS, 1);
		cr.Say (SAY_NETMSG, "Вы успешно меняете запчасти.");
	} else {
		cr.Say (SAY_NETMSG, "Вы не понимаете, куда вставлять запчасти");
	}
	return 0;
}

#endif //ROBOT_REPAIR