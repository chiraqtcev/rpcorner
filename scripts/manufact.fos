#include "_utils.fos"

//Альфа набросок, просто проверил что "так можно" сделать.
//TODO: Похоже, нужен холдер, что бы хранить данные о текущей программе.

import void InjureCritter( Critter& cr, uint dmg, uint dmgType, uint8 dir, int attackerId ) from "combat";

//~run manufact go 0 0 0
void go( Critter& player, int, int, int )
{
}

//~run rotting test 0 0 0
void test( Critter& player, int, int, int )
{
}

#ifndef __MANUFACT_DIALOGS
	#define __MANUFACT_DIALOGS
	
	void r_Manufact_info_time( Critter& player, Critter@ npc )
	{
		Manufact( player ).showTime();
	}

	void r_Manufact_info_program( Critter& player, Critter@ npc )
	{
		Manufact( player ).showProgram();
	}

	void r_Manufact_process( Critter& player, Critter@ npc, int program )
	{
		Manufact( player ).process( program );
	}

	bool d_Manufact_busy( Critter& player, Critter@ npc )
	{
		return( Manufact( player ).isBusy() );
	}

	void r_Manufact_container( Critter& player, Critter@ npc )
	{
		Manufact( player ).open();
	}

	void r_CrusherJamm( Critter& player, Critter@ npc, int damage, int cripple_power )
	{
		uint[] damages = { DAMAGE_RIGHT_ARM, DAMAGE_LEFT_ARM, DAMAGE_RIGHT_LEG, DAMAGE_LEFT_LEG };
		for( int i = 0; i < cripple_power; i++ )
			player.DamageBase[ damages[ Random( 0, damages.length() - 1 ) ] ] = 1;
		
		InjureCritter( player, Random( damage, damage * 2 ), DAMAGE_NORMAL, 0, 0 );
		string cripple_text = cripple_power > 0 ? "производственные травмы" : "производственную травму";
		player.Say( SAY_EMOTE, "Получает " + cripple_text );
	}
#endif

#ifndef __MANUFACT_CLASSES
	#define __MANUFACT_CLASSES
	
	class Program
	{
		string description;
		int time;
		
		Program( string description, int time )
		{
			this.description = description;
			this.time = time;
		}
		
		void finish() { }
		void start() { }
		
		void run( Critter@ worker, Item@ item ) {
			worker.Say( SAY_NETMSG, "Программа: " + info() );
		}
		
		string info()
		{
			return description;
		}
	}

	class Program_smelting_plate : Program
	{
		Program_smelting_plate() { super( "Ковка листов стали.", 5 ); }
		
		void start() override
		{
			Log( "Ковка активирована!" );
		}
		
		void finish() override
		{
			Log( "Ковка завершена!" );
		}
		
		void run( Critter@ worker, Item@ item ) override 
		{
			if( !valid( worker) || !valid( item ) ) return;
			Program::run( worker, item );
			
			bool failed = true;
			Item@[] items;
			item.GetItems( uint( -1 ), items );
			for( uint i = 0; i < items.length(); i++ )
			{
				if( items[i].GetProtoId() == PID_IRON_BAR )
				{
					if( items[i].GetCount() < 3 )
					{
						break;
					}
					else
					{
						failed = false;
						_SubItem( items[i], 3 );
						item.AddItem( PID_IRON_PLATE, 4, 0 );
					}
				}
			}
			if( failed )
			{
				worker.Say( SAY_NETMSG, "Для успешной ковки требуется не меньше трёх железных брусьев. Выхлоп - 4 листа железа." );
				item.Val2 = 0;
				item.Val3 = 0;
				item.Val4 = 0;
			}
			else
			{
				worker.Say( SAY_NETMSG, "Машина отработала. Дайте ей остыть до окончания срока работы программы." );
			}
		}
	}

	class Program_crushing_rocks : Program
	{
		Program_crushing_rocks() { super( "Дробление камней.", 1 ); }
		
		void run( Critter@ worker, Item@ item ) override 
		{
			if( !valid( worker) || !valid( item ) ) return;
			Program::run( worker, item );
			
			bool failed = true;
			Item@[] items;
			item.GetItems( uint(-1), items );
			for( uint i = 0; i < items.length(); i++ )
			{
				if( items[i].GetProtoId() == PID_ROCK )
				{
					uint count = items[i].GetCount();
					if( count < 10 )
					{
						break;
					}
					else
					{
						failed = false;
						item.Val3 = count / 5;
						_SubItem( items[i], count );

						uint[][] drop = { 
							{ PID_ROCK_DUST, 70 }, 
							{ PID_FLINT, 10 },
							{ PID_METAL_ORE, 10 },
							{ PID_MINERAL, 6 }, 
							{ PID_GOLD_NUGGET, 3 }, 
							{ PID_URANIUM_ORE, 1 }
						};

						for( uint i = 0; i < count; i++ )
						{
							int roll = Random( 0, 100 );
							for( uint j = 0; j < drop.length(); j++ )
								if( roll > int( drop[j][1] ) )
									roll -= int( drop[j][1] );
								else
								{
									item.AddItem( drop[j][0], 1, 0 );
									break;
								}
						}
					}
				}
			}
			if( failed )
			{
				worker.Say( SAY_NETMSG, "Для успешного дробления булыжников требуется не меньше 10 камней. Выхлоп произвольный (каменная крошка, минералы, железная руда, кремень), но напрямую зависит от их количества." );
				item.Val2 = 0;
				item.Val3 = 0;
				item.Val4 = 0;
			}
			else
			{
				worker.Say( SAY_NETMSG, "Машина отработала. Дайте ей остыть до окончания срока работы программы." );
			}
		}
	}

	class Processor
	{
		Critter@ worker;
		Item@ item;
		
		Program@[] programs;
		
		Processor( Critter@ worker, Item@ item )
		{
			@this.worker = @worker;
			@this.item = @item;
		}
		
		void run( int new_program )
		{
			if( !valid(worker) || !valid(item) ) return;
			
			new_program--;
			if( valid(item) )
			{
				if( new_program < 0 || uint( new_program ) >= programs.length() ) 
				{
					if( isGM( worker ) || worker.TimeoutBase[ TO_TIREDNESS ] < int( __FullSecond + REAL_SECOND( 60 ) ) )
					{
						worker.TimeoutBase[ TO_TIREDNESS ] = __FullSecond + REAL_SECOND( 60 ) * item.Val3;
						worker.Say( SAY_NETMSG, "Вы остановили агрегат." );
						item.Val2 = 0;
						item.Val3 = 0;
						item.Val4 = 0;
					}
					else
					{
						worker.Say( SAY_NETMSG, "Вы слишком устали." );
					}
				}
				else 
				{
					item.Val2 = 1; //Включено.
					item.Val3 = programs[new_program].time;
					item.Val4 = new_program + 1;
					worker.Say( SAY_NETMSG, "Вы запустили программу №" + item.Val4 + "." );

					uint[] values = { item.Id, 0 };
					CreateTimeEvent( __FullSecond, "e_manufacturing", values, false );
					
					programs[new_program].run( worker, item );
					//programs[new_program].start();
					//programs[new_program].finish(); //-> Перенести в окончание работы таймивента.
				}
			}
			else
				worker.Say( SAY_NETMSG, "Из этого ничего не вышло." );
		}
		
		void add( Program prog )
		{
			programs.insertLast( prog );
		}
		
		string info()
		{
			if( !valid( item ) ) return "системная ошибка";
			int program = item.Val4;
			
			if( program == 0 )
				return "нет программы";
			else if( program < 0 || uint( program ) > programs.length() )
				return "ошибка программы";
			else return programs[program-1].info();
		}
	}
	
	uint e_manufacturing( uint[] @ values )
	{
		if( values.length() != 2 )
			return 0;
		
		Item@ item = GetItem( values[ 0 ] );
		if( !valid( item ) )
			return 0;
		
		Map@ map = GetMap( item.MapId );
		if( !valid(map) )
			return 0;
		
		string[] sounds = { "грохот", "рокот", "стук", "гул", "гудение", "скрежет", "звон", "жужжание" };
		map.SetText( item.HexX, item.HexY, COLOR_SAND, "|0xFF828a96 :" + sounds[ Random( 0, sounds.length() - 1 ) ] + ":" );
		
		values[1]++;
		if( values[1] >= 4 ){
			values[1] = 0;
			item.Val3--;
		}

		if( item.Val2 == 0 || item.Val3 <= 0 )
		{
			item.Val2 = 0;
			item.Val3 = 0;
			return 0;
		}
		return REAL_SECOND( 15 );
	}
	
	class Crusher3000 : Processor
	{
		Crusher3000( Critter@ worker, Item@ item ) 
		{ 
			super( worker, item ); 
			add( Program_smelting_plate() );
			add( Program_crushing_rocks() );
			add( Program( "Самодиагностика.", 2 ) ); //недоступная для диалога опция
		}
		
		void run( int program ) override
		{
			Processor::run( program );
			//TODO: обработка выключения/переключения/джеммов
			//worker.Say( SAY_NETMSG, "Успешно!" );
		}
	}

	class Manufact
	{
		Critter@ player;
		Item@ item;
		Processor@ proc;
		
		Manufact( Critter& player )
		{
			@this.player = @player;
			if( player.ParamBase[ ST_LAST_CONT_ID ] != 0 )
				@item = GetItem( player.ParamBase[ ST_LAST_CONT_ID ] );
			else @item = null;
			
			if( !valid( item ) )
				player.Say( SAY_NETMSG, "Вы не можете нормально оперировать с агрегатом." );
			else 
				setup();
		}
		
		void setup()
		{
			if( !valid(item) || !valid(player) ) return;
			
			switch( item.GetProtoId() ) //Тут пригодился бы нормальный "динамический конструктор" классов (кажется, паттерн "фабрикатор").
			{
				case( PID_CRUSHER_3000 ):
					@this.proc = Crusher3000( player, item );
					break;
				default:
					@this.proc = Processor( player, item );
					break;
			}
		}
		
		bool isBusy()
		{
			return valid(item) && item.Val2 != 0;
		}
		
		void open()
		{
			if( valid(item) && valid(player) )
				ShowContainer( player, item, TRANSFER_FAR_CONT );
		}
		
		void process( int program ) 
		{
			if(valid(proc)) {
				proc.run( program );
				//showProgram();
				//showTime();
			}
			else if( valid(player) )
				player.Say( SAY_NETMSG, "Аппарат заглох." );
		}
		
		void showTime()
		{
			if( !valid(item) || !valid(player) ) return;
			int time = item.Val3;
			int hour = time / 60;
			string s_hour = ( hour < 10 ? ( "0" + hour ) : ( "" + hour ) ); //Может лучше макрос/функция?
			int minute = time % 60;
			string s_minute = ( minute < 10 ? ( "0" + minute ) : ( "" + minute ) ); //Может лучше макрос/функция?
			player.Say( SAY_NETMSG, "До окончания работы: " + s_hour + ":" + s_minute + "." );
		}
		
		void showProgram()
		{
			if( !valid(item) || !valid(player) || !valid(proc) ) return;
			player.Say( SAY_NETMSG, "Текущая программа: " + proc.info() );
		}
	}
#endif