#ifndef CRITTER_STATUS
#define CRITTER_STATUS

#include "_utils.fos"
#include "critter_status_h.fos"

void ChangeStatus( Critter& cr, uint16 status, uint8 value, bool set )
{
    bool onlyFlag = false;

    if( set )
    {
        switch( status )
        {
			case( CR_STATUS_BLEED ):
				BleedCritter( cr, value );
				break;
			default:
				break;
        }
        SETFLAG( cr.StatBase[ ST_CRSTATUS ], status );
    }
    else
    {
        switch( status )
        {
			case( CR_STATUS_HEAVY_DMG ):
				onlyFlag = true;
				break;
			case( CR_STATUS_BULLET_OVER ):
				onlyFlag = true;
				break;
			default:
				break;
        }

        if( onlyFlag && FLAG( cr.StatBase[ ST_CRSTATUS ], status ) )
		{
            UNSETFLAG( cr.StatBase[ ST_CRSTATUS ], status );
		}
	}
}

void BleedTest( Critter& cr, int bleed, int p1, int p2 ) 
{
	Critter@ target = ( p1 == 0 ? null : GetCritter( p1 ) );
	if( !valid(target) ) 
	{
		@target = @cr;
	}
	target.ParamBase[ QST_GAMEMODE ] = GAME_TEST;
	BleedCritter( target, bleed );
}

void BleedCritter( Critter& cr, int8 bleedValue )
{
    //Находим все активные ивенты, отслеживающие кровотечения и дропаем их, стартуя новый:
	uint[] indexes, durations, rates;
    int eventCount = cr.GetTimeEvents( CTE_BLEED, indexes, durations, rates );
	if( eventCount > 0 )
	{
		cr.EraseTimeEvents( CTE_BLEED );
	}
	
	uint time = ( cr.Param[ QST_GAMEMODE ] == GAME_TEST ? 1 : 60 ); //Для тестеров кровь течёт ежесекундно.

	cr.StatBase[ ST_BLEED ] += bleedValue;
	if( cr.StatBase[ ST_BLEED ] > 0 )
	{
		SETFLAG( cr.StatBase[ ST_CRSTATUS ], CR_STATUS_BLEED );
	}
	else
	{
		UNSETFLAG( cr.StatBase[ ST_CRSTATUS ], CR_STATUS_BLEED );
	}
    cr.AddTimeEvent( "cte_bleed", REAL_SECOND( time ), CTE_BLEED, 0 ); //Обновление таймера позволяет не откинуться от кровотечения посреди боя.
}

uint cte_bleed( Critter& cr, int identifier, uint& rate )
{
	int maxHP = cr.Stat[ST_MAX_LIFE];

	//Нанесение урона от кровопотери:
    int bleed = CLAMP( cr.StatBase[ ST_BLEED ] * 0.7 - 1, 0, maxHP ); //Падает на [30% + 1]
	
	if( bleed <= Random( 1, cr.Stat[ ST_ENDURANCE ] ) )
	{
		cr.StatBase[ ST_BLEED ] = 0;
		return 0;
	}
	
	cr.StatBase[ ST_BLEED ] = bleed;
	if( cr.StatBase[ ST_CURRENT_HP ] + cr.Stat [ST_HEALING_RATE] > 0  )
	{
		cr.StatBase[ ST_CURRENT_HP ] -= bleed / 2;
	}
	else
	{
		bleed /= 2; //Временный нерф, а то инфа 95%, что будете дальше пиздиться на лоуХП!
    }
	cr.ParamBase[ BP_BLOOD_LOSS ] += bleed / 2;

    if( cr.ParamBase[ BP_BLOOD_LOSS ] > maxHP * 0.75 && cr.IsPlayer() )
	{
		cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_HEAVY_BLOOD_LOSS );
	}
	
	if( cr.ParamBase [BP_BLOOD_LOSS] > maxHP - __DeadHitPoints ) //Смертельная кровопотеря. 
    { 
		cr.ParamBase [BP_BLOOD_LOSS] = maxHP; 
        UNSETFLAG( cr.StatBase[ ST_CRSTATUS ], CR_STATUS_BLEED );
		cr.StatBase[ ST_BLEED ] = 0;

		//Падение обессиленного:
		uint anim2Dead = Random( 0, 1 ) == 0 ? ANIM2_DEAD_FRONT : ANIM2_DEAD_PRONE_BACK;
    	if( cr.IsKnockout() )
		{
            if(cr.Anim2Knockout == ANIM2_IDLE_PRONE_FRONT)
			{
                anim2Dead = ANIM2_DEAD_PRONE_FRONT;
            }
			else
			{
                anim2Dead = ANIM2_DEAD_PRONE_BACK;
			}
		}
        cr.ToDead (anim2Dead, cr);
		
		if( cr.IsPlayer() )
		{
			cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_MASSIVE_BLOOD_LOSS );
        }
		return 0;
    }
    
	//Кровь вытекает под существо:
	uint16 hx = cr.HexX, hy = cr.HexY;
	Map@ map = cr.GetMap();
	if( valid( map ) )
	{
		CheckBlood( map, hx, hy );
	}
	
	int time = 30;
	if( cr.Param[ QST_GAMEMODE ] == GAME_TEST )
	{
		time = 3;
	}
	if( cr.IsKnockout() || cr.IsNpc() )
	{
		time *= 2;
	}
	return REAL_SECOND( time );
}

void CheckBlood( Map& map, uint16 hx, uint16 hy )
{
	bool wasBlooded = false;
	Item@[] dirt;
	map.GetItems( hx, hy, dirt );
	if( valid( dirt ) )
	{
		for( uint i = 0; i < dirt.length(); i ++ )
		{
			if( !valid( dirt[i] ) )
			{
				continue;
			}
			uint dirtPid = dirt[i].GetProtoId();
			if( bloods[0].find( dirtPid ) != -1 )
			{ //Если это малая лужа - увеличиваем её.
				dirt[i].BLOOD_AMOUNT++;
				if( dirt[i].BLOOD_AMOUNT >= spoil_Val )
				{
					dirt[i].ChangeProto( bloods[1][Random( 0, bloods[1].length() - 1 )] );
				}
				wasBlooded = true;
				break;
			}
			
			if( bloods[1].find( dirtPid ) != -1 )
			{ //Если это большая лужа - просто "усиливаем" её.
				dirt[i].BLOOD_AMOUNT++;
				wasBlooded = true;
				break;
			}
		}
	}
	
	if( !wasBlooded )
	{
		AddBlood( map, hx, hy, 0 );
	}
}

void AddBlood( Map& map, uint16 hx, uint16 hy, uint size )
{
	uint pid = bloods[size][Random( 0, bloods[size].length() - 1)];
	map.AddItem( hx, hy, pid, 1 );
	
	Item@ blood = null;
	Item@[] ground;
	map.GetItems( hx, hy, ground );

	if( !valid( ground ) )
	{
		return;
	}
	for( uint i = 0; i < ground.length(); i++ )
	{
		if( bloods[size].find( ground[i].GetProtoId() ) > -1 )
		{
			@blood = ground[i];
			if( size == 2 )
			{
				blood.BLOOD_AMOUNT = 4;
			}
			break;
		}
	}
	if( valid( blood ) )
	{
		uint[] values = { blood.Id };
		blood.Val1 = CreateTimeEvent( __FullSecond + REAL_MINUTE( 1 + 15 * blood.BLOOD_AMOUNT ), "e_dryup", values, true );
	}
}

uint e_dryup( uint[]@ values )
{
	if( !valid(values) )
	{
		return 0;
	}
	
	Item@ blood = GetItem( values[0] );
	if( !valid( blood ) )
	{
		return 0;
	}
	
	DeleteItem( blood );
	return 0;
}

void DropBleed( Critter& cr )
{
    uint[] indexes;
    uint[] rates;
    uint[] durations;
    uint8 eventCount = cr.GetTimeEvents( CTE_BLEED, indexes, durations, rates );

    if( eventCount > 0 )
	{
        cr.EraseTimeEvents (CTE_BLEED);
	}
}
#endif // CRITTER_STATUS