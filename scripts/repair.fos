#ifndef REPAIR
#define REPAIR

#include "_utils.fos"
#include "repair_h.fos"
#include "_ltp.fos"
#include "gathering_h.fos"
#include "critter_skills_h.fos"

dictionary decraftItems; //Global variable for decraft ingridients

//~run repair rest id 0 0
void rest( Critter& cr, int id, int, int )
{
	if( id == 0 )
	{
		cr.EraseTimeEvents( CTE_TIRED );
		cr.Say( SAY_NETMSG, "Вы отдохнули и готовы продолжать свои безумные эксперименты." );
		return;
	}

	Critter@ target = GetCritter( id );
	if( !valid( target ) )
	{
		cr.Say( SAY_NETMSG, "Цель не найдена." );
		return;
	}

	target.EraseTimeEvents( CTE_TIRED );
	cr.Say( SAY_NETMSG, "Целевой криттер воодушевлён." );
	target.Say( SAY_NETMSG, "На вас резко нахлынуло вдохновение. Вам очень хочется что-либо изобрести или изучить!" );
}

bool TryRepairItem( Critter& cr, Item& item ) // Export
{
    if( !item.IsDeteriorable() )
	{
		cr.Say( SAY_NETMSG, "Этот объект не подлежит износу." );
        return true;
	}

    if( cr.Timeout[ TO_SK_REPAIR ] > 0 )
    {
        cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_SKILL_WEARINESS );
        return true;
    }

    if( FLAG( item.BrokenFlags, BI_ETERNAL ) || FLAG( item.BrokenFlags, BI_NOTRESC ) )
    {
        cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_DETERIORATION_NO_RESC );
        return true;
    }
	
	if( IsTired( cr ) ) { return false; }
		if( cr.IsInjured() ) { 
		cr.Say( SAY_NETMSG, "|0xFF0000 Вы травмированы и не в состоянии произвести ремонт." );
		return false; 
	}
	
    // Repair
    int repair = cr.Skill[ SK_REPAIR ];
    uint8  mode = 0;

    // запчасти для оружия и брони
    uint16 Pid = item.GetProtoId();
	uint8 Item_Subtype = item.Proto.Item_Subtype;
	bool isNonReparable = ( Pid == PID_SOLAR_SCORCHER ) || ( Pid == PID_SUN ) || ( Pid == PID_SUN2 ) || ( Pid == PID_SUN3 );
	bool hasAmmo = ( item.Proto.Weapon_MaxAmmoCount != 0 );
	
	if( isNonReparable ) { cr.Say( SAY_NETMSG, "|0xFFFF00 Не ремонтируемо" ); return true; }
	
	uint16[] tools;
	uint16[] parts;
	//BY PID
    switch( Pid )
    {
		case( PID_TECH_ARMOR ):
			repair -=10;
			tools.insertLast( PID_SHIV );
			tools.insertLast( PID_SCISSORS );
			tools.insertLast( PID_MEDNEEDLE );
			tools.insertLast( PID_MULTI_TOOL );
			parts.insertLast( PID_CRAFT_L_HIDE ); parts.insertLast( 4 );
			parts.insertLast( PID_CRAFT_L_LINT ); parts.insertLast( 2 );
			parts.insertLast( PID_MEDTHREAD ); parts.insertLast( 2 );
			parts.insertLast( PID_PB_PLATE ); parts.insertLast( 1 );
			parts.insertLast( PID_METAL_LIST_MEH ); parts.insertLast( 1 );
			break;
		case( PID_arlthr1 ):
		case( PID_arlthr2 ):
			repair -= 20;
			tools.insertLast( PID_MULTI_TOOL );
			tools.insertLast( PID_SHIV );
			tools.insertLast( PID_SCISSORS );
			tools.insertLast( PID_MEDNEEDLE );
			parts.insertLast( PID_PB_PLATE ); parts.insertLast( 1 );
			parts.insertLast( PID_CRAFT_L_HIDE ); parts.insertLast( 2 );
			parts.insertLast( PID_CRAFT_L_LINT ); parts.insertLast( 2 );
			parts.insertLast( PID_MEDTHREAD ); parts.insertLast( 2 );
			break;
		case( PID_VEST_MK1 ):
		case( PID_VEST_MK2 ):
		case( PID_militia_armor_MK2 ):
			repair -= 20;
			tools.insertLast( PID_MULTI_TOOL );
			tools.insertLast( PID_WELDING );
			parts.insertLast( PID_PB_PLATE ); parts.insertLast( 2 );
			parts.insertLast( PID_METAL_LIST_MEH ); parts.insertLast( 1 );
			break;
		case( PID_PERSONAL_JACKET ):
			repair -= 20;
			tools.insertLast( PID_SHIV );
			tools.insertLast( PID_SCISSORS );
			tools.insertLast( PID_MEDNEEDLE );
			parts.insertLast( PID_CRAFT_L_HIDE ); parts.insertLast( 2 );
			parts.insertLast( PID_CRAFT_L_LINT ); parts.insertLast( 3 );
			parts.insertLast( PID_MEDTHREAD ); parts.insertLast( 2 );
			break;
		case( PID_ArmorGaz ):
			repair -= 20;
			tools.insertLast( PID_SCISSORS );
			tools.insertLast( PID_MEDNEEDLE );
			tools.insertLast( PID_SHIV );
			parts.insertLast( PID_CRAFT_L_RAGS ); parts.insertLast( 2 );
			parts.insertLast( PID_CRAFT_L_HIDE ); parts.insertLast( 2 );
			parts.insertLast( PID_MEDTHREAD ); parts.insertLast( 2 );
			parts.insertLast( PID_CRAFT_L_LINT ); parts.insertLast( 1 );
			parts.insertLast( PID_CRAFT_M_JUNK ); parts.insertLast( 2 );
			break;
		case( PID_armetal ):
		case( PID_general ):
			repair -= 40;
			tools.insertLast( PID_WORKBENCH_TOKEN );
			tools.insertLast( PID_SUPER_TOOL_KIT );
			tools.insertLast( PID_WELDING );		
			parts.insertLast( PID_CHEMICALS ); parts.insertLast( 3 );
			parts.insertLast( PID_IRON_PLATE ); parts.insertLast( 3 );
			parts.insertLast( PID_PB_PLATE ); parts.insertLast( 3 );
			break;
		case( PID_TRIBE_ARMOR2 ):
			repair -= 5;
			tools.insertLast( PID_SHIV );
			tools.insertLast( PID_SCISSORS );
			tools.insertLast( PID_MEDNEEDLE );
			parts.insertLast( PID_PELT3 ); parts.insertLast( 2);
			parts.insertLast( PID_KLK ); parts.insertLast( 6);
			parts.insertLast( PID_MANTIS_SHELL ); parts.insertLast( 3 );
			parts.insertLast( PID_MEDTHREAD ); parts.insertLast( 2 );
			parts.insertLast( PID_DEATHCLAW_HIDE ); parts.insertLast( 1 );
			break;  
		case( PID_TRIBE_ARMOR3 ):
			repair -= 5;
			tools.insertLast( PID_SHIV );
			tools.insertLast( PID_SCISSORS );
			tools.insertLast( PID_MEDNEEDLE );
			parts.insertLast( PID_MANTIS_SHELL ); parts.insertLast( 6);
			parts.insertLast( PID_CRAFT_L_HIDE ); parts.insertLast( 3 );
			parts.insertLast( PID_MEDTHREAD ); parts.insertLast( 6 );
			break;  
		case( PID_LEATHER_COAT ):
			repair -= 5;
			tools.insertLast( PID_SHIV );
			tools.insertLast( PID_SCISSORS );
			tools.insertLast( PID_MEDNEEDLE );
			parts.insertLast( PID_CRAFT_L_HIDE ); parts.insertLast( 5 );
			parts.insertLast( PID_MEDTHREAD ); parts.insertLast( 6 );
			parts.insertLast( PID_CRAFT_L_LINT ); parts.insertLast( 4 );
			break;
		case( PID_FIRE_ARMOR ):
			repair -= 25;
			parts.insertLast( PID_FIRE_GECKO_PELT ); parts.insertLast( 1 );
			parts.insertLast( PID_CRAFT_L_HIDE ); parts.insertLast( 2 );
			parts.insertLast( PID_CRAFT_L_LINT ); parts.insertLast( 4 );
			parts.insertLast( PID_MEDNEEDLE ); parts.insertLast( 2 );
			tools.insertLast( PID_SHIV );
			tools.insertLast( PID_SCISSORS );
			tools.insertLast( PID_MEDNEEDLE );
			break;
		case( PID_MUTARMOR_METAL ):	
		case( PID_MUTARMOR_METAL_MK2 ):
			repair -= 35;
			tools.insertLast( PID_SCISSORS );
			tools.insertLast( PID_MEDNEEDLE );
			tools.insertLast( PID_WELDING );
			tools.insertLast( PID_SUPER_TOOL_KIT );
			parts.insertLast( PID_IRON_PLATE ); parts.insertLast( 2 );
			parts.insertLast( PID_CRAFT_L_HIDE ); parts.insertLast( 4 );
			parts.insertLast( PID_CRAFT_L_LINT ); parts.insertLast( 2 );
			parts.insertLast( PID_CRAFT_M_BARS ); parts.insertLast( 3 );
			break;
		case( PID_PURPLE_ROBE ):
		case( PID_BLACK_ROBE ):
		case( PID_BROWN_ROBE ):
		case( PID_DARK_GREEN_ROBE ):
		case( PID_RED_RITUAL_ROBE ):
		case( PID_BLACK_RITUAL_ROBE ):
		case( PID_DARK_BLACK_ROBE ):
		case( PID_DARK_RED_ROBE ):
		case( PID_RED_ROBE ):
		case( PID_DARK_BROWN_ROBE ):
		case( PID_DARK_BLUE_ROBE ):
		case( PID_ATOM_CHILD_ROBE ):
		case( PID_parade_uniform ):
		case( PID_LAB_COAT ):
			repair -= 5;
			tools.insertLast( PID_SCISSORS );
			tools.insertLast( PID_MEDNEEDLE );
			parts.insertLast( PID_CRAFT_L_RAGS ); parts.insertLast( 2 );
			parts.insertLast( PID_MEDTHREAD ); parts.insertLast( 2 );
			parts.insertLast( PID_CRAFT_L_LINT ); parts.insertLast( 2 );
			break;
		case( PID_MUTARMOR_LEATHER ):
			tools.insertLast( PID_SHIV );
			tools.insertLast( PID_SCISSORS );
			tools.insertLast( PID_MEDNEEDLE );
			parts.insertLast( PID_CRAFT_L_HIDE ); parts.insertLast( 4 );
			parts.insertLast( PID_CRAFT_L_LINT ); parts.insertLast( 2 );
			parts.insertLast( PID_MEDTHREAD ); parts.insertLast( 2 );
			break;
		case( PID_SANDROBE ):
		case( PID_JUMPSUIT ):
		case( PID_FAKE_JUMPSUIT ):
			repair -= 10;
			tools.insertLast( PID_SCISSORS );
			tools.insertLast( PID_MEDNEEDLE );
			parts.insertLast( PID_CRAFT_L_RAGS ); parts.insertLast( 2 );
			parts.insertLast( PID_MEDTHREAD ); parts.insertLast( 2 );
			break;
		case( PID_LEATHER_JACKET ):
		case( PID_BIKER_JACKET ):
		case( PID_copinv1 ):
		case( PID_TRIBE_ARMOR1 ):
		case( PID_GEKKO_ARMOR ):
		case( PID_LEATHER_SHIRT ):
			repair -= 5;
			tools.insertLast( PID_SHIV );
			tools.insertLast( PID_SCISSORS );
			tools.insertLast( PID_MEDNEEDLE );
			parts.insertLast( PID_CRAFT_L_HIDE ); parts.insertLast( 1 );
			parts.insertLast( PID_MEDTHREAD ); parts.insertLast( 2 );
			parts.insertLast( PID_CRAFT_L_LINT ); parts.insertLast( 2 );
			break;
		case( PID_LEATHER_ARMOR ):
		case( PID_CURED_LEATHER_ARMOR ):
		case( PID_CARAVAN_MASTER_JACKET ):
			repair -= 5;
			tools.insertLast( PID_SHIV );
			tools.insertLast( PID_SCISSORS );
			tools.insertLast( PID_MEDNEEDLE );
			parts.insertLast( PID_CRAFT_L_HIDE ); parts.insertLast( 2 );
			parts.insertLast( PID_CRAFT_L_LINT ); parts.insertLast( 3 );
			parts.insertLast( PID_MEDTHREAD ); parts.insertLast( 2 );
			break;
		case( PID_LEATHER_ARMOR_MK_II ):
		case( PID_militia_armor_MK1 ):
		case( PID_arkirasa ):
			repair -= 5;
			tools.insertLast( PID_SHIV );
			tools.insertLast( PID_SCISSORS );
			tools.insertLast( PID_MEDNEEDLE );
			parts.insertLast( PID_CRAFT_L_HIDE ); parts.insertLast( 3 );
			parts.insertLast( PID_CRAFT_L_LINT ); parts.insertLast( 4 );
			parts.insertLast( PID_MEDTHREAD ); parts.insertLast( 3 );
			break;
		case( PID_LEATHER_ARMOR_MK_III ):
		case( PID_LEATHER_ARMOR_GREY ):
		case( PID_LEATHER_ARMOR_DARK ):
		case( PID_LEATHER_ARMOR_SWAMP ):
		case( ITEM_TREASURE_HOLE ):
		case( PID_arbsbl1 ):
		case( PID_FZZZ1 ):
		case( PID_FZZZ2 ):
			repair -=5;
			tools.insertLast( PID_SHIV );
			tools.insertLast( PID_SCISSORS );
			tools.insertLast( PID_MEDNEEDLE );
			tools.insertLast( PID_MULTI_TOOL );
			parts.insertLast( PID_CRAFT_L_HIDE ); parts.insertLast( 4 );
			parts.insertLast( PID_CRAFT_L_LINT ); parts.insertLast( 4);
			parts.insertLast( PID_MEDTHREAD ); parts.insertLast( 3 );
			parts.insertLast( PID_PB_PLATE ); parts.insertLast( 1 );
			break;
		case( PID_CURED_LEATHER_ARMOR_MK_II ):
			repair -=5;
			tools.insertLast( PID_SHIV );
			tools.insertLast( PID_SCISSORS );
			tools.insertLast( PID_MEDNEEDLE );
			tools.insertLast( PID_MULTI_TOOL );
			parts.insertLast( PID_CRAFT_L_HIDE ); parts.insertLast( 3 );
			parts.insertLast( PID_CRAFT_L_LINT ); parts.insertLast( 2);
			parts.insertLast( PID_MEDTHREAD ); parts.insertLast( 2 );		
			parts.insertLast( PID_PB_PLATE ); parts.insertLast( 1 );
			break;
		case( PID_LEATHER_ARMOR_CAMMO ):
		case( PID_LEATHER_ARMOR_RED ):
			repair -= 5;
			tools.insertLast( PID_SHIV );
			tools.insertLast( PID_SCISSORS );
			tools.insertLast( PID_MEDNEEDLE );
			parts.insertLast( PID_CRAFT_L_HIDE ); parts.insertLast( 3 );
			parts.insertLast( PID_CRAFT_L_LINT ); parts.insertLast( 4 );
			parts.insertLast( PID_MEDTHREAD ); parts.insertLast( 3 );
			break;
		case( PID_LEATHER_ARMOR_BLACK ):
		case( PID_ROAD_ARMOR ):
		case( PID_SCAVANGER_DUSTER ):
		case( PID_IMPROVED_JACKET ):
			repair -=10;
			tools.insertLast( PID_SHIV );
			tools.insertLast( PID_SCISSORS );
			tools.insertLast( PID_MEDNEEDLE );
			tools.insertLast( PID_MULTI_TOOL );
			parts.insertLast( PID_CRAFT_L_HIDE ); parts.insertLast( 4 );
			parts.insertLast( PID_CRAFT_L_LINT ); parts.insertLast( 4);
			parts.insertLast( PID_MEDTHREAD ); parts.insertLast( 3 );
			parts.insertLast( PID_PB_PLATE ); parts.insertLast( 1 );
			break;	
		case( PID_RIOT_ARMOR ):
		case( PID_armltfuk ):
		case( PID_CARED ):
		case( PID_tesla21 ):
			repair -=30;
			tools.insertLast( PID_WELDING );
			tools.insertLast( PID_SUPER_TOOL_KIT );
			tools.insertLast( PID_SLEDGEHAMMER );
			parts.insertLast( PID_PB_PLATE ); parts.insertLast( 3 );
			parts.insertLast( PID_IRON_PLATE ); parts.insertLast( 2 );
			break;
		case( PID_METAL_ARMOR ):
		case( PID_arbsbl2 ):
		case( PID_glad1 ):
			repair -=5;
			tools.insertLast( PID_SLEDGEHAMMER );
			tools.insertLast( PID_WELDING );
			parts.insertLast( PID_METAL_LIST_MEH ); parts.insertLast( 1 );
			parts.insertLast( PID_SPIKE_MEH ); parts.insertLast( 2 );
			break;
		case( PID_METAL_ARMOR_MK_II ):
		case( PID_ZERKALO_METAL_ARMOR_MK_II ):
			repair -= 10;
			tools.insertLast( PID_SUPER_TOOL_KIT );
			tools.insertLast( PID_WELDING );
			tools.insertLast( PID_SLEDGEHAMMER );
			parts.insertLast( PID_IRON_PLATE ); parts.insertLast( 2 );
			parts.insertLast( PID_CRAFT_L_HIDE ); parts.insertLast( 3 );
			parts.insertLast( PID_CRAFT_L_LINT ); parts.insertLast( 4 );
			parts.insertLast( PID_MEDTHREAD ); parts.insertLast( 4 );
			break;
		case( PID_METAL_ARMOR_MK_III ):
			repair -= 50;
			tools.insertLast( PID_SUPER_TOOL_KIT );
			tools.insertLast( PID_WELDING );
			parts.insertLast( PID_COPPER_LEAF) ; parts.insertLast( 1 );
			parts.insertLast( PID_IRON_PLATE ); parts.insertLast( 2 );
			parts.insertLast( PID_PB_PLATE ); parts.insertLast( 2 );
			parts.insertLast( PID_CRAFT_L_HIDE ); parts.insertLast( 4 );
			parts.insertLast( PID_MEDTHREAD ); parts.insertLast( 4 );
			break;
		case( PID_MANTIS_ARMOR ):
			repair -= 5;
			tools.insertLast( PID_SHIV );
			tools.insertLast( PID_MEDNEEDLE );
			tools.insertLast( PID_MULTI_TOOL );
			parts.insertLast( PID_MANTIS_SHELL ); parts.insertLast( 3 );
			parts.insertLast( PID_CRAFT_L_LINT ); parts.insertLast( 4 );
			parts.insertLast( PID_MEDTHREAD ); parts.insertLast( 2 );
			break;
		case( PID_MIRELURK_ARMOR ):
			repair -=30;
			tools.insertLast( PID_WORKBENCH_TOKEN );
			tools.insertLast( PID_MULTI_TOOL );
			tools.insertLast( PID_SLEDGEHAMMER );
			tools.insertLast( PID_SHIV );
			parts.insertLast( PID_CRAFT_L_HIDE ); parts.insertLast( 4 );
			parts.insertLast( PID_MANTIS_SHELL ); parts.insertLast( 4 );
			parts.insertLast( PID_ROPE ); parts.insertLast( 1 );
			break;
		case( PID_HOUND_ARMOR ):
		case( PID_POLICE_ARMOR ):
			repair -= 40;
			tools.insertLast( PID_SUPER_TOOL_KIT );
			tools.insertLast( PID_WELDING );
			parts.insertLast( PID_IRON_PLATE ); parts.insertLast( 3 );
			parts.insertLast( PID_PB_PLATE ); parts.insertLast( 3 );
			parts.insertLast( PID_CHEMICALS ); parts.insertLast( 2 );
			break;
		case( PID_CASER ):
		case( PID_CADES ):
		case( PID_COMBAT_ARMOR ):
		case( PID_COMBAT_ARMOR_RNEGATE_MK1 ):
		case( PID_COMBAT_ARMOR_DESERT_MK1 ):
		case( PID_CMBT_DESERT ):
		case( PID_CA_BASALT ):
		case( PID_militia_armor_MK3 ):
		case( PID_CHEM_ARMOR ):
		case( PID_CHEM_ARMOR_MK2 ):
			repair -= 80;
			tools.insertLast( PID_WORKBENCH_TOKEN );
			tools.insertLast( PID_WELDING );
			tools.insertLast( PID_SUPER_TOOL_KIT );
			parts.insertLast( PID_CHEMICALS ); parts.insertLast( 4 );
			parts.insertLast( PID_IRON_PLATE ); parts.insertLast( 2 );
			parts.insertLast( PID_PB_PLATE ); parts.insertLast( 2 );
			break;
		case( PID_OLD_JACKET ):
			repair -= 10;
			tools.insertLast( PID_SHIV );
			tools.insertLast( PID_SCISSORS );
			tools.insertLast( PID_MEDNEEDLE );		
			parts.insertLast( PID_CRAFT_L_HIDE ); parts.insertLast( 1 );
			parts.insertLast( PID_MEDTHREAD ); parts.insertLast( 1 );
			parts.insertLast( PID_CRAFT_L_LINT ); parts.insertLast( 1 );
			break;

	// оружие лоу тек
		case PID_SPRINGER_RIFLE:
		case PID_REVOLVER_LOW:
		case PID_PISTOL_LOW:
		case PID_BIGGUN_LOW:
		case PID_SMOKE_GUN_LOW:
		case PID_SHOTPISTOL_LOW:
		case PID_QUADRO_SHOTGUN:
		case PID_LOW_SNIPER2:
		case PID_SAVAGE:
		case PID_IMPROVED_SAVAGE:
		case PID_REV_RIFLE_LOW:
		case PID_ONEHAND_ROCKET_LAUNCHER:
		case PID_14mm_BIGGUN2_LOW:
		case PID_bglaw:
			tools.insertLast( PID_MULTI_TOOL );
			parts.insertLast( PID_CRAFT_M_JUNK ); parts.insertLast( 2 );		
			parts.insertLast( PID_CRAFT_M_BARS ); parts.insertLast( 1 );
			parts.insertLast( PID_DETAL_MEH ); parts.insertLast( 1 );
			break;
	}
	//BY_ITEM_SUBTYPE
	if ( tools.length() == 0 && parts.length() == 0 ) {
		switch( Item_Subtype )
		{
			case( ITEM_SUBTYPE_WEAPON_NORMAL_PISTOL ):
				repair -= 5;
				tools.insertLast( PID_SUPER_TOOL_KIT );
				tools.insertLast( PID_SCREWDRIVER );
				parts.insertLast( PID_CRAFT_M_JUNK ); parts.insertLast( 1 );
				parts.insertLast( PID_MSPIRAL ); parts.insertLast( 2 );
				parts.insertLast( PID_PISTOL_PARTS ); parts.insertLast( 1 );
				break;
			case( ITEM_SUBTYPE_WEAPON_NORMAL_PISTOL_REVOLVER ):
				repair -= 15;
				tools.insertLast( PID_SUPER_TOOL_KIT );
				tools.insertLast( PID_SCREWDRIVER );
				parts.insertLast( PID_REVOLVER_PART ); parts.insertLast( 1 );
				parts.insertLast( PID_CRAFT_M_JUNK ); parts.insertLast( 1 );
				parts.insertLast( PID_MSPIRAL ); parts.insertLast( 2 );
				parts.insertLast( PID_REVOLVER_PARTS ); parts.insertLast( 1 );
				break;
			case( ITEM_SUBTYPE_WEAPON_NORMAL_SMG ):
				repair -= 25;
				tools.insertLast( PID_SUPER_TOOL_KIT );
				tools.insertLast( PID_SCREWDRIVER );
				parts.insertLast( PID_CRAFT_M_BARS ); parts.insertLast( 2 );
				parts.insertLast( PID_CRAFT_M_JUNK ); parts.insertLast( 2 );
				parts.insertLast( PID_MSPIRAL ); parts.insertLast( 1 );
				parts.insertLast( PID_SG_PARTS ); parts.insertLast( 1 );
				break;
			case( ITEM_SUBTYPE_WEAPON_NORMAL_RIFLE ):
				repair -= 35;
				tools.insertLast( PID_SUPER_TOOL_KIT );
				tools.insertLast( PID_SCREWDRIVER );
				parts.insertLast( PID_CRAFT_M_BARS ); parts.insertLast( 1 );
				parts.insertLast( PID_CRAFT_M_JUNK ); parts.insertLast( 1 );
				parts.insertLast( PID_MSPIRAL ); parts.insertLast( 1 );
				parts.insertLast( PID_MUSKET_BARREL ); parts.insertLast( 1 );
				break;
			case( ITEM_SUBTYPE_WEAPON_NORMAL_ASSAULT_RIFLE ):
				repair -= 40;
				tools.insertLast( PID_SUPER_TOOL_KIT );
				tools.insertLast( PID_SCREWDRIVER );
				parts.insertLast( PID_MSPIRAL ); parts.insertLast( 1 );
				parts.insertLast( PID_AUTOMAT_PARTS ); parts.insertLast( 1 );
				parts.insertLast( PID_WEAPON_PARTS ); parts.insertLast( 2 );
				break;
			case( ITEM_SUBTYPE_WEAPON_NORMAL_SNIPER_RIFLE ):
				repair -= 35;
				tools.insertLast( PID_SUPER_TOOL_KIT );
				tools.insertLast( PID_SCREWDRIVER );
				parts.insertLast( PID_MSPIRAL ); parts.insertLast( 1 );
				parts.insertLast( PID_LINZA ); parts.insertLast( 2 );
				parts.insertLast( PID_MUSKET_BARREL ); parts.insertLast( 1 );
				parts.insertLast( PID_WEAPON_PARTS ); parts.insertLast( 2 );
				break;
			case( ITEM_SUBTYPE_WEAPON_NORMAL_SHOTGUN ):
				repair -= 25;
				tools.insertLast( PID_SUPER_TOOL_KIT );
				tools.insertLast( PID_SCREWDRIVER );
				parts.insertLast( PID_CRAFT_M_BARS ); parts.insertLast( 1 );
				parts.insertLast( PID_CRAFT_M_JUNK ); parts.insertLast( 1 );
				parts.insertLast( PID_MSPIRAL ); parts.insertLast( 2 );
				parts.insertLast( PID_SHOTGUN_PARTS ); parts.insertLast( 1 );
				break;
			case( ITEM_SUBTYPE_WEAPON_NORMAL_AUTOSHOTGUN ):
				repair -= 30;
				tools.insertLast( PID_SUPER_TOOL_KIT );
				tools.insertLast( PID_SCREWDRIVER );
				parts.insertLast( PID_MSPIRAL ); parts.insertLast( 2 );
				parts.insertLast( PID_SHOTGUN_PARTS2 ); parts.insertLast( 1 );
				parts.insertLast( PID_WEAPON_PARTS ); parts.insertLast( 2 );
				break;
			case( ITEM_SUBTYPE_WEAPON_NORMAL_LMG ):
				repair -= 35;
				tools.insertLast( PID_SUPER_TOOL_KIT );
				tools.insertLast( PID_SCREWDRIVER );
				parts.insertLast( PID_CRAFT_M_STEL ); parts.insertLast( 3 );
				parts.insertLast( PID_MSPIRAL ); parts.insertLast( 2 );
				parts.insertLast( PID_WEAPON_PARTS ); parts.insertLast( 4 );
				break;
			case( ITEM_SUBTYPE_WEAPON_NORMAL_MACHINEGUN ):
				repair -= 45;
				tools.insertLast( PID_SUPER_TOOL_KIT );
				tools.insertLast( PID_SCREWDRIVER );
				parts.insertLast( PID_CRAFT_M_STEL ); parts.insertLast( 3 );
				parts.insertLast( PID_DVIGAT_MEH ); parts.insertLast( 2 );
				parts.insertLast( PID_MSPIRAL ); parts.insertLast( 2 );
				parts.insertLast( PID_WEAPON_PARTS ); parts.insertLast( 4 );
				break;
			case( ITEM_SUBTYPE_WEAPON_NORMAL_NADELAUNCHER ):
				repair -= 45;
				tools.insertLast( PID_SUPER_TOOL_KIT );
				tools.insertLast( PID_SCREWDRIVER );
				parts.insertLast( PID_CRAFT_M_BARS ); parts.insertLast( 3 );
				parts.insertLast( PID_CRAFT_M_JUNK ); parts.insertLast( 2 );
				parts.insertLast( PID_TUBE ); parts.insertLast( 1 );
				parts.insertLast( PID_WEAPON_PARTS ); parts.insertLast( 1 );
				break;
			case( ITEM_SUBTYPE_WEAPON_NORMAL_FLAMETHROWER ):
				repair -= 55;
				tools.insertLast( PID_SUPER_TOOL_KIT );
				tools.insertLast( PID_SCREWDRIVER );
				parts.insertLast( PID_CRAFT_M_BARS ); parts.insertLast( 3 );
				parts.insertLast( PID_CRAFT_M_STEL ); parts.insertLast( 1 );
				parts.insertLast( PID_CRAFT_M_JUNK ); parts.insertLast( 2 );
				parts.insertLast( PID_TUBE ); parts.insertLast( 3 );
				parts.insertLast( PID_WEAPON_PARTS ); parts.insertLast( 1 );
				break;
			case( ITEM_SUBTYPE_WEAPON_NORMAL_MINIGUN ):
				repair -= 55;
				tools.insertLast( PID_SUPER_TOOL_KIT );
				tools.insertLast( PID_SCREWDRIVER );
				parts.insertLast( PID_CRAFT_M_STEL ); parts.insertLast( 3 );
				parts.insertLast( PID_TUBE ); parts.insertLast( 1 );
				parts.insertLast( PID_MSPIRAL ); parts.insertLast( 2 );
				parts.insertLast( PID_WEAPON_PARTS ); parts.insertLast( 4 );
				break;
			case( ITEM_SUBTYPE_WEAPON_NORMAL_HEAVY_RIFLE ):
				repair -= 65;
				tools.insertLast( PID_SUPER_TOOL_KIT );
				tools.insertLast( PID_SCREWDRIVER );
				parts.insertLast( PID_CRAFT_M_BARS ); parts.insertLast( 3 );
				parts.insertLast( PID_CRAFT_M_JUNK ); parts.insertLast( 2 );
				parts.insertLast( PID_CRAFT_M_STEL ); parts.insertLast( 1 );
				parts.insertLast( PID_TUBE ); parts.insertLast( 1 );
				parts.insertLast( PID_WEAPON_PARTS ); parts.insertLast( 1 );
				break;
			case( ITEM_SUBTYPE_WEAPON_LASER_PISTOL ):
				repair -= 10;
				tools.insertLast( PID_SUPER_TOOL_KIT );
				tools.insertLast( PID_SCREWDRIVER );
				tools.insertLast( PID_SOLDERER );
				parts.insertLast( PID_LINZA ); parts.insertLast( 2 );
				parts.insertLast( PID_MPARTS ); parts.insertLast( 2 );
				parts.insertLast( PID_BRACING ); parts.insertLast( 4 );
				parts.insertLast( PID_OHLAD_MEH ); parts.insertLast( 1 ); 
				parts.insertLast( PID_EXCAVATOR_CHIP ); parts.insertLast( 2 );
				break;
			case( ITEM_SUBTYPE_WEAPON_LASER_RIFLE ):
				repair -= 15;
				tools.insertLast( PID_SUPER_TOOL_KIT );
				tools.insertLast( PID_SCREWDRIVER );
				tools.insertLast( PID_SOLDERER );
				parts.insertLast( PID_LINZA ); parts.insertLast( 1 );
				parts.insertLast( PID_MPARTS ); parts.insertLast( 2 );
				parts.insertLast( PID_BRACING ); parts.insertLast( 4 );
				parts.insertLast( PID_COPPER_WIRE ); parts.insertLast( 1 );
				parts.insertLast( PID_OHLAD_MEH ); parts.insertLast( 1 ); 
				parts.insertLast( PID_CRAFT_E_CHIP ); parts.insertLast( 1 );
				break;
			case( ITEM_SUBTYPE_WEAPON_LASER_SMG ):
				repair -= 20;
				tools.insertLast( PID_SUPER_TOOL_KIT );
				tools.insertLast( PID_SCREWDRIVER );
				tools.insertLast( PID_SOLDERER );
				parts.insertLast( PID_LINZA ); parts.insertLast( 1 );
				parts.insertLast( PID_MPARTS ); parts.insertLast( 4 );
				parts.insertLast( PID_BRACING ); parts.insertLast( 2 );
				parts.insertLast( PID_COPPER_WIRE ); parts.insertLast( 1 );
				parts.insertLast( PID_OHLAD_MEH ); parts.insertLast( 1 ); 
				parts.insertLast( PID_EXCAVATOR_CHIP ); parts.insertLast( 1 );
				break;
			case( ITEM_SUBTYPE_WEAPON_LASER_SNIPER_RIFLE ):
				repair -= 30;
				tools.insertLast( PID_SUPER_TOOL_KIT );
				tools.insertLast( PID_SCREWDRIVER );
				tools.insertLast( PID_SOLDERER );
				parts.insertLast( PID_LINZA ); parts.insertLast( 2 );
				parts.insertLast( PID_MPARTS ); parts.insertLast( 2 );
				parts.insertLast( PID_BRACING ); parts.insertLast( 4 );
				parts.insertLast( PID_COPPER_WIRE ); parts.insertLast( 1 );
				parts.insertLast( PID_OHLAD_MEH ); parts.insertLast( 1 ); 
				parts.insertLast( PID_CRAFT_E_CHIP ); parts.insertLast( 1 );
				break;
			case( ITEM_SUBTYPE_WEAPON_LASER_HEAVY_RIFLE ):
				repair -= 45;
				tools.insertLast( PID_SUPER_TOOL_KIT );
				tools.insertLast( PID_SCREWDRIVER );
				tools.insertLast( PID_SOLDERER );
				parts.insertLast( PID_LINZA ); parts.insertLast( 2 );
				parts.insertLast( PID_CAPACITOR ); parts.insertLast( 1 );
				parts.insertLast( PID_MPARTS ); parts.insertLast( 4 );
				parts.insertLast( PID_BRACING ); parts.insertLast( 4 );
				parts.insertLast( PID_COPPER_WIRE ); parts.insertLast( 4 );
				parts.insertLast( PID_OHLAD_MEH ); parts.insertLast( 2 ); 
				parts.insertLast( PID_CRAFT_E_CHIP ); parts.insertLast( 2 );
				break;
			case( ITEM_SUBTYPE_WEAPON_LASER_MINIGUN ):
				repair -= 65;
				tools.insertLast( PID_SUPER_TOOL_KIT );
				tools.insertLast( PID_SCREWDRIVER );
				tools.insertLast( PID_SOLDERER );
				parts.insertLast( PID_LINZA ); parts.insertLast( 1 );
				parts.insertLast( PID_CAPACITOR ); parts.insertLast( 2 );
				parts.insertLast( PID_MPARTS ); parts.insertLast( 4 );
				parts.insertLast( PID_BRACING ); parts.insertLast( 4 );
				parts.insertLast( PID_COPPER_WIRE ); parts.insertLast( 6 );
				parts.insertLast( PID_OHLAD_MEH ); parts.insertLast( 4 ); 
				parts.insertLast( PID_CRAFT_E_CHIP ); parts.insertLast( 2 );
				break;
			case( ITEM_SUBTYPE_WEAPON_LASER_MACHINEGUN ):
				repair -= 55;
				tools.insertLast( PID_SUPER_TOOL_KIT );
				tools.insertLast( PID_SCREWDRIVER );
				tools.insertLast( PID_SOLDERER );
				parts.insertLast( PID_LINZA ); parts.insertLast( 2 );
				parts.insertLast( PID_CAPACITOR ); parts.insertLast( 1 );
				parts.insertLast( PID_MPARTS ); parts.insertLast( 4 );
				parts.insertLast( PID_BRACING ); parts.insertLast( 4 );
				parts.insertLast( PID_COPPER_WIRE ); parts.insertLast( 4 );
				parts.insertLast( PID_OHLAD_MEH ); parts.insertLast( 2 ); 
				parts.insertLast( PID_CRAFT_E_CHIP ); parts.insertLast( 2 );
				break;
			case( ITEM_SUBTYPE_WEAPON_PLASMA_PISTOL ):
				repair -= 15;
				tools.insertLast( PID_SUPER_TOOL_KIT );
				tools.insertLast( PID_SCREWDRIVER );
				tools.insertLast( PID_SOLDERER );
				parts.insertLast( PID_MPARTS ); parts.insertLast( 6 );
				parts.insertLast( PID_BRACING ); parts.insertLast( 4 );
				parts.insertLast( PID_medrest ); parts.insertLast( 1 );
				parts.insertLast( PID_EXCAVATOR_CHIP ); parts.insertLast( 2 );
				break;
			case( ITEM_SUBTYPE_WEAPON_PLASMA_RIFLE ):
				repair -= 25;
				tools.insertLast( PID_SUPER_TOOL_KIT );
				tools.insertLast( PID_SCREWDRIVER );
				tools.insertLast( PID_SOLDERER );
				parts.insertLast( PID_CAPACITOR ); parts.insertLast( 1 );
				parts.insertLast( PID_MPARTS ); parts.insertLast( 6 );
				parts.insertLast( PID_BRACING ); parts.insertLast( 4 );
				parts.insertLast( PID_medrest ); parts.insertLast( 2 );
				parts.insertLast( PID_CRAFT_E_CHIP ); parts.insertLast( 2 );
				break;
			case( ITEM_SUBTYPE_WEAPON_PLASMA_SMG ):
				repair -= 35;
				tools.insertLast( PID_SUPER_TOOL_KIT );
				tools.insertLast( PID_SCREWDRIVER );
				tools.insertLast( PID_SOLDERER );
				parts.insertLast( PID_CAPACITOR ); parts.insertLast( 1 );
				parts.insertLast( PID_MPARTS ); parts.insertLast( 6 );
				parts.insertLast( PID_BRACING ); parts.insertLast( 4 );
				parts.insertLast( PID_medrest ); parts.insertLast( 2 );
				parts.insertLast( PID_CRAFT_E_CHIP ); parts.insertLast( 2 );
				break;
			case( ITEM_SUBTYPE_WEAPON_PLASMA_SNIPER_RIFLE ):
				repair -= 45;
				tools.insertLast( PID_SUPER_TOOL_KIT );
				tools.insertLast( PID_SCREWDRIVER );
				tools.insertLast( PID_SOLDERER );
				parts.insertLast( PID_CAPACITOR ); parts.insertLast( 2 );
				parts.insertLast( PID_MPARTS ); parts.insertLast( 6 );
				parts.insertLast( PID_BRACING ); parts.insertLast( 4 );
				parts.insertLast( PID_medrest ); parts.insertLast( 2 );
				parts.insertLast( PID_CRAFT_E_CHIP ); parts.insertLast( 2 );
				break;
			case( ITEM_SUBTYPE_WEAPON_PLASMA_HEAVY_RIFLE ):
				repair -= 55;
				tools.insertLast( PID_SUPER_TOOL_KIT );
				tools.insertLast( PID_SCREWDRIVER );
				tools.insertLast( PID_SOLDERER );
				parts.insertLast( PID_CAPACITOR ); parts.insertLast( 1 );
				parts.insertLast( PID_MPARTS ); parts.insertLast( 5 );
				parts.insertLast( PID_BRACING ); parts.insertLast( 2 );
				parts.insertLast( PID_medrest ); parts.insertLast( 2 );
				parts.insertLast( PID_blstrBM ); parts.insertLast( 1 );
				parts.insertLast( PID_CRAFT_E_CHIP ); parts.insertLast( 2 );
				parts.insertLast( PID_WEAPON_PARTS ); parts.insertLast( 2 );
				break;
			case( ITEM_SUBTYPE_WEAPON_PLASMA_MINIGUN ):
				repair -= 75;
				tools.insertLast( PID_SUPER_TOOL_KIT );
				tools.insertLast( PID_SCREWDRIVER );
				tools.insertLast( PID_SOLDERER );
				parts.insertLast( PID_CAPACITOR ); parts.insertLast( 2 );
				parts.insertLast( PID_MPARTS ); parts.insertLast( 5 );
				parts.insertLast( PID_BRACING ); parts.insertLast( 6 );
				parts.insertLast( PID_medrest ); parts.insertLast( 2 );
				parts.insertLast( PID_blstrBM ); parts.insertLast( 1 );
				parts.insertLast( PID_CRAFT_E_CHIP ); parts.insertLast( 2 );
				parts.insertLast( PID_WEAPON_PARTS ); parts.insertLast( 2 );
				break;
			case( ITEM_SUBTYPE_WEAPON_PULSE_PISTOL ):
				repair -= 25;
				tools.insertLast( PID_SUPER_TOOL_KIT );
				tools.insertLast( PID_SCREWDRIVER );
				tools.insertLast( PID_SOLDERER );
				parts.insertLast( PID_MPARTS ); parts.insertLast( 4 );
				parts.insertLast( PID_BRACING ); parts.insertLast( 2 );
				parts.insertLast( PID_COPPER_WIRE ); parts.insertLast( 2 );
				parts.insertLast( PID_OHLAD_MEH ); parts.insertLast( 1 ); 
				parts.insertLast( PID_EXCAVATOR_CHIP ); parts.insertLast( 1 );
				break;
			case( ITEM_SUBTYPE_WEAPON_PULSE_RIFLE ):
				repair -= 45;
				tools.insertLast( PID_SUPER_TOOL_KIT );
				tools.insertLast( PID_SCREWDRIVER );
				tools.insertLast( PID_SOLDERER );
				parts.insertLast( PID_MPARTS ); parts.insertLast( 4 );
				parts.insertLast( PID_BRACING ); parts.insertLast( 2 );
				parts.insertLast( PID_COPPER_WIRE ); parts.insertLast( 4 );
				parts.insertLast( PID_OHLAD_MEH ); parts.insertLast( 1 );
				parts.insertLast( PID_CAPACITOR ); parts.insertLast( 1 ); 
				parts.insertLast( PID_CRAFT_E_CHIP ); parts.insertLast( 1 );
				break;
			case( ITEM_SUBTYPE_WEAPON_PULSE_SMG ):
				repair -= 35;
				tools.insertLast( PID_SUPER_TOOL_KIT );
				tools.insertLast( PID_SCREWDRIVER );
				tools.insertLast( PID_SOLDERER );
				parts.insertLast( PID_MPARTS ); parts.insertLast( 4 );
				parts.insertLast( PID_BRACING ); parts.insertLast( 2 );
				parts.insertLast( PID_COPPER_WIRE ); parts.insertLast( 4 );
				parts.insertLast( PID_OHLAD_MEH ); parts.insertLast( 2 );
				parts.insertLast( PID_CAPACITOR ); parts.insertLast( 1 ); 
				parts.insertLast( PID_CRAFT_E_CHIP ); parts.insertLast( 1 );
				break;
			case( ITEM_SUBTYPE_WEAPON_PULSE_SNIPER_RIFLE ):
				repair -= 45;
				tools.insertLast( PID_SUPER_TOOL_KIT );
				tools.insertLast( PID_SCREWDRIVER );
				tools.insertLast( PID_SOLDERER );
				parts.insertLast( PID_MPARTS ); parts.insertLast( 4 );
				parts.insertLast( PID_BRACING ); parts.insertLast( 2 );
				parts.insertLast( PID_COPPER_WIRE ); parts.insertLast( 4 );
				parts.insertLast( PID_OHLAD_MEH ); parts.insertLast( 1 );
				parts.insertLast( PID_CAPACITOR ); parts.insertLast( 2 ); 
				parts.insertLast( PID_CRAFT_E_CHIP ); parts.insertLast( 1 );
				break;
			case( ITEM_SUBTYPE_WEAPON_PULSE_SHOTGUN ):
				repair -= 35;
				tools.insertLast( PID_SUPER_TOOL_KIT );
				tools.insertLast( PID_SCREWDRIVER );
				tools.insertLast( PID_SOLDERER );
				parts.insertLast( PID_MPARTS ); parts.insertLast( 6 );
				parts.insertLast( PID_BRACING ); parts.insertLast( 4 );
				parts.insertLast( PID_COPPER_WIRE ); parts.insertLast( 3 );
				parts.insertLast( PID_OHLAD_MEH ); parts.insertLast( 1 );
				parts.insertLast( PID_CAPACITOR ); parts.insertLast( 2 ); 
				parts.insertLast( PID_CRAFT_E_CHIP ); parts.insertLast( 1 );
				break;
			case( ITEM_SUBTYPE_WEAPON_PULSE_MINIGUN ):
				repair -= 75;
				tools.insertLast( PID_SUPER_TOOL_KIT );
				tools.insertLast( PID_SCREWDRIVER );
				tools.insertLast( PID_SOLDERER );
				parts.insertLast( PID_MPARTS ); parts.insertLast( 6 );
				parts.insertLast( PID_CRAFT_M_STEL ); parts.insertLast( 2 );
				parts.insertLast( PID_BRACING ); parts.insertLast( 4 );
				parts.insertLast( PID_COPPER_WIRE ); parts.insertLast( 6 );
				parts.insertLast( PID_OHLAD_MEH ); parts.insertLast( 4 );
				parts.insertLast( PID_CAPACITOR ); parts.insertLast( 2 ); 
				parts.insertLast( PID_CRAFT_E_CHIP ); parts.insertLast( 2 );
				break;
			case( ITEM_SUBTYPE_WEAPON_SONIC_PISTOL ):
				repair -= 25;
				tools.insertLast( PID_SUPER_TOOL_KIT );
				tools.insertLast( PID_SCREWDRIVER );
				tools.insertLast( PID_SOLDERER );
				parts.insertLast( PID_CRAFT_E_LAMP ); parts.insertLast( 2 );
				parts.insertLast( PID_MPARTS ); parts.insertLast( 3 );
				parts.insertLast( PID_BRACING ); parts.insertLast( 3 );
				parts.insertLast( PID_EXCAVATOR_CHIP ); parts.insertLast( 2 );
				break;
			case( ITEM_SUBTYPE_WEAPON_SONIC_RIFLE ):
				repair -= 35;
				tools.insertLast( PID_SUPER_TOOL_KIT );
				tools.insertLast( PID_SCREWDRIVER );
				tools.insertLast( PID_SOLDERER );
				parts.insertLast( PID_CRAFT_E_LAMP ); parts.insertLast( 4 );
				parts.insertLast( PID_MPARTS ); parts.insertLast( 6 );
				parts.insertLast( PID_BRACING ); parts.insertLast( 5 );
				parts.insertLast( PID_EXCAVATOR_CHIP ); parts.insertLast( 3 );
				break;
			case( ITEM_SUBTYPE_WEAPON_MELEE_KNIFE ): {
				if( hasAmmo ) {
					repair -= 20;
					tools.insertLast( PID_MULTI_TOOL );
					tools.insertLast( PID_SCREWDRIVER );
					tools.insertLast( PID_SOLDERER );
					parts.insertLast( PID_CRAFT_M_BARS ); parts.insertLast( 3 );
					parts.insertLast( PID_COPPER_WIRE ); parts.insertLast( 2 );
					parts.insertLast( PID_MPARTS ); parts.insertLast( 3 );
					break;
				} else {
					cr.Say( SAY_NETMSG, "|0xFFFF00 Не ремонтируемо" ); 
					break;
				}
			}
			case( ITEM_SUBTYPE_WEAPON_MELEE_LONG_KNIFE ): {
				if( hasAmmo ) {
					repair -= 15;
					tools.insertLast( PID_MULTI_TOOL );
					tools.insertLast( PID_SCREWDRIVER );
					tools.insertLast( PID_SOLDERER );
					parts.insertLast( PID_CRAFT_M_BARS ); parts.insertLast( 3 );
					parts.insertLast( PID_COPPER_WIRE ); parts.insertLast( 2 );
					parts.insertLast( PID_MPARTS ); parts.insertLast( 3 );
					break;
				} else {
					cr.Say( SAY_NETMSG, "|0xFFFF00 Не ремонтируемо" ); 
					break;
				}
			}
			case( ITEM_SUBTYPE_WEAPON_MELEE_SPEAR ): {
				if( hasAmmo ) {
					repair -= 35;
					tools.insertLast( PID_MULTI_TOOL );
					tools.insertLast( PID_SCREWDRIVER );
					tools.insertLast( PID_SOLDERER );
					parts.insertLast( PID_CRAFT_M_BARS ); parts.insertLast( 3 );
					parts.insertLast( PID_EXCAVATOR_CHIP ); parts.insertLast( 1 );
					parts.insertLast( PID_COPPER_WIRE ); parts.insertLast( 2 );
					parts.insertLast( PID_MPARTS ); parts.insertLast( 3 );
					break;
				} else {
					cr.Say( SAY_NETMSG, "|0xFFFF00 Не ремонтируемо" ); 
					break;
				}
			}
			case( ITEM_SUBTYPE_WEAPON_MELEE_HAMMER ): {
				if( hasAmmo ) {
					repair -= 45;
					tools.insertLast( PID_MULTI_TOOL );
					tools.insertLast( PID_SCREWDRIVER );
					tools.insertLast( PID_SOLDERER );
					parts.insertLast( PID_CRAFT_M_BARS ); parts.insertLast( 3 );
					parts.insertLast( PID_COPPER_WIRE ); parts.insertLast( 2 );
					parts.insertLast( PID_MPARTS ); parts.insertLast( 3 );
					break;
				} else {
					cr.Say( SAY_NETMSG, "|0xFFFF00 Не ремонтируемо" ); 
					break;
				}
			}
			case( ITEM_SUBTYPE_WEAPON_MELEE_GLOVE ): {		
				if( hasAmmo ) {
					repair -= 25;
					tools.insertLast( PID_MULTI_TOOL );
					tools.insertLast( PID_SCREWDRIVER );
					tools.insertLast( PID_SOLDERER );
					parts.insertLast( PID_CRAFT_M_BARS ); parts.insertLast( 3 );
					parts.insertLast( PID_MPARTS ); parts.insertLast( 4 );
					parts.insertLast( PID_COPPER_WIRE ); parts.insertLast( 2 );
					break;
				} else {
					cr.Say( SAY_NETMSG, "|0xFFFF00 Не ремонтируемо" ); 
					break;
				}
			}
			case( ITEM_SUBTYPE_WEAPON_MELEE_CLUB ): {
				if( hasAmmo ) {
					repair -= 25;
					tools.insertLast( PID_MULTI_TOOL );
					tools.insertLast( PID_SCREWDRIVER );
					tools.insertLast( PID_SOLDERER );
					parts.insertLast( PID_CRAFT_M_BARS ); parts.insertLast( 3 );
					parts.insertLast( PID_COPPER_WIRE ); parts.insertLast( 2 );
					parts.insertLast( PID_MPARTS ); parts.insertLast( 3 );
					break;
				} else {
					cr.Say( SAY_NETMSG, "|0xFFFF00 Не ремонтируемо" ); 
					break;
				}
			}
			default:
				cr.Say( SAY_NETMSG, "|0xFFFF0 Не ремонтируемо" ); 
				return true;
		}
    }

	if ( tools.length() > 0 || parts.length() > 0 ) {
		bool NoTools = false;
		bool NoParts = false;

		for( uint8 j = 0; j < tools.length(); j++ ) {
			if( cr.CountItem( tools[j] ) == 0 ) { 
				NoTools = true; 
			}
		}
		
		for( uint8 jj = 0; jj < parts.length(); jj += 2 ) {
			if( cr.CountItem( parts[jj] ) < parts[jj + 1] ) { 
				NoParts = true;
			}
		}
		
		if ( NoTools || NoParts ) {
			if( tools.length() > 0 ) {
				string workTool = "Необходимый инструмент: \n" ;
				for( uint8 i = 0; i < tools.length(); i++ )
				{
					workTool += " - ";
					workTool += "|0xFFFF00 " + _GetProtoName( tools[i] );
					workTool += "|0x3CF800 ,\n";
				}	
				workTool[ workTool.length() - 2 ] = '.';
				workTool[ workTool.length() - 1 ] = ' ';
				cr.Say( SAY_NETMSG, workTool );
			}
			
			if( parts.length() > 0 ) {
				string part = "Требуемые части для ремонта: \n" ;
				for( uint8 ii = 0; ii < parts.length(); ii += 2 )
				{
					part += " - ";
					part += "|0xFFFF00 " + _GetProtoName( parts[ii] );
					part += "|0x3CF800  - ";
					part += "|0xFFFF00 " + parts[ii + 1];
					part += "|0x3CF800  шт.,\n";
				}	
				part[ part.length() - 2 ] = ' ';
				part[ part.length() - 1 ] = ' ';
				cr.Say( SAY_NETMSG, part );
			}
			return true;
		} else {
			for( uint8 iii = 0; iii < parts.length(); iii += 2 ) {
				cr.DeleteItem( parts[iii], parts[iii + 1] );
			}
			
			Item@ hands = cr.GetItem( 0, SLOT_HAND1 );
			if( valid( hands ) ) {
				cr.MoveItem( hands.Id, hands.GetCount(), SLOT_INV );
			}
			cr.MoveItem( item.Id, item.GetCount(), SLOT_HAND1 );

			start_repair( cr, item, repair );
		}
	}
    return true;
}

bool ltp_repair_inited = false;
void ltp_repair_init()
{
	LTPREG( LTP_REPAIR, process_repair )
	ltp_repair_inited = true;
}

bool start_repair( Critter& cr, Item& item, int repair )
{
	if( !ltp_repair_inited ) 
		ltp_repair_init();
	
	uint hit_pause = ACTION_PAUSE_BASE - (cr.Stat[ST_AGILITY] * ACTION_PAUSE_BONUS_RATE );
	uint action_pause = CLAMP( hit_pause, ACTION_PAUSE_MIN, ACTION_PAUSE_MAX );
	uint[] values = { cr.Id };
	
	CreateTimeEvent( AFTER( REAL_MS( 700 ) ), "e_RepairSound", values, true);
	CreateTimeEvent( AFTER( REAL_MS( 1000 ) ), "gathering@e_TiredenessTimeout", values, true);
	
	_CritAnimateUse( cr );
	
	StartProcess( cr, LTP_REPAIR, 0, repair, item.Id, action_pause );
	return true;
}

uint process_repair( Critter@ cr, int& param0, int& param1, int& param2 )
{
	LTPROCESS( cr, param0, LTP_REPAIR )
	
	uint hit_pause = ACTION_PAUSE_BASE - ( cr.Stat[ST_AGILITY] * ACTION_PAUSE_BONUS_RATE );
	uint action_pause = CLAMP( hit_pause, ACTION_PAUSE_MIN, ACTION_PAUSE_MAX );
  	
	int repair = param1;
	Item@ item = GetItem( param2 );
	
	if( valid( item ) )
    {
		param0++;
		
		uint repair_rate = ( cr.Skill[SK_REPAIR] ) + ( cr.Stat[ST_AGILITY] * 10 ) + ( cr.Stat[ST_INTELLECT] * 10 ) + OBJECT_DPA_BASE; 
		int sequence_length = ceil( float( ( item.Deterioration ) / ( CLAMP( repair_rate, OBJECT_DPA_MIN, OBJECT_DPA_MAX ) ) ) );
		
		if( param0 > sequence_length )
		{
			cr.Say( SAY_EMOTE_ON_HEAD, "завершает работу" );
			RepairResult( cr, item, repair );
			
			if( item.GetType() == ITEM_TYPE_WEAPON && item.Proto.Weapon_MaxAmmoCount > 0 ) {
			uint ammoCount = item.AmmoCount;
		
				if( ammoCount > 0 ) {
					int skillNum = SK_REPAIR;
					Accident( cr, skillNum ); 
				}
			}
			return 0;
		}
		
		uint[] values = { cr.Id };
		CreateTimeEvent( AFTER( REAL_MS( 700 ) ), "e_RepairSound", values, true);
		CreateTimeEvent( AFTER( REAL_MS( 1000 ) ), "gathering@e_TiredenessTimeout", values, true);
		
		_CritAnimateUse( cr );
		
		return action_pause;
	}
	return 0;
}

void RepairResult( Critter& cr, Item& item, int repair )
{
	if( FLAG( item.BrokenFlags, BI_BROKEN ) ) {
		
        if( FLAG( item.BrokenFlags, BI_HIGHBROKEN ) ) {
            repair -= 100;
        } else if( FLAG( item.BrokenFlags, BI_NORMBROKEN ) ) {
            repair -= 75;
		} else if( FLAG( item.BrokenFlags, BI_LOWBROKEN ) ) {
            repair -= 25;
		}
		
        repair -= item.BrokenCount * 50 / MAX_BROKENS;
        repair = CLAMP( repair, 5, 95 );

        if( repair >= Random( 1, 100 ) ) {
            item.Deterioration = 0;
            UNSETFLAG( item.BrokenFlags, BI_BROKEN );
            cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_DETERIORATION_REPAIR_SUCC );
            cr.StatBase[ ST_EXPERIENCE ] += 40;
        
		} else {
            item.BrokenCount++;
            if( item.BrokenCount >= MAX_BROKENS ) {
                SETFLAG( item.BrokenFlags, BI_NOTRESC );
			}
            cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_DETERIORATION_REPAIR_FAIL );
        }
    } else {    // Service
        
		if( FLAG( item.BrokenFlags, BI_SERVICE ) ) {
            repair -= 25;
		}
		
        repair -= item.BrokenCount * 50 / MAX_BROKENS;
        repair = CLAMP( repair, 6, 95 );

        if( repair >= Random( 1, 100 ) ) {
            SETFLAG( item.BrokenFlags, BI_SERVICE );
           
			int cnt = repair * MAX_DETERIORATION / 100;
			if( cnt > item.Deterioration ) {
				item.Deterioration = 0;
			} else {
				item.Deterioration -= cnt;
			}
			
            cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_DETERIORATION_SERVICE_SUCC );
            cr.StatBase[ ST_EXPERIENCE ] += 20;
			
        } else {
            DeteriorateItem( cr, item, MAX_DETERIORATION / 5 );
            cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_DETERIORATION_SERVICE_FAIL );
        }
    }
    item.Update();
}

void DeteriorateItem( Critter& cr, Item& item, int deteriorationCount ) // Export
{
    if( deteriorationCount <= 0 || not item.IsDeteriorable() || FLAG( item.BrokenFlags, BI_ETERNAL ) || FLAG( item.BrokenFlags, BI_BROKEN ) ) { return; }

    item.Deterioration += deteriorationCount;
    if( item.Deterioration >= MAX_DETERIORATION ) {
        item.Deterioration = MAX_DETERIORATION;
        cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_DETERIORATION_WEAPON_BROKEN );
    }

    item.Update();
}

void SetDeterioration( Item& item, int deteriorationProcent ) // Export
{
    if( not item.IsDeteriorable() ) { return; }
	
    UNSETFLAG( item.BrokenFlags, BI_BROKEN );
    deteriorationProcent = CLAMP( deteriorationProcent, 0, 100 );
    item.Deterioration = MAX_DETERIORATION * deteriorationProcent / 100;
    item.BrokenCount = MAX_BROKENS * deteriorationProcent / 100;
    
	if( deteriorationProcent == 100 ) {
        SETFLAG( item.BrokenFlags, BI_BROKEN );
	}
	
    item.Update();
}

int GetDeteriorationProcent( Item& item ) // Export
{
    if( not item.IsDeteriorable() ) { return 0; }
	
    if( FLAG( item.BrokenFlags, BI_BROKEN ) ) { return 100; }
	
    int value = item.Deterioration * 100 / MAX_DETERIORATION;
    return CLAMP( value, 0, 100 );
}

bool AskAction( Critter& cr, Item& item ) //exported
{
	uint type = item.GetType();
	
	cr.ParamBase[CR_VAL0] = item.Id;
	
	uint[] inspectable = { ITEM_TYPE_ARMOR, ITEM_TYPE_WEAPON, ITEM_TYPE_AMMO };
	
	string[] data = { "repair@answer_Action", "Выберите действие:", "Починить", "Разобрать" };
	if( inspectable.find( type ) != -1 )
	{
		data.insertLast( "Сделать чертеж" );
		if( isGM( cr ) )
		{
			data.insertLast( "Список чертежей" );
		}
	}
	
	DIALOG_MENU( cr, data );
	return true;
}

void answer_Action( Critter& cr, uint answerI, string& answerS )
{
	Item@ item = GetItem( cr.Param[CR_VAL0] );
	if( !valid( item ) ) return;
	
	switch( answerI )
	{
		case(0): TryRepairItem( cr, item ); break;
		case(1): TryDisassembleItem( cr, item ); break;
		case(2): TryMakeBlueprint( cr, item ); break;
		case(3): EnlistBlueprints( cr ); break;
		default: cr.Say( SAY_NETMSG, "|0xFFFF00 Из этого ничего не вышло." ); break;
	}
}

class Blueprint
{
	uint original;
	uint pid;
	//TODO: Уникальную сложность для разных чертежей.
	uint difficulty;
	
	Blueprint( uint original, uint pid, uint difficulty = 300 )
	{
		this.original = original;
		this.pid = pid;
		this.difficulty = difficulty;
	}
	
	string info()
	{
		//return "Blueprint [" + pid + "] of #" + original + " diff " + difficulty + "%";
		return "Чертеж [" + pid + "] объекта №" + original + " сложности " + difficulty + "%";
	}
	
	bool check( Critter& cr, Item& item )
	{
		if( item.GetProtoId() == original )
		{
			bool success = false;
			if( Random( 0, difficulty ) <= cr.Skill[SK_SCIENCE] )
			{
				cr.Say( SAY_NETMSG, "|0xFFFF00 Вы смогли сделать чертёж предмета." );
				cr.AddItem( pid, 1 );
				success = true;
			}
			else
			{
				cr.Say( SAY_NETMSG, "|0xFFFF00 Вы не смогли сделать чертёж предмета, вам нужно переварить информацию в течении суток." );
			}
			
			if( cr.ParamBase[ CR_JETTED ] == 0 ) {			
				cr.AddTimeEvent( "cte_tired", 0, CTE_TIRED, 5 );
			}
			
			if( Random( 0, 300 ) <= cr.Skill[SK_REPAIR] )
			{
				cr.Say( SAY_NETMSG, "|0xFFFF00 В ходе работы вы успешно пересобрали исследуемый предмет заного." );
			}
			else
			{
				cr.Say( SAY_NETMSG, "|0xFFFF00 В ходе работы вы сломали исследуемый предмет" + ( success ? ", но оно того стоило!" : "." ) );
				_SubItem( item, 1 );
			}
			
			return true;
		}
		
		return false;
	}
}

uint cte_tired( Critter& cr, int identifier, uint& rate )
{
	rate--;
	if( rate >= 0 || rate < 255 ) //hotfixed
		return GAME_HOUR(1);
	
	return 0;
}

	// ЧЕРТЕЖИ //

Blueprints@ blueprints;
void InitBlueprints()
{
	if( valid( blueprints ) ) return;

	@blueprints = CreateBlueprints()
		.add( PID_10MM_PISTOL, PID_BP_COLT6520, 250 )
		.add( PID_9MM_MAUSER, PID_BP_MOUSER, 250 )
		.add( PID_44_MAGNUM_REVOLVER, PID_BP_45REVOLVER, 250 )
		.add( PID_14MM_PISTOL, PID_BP_SIG14MM, 300 )
		.add( PID_DESERT_EAGLE, PID_BP_DEAGLE, 250 )
		.add( PID_COLT1911, PID_BP_COLT1911, 250 )
		.add( PID_ANACONDA, PID_BP_ANACONDA, 250 )
		.add( PID_NEEDLER_PISTOL, PID_BP_INJECTOR, 350 )
		.add( PID_PK12_GAUSS_PISTOL, PID_BP_GAUSSPIS, 500 )
		.add( PID_223_PISTOL, PID_BP_223PISTOL, 350 )
		.add( PID_10MM_SMG, PID_BP_SMG10MM, 250 )
		.add( PID_GREASE_GUN, PID_BP_GGUN, 250 )
		.add( PID_HK_P90C, PID_BP_P90, 350 )
		.add( PID_HK_G11, PID_BP_G11, 450 )
		.add( PID_HUNTING_RIFLE, PID_BP_HUNTING, 250 )
		.add( PID_XL70E3, PID_BP_XL5MM, 450 )
		.add( PID_SNIPER_RIFLE, PID_BP_SNIPER223, 400 )
		.add( PID_ASSAULT_RIFLE, PID_BP_AK112, 350 )
		.add( PID_FN_FAL, PID_BP_FNFL, 450 )
		.add( PID_TOMMY_GUN, PID_BP_TOMMYGUN, 350 )
		.add( PID_M72_GAUSS_RIFLE, PID_BP_GAUSSGUN, 550 )
		.add( PID_SHOTGUN, PID_BP_DOUBLESHOTGUN, 250 )
		.add( PID_COMBAT_SHOTGUN, PID_BP_COMBSHOTGUN, 350 )
		.add( PID_HK_CAWS, PID_BP_CAWS, 450 )
		.add( PID_PANCOR_JACKHAMMER, PID_BP_JHUMMER, 450 )
		.add( PID_REMINGTON, PID_BP_REMINGTON870, 350 )
		.add( PID_LASER_PISTOL, PID_BP_LASPIST, 250 )
		.add( PID_PLASMA_PISTOL, PID_BP_PLASPIST, 300 )
		.add( PID_YK32_PULSE_PISTOL, PID_BP_PULSEPIST, 350 )
		.add( PID_LASER_RIFLE, PID_BP_LASRIFLE, 350 )
		.add( PID_PLASMA_RIFLE, PID_BP_PLASRIFLE, 400 )
		.add( PID_YK42B_PULSE_RIFLE, PID_BP_PULSERIFLE, 450 )
		.add( PID_GATLING_LASER, PID_BP_GATLING, 550 )
		.add( PID_SOUND_BLASTER, PID_BP_AUCUSTIC, 350 )
		.add( PID_FLAMER, PID_BP_FLAMER, 250 )
		.add( PID_IMPROVED_FLAMETHROWER, PID_BP_FLAMER, 300 )
		.add( PID_MINIGUN, PID_BP_MINIGUN, 300 )
		.add( PID_ROCKET_LAUNCHER, PID_BP_BAZOOKA, 450 )
		.add( PID_VINDICATOR_MINIGUN, PID_BP_VINDICATOR, 450 )
		.add( PID_M60, PID_BP_M60, 350 )
		.add( PID_LIGHT_SUPPORT_WEAPON, PID_BP_LSW, 350 )
		.add( PID_BOZAR, PID_BP_BOZAR, 450 )
		.add( PID_3GUN_LOW, PID_BP_AUTOCANNON, 300 )
		.add( PID_GRENADELAUNCHER, PID_BP_M32,  450 )
		.add( PID_CATTLE_PROD, PID_BP_SHOCKER, 300 )
		.add( PID_POWER_FIST, PID_BP_PFIST, 350 )
		.add( PID_SUPER_SLEDGE, PID_BP_SSLEDGE, 250 )
		.add( PID_RIPPER, PID_BP_RIPPER, 350 )
		.add( PID_FRAG_GRENADE, PID_BP_FRAG_GRENADE, 300 )
		.add( PID_PLASMA_GRENADE, PID_BP_PLAS_GRENADE, 350 )
		.add( PID_PULSE_GRENADE, PID_BP_EMP_GRENADE, 350 )
		.add( PID_GRENADELAUNCHER_AMMO, PID_BP_40MM, 300 )
		.add( PID_EXPLOSIVE_ROCKET, PID_BP_FRAGMIS, 300 )
		.add( PID_ROCKET_AP, PID_BP_KRAKMIS, 350 )
		.add( PID_4_7MM_CASELESS, PID_BP_CASELESS, 400 )
		.add( PID_2MM_EC_AMMO, PID_BP_GAUSAMMO, 400 )
		.add( PID_MICRO_FUSION_CELL, PID_BP_FREACTOR, 400 )
		.add( PID_HOUND_ARMOR, PID_BP_HOUND_ARMOR, 350 )
		.add( PID_DEFIB, PID_BP_DEFIB, 350 )
		.add( PID_hndcrclr, PID_BP_HAND_SAW, 250 )
		.add( PID_plsmprot, PID_BP_EMP_PROBOINIK , 500 )
		.add( PID_DOMINION_ROBUR, PID_BP_DOMINION_ROBUR, 500 )
		.add( PID_DOMINION_LATENS, PID_BP_DOMINION_LATENS, 350 )
		.add( PID_FPRESS, PID_BP_FPRESS, 350 )
		.add( PID_CENTRF, PID_BP_CENTRF, 450 )	
	;
}

Blueprints@ CreateBlueprints()
{
	return Blueprints();
}

class Blueprints
{
	Blueprint[] list;
	
	Blueprints@ add( uint original, uint pid, uint difficulty = 300 )
	{
		return this.add( Blueprint( original, pid, difficulty ) );
	}
	
	Blueprints@ add( Blueprint@ item )
	{
		list.insertLast( item );
		return this;
	}
	
	bool check( Critter& cr, Item& item )
	{
		uint[] rates;
		if( cr.GetTimeEvents( CTE_TIRED, null, null, rates ) > 0 )
		{
			uint timeleft = 0;
			if( rates.length() > 0 ) 
				timeleft = rates[0];
				
			if( timeleft > 255 )
			{
				cr.EraseTimeEvents( CTE_TIRED );
				timeleft = 0;
			}
			
			cr.Say( SAY_NETMSG, "Вы ещё не отдохнули до конца после прошлого раза. " + ( timeleft > 0 ? "Осталось около " + timeleft + " часов." : "Ещё немного отдыха - и можно вернуться за работу." ) );
			return true;
		}
		
		for( uint i = 0; i < list.length(); i++ )
		{
			if( list[i].check( cr, item ) ) return true;
		}
		
		cr.Say( SAY_NETMSG, "Вы не смогли сделать чертёж этого предмета." );
		return false;
	}
	
	bool info( Critter& cr )
	{
		cr.Say( SAY_NETMSG, "Список доступных чертежей:" );
		for( uint i = 0; i < list.length(); i++ )
		{
			cr.Say( SAY_NETMSG, i + ") " + list[i].info() );
		}
		return true;
	}
}


bool TryMakeBlueprint( Critter& cr, Item& item )
{
	InitBlueprints();
	
	return blueprints.check( cr, item );
}

bool EnlistBlueprints( Critter& cr )
{
	InitBlueprints();
	
	return blueprints.info( cr );
}


//ДЕКРАФТ//
bool TryDisassembleItem( Critter& cr, Item& item ) // Export
{
	if( IsTired( cr ) ) { return false; }
	if( cr.IsInjured() ) { 
		cr.Say( SAY_NETMSG, "|0xFF0000 Вы травмированы и не в состоянии разобрать предмет." );
		return false; 
	}
	
	bool isItemPartable = true;
	uint16 Pid = item.GetProtoId();
	uint8 Item_Subtype = item.Proto.Item_Subtype;
	bool hasAmmo = ( item.Proto.Weapon_MaxAmmoCount != 0 );
	
	
	uint16 repair = 0;
	uint16 science = 0;

	uint16[] tools;
	uint16[] parts;
	
    switch( Pid )
    {
		case PID_SINGLE_SANDBAG:
			parts.insertLast( PID_SANDBAG_EMPTY ); parts.insertLast( 1 ); 
			break;
		case PID_OLD_JACKET:
			tools.insertLast( PID_KNIFE );
			parts.insertLast( PID_CRAFT_L_HIDE ); parts.insertLast( 2 );
			parts.insertLast( PID_MEDTHREAD ); parts.insertLast( 1 ); 
			break;
		case PID_CHAIN:
			tools.insertLast( PID_MULTI_TOOL );
			parts.insertLast( PID_CRAFT_M_BARS ); parts.insertLast( 2 ); 
			break;
		case PID_IMPOVISED_TRAP:
			tools.insertLast( PID_MULTI_TOOL );
			parts.insertLast( PID_FRAG_GRENADE ); parts.insertLast( 1 ); 
			break;
		case PID_IMPOVISED_TRAP_PLASMA:
			tools.insertLast( PID_MULTI_TOOL );
			parts.insertLast( PID_PLASMA_GRENADE ); parts.insertLast( 1 ); 
			break;
		case PID_IMPOVISED_TRAP_PULSE:
			tools.insertLast( PID_MULTI_TOOL );
			parts.insertLast( PID_PULSE_GRENADE ); parts.insertLast( 1 ); 
			break;
		case PID_MINE:
			tools.insertLast( PID_MULTI_TOOL );
			parts.insertLast( PID_CRAFT_M_BARS ); parts.insertLast( 3 );
			parts.insertLast( PID_TNT ); parts.insertLast( 2 ); 
			break;	
		case PID_TRAP_DEACTIVATED:
			tools.insertLast( PID_MULTI_TOOL ); 
			parts.insertLast( PID_CRAFT_M_BARS ); parts.insertLast( 2 ); 
			parts.insertLast( PID_HLAM_MEH ); parts.insertLast( 2 );
			parts.insertLast( PID_SPIKE_MEH ); parts.insertLast( 6 ); 
			break;	
		case PID_REVKNIFE1:
		case PID_REVKNIFE2:
			tools.insertLast( PID_MULTI_TOOL ); 
			parts.insertLast( PID_CRAFT_M_BARS ); parts.insertLast( 1 );  
			break;
		case PID_CAMO_01:
		case PID_CAMO_02:
		case PID_CAMO_03:
		case PID_CAMO_04:
		case PID_CAMO_05:
		case PID_CAMO_06:
		case PID_CAMO_07:
		case PID_CAMO_08:
		case PID_CAMO_09:
		case PID_CAMO_10:
		case PID_CAMO_11:
		case PID_CAMO_12:
		case PID_CAMO_13:
		case PID_CAMO_14:
		case PID_CAMO_15:
		case PID_CAMO_16:
			tools.insertLast( PID_SHOVEL );
			parts.insertLast( PID_SAND ); parts.insertLast( 1 );  
			break;
		case PID_CAMO_17:
		case PID_CAMO_18:
		case PID_CAMO_19:
			tools.insertLast( PID_SHOVEL );
			parts.insertLast( PID_SAND ); parts.insertLast( 2 );  
			break;
		case PID_KEY_BUNCH:
		case PID_HOLODISK:
		case PID_HANDWRITINGS:
		case PID_PASSPORT:
		case PID_PAPERS_JAMMED:
		case PID_CRAFT_RECIPES:
			tools.insertLast( PID_KNIFE ); 
			parts.insertLast( PID_CRAFT_L_LINT ); parts.insertLast( 2 );  
			break;
		case PID_IRON_DETALS:
			tools.insertLast( PID_MULTI_TOOL ); 
			parts.insertLast( PID_HLAM_MEH ); parts.insertLast( 1 );  
			break;
		case PID_KNIFE:
			tools.insertLast( PID_MULTI_TOOL ); 
			parts.insertLast( PID_CRAFT_M_BARS ); parts.insertLast( 2 ); 
			break;
		case PID_LOCKER_LOW:
			tools.insertLast( PID_MULTI_TOOL ); 
			parts.insertLast( PID_CRAFT_M_BARS ); parts.insertLast( 3 ); 
			break;
		case PID_LOCKER_MED:
			tools.insertLast( PID_MULTI_TOOL ); 
			parts.insertLast( PID_CRAFT_M_BARS ); parts.insertLast( 5 ); 
			break;
		case PID_LOCKER_HARD:
			tools.insertLast( PID_MULTI_TOOL ); 
			parts.insertLast( PID_CRAFT_M_BARS ); parts.insertLast( 10 ); 
			break;
		case PID_SPEARTHROWER1:
		case PID_SPEARTHROWER2:
			tools.insertLast( PID_MULTI_TOOL ); 
			parts.insertLast( PID_CRAFT_M_BARS ); parts.insertLast( 3 );
			parts.insertLast( PID_CRAFT_M_JUNK ); parts.insertLast( 3 );  
			break;
		case PID_FLARE:
			tools.insertLast( PID_MULTI_TOOL ); 
			parts.insertLast( PID_SHORT_TUBE ); parts.insertLast( 1 );
			parts.insertLast( PID_CRAFT_L_LINT ); parts.insertLast( 1 );
			break;
		case PID_OHLAD_MEH: 
		case PID_DETAL_MEH: 
			tools.insertLast( PID_MULTI_TOOL ); 
			parts.insertLast( PID_CRAFT_M_BARS ); parts.insertLast( 1 );
			parts.insertLast( PID_CRAFT_M_JUNK ); parts.insertLast( 1 );  
			break;
		case PID_ELECTO_MEH: 
		case PID_EMKOCT_MEH: 
		case PID_DVIGAT_MEH: 
		case PID_SOED_MEH: 
			tools.insertLast( PID_MULTI_TOOL ); 
			parts.insertLast( PID_CRAFT_M_BARS ); parts.insertLast( 1 );
			parts.insertLast( PID_CRAFT_M_JUNK ); parts.insertLast( 1 );  
			break;
		case PID_CRAFT_M_STEL:
		case PID_PERED_MEH:	
			tools.insertLast( PID_MULTI_TOOL ); 
			parts.insertLast( PID_CRAFT_M_BARS ); parts.insertLast( 1 );
			parts.insertLast( PID_CRAFT_M_JUNK ); parts.insertLast( 1 );  
			break;
		case PID_BANKA_MEH: 
			tools.insertLast( PID_MULTI_TOOL ); 
			parts.insertLast( PID_HLAM_MEH ); parts.insertLast( 1 );  
			break;
		case PID_CRAFT_L_HIDE: tools.insertLast( PID_KNIFE ); 
			tools.insertLast( PID_THROWING_KNIFE ); 
			tools.insertLast( PID_SWITCHBLADE ); 
			tools.insertLast( PID_COMBAT_KNIFE ); 
			tools.insertLast( PID_REVKNIFE2 );
			parts.insertLast( PID_CRAFT_L_RAGS ); parts.insertLast( 4 );  
			break;
		case PID_CRAFT_L_RAGS: 
			tools.insertLast( PID_KNIFE ); 
			tools.insertLast( PID_THROWING_KNIFE ); 
			tools.insertLast( PID_SWITCHBLADE ); 
			tools.insertLast( PID_COMBAT_KNIFE ); 
			tools.insertLast( PID_REVKNIFE2 );
			parts.insertLast( PID_CRAFT_L_LINT ); parts.insertLast( 3 );  
			break;
		case PID_PART_OF_ROPE:
			tools.insertLast( PID_KNIFE ); 
			tools.insertLast( PID_THROWING_KNIFE ); 
			tools.insertLast( PID_SWITCHBLADE ); 
			tools.insertLast( PID_COMBAT_KNIFE ); 
			tools.insertLast( PID_REVKNIFE2 );
			parts.insertLast( PID_CRAFT_L_RAGS ); parts.insertLast( 1 );  
			break;
		case PID_ROPE: 
			tools.insertLast( PID_KNIFE ); 
			tools.insertLast( PID_THROWING_KNIFE ); 
			tools.insertLast( PID_SWITCHBLADE ); 
			tools.insertLast( PID_COMBAT_KNIFE ); 
			tools.insertLast( PID_REVKNIFE2 );
			parts.insertLast( PID_PART_OF_ROPE ); parts.insertLast( 4 );  
			break;
		case PID_HLAM_MEH: 
			tools.insertLast( PID_HAMMER );	
			tools.insertLast( PID_SLEDGEHAMMER );
			tools.insertLast( PID_PRIMITIVE_SLEDGE );			
			parts.insertLast( PID_METAL_LIST_MEH ); parts.insertLast( 1 );  
			break;
		case PID_HLAM2_MEH: 
			tools.insertLast( PID_HAMMER );	
			tools.insertLast( PID_SLEDGEHAMMER );
			tools.insertLast( PID_PRIMITIVE_SLEDGE );	
			parts.insertLast( PID_METAL_LIST_MEH ); parts.insertLast( 1 );  
			break;
		case PID_MOUSE_SKIN: 
			tools.insertLast( PID_KNIFE ); 
			tools.insertLast( PID_THROWING_KNIFE ); 
			tools.insertLast( PID_SWITCHBLADE ); 
			tools.insertLast( PID_COMBAT_KNIFE ); 
			tools.insertLast( PID_REVKNIFE2 );
			parts.insertLast( PID_CRAFT_L_RAGS ); parts.insertLast( 1 );  
			break;
		case PID_GECKO_PELT: 
			tools.insertLast( PID_KNIFE ); 
			tools.insertLast( PID_THROWING_KNIFE ); 
			tools.insertLast( PID_SWITCHBLADE ); 
			tools.insertLast( PID_COMBAT_KNIFE ); 
			tools.insertLast( PID_REVKNIFE2 );
			parts.insertLast( PID_CRAFT_L_RAGS ); parts.insertLast( 2 );  
			break;
		case PID_PELT3: 	
		case PID_GOLDEN_GECKO_PELT: 
			tools.insertLast( PID_KNIFE ); 
			tools.insertLast( PID_THROWING_KNIFE ); 
			tools.insertLast( PID_SWITCHBLADE ); 
			tools.insertLast( PID_COMBAT_KNIFE ); 
			tools.insertLast( PID_REVKNIFE2 );
			parts.insertLast( PID_CRAFT_L_RAGS ); parts.insertLast( 4 );  
			break;
		case PID_FIRE_GECKO_PELT: 
			tools.insertLast( PID_KNIFE ); 
			tools.insertLast( PID_THROWING_KNIFE ); 
			tools.insertLast( PID_SWITCHBLADE ); 
			tools.insertLast( PID_COMBAT_KNIFE ); 
			tools.insertLast( PID_REVKNIFE2 );
			parts.insertLast( PID_CRAFT_L_RAGS ); parts.insertLast( 6 );  
			break;
		case PID_BRAHMIN_SKIN: 
			tools.insertLast( PID_KNIFE ); 
			tools.insertLast( PID_THROWING_KNIFE ); 
			tools.insertLast( PID_SWITCHBLADE ); 
			tools.insertLast( PID_COMBAT_KNIFE ); 
			tools.insertLast( PID_REVKNIFE2 );
			parts.insertLast( PID_CRAFT_L_RAGS ); parts.insertLast( 6 ); 
			break;
 		case PID_WOLF_FUR: 
            tools.insertLast( PID_KNIFE ); 
            tools.insertLast( PID_THROWING_KNIFE ); 
            tools.insertLast( PID_SWITCHBLADE ); 
            tools.insertLast( PID_COMBAT_KNIFE ); 
            tools.insertLast( PID_REVKNIFE2 );
            parts.insertLast( PID_CRAFT_L_RAGS ); parts.insertLast( 2 );  
            break;
		case PID_CKNIFE_P: 
			tools.insertLast( PID_CRAFT_L_RAGS );
			parts.insertLast( PID_COMBAT_KNIFE ); parts.insertLast( 1 );  
			break;		
		case PID_MKNIFE_P: 
			tools.insertLast( PID_CRAFT_L_RAGS );
			parts.insertLast( PID_THROWING_KNIFE ); parts.insertLast( 1 );  
			break;
		case PID_SPEAR_P: 
			tools.insertLast( PID_CRAFT_L_RAGS );
			parts.insertLast( PID_SPEAR ); parts.insertLast( 1 );  
			break;
		case PID_KNIFE_P: 
			tools.insertLast( PID_CRAFT_L_RAGS );
			parts.insertLast( PID_KNIFE ); parts.insertLast( 1 );  
			break;
		case PID_SPEAR:	
			parts.insertLast( PID_KNIFE ); parts.insertLast( 1 ); 
			parts.insertLast( PID_SHARPENED_POLE ); parts.insertLast( 1 ); 
			break;
		case PID_SHARP_SPEAR: 
			parts.insertLast( PID_KNIFE ); parts.insertLast( 1 ); 
			parts.insertLast( PID_SHARPENED_POLE ); parts.insertLast( 1 ); 
			break;		
		case PID_SANDROBE: 
			tools.insertLast( PID_KNIFE ); 
			tools.insertLast( PID_THROWING_KNIFE ); 
			tools.insertLast( PID_SWITCHBLADE ); 
			tools.insertLast( PID_COMBAT_KNIFE ); 
			tools.insertLast( PID_REVKNIFE2 );
			parts.insertLast( PID_CRAFT_L_RAGS ); parts.insertLast( 5 );  
			break;
		case PID_LEATHER_JACKET: 
			tools.insertLast( PID_KNIFE ); 
			tools.insertLast( PID_THROWING_KNIFE ); 
			tools.insertLast( PID_SWITCHBLADE ); 
			tools.insertLast( PID_COMBAT_KNIFE ); 
			tools.insertLast( PID_REVKNIFE2 );
			parts.insertLast( PID_CRAFT_L_RAGS ); parts.insertLast( 3 ); 
			parts.insertLast( PID_CRAFT_L_HIDE ); parts.insertLast( 2 ); 
			break;
		case PID_LEATHER_ARMOR:
		case PID_LEATHER_ARMOR_MK_II: 
			tools.insertLast( PID_KNIFE ); 
			tools.insertLast( PID_THROWING_KNIFE ); 
			tools.insertLast( PID_SWITCHBLADE ); 
			tools.insertLast( PID_COMBAT_KNIFE ); 
			tools.insertLast( PID_REVKNIFE2 );
			parts.insertLast( PID_CRAFT_L_RAGS ); parts.insertLast( 2 ); 
			parts.insertLast( PID_CRAFT_L_HIDE ); parts.insertLast( 4 ); 
			break;	
		case PID_CURED_LEATHER_ARMOR: 
			tools.insertLast( PID_KNIFE ); 
			tools.insertLast( PID_THROWING_KNIFE ); 
			tools.insertLast( PID_SWITCHBLADE ); 
			tools.insertLast( PID_COMBAT_KNIFE ); 
			tools.insertLast( PID_REVKNIFE2 );
			parts.insertLast( PID_CRAFT_L_RAGS ); parts.insertLast( 2 ); 
			parts.insertLast( PID_CRAFT_L_HIDE ); parts.insertLast( 4 ); 
			break;
		case PID_CURED_LEATHER_ARMOR_MK_II: 
			tools.insertLast( PID_KNIFE ); 
			tools.insertLast( PID_THROWING_KNIFE ); 
			tools.insertLast( PID_SWITCHBLADE ); 
			tools.insertLast( PID_COMBAT_KNIFE ); 
			tools.insertLast( PID_REVKNIFE2 );
			parts.insertLast( PID_METAL_LIST_MEH ); parts.insertLast( 1 ); 
			parts.insertLast( PID_CRAFT_L_HIDE ); parts.insertLast( 4 ); 
			break;
		case PID_METAL_ARMOR:
		case PID_METAL_ARMOR_MK_II: 
			tools.insertLast( PID_MULTI_TOOL ); 
			tools.insertLast( PID_SLEDGEHAMMER );
			parts.insertLast( PID_METAL_LIST_MEH ); parts.insertLast( 2 ); 
			break;
		case PID_MANTIS_ARMOR: 
			tools.insertLast( PID_MULTI_TOOL );
			parts.insertLast( PID_MANTIS_SHELL ); parts.insertLast( 2 ); 
			break;
		case PID_MIRELURK_ARMOR: 
			tools.insertLast( PID_MULTI_TOOL );
			parts.insertLast( PID_MANTIS_SHELL ); parts.insertLast( 4 ); 
			break;
		case PID_REVOLVER_LOW: 
			tools.insertLast( PID_MULTI_TOOL );
			parts.insertLast( PID_SHORT_TUBE ); parts.insertLast( 1 );
			parts.insertLast( PID_REVOLVER_PART ); parts.insertLast( 1 );
			parts.insertLast( PID_CRAFT_M_JUNK ); parts.insertLast( 1 );	
			break;
		case PID_PISTOL_LOW: 
			tools.insertLast( PID_MULTI_TOOL );
			parts.insertLast( PID_SHORT_TUBE ); parts.insertLast( 1 );
			parts.insertLast( PID_CRAFT_M_JUNK ); parts.insertLast( 1 );	
			break;
		case PID_BIGGUN_LOW: 
			tools.insertLast( PID_MULTI_TOOL );
			parts.insertLast( PID_TUBE ); parts.insertLast( 1 );
			parts.insertLast( PID_CRAFT_M_JUNK ); parts.insertLast( 1 );	
			break;
		case PID_SMOKE_GUN_LOW: 
			tools.insertLast( PID_MULTI_TOOL );
			parts.insertLast( PID_SHORT_TUBE ); parts.insertLast( 1 );
			parts.insertLast( PID_BANKA_MEH ); parts.insertLast( 1 );
			parts.insertLast( PID_CRAFT_M_JUNK ); parts.insertLast( 1 );	
			break;
		case PID_SHOTPISTOL_LOW: 
			tools.insertLast( PID_MULTI_TOOL );
			parts.insertLast( PID_SHORT_TUBE ); parts.insertLast( 2 );
			parts.insertLast( PID_CRAFT_M_JUNK ); parts.insertLast( 1 );	
			break;
		case PID_SHOTGUN: 
			tools.insertLast( PID_MULTI_TOOL );
			parts.insertLast( PID_TUBE ); parts.insertLast( 2 );
			parts.insertLast( PID_CRAFT_M_JUNK ); parts.insertLast( 1 );	
			break;
		case PID_SAWED_OFF_SHOTGUN: 
			tools.insertLast( PID_MULTI_TOOL );
			parts.insertLast( PID_SHORT_TUBE ); parts.insertLast( 2 );
			parts.insertLast( PID_CRAFT_M_JUNK ); parts.insertLast( 1 );	
			break;
		case PID_10MM_PISTOL: 
			tools.insertLast( PID_MULTI_TOOL );
			parts.insertLast( PID_SHORT_TUBE ); parts.insertLast( 1 );
			parts.insertLast( PID_CRAFT_M_JUNK ); parts.insertLast( 1 );	
			break;
		case PID_GECKO_LOW: 
			tools.insertLast( PID_MULTI_TOOL );
			parts.insertLast( PID_TUBE ); parts.insertLast( 2 );
			parts.insertLast( PID_BANKA_MEH ); parts.insertLast( 1 );
			parts.insertLast( PID_CRAFT_M_JUNK ); parts.insertLast( 1 );	
			break;
		case PID_REV_RIFLE_LOW: 
			tools.insertLast( PID_MULTI_TOOL );
			parts.insertLast( PID_TUBE ); parts.insertLast( 1 );
			parts.insertLast( PID_REVOLVER_PART ); parts.insertLast( 1 );
			parts.insertLast( PID_CRAFT_M_JUNK ); parts.insertLast( 1 );	
			break;	
		case PID_FLAMER: 
			tools.insertLast( PID_MULTI_TOOL );
			parts.insertLast( PID_TUBE ); parts.insertLast( 1 );
			parts.insertLast( PID_SOED_MEH ); parts.insertLast( 1 );
			parts.insertLast( PID_EMKOCT_MEH ); parts.insertLast( 1 );
			parts.insertLast( PID_LIGHTER ); parts.insertLast( 1 );		
			parts.insertLast( PID_CRAFT_M_JUNK ); parts.insertLast( 1 );	
			break;
		case PID_AUTOGUN_LOW: 
			tools.insertLast( PID_MULTI_TOOL );
			parts.insertLast( PID_TUBE ); parts.insertLast( 1 );
			parts.insertLast( PID_DETAL_MEH ); parts.insertLast( 1 );
			parts.insertLast( PID_CRAFT_M_BARS ); parts.insertLast( 1 );	
			break;
		case PID_SAWGUN_LOW: 
			tools.insertLast( PID_MULTI_TOOL );
			parts.insertLast( PID_PERED_MEH ); parts.insertLast( 1 );
			parts.insertLast( PID_DETAL_MEH ); parts.insertLast( 1 );
			parts.insertLast( PID_MOTOR ); parts.insertLast( 1 );
			parts.insertLast( PID_CHAIN ); parts.insertLast( 1 );	
			parts.insertLast( PID_CRAFT_M_BARS ); parts.insertLast( 2 );	
			break;
		case PID_GATLING_LOW: 
			tools.insertLast( PID_MULTI_TOOL );
			parts.insertLast( PID_TUBE ); parts.insertLast( 6 );	
			parts.insertLast( PID_CRAFT_M_JUNK ); parts.insertLast( 1 );	
			break;
		case PID_SNIPER_GUN_LOW: 
			tools.insertLast( PID_MULTI_TOOL );
			parts.insertLast( PID_TUBE ); parts.insertLast( 1 );
			parts.insertLast( PID_CRAFT_M_JUNK ); parts.insertLast( 1 );	
			break;
		case PID_ZIP_GUN: 
			tools.insertLast( PID_MULTI_TOOL );
			parts.insertLast( PID_TUBE ); parts.insertLast( 1 );
			parts.insertLast( PID_CRAFT_M_JUNK ); parts.insertLast( 1 );	
			break;	
		case PID_NEEDLER_PISTOL: 
			tools.insertLast( PID_SUPER_TOOL_KIT );
			parts.insertLast( PID_CRAFT_M_BARS ); parts.insertLast( 1 );	
			break;	
		case PID_DRUM_GUN_LOW: 
			tools.insertLast( PID_MULTI_TOOL );
			parts.insertLast( PID_SHORT_TUBE ); parts.insertLast( 1 );
			parts.insertLast( PID_DETAL_MEH ); parts.insertLast( 1 );
			parts.insertLast( PID_CRAFT_M_JUNK ); parts.insertLast( 1 );	
			break;
		case PID_9MM_MAUSER: 
			tools.insertLast( PID_MULTI_TOOL );
			parts.insertLast( PID_SHORT_TUBE ); parts.insertLast( 1 );
			parts.insertLast( PID_CRAFT_M_JUNK ); parts.insertLast( 1 );	
			break;
		case PID_MAUSER_SMG: 
			tools.insertLast( PID_MULTI_TOOL );
			parts.insertLast( PID_SHORT_TUBE ); parts.insertLast( 1 );
			parts.insertLast( PID_DETAL_MEH ); parts.insertLast( 1 );
			parts.insertLast( PID_CRAFT_M_JUNK ); parts.insertLast( 1 );	
			break;
		case PID_ROD_STRING: 
			parts.insertLast( PID_ROD ); parts.insertLast( 1 );
			parts.insertLast( PID_STRING ); parts.insertLast( 1 );
			break;
		case PID_ROD_STRING_HOOK: 
			parts.insertLast( PID_ROD_STRING ); parts.insertLast( 1 );
			parts.insertLast( PID_HOOK ); parts.insertLast( 1 );
			break;
		case( PID_DESERT_EAGLE_EXT_MAG ):
			tools.insertLast( PID_MULTI_TOOL );
			parts.insertLast( PID_DESERT_EAGLE ); parts.insertLast( 1 );
			parts.insertLast( PID_ELECTO_MEH ); parts.insertLast( 1 );
			parts.insertLast( PID_CRAFT_M_JUNK); parts.insertLast( 2 );
			break;
		case( PID_10MM_PISTOL_MAGAZIN ):
			tools.insertLast( PID_MULTI_TOOL );
			parts.insertLast( PID_10MM_PISTOL ); parts.insertLast( 1 );
			parts.insertLast( PID_ELECTO_MEH ); parts.insertLast( 1 );
			parts.insertLast( PID_CRAFT_M_JUNK ); parts.insertLast( 2 );
			break;
		case( PID_44_MAGNUM_SPEEDLOADER ):
			tools.insertLast( PID_MULTI_TOOL );
			parts.insertLast( PID_44_MAGNUM_REVOLVER ); parts.insertLast( 1 );
			parts.insertLast( PID_REVOLVER_PART ); parts.insertLast( 1 );
			parts.insertLast( PID_SHORT_TUBE ); parts.insertLast( 1 );
			parts.insertLast( PID_CRAFT_M_BARS ); parts.insertLast( 2 );
			break;
		case( PID_DOMINION_DUPLEX ):
			tools.insertLast( PID_MULTI_TOOL );
			parts.insertLast( PID_DOMINION_ROBUR ); parts.insertLast( 1 );
			parts.insertLast( PID_CRAFT_M_JUNK ); parts.insertLast( 4 );
			parts.insertLast( PID_MSPIRAL ); parts.insertLast( 2 );
			parts.insertLast( PID_BOLT ); parts.insertLast( 4 );
			break;
		case( PID_SCOPED_HUNTING_RIFLE ):
			tools.insertLast( PID_MULTI_TOOL );
			tools.insertLast( PID_SCREWDRIVER );
			parts.insertLast( PID_HUNTING_RIFLE ); parts.insertLast( 1 );
			parts.insertLast( PID_optics1 ); parts.insertLast( 1 );
			parts.insertLast( PID_BRACING ); parts.insertLast( 4 );
			break;
		case( PID_ASSAULT_RIFLE_OPT ):
			tools.insertLast( PID_MULTI_TOOL );
			tools.insertLast( PID_SCREWDRIVER );
			parts.insertLast( PID_ASSAULT_RIFLE ); parts.insertLast( 1 );
			parts.insertLast( PID_optics3 ); parts.insertLast( 1 );
			parts.insertLast( PID_BRACING ); parts.insertLast( 4 );
			break;
		case( PID_M4_OPT ):
			tools.insertLast( PID_MULTI_TOOL );
			tools.insertLast( PID_SCREWDRIVER );
			parts.insertLast( PID_M4 ); parts.insertLast( 1 );
			parts.insertLast( PID_optics3 ); parts.insertLast( 1 );
			parts.insertLast( PID_BRACING ); parts.insertLast( 4 );
			break;
		case( PID_ASSAULT_RIFLE_EXT_MAG ):
			tools.insertLast( PID_MULTI_TOOL );
			parts.insertLast( PID_ASSAULT_RIFLE ); parts.insertLast( 1 );
			parts.insertLast( PID_ELECTO_MEH ); parts.insertLast( 1 );
			parts.insertLast( PID_CRAFT_M_BARS ); parts.insertLast( 2 );
			parts.insertLast( PID_DETAL_MEH ); parts.insertLast( 1 );
			parts.insertLast( PID_CRAFT_M_JUNK ); parts.insertLast( 1 );
			parts.insertLast( PID_BRACING ); parts.insertLast( 4 );
			break;
		case( PID_ASSAULT_RIFLE_EXT_MAG_OPT ):
			tools.insertLast( PID_MULTI_TOOL );
			tools.insertLast( PID_SCREWDRIVER );
			parts.insertLast( PID_ASSAULT_RIFLE_EXT_MAG ); parts.insertLast( 1 );
			parts.insertLast( PID_optics3 ); parts.insertLast( 1 );
			parts.insertLast( PID_BRACING ); parts.insertLast( 4 );
			break;
		case( PID_ASSAULT_RIFLE_EXT_XXL_MAG ):
			tools.insertLast( PID_MULTI_TOOL );
			parts.insertLast( PID_ASSAULT_RIFLE ); parts.insertLast( 1 );
			parts.insertLast( PID_ELECTO_MEH ); parts.insertLast( 1 );
			parts.insertLast( PID_CRAFT_M_STEL ); parts.insertLast( 1 );
			parts.insertLast( PID_IRON_DETALS ); parts.insertLast( 2 );
			parts.insertLast( PID_DETAL_MEH ); parts.insertLast( 1 );
			parts.insertLast( PID_BRACING ); parts.insertLast( 1 );
			break;
		case( PID_ASSAULT_RIFLE_EXT_XXL_MAG_OPT ):
			tools.insertLast( PID_MULTI_TOOL );
			tools.insertLast( PID_SCREWDRIVER );
			parts.insertLast( PID_ASSAULT_RIFLE_EXT_XXL_MAG ); parts.insertLast( 1 );
			parts.insertLast( PID_optics3 ); parts.insertLast( 1 );
			parts.insertLast( PID_BRACING ); parts.insertLast( 4 );
			break;
		case( PID_LASER_RIFLE_EXT_CAP ):
			tools.insertLast( PID_SUPER_TOOL_KIT );
			parts.insertLast( PID_LASER_RIFLE ); parts.insertLast( 1 );
			parts.insertLast( PID_IRON_DETALS ); parts.insertLast( 2 );
			parts.insertLast( PID_OHLAD_MEH ); parts.insertLast( 1 );
			parts.insertLast( PID_CRAFT_E_CHIP ); parts.insertLast( 1 );
			parts.insertLast( PID_COPPER_WIRE ); parts.insertLast( 1 );
			parts.insertLast( PID_EXCAVATOR_CHIP ); parts.insertLast( 1 );
			parts.insertLast( PID_MPARTS ); parts.insertLast( 2 );
			break;
	// оружие совсем лоу тек
		case PID_SPRINGER_RIFLE:
		case PID_QUADRO_SHOTGUN:
		case PID_LOW_SNIPER2:
		case PID_SAVAGE:
		case PID_IMPROVED_SAVAGE:
		case PID_ONEHAND_ROCKET_LAUNCHER:
		case PID_14mm_BIGGUN2_LOW:
		case PID_bglaw:
			tools.insertLast( PID_MULTI_TOOL );
			parts.insertLast( PID_CRAFT_M_JUNK ); parts.insertLast( 2 );
			break;
	}
	
	if ( tools.length() == 0 && parts.length() == 0 ) {
		switch( Item_Subtype )
		{
			case( ITEM_SUBTYPE_WEAPON_NORMAL_PISTOL ):
				tools.insertLast( PID_SUPER_TOOL_KIT );
				parts.insertLast( PID_CRAFT_M_JUNK ); parts.insertLast( 1 );
				parts.insertLast( PID_MSPIRAL ); parts.insertLast( 2 );
				parts.insertLast( PID_PISTOL_PARTS ); parts.insertLast( 1 );
				break;
			case( ITEM_SUBTYPE_WEAPON_NORMAL_PISTOL_REVOLVER ):
				tools.insertLast( PID_SUPER_TOOL_KIT );
				parts.insertLast( PID_REVOLVER_PART ); parts.insertLast( 1 );
				parts.insertLast( PID_CRAFT_M_JUNK ); parts.insertLast( 1 );
				parts.insertLast( PID_MSPIRAL ); parts.insertLast( 2 );
				parts.insertLast( PID_REVOLVER_PARTS ); parts.insertLast( 1 );
				break;
			case( ITEM_SUBTYPE_WEAPON_NORMAL_SMG ):
				tools.insertLast( PID_SUPER_TOOL_KIT );
				parts.insertLast( PID_CRAFT_M_BARS ); parts.insertLast( 2 );
				parts.insertLast( PID_CRAFT_M_JUNK ); parts.insertLast( 2 );
				parts.insertLast( PID_MSPIRAL ); parts.insertLast( 1 );
				parts.insertLast( PID_SG_PARTS ); parts.insertLast( 1 );
				break;
			case( ITEM_SUBTYPE_WEAPON_NORMAL_RIFLE ):
				tools.insertLast( PID_SUPER_TOOL_KIT );
				parts.insertLast( PID_CRAFT_M_BARS ); parts.insertLast( 1 );
				parts.insertLast( PID_CRAFT_M_JUNK ); parts.insertLast( 1 );
				parts.insertLast( PID_MSPIRAL ); parts.insertLast( 1 );
				parts.insertLast( PID_MUSKET_BARREL ); parts.insertLast( 1 );
				break;
			case( ITEM_SUBTYPE_WEAPON_NORMAL_ASSAULT_RIFLE ):
				tools.insertLast( PID_SUPER_TOOL_KIT );
				parts.insertLast( PID_MSPIRAL ); parts.insertLast( 1 );
				parts.insertLast( PID_AUTOMAT_PARTS ); parts.insertLast( 1 );
				parts.insertLast( PID_WEAPON_PARTS ); parts.insertLast( 2 );
				break;
			case( ITEM_SUBTYPE_WEAPON_NORMAL_SNIPER_RIFLE ):
				tools.insertLast( PID_SUPER_TOOL_KIT );
				parts.insertLast( PID_MSPIRAL ); parts.insertLast( 1 );
				parts.insertLast( PID_LINZA ); parts.insertLast( 2 );
				parts.insertLast( PID_MUSKET_BARREL ); parts.insertLast( 1 );
				parts.insertLast( PID_WEAPON_PARTS ); parts.insertLast( 2 );
				break;
			case( ITEM_SUBTYPE_WEAPON_NORMAL_SHOTGUN ):
				tools.insertLast( PID_SUPER_TOOL_KIT );
				parts.insertLast( PID_CRAFT_M_BARS ); parts.insertLast( 1 );
				parts.insertLast( PID_CRAFT_M_JUNK ); parts.insertLast( 1 );
				parts.insertLast( PID_MSPIRAL ); parts.insertLast( 2 );
				parts.insertLast( PID_SHOTGUN_PARTS ); parts.insertLast( 1 );
				break;
			case( ITEM_SUBTYPE_WEAPON_NORMAL_AUTOSHOTGUN ):
				tools.insertLast( PID_SUPER_TOOL_KIT );
				parts.insertLast( PID_MSPIRAL ); parts.insertLast( 2 );
				parts.insertLast( PID_SHOTGUN_PARTS2 ); parts.insertLast( 1 );
				parts.insertLast( PID_WEAPON_PARTS ); parts.insertLast( 2 );
				break;
			case( ITEM_SUBTYPE_WEAPON_NORMAL_LMG ):
				tools.insertLast( PID_SUPER_TOOL_KIT );
				parts.insertLast( PID_CRAFT_M_STEL ); parts.insertLast( 3 );
				parts.insertLast( PID_MSPIRAL ); parts.insertLast( 2 );
				parts.insertLast( PID_WEAPON_PARTS ); parts.insertLast( 4 );
				break;
			case( ITEM_SUBTYPE_WEAPON_NORMAL_MACHINEGUN ):
				tools.insertLast( PID_SUPER_TOOL_KIT );
				parts.insertLast( PID_CRAFT_M_STEL ); parts.insertLast( 3 );
				parts.insertLast( PID_DVIGAT_MEH ); parts.insertLast( 2 );
				parts.insertLast( PID_MSPIRAL ); parts.insertLast( 2 );
				parts.insertLast( PID_WEAPON_PARTS ); parts.insertLast( 4 );
				break;
			case( ITEM_SUBTYPE_WEAPON_NORMAL_NADELAUNCHER ):
				tools.insertLast( PID_SUPER_TOOL_KIT );
				parts.insertLast( PID_CRAFT_M_BARS ); parts.insertLast( 3 );
				parts.insertLast( PID_CRAFT_M_JUNK ); parts.insertLast( 2 );
				parts.insertLast( PID_TUBE ); parts.insertLast( 1 );
				parts.insertLast( PID_WEAPON_PARTS ); parts.insertLast( 1 );
				break;
			case( ITEM_SUBTYPE_WEAPON_NORMAL_FLAMETHROWER ):
				tools.insertLast( PID_SUPER_TOOL_KIT );
				parts.insertLast( PID_CRAFT_M_BARS ); parts.insertLast( 3 );
				parts.insertLast( PID_CRAFT_M_STEL ); parts.insertLast( 1 );
				parts.insertLast( PID_CRAFT_M_JUNK ); parts.insertLast( 2 );
				parts.insertLast( PID_TUBE ); parts.insertLast( 3 );
				parts.insertLast( PID_WEAPON_PARTS ); parts.insertLast( 1 );
				break;
			case( ITEM_SUBTYPE_WEAPON_NORMAL_MINIGUN ):
				tools.insertLast( PID_SUPER_TOOL_KIT );
				parts.insertLast( PID_CRAFT_M_STEL ); parts.insertLast( 3 );
				parts.insertLast( PID_TUBE ); parts.insertLast( 1 );
				parts.insertLast( PID_MSPIRAL ); parts.insertLast( 2 );
				parts.insertLast( PID_WEAPON_PARTS ); parts.insertLast( 4 );
				break;
			case( ITEM_SUBTYPE_WEAPON_NORMAL_HEAVY_RIFLE ):
				tools.insertLast( PID_SUPER_TOOL_KIT );
				parts.insertLast( PID_CRAFT_M_BARS ); parts.insertLast( 3 );
				parts.insertLast( PID_CRAFT_M_JUNK ); parts.insertLast( 2 );
				parts.insertLast( PID_CRAFT_M_STEL ); parts.insertLast( 1 );
				parts.insertLast( PID_TUBE ); parts.insertLast( 1 );
				parts.insertLast( PID_WEAPON_PARTS ); parts.insertLast( 1 );
				break;
			case( ITEM_SUBTYPE_WEAPON_LASER_PISTOL ):
				tools.insertLast( PID_SUPER_TOOL_KIT );
				parts.insertLast( PID_LINZA ); parts.insertLast( 2 );
				parts.insertLast( PID_MPARTS ); parts.insertLast( 2 );
				parts.insertLast( PID_BRACING ); parts.insertLast( 4 );
				parts.insertLast( PID_OHLAD_MEH ); parts.insertLast( 1 ); 
				parts.insertLast( PID_EXCAVATOR_CHIP ); parts.insertLast( 2 );
				break;
			case( ITEM_SUBTYPE_WEAPON_LASER_RIFLE ):
				tools.insertLast( PID_SUPER_TOOL_KIT );
				parts.insertLast( PID_LINZA ); parts.insertLast( 1 );
				parts.insertLast( PID_MPARTS ); parts.insertLast( 2 );
				parts.insertLast( PID_BRACING ); parts.insertLast( 4 );
				parts.insertLast( PID_COPPER_WIRE ); parts.insertLast( 1 );
				parts.insertLast( PID_OHLAD_MEH ); parts.insertLast( 1 ); 
				parts.insertLast( PID_CRAFT_E_CHIP ); parts.insertLast( 1 );
				break;
			case( ITEM_SUBTYPE_WEAPON_LASER_SMG ):
				tools.insertLast( PID_SUPER_TOOL_KIT );
				parts.insertLast( PID_LINZA ); parts.insertLast( 1 );
				parts.insertLast( PID_MPARTS ); parts.insertLast( 4 );
				parts.insertLast( PID_BRACING ); parts.insertLast( 2 );
				parts.insertLast( PID_COPPER_WIRE ); parts.insertLast( 1 );
				parts.insertLast( PID_OHLAD_MEH ); parts.insertLast( 1 ); 
				parts.insertLast( PID_EXCAVATOR_CHIP ); parts.insertLast( 1 );
				break;
			case( ITEM_SUBTYPE_WEAPON_LASER_SNIPER_RIFLE ):
				tools.insertLast( PID_SUPER_TOOL_KIT );
				parts.insertLast( PID_LINZA ); parts.insertLast( 2 );
				parts.insertLast( PID_MPARTS ); parts.insertLast( 2 );
				parts.insertLast( PID_BRACING ); parts.insertLast( 4 );
				parts.insertLast( PID_COPPER_WIRE ); parts.insertLast( 1 );
				parts.insertLast( PID_OHLAD_MEH ); parts.insertLast( 1 ); 
				parts.insertLast( PID_CRAFT_E_CHIP ); parts.insertLast( 1 );
				break;
			case( ITEM_SUBTYPE_WEAPON_LASER_HEAVY_RIFLE ):
				tools.insertLast( PID_SUPER_TOOL_KIT );
				parts.insertLast( PID_LINZA ); parts.insertLast( 2 );
				parts.insertLast( PID_CAPACITOR ); parts.insertLast( 1 );
				parts.insertLast( PID_MPARTS ); parts.insertLast( 4 );
				parts.insertLast( PID_BRACING ); parts.insertLast( 4 );
				parts.insertLast( PID_COPPER_WIRE ); parts.insertLast( 4 );
				parts.insertLast( PID_OHLAD_MEH ); parts.insertLast( 2 ); 
				parts.insertLast( PID_CRAFT_E_CHIP ); parts.insertLast( 2 );
				break;
			case( ITEM_SUBTYPE_WEAPON_LASER_MINIGUN ):
				tools.insertLast( PID_SUPER_TOOL_KIT );
				parts.insertLast( PID_LINZA ); parts.insertLast( 1 );
				parts.insertLast( PID_CAPACITOR ); parts.insertLast( 2 );
				parts.insertLast( PID_MPARTS ); parts.insertLast( 4 );
				parts.insertLast( PID_BRACING ); parts.insertLast( 4 );
				parts.insertLast( PID_COPPER_WIRE ); parts.insertLast( 6 );
				parts.insertLast( PID_OHLAD_MEH ); parts.insertLast( 4 ); 
				parts.insertLast( PID_CRAFT_E_CHIP ); parts.insertLast( 2 );
				break;
			case( ITEM_SUBTYPE_WEAPON_LASER_MACHINEGUN ):
				tools.insertLast( PID_SUPER_TOOL_KIT );
				parts.insertLast( PID_LINZA ); parts.insertLast( 2 );
				parts.insertLast( PID_CAPACITOR ); parts.insertLast( 1 );
				parts.insertLast( PID_MPARTS ); parts.insertLast( 4 );
				parts.insertLast( PID_BRACING ); parts.insertLast( 4 );
				parts.insertLast( PID_COPPER_WIRE ); parts.insertLast( 4 );
				parts.insertLast( PID_OHLAD_MEH ); parts.insertLast( 2 ); 
				parts.insertLast( PID_CRAFT_E_CHIP ); parts.insertLast( 2 );
				break;
			case( ITEM_SUBTYPE_WEAPON_PLASMA_PISTOL ):
				tools.insertLast( PID_SUPER_TOOL_KIT );
				parts.insertLast( PID_MPARTS ); parts.insertLast( 6 );
				parts.insertLast( PID_BRACING ); parts.insertLast( 4 );
				parts.insertLast( PID_medrest ); parts.insertLast( 1 );
				parts.insertLast( PID_EXCAVATOR_CHIP ); parts.insertLast( 2 );
				break;
			case( ITEM_SUBTYPE_WEAPON_PLASMA_RIFLE ):
				tools.insertLast( PID_SUPER_TOOL_KIT );
				parts.insertLast( PID_CAPACITOR ); parts.insertLast( 1 );
				parts.insertLast( PID_MPARTS ); parts.insertLast( 6 );
				parts.insertLast( PID_BRACING ); parts.insertLast( 4 );
				parts.insertLast( PID_medrest ); parts.insertLast( 2 );
				parts.insertLast( PID_CRAFT_E_CHIP ); parts.insertLast( 2 );
				break;
			case( ITEM_SUBTYPE_WEAPON_PLASMA_SMG ):
				tools.insertLast( PID_SUPER_TOOL_KIT );
				parts.insertLast( PID_CAPACITOR ); parts.insertLast( 1 );
				parts.insertLast( PID_MPARTS ); parts.insertLast( 6 );
				parts.insertLast( PID_BRACING ); parts.insertLast( 4 );
				parts.insertLast( PID_medrest ); parts.insertLast( 2 );
				parts.insertLast( PID_CRAFT_E_CHIP ); parts.insertLast( 2 );
				break;
			case( ITEM_SUBTYPE_WEAPON_PLASMA_SNIPER_RIFLE ):
				tools.insertLast( PID_SUPER_TOOL_KIT );
				parts.insertLast( PID_CAPACITOR ); parts.insertLast( 2 );
				parts.insertLast( PID_MPARTS ); parts.insertLast( 6 );
				parts.insertLast( PID_BRACING ); parts.insertLast( 4 );
				parts.insertLast( PID_medrest ); parts.insertLast( 2 );
				parts.insertLast( PID_CRAFT_E_CHIP ); parts.insertLast( 2 );
				break;
			case( ITEM_SUBTYPE_WEAPON_PLASMA_HEAVY_RIFLE ):
				tools.insertLast( PID_SUPER_TOOL_KIT );
				parts.insertLast( PID_CAPACITOR ); parts.insertLast( 1 );
				parts.insertLast( PID_MPARTS ); parts.insertLast( 5 );
				parts.insertLast( PID_BRACING ); parts.insertLast( 2 );
				parts.insertLast( PID_medrest ); parts.insertLast( 2 );
				parts.insertLast( PID_blstrBM ); parts.insertLast( 1 );
				parts.insertLast( PID_CRAFT_E_CHIP ); parts.insertLast( 2 );
				parts.insertLast( PID_WEAPON_PARTS ); parts.insertLast( 2 );
				break;
			case( ITEM_SUBTYPE_WEAPON_PLASMA_MINIGUN ):
				tools.insertLast( PID_SUPER_TOOL_KIT );
				parts.insertLast( PID_CAPACITOR ); parts.insertLast( 2 );
				parts.insertLast( PID_MPARTS ); parts.insertLast( 5 );
				parts.insertLast( PID_BRACING ); parts.insertLast( 6 );
				parts.insertLast( PID_medrest ); parts.insertLast( 2 );
				parts.insertLast( PID_blstrBM ); parts.insertLast( 1 );
				parts.insertLast( PID_CRAFT_E_CHIP ); parts.insertLast( 2 );
				parts.insertLast( PID_WEAPON_PARTS ); parts.insertLast( 2 );
				break;
			case( ITEM_SUBTYPE_WEAPON_PULSE_PISTOL ):
				tools.insertLast( PID_SUPER_TOOL_KIT );
				parts.insertLast( PID_MPARTS ); parts.insertLast( 4 );
				parts.insertLast( PID_BRACING ); parts.insertLast( 2 );
				parts.insertLast( PID_COPPER_WIRE ); parts.insertLast( 2 );
				parts.insertLast( PID_OHLAD_MEH ); parts.insertLast( 1 ); 
				parts.insertLast( PID_EXCAVATOR_CHIP ); parts.insertLast( 1 );
				break;
			case( ITEM_SUBTYPE_WEAPON_PULSE_RIFLE ):
				tools.insertLast( PID_SUPER_TOOL_KIT );
				parts.insertLast( PID_MPARTS ); parts.insertLast( 4 );
				parts.insertLast( PID_BRACING ); parts.insertLast( 2 );
				parts.insertLast( PID_COPPER_WIRE ); parts.insertLast( 4 );
				parts.insertLast( PID_OHLAD_MEH ); parts.insertLast( 1 );
				parts.insertLast( PID_CAPACITOR ); parts.insertLast( 1 ); 
				parts.insertLast( PID_CRAFT_E_CHIP ); parts.insertLast( 1 );
				break;
			case( ITEM_SUBTYPE_WEAPON_PULSE_SMG ):
				tools.insertLast( PID_SUPER_TOOL_KIT );
				parts.insertLast( PID_MPARTS ); parts.insertLast( 4 );
				parts.insertLast( PID_BRACING ); parts.insertLast( 2 );
				parts.insertLast( PID_COPPER_WIRE ); parts.insertLast( 4 );
				parts.insertLast( PID_OHLAD_MEH ); parts.insertLast( 2 );
				parts.insertLast( PID_CAPACITOR ); parts.insertLast( 1 ); 
				parts.insertLast( PID_CRAFT_E_CHIP ); parts.insertLast( 1 );
				break;
			case( ITEM_SUBTYPE_WEAPON_PULSE_SNIPER_RIFLE ):
				tools.insertLast( PID_SUPER_TOOL_KIT );
				parts.insertLast( PID_MPARTS ); parts.insertLast( 4 );
				parts.insertLast( PID_BRACING ); parts.insertLast( 2 );
				parts.insertLast( PID_COPPER_WIRE ); parts.insertLast( 4 );
				parts.insertLast( PID_OHLAD_MEH ); parts.insertLast( 1 );
				parts.insertLast( PID_CAPACITOR ); parts.insertLast( 2 ); 
				parts.insertLast( PID_CRAFT_E_CHIP ); parts.insertLast( 1 );
				break;
			case( ITEM_SUBTYPE_WEAPON_PULSE_SHOTGUN ):
				tools.insertLast( PID_SUPER_TOOL_KIT );
				parts.insertLast( PID_MPARTS ); parts.insertLast( 6 );
				parts.insertLast( PID_BRACING ); parts.insertLast( 4 );
				parts.insertLast( PID_COPPER_WIRE ); parts.insertLast( 3 );
				parts.insertLast( PID_OHLAD_MEH ); parts.insertLast( 1 );
				parts.insertLast( PID_CAPACITOR ); parts.insertLast( 2 ); 
				parts.insertLast( PID_CRAFT_E_CHIP ); parts.insertLast( 1 );
				break;
			case( ITEM_SUBTYPE_WEAPON_PULSE_MINIGUN ):
				tools.insertLast( PID_SUPER_TOOL_KIT );
				parts.insertLast( PID_MPARTS ); parts.insertLast( 6 );
				parts.insertLast( PID_CRAFT_M_STEL ); parts.insertLast( 2 );
				parts.insertLast( PID_BRACING ); parts.insertLast( 4 );
				parts.insertLast( PID_COPPER_WIRE ); parts.insertLast( 6 );
				parts.insertLast( PID_OHLAD_MEH ); parts.insertLast( 4 );
				parts.insertLast( PID_CAPACITOR ); parts.insertLast( 2 ); 
				parts.insertLast( PID_CRAFT_E_CHIP ); parts.insertLast( 2 );
				break;
			case( ITEM_SUBTYPE_WEAPON_SONIC_PISTOL ):
				tools.insertLast( PID_SUPER_TOOL_KIT );
				parts.insertLast( PID_CRAFT_E_LAMP ); parts.insertLast( 2 );
				parts.insertLast( PID_MPARTS ); parts.insertLast( 3 );
				parts.insertLast( PID_BRACING ); parts.insertLast( 3 );
				parts.insertLast( PID_EXCAVATOR_CHIP ); parts.insertLast( 2 );
				break;
			case( ITEM_SUBTYPE_WEAPON_SONIC_RIFLE ):
				tools.insertLast( PID_SUPER_TOOL_KIT );
				parts.insertLast( PID_CRAFT_E_LAMP ); parts.insertLast( 4 );
				parts.insertLast( PID_MPARTS ); parts.insertLast( 6 );
				parts.insertLast( PID_BRACING ); parts.insertLast( 5 );
				parts.insertLast( PID_EXCAVATOR_CHIP ); parts.insertLast( 3 );
				break;
			case( ITEM_SUBTYPE_WEAPON_MELEE_KNIFE ): {
				if( hasAmmo ) {
					tools.insertLast( PID_MULTI_TOOL );
					parts.insertLast( PID_CRAFT_M_BARS ); parts.insertLast( 3 );
					parts.insertLast( PID_COPPER_WIRE ); parts.insertLast( 2 );
					parts.insertLast( PID_MPARTS ); parts.insertLast( 3 );
					break;
				} else {
					isItemPartable = false;
					break;
				}
			}
			case( ITEM_SUBTYPE_WEAPON_MELEE_LONG_KNIFE ): {
				if( hasAmmo ) {
					tools.insertLast( PID_MULTI_TOOL );
					tools.insertLast( PID_SCREWDRIVER );
					tools.insertLast( PID_SOLDERER );
					parts.insertLast( PID_CRAFT_M_BARS ); parts.insertLast( 3 );
					parts.insertLast( PID_COPPER_WIRE ); parts.insertLast( 2 );
					parts.insertLast( PID_MPARTS ); parts.insertLast( 3 );
					break;
				} else {
					isItemPartable = false; 
					break;
				}
			}
			case( ITEM_SUBTYPE_WEAPON_MELEE_SPEAR ): {
				if( hasAmmo ) {
					tools.insertLast( PID_MULTI_TOOL );
					tools.insertLast( PID_SCREWDRIVER );
					tools.insertLast( PID_SOLDERER );
					parts.insertLast( PID_CRAFT_M_BARS ); parts.insertLast( 3 );
					parts.insertLast( PID_COPPER_WIRE ); parts.insertLast( 2 );
					parts.insertLast( PID_MPARTS ); parts.insertLast( 3 );
					break;
				} else {
					isItemPartable = false; 
					break;
				}
			}
			case( ITEM_SUBTYPE_WEAPON_MELEE_HAMMER ): {
				if( hasAmmo ) {
					tools.insertLast( PID_MULTI_TOOL );
					tools.insertLast( PID_SCREWDRIVER );
					tools.insertLast( PID_SOLDERER );
					parts.insertLast( PID_CRAFT_M_BARS ); parts.insertLast( 3 );
					parts.insertLast( PID_COPPER_WIRE ); parts.insertLast( 2 );
					parts.insertLast( PID_MPARTS ); parts.insertLast( 3 );
					break;
				} else {
					isItemPartable = false;
					break;
				}
			}
			case( ITEM_SUBTYPE_WEAPON_MELEE_GLOVE ): {			
				if( hasAmmo ) {
					repair -= 35;
					tools.insertLast( PID_MULTI_TOOL );
					tools.insertLast( PID_SCREWDRIVER );
					tools.insertLast( PID_SOLDERER );
					parts.insertLast( PID_CRAFT_M_BARS ); parts.insertLast( 3 );
					parts.insertLast( PID_MPARTS ); parts.insertLast( 4 );
					break;
				} else {
					isItemPartable = false;
					break;
				}
			}
			case( ITEM_SUBTYPE_WEAPON_MELEE_CLUB ): {
				if( hasAmmo ) {
					repair -= 35;
					tools.insertLast( PID_MULTI_TOOL );
					tools.insertLast( PID_SCREWDRIVER );
					tools.insertLast( PID_SOLDERER );
					parts.insertLast( PID_CRAFT_M_BARS ); parts.insertLast( 3 );
					parts.insertLast( PID_COPPER_WIRE ); parts.insertLast( 2 );
					parts.insertLast( PID_MPARTS ); parts.insertLast( 5 );
					break;
				} else {
					isItemPartable = false;
					break;
				}
			}
			default: 
				isItemPartable = false;
				break;
		}
	}
	
	if (!isItemPartable) {
		cr.Say( SAY_NETMSG, "Вы не знаете, что с этим делать." );
		return false;
	}
	
	if ( repair > cr.Skill[ SK_REPAIR ]	|| science > cr.Skill[ SK_SCIENCE ] ) {
		cr.Say( SAY_NETMSG, "Нехватает навыков" );
		return true;
	}
	
	if ( ( tools.length() > 0 ) && ( !valid( _CritGetItemHand( cr ) ) || tools.find( _CritGetItemHand( cr ).GetProtoId() ) == -1 ) ) {
		string workTool = "Необходим инструмент в руке: \n";
	    for( uint8 j = 0; j < tools.length(); j++ ) {
			workTool += " - ";
			workTool += "|0xFFFF00 " + _GetProtoName( tools[j] );
			workTool += "|0x3CF800 .";
			if( j < tools.length() - 1 ) {
				workTool = substring( workTool, 0, workTool.length() - 2 ) + "|0x3CF800 , или:\n";
			}
		}
		
		cr.Say( SAY_NETMSG, workTool );
		
		string part = "Получаемые части: \n";
		for( uint8 jj = 0; jj < parts.length(); jj+=2 ) {
			part += " - ";
			part += "|0xFFFF00 " + _GetProtoName( parts[jj] );
			part += "|0x3CF800  - ";
			part += "|0xFFFF00 " + parts[jj + 1];
			part += "|0x3CF800  шт.,\n";
		}
		
		part[ part.length() - 2 ] = ' ';
		part[ part.length() - 1 ] = ' ';
		cr.Say( SAY_NETMSG, part );
		return true;
	}
	
	if( item.GetType() == ITEM_TYPE_WEAPON && item.Proto.Weapon_MaxAmmoCount > 0 ) {
		uint ammoCount = item.AmmoCount;
		
		if( ammoCount > 0) {
			Item@ ammo = cr.AddItem( item.AmmoPid, ammoCount );
			item.AmmoCount = 0;
			item.Update();
			
			string ammoGain = "Вы разрядили оружие, достав: \n";
			ammoGain += " - ";
			ammoGain += "|0xFFFF00 " + _GetProtoShortDisc( ammo.GetProtoId() );
			ammoGain += "|0x3CF800  - ";
			ammoGain += "|0xFFFF00 " + ammoCount;
			ammoGain += "|0x3CF800  шт.";
			cr.Say( SAY_NETMSG, ammoGain );
		}
	}
	decraftItems.set( ""+cr.Id, parts );
	uint amount = parts.length();
	start_decraft( cr, item, amount );
    return true;
}

bool ltp_decraft_inited = false;
void ltp_decraft_init()
{
	LTPREG( LTP_DECRAFT, process_decraft )
	ltp_decraft_inited = true;
}

bool start_decraft( Critter& cr, Item& item, uint amount )
{
	if( !ltp_decraft_inited ) 
		ltp_decraft_init();
	
	uint hit_pause = ACTION_PAUSE_BASE - (cr.Stat[ST_AGILITY] * ACTION_PAUSE_BONUS_RATE );
	uint action_pause = CLAMP( hit_pause, ACTION_PAUSE_MIN, ACTION_PAUSE_MAX );
	uint[] values = { cr.Id };
	
	CreateTimeEvent( AFTER( REAL_MS( 700 ) ), "e_RepairSound", values, true);
	CreateTimeEvent( AFTER( REAL_MS( 1000 ) ), "gathering@e_TiredenessTimeout", values, true);	

	_CritAnimateUse( cr );

	StartProcess( cr, LTP_DECRAFT, 0, amount, item.Id, action_pause );
	return true;
}

uint process_decraft( Critter@ cr, int& param0, int& param1, int& param2 )
{
	LTPROCESS( cr, param0, LTP_DECRAFT )
	
	uint hit_pause = ACTION_PAUSE_BASE - ( cr.Stat[ST_AGILITY] * ACTION_PAUSE_BONUS_RATE );
	uint action_pause = CLAMP( hit_pause, ACTION_PAUSE_MIN, ACTION_PAUSE_MAX );
  	
	uint amount = param1;
	Item@ item = GetItem( param2 );
	
	if( valid( item ) )
    {
		param0++;
		
		uint decraft_rate = ( cr.Skill[SK_REPAIR] ) + ( cr.Stat[ST_AGILITY] * 10 ) + ( cr.Stat[ST_INTELLECT] * 10 ) + OBJECT_DPA_BASE; 
		int sequence_length = ceil( float( ( amount * 200 ) / ( CLAMP( decraft_rate, OBJECT_DPA_MIN, OBJECT_DPA_MAX ) ) ) );
		
		if( param0 > sequence_length )
		{
			cr.Say( SAY_EMOTE_ON_HEAD, "завершает работу" );
			DecraftResult( cr, item );
			return 0;
		}
		
		uint[] values = { cr.Id };
		CreateTimeEvent( AFTER( REAL_MS( 700 ) ), "e_RepairSound", values, true);
		CreateTimeEvent( AFTER( REAL_MS( 1000 ) ), "gathering@e_TiredenessTimeout", values, true);

		_CritAnimateUse( cr );
		
		return action_pause;
	}
	return 0;
}

bool DecraftResult( Critter& cr, Item& item ) 
{
	uint16[]@ parts;
	decraftItems.get( ""+cr.Id, @parts );
	
	string inform =  "Вы разобрали: ";
	inform += "|0xFFFF00 " + _GetProtoName( item.GetProtoId() );
	inform += "|0x3CF800 , получив: \n";
    for( uint8 i = 0; i < parts.length(); i += 2 ) {
		
		Item@ gainedItem = cr.AddItem( parts[ i ], parts[ i + 1 ] );

		if( gainedItem.GetType() == ITEM_TYPE_WEAPON && gainedItem.Proto.Weapon_MaxAmmoCount > 0 ) {
			gainedItem.AmmoCount = 0;
			int deterioration = GetDeteriorationProcent( item );
			SetDeterioration( gainedItem, deterioration );
			gainedItem.Update();
		}
	
		inform += " - ";
		inform += "|0xFFFF00 " + _GetProtoName( gainedItem.GetProtoId() );
		inform += "|0x3CF800  - ";
		inform += "|0xFFFF00 " + parts[ i + 1 ];
		inform += "|0x3CF800  шт.,\n";
	}
	
	inform[ inform.length() - 2 ] = ' ';
	inform[ inform.length() - 1 ] = ' ';
	cr.Say( SAY_NETMSG, inform );
	decraftItems.delete ( "" + cr.Id );
	
	if ( item.GetCount() > 1 ) {
		item.SetCount(item.GetCount() - 1);
		AskAction( cr, item );
	
	} else {
		DeleteItem( item );
	}
	return true;
}

//Armor radio installation	
bool InstallRadio( Critter& cr, Item& radio, Item& armor ) { //export to main
		
	if( FLAG( armor.Flags, ITEM_RADIO ) ) { 
		cr.Say( SAY_NETMSG, "|0xFFFF00 В этой броне уже встроена рация." ); 
		return false;
	}
	
	if( IsTired( cr ) ) { return false; }
	if( IsTired( cr ) ) { return false; }
		if( cr.IsInjured() ) { 
		cr.Say( SAY_NETMSG, "|0xFF0000 Вы травмированы и не в состоянии установить рацию." );
		return false; 
	}
	
	string fail = "|0xFFFF00 Вы не смогли произвести установку рации!\n";
	
	if( !checkSkill( cr ) ) {
		string skill = "|0x3CF800 Необходимо иметь навыки: \n";
		skill += " - ";
		skill += "|0xFFFF00 Наука";
		skill += "|0x3CF800  - ";
		skill += "|0xFFFF00 150";
		skill += "|0x3CF800 ,\n - ";
		skill += "|0xFFFF00 Ремонт";
		skill += "|0x3CF800  - ";
		skill += "|0xFFFF00 200";
		skill += "|0x3CF800 .";
		cr.Say( SAY_NETMSG, fail + skill ); 
		return false;
	}
	
	if( !checkTools( cr ) ) { 
		string tool = "|0x3CF800 Необходимые инструменты:\n";
		for( uint i = 0; i < RadioInstallTools.length; i++ ) {
			tool += " - ";
			tool += "|0xFFFF00 " + _GetProtoName( RadioInstallTools[i] );
			tool += "|0x3CF800 ,\n";
		}	
		tool[ tool.length() - 2 ] = '.';
		tool[ tool.length() - 1 ] = ' ';
		cr.Say( SAY_NETMSG, fail + tool );
		return false;
	}
	
	if( !checkComponents( cr ) ) {
		string component = "|0x3CF800 Необходимые материалы:\n";
		for( uint i = 0; i < RadioInstallComponents.length; i++ ) {
			component += " - ";
			component += "|0xFFFF00 " + _GetProtoName( RadioInstallComponents[i] );
			component += "|0x3CF800  - ";
			component += "|0xFFFF00 " + RIComponentsAmount[ i ];
			component += "|0x3CF800  шт.,\n";
		}			
		component[ component.length() - 2 ] = ' ';
		component[ component.length() - 1 ] = ' ';
		cr.Say( SAY_NETMSG, fail + component );
		return false;
	}
	
	start_install_radio( cr, armor );
	return true;
}

bool checkSkill( Critter& cr ) {
	if( cr.ParamBase[  SK_REPAIR ] < 200 || cr.ParamBase[ SK_SCIENCE ] < 150 ) { return false; 
	}
	return true;
}

bool checkTools( Critter& cr ) {
	for( uint i = 0; i < RadioInstallTools.length; i++ ) {
		Item@ tool = cr.GetItem( RadioInstallTools[i], -1 );
		if( !valid( tool ) ) {
			return false;
		}
	}
	return true;
}

bool checkComponents( Critter& cr ) {
	for( uint i = 0; i < RadioInstallComponents.length; i++ ) {
		Item@ component = cr.GetItem( RadioInstallComponents[i], -1 );
		uint required_amount = RIComponentsAmount[i];
		if( !valid( component ) || cr.CountItem( RadioInstallComponents[i] ) < required_amount ) {
			return false;
		}
	}
	return true;
}

bool ltp_install_inited = false;
void ltp_install_init()
{
	LTPREG( LTP_INSTALL_RADIO, process_install_radio )
	ltp_install_inited = true;
}

bool start_install_radio( Critter& cr, Item& armor )
{
	if(!ltp_install_inited) 
		ltp_install_init();
	
	uint hit_pause = ACTION_PAUSE_BASE - (cr.Stat[ST_AGILITY] * ACTION_PAUSE_BONUS_RATE );
	uint action_pause = CLAMP( hit_pause, ACTION_PAUSE_MIN, ACTION_PAUSE_MAX );
	uint[] values = { cr.Id };
	
	CreateTimeEvent( AFTER( REAL_MS( 700 ) ), "e_RepairSound", values, true);
	CreateTimeEvent( AFTER( REAL_MS( 1000 ) ), "gathering@e_TiredenessTimeout", values, true);	

	_CritAnimateUse( cr );
	
	StartProcess( cr, LTP_INSTALL_RADIO, 0, 0, armor.Id, action_pause );
	return true;
}

uint process_install_radio( Critter@ cr, int& param0, int& param1, int& param2 )
{
	LTPROCESS( cr, param0, LTP_INSTALL_RADIO )
	
	uint hit_pause = ACTION_PAUSE_BASE - (cr.Stat[ST_AGILITY] * ACTION_PAUSE_BONUS_RATE );
	uint action_pause = CLAMP( hit_pause, ACTION_PAUSE_MIN, ACTION_PAUSE_MAX );
  	Item@ armor = GetItem( param2 );
	if( valid( armor ) )
    {
		param0++;
		
		uint install_rate = ( cr.Skill[SK_REPAIR] ) + ( cr.Stat[ST_AGILITY] * 10 ) + ( cr.Stat[ST_INTELLECT] * 10 ) + OBJECT_DPA_BASE; 
		int sequence_length = ceil( float( ( OBJECT_HP_BASE * 10 ) / ( CLAMP( install_rate, OBJECT_DPA_MIN, OBJECT_DPA_MAX ) ) ) );
		
		if( param0 > sequence_length )
		{
			cr.Say( SAY_EMOTE, "завершает установку рации в броню" );
			InstallRadio( cr, armor );
			return 0;
		}
		
		uint[] values = { cr.Id };
		
		CreateTimeEvent( AFTER( REAL_MS( 700 ) ), "e_RepairSound", values, true);
		CreateTimeEvent( AFTER( REAL_MS( 1000 ) ), "gathering@e_TiredenessTimeout", values, true);

		_CritAnimateUse( cr );
		
		return action_pause;
	}
	return 0;
}

uint e_RepairSound( uint[]@ values )
{
	Critter@ cr = GetCritter(values[0]);
	Map@ map = cr.GetMap();
	map.PlaySound( RepairSounds[ Random( 0, RepairSounds.length() -1 ) ], cr.HexX, cr.HexY, 5 );
	return 0;
}

bool InstallRadio( Critter& cr, Item& armor ) {
	for( uint i = 0; i < RadioInstallComponents.length; i++ ) {
		Item@ component = cr.GetItem( RadioInstallComponents[i], -1 );
		uint required_amount = RIComponentsAmount[i];
		if( !valid( component ) || cr.CountItem( RadioInstallComponents[i] ) < required_amount ) {
			return false;
		}
		_SubItem( component, required_amount);
	}
	SETFLAG( armor.Flags, ITEM_RADIO );
	SETFLAG( armor.Flags, ITEM_CAN_USE );
	return true;
}

//Armor painting
bool TryPaintArmor( Critter& cr, Item& paint, Item& armor ) { //export to main

	uint8 PaintableArmorType = 0;
	uint16 armorPid = armor.GetProtoId();

	if( PaintableRobe.find( armorPid ) != -1 ) {
		PaintableArmorType = 1;
	} else if( PaintableJumpsuit.find( armorPid ) != -1 ) {
		PaintableArmorType = 2;	
	} else if( PaintableLeather.find( armorPid ) != -1 ) {
		PaintableArmorType = 3;
	} else if( PaintableCA1.find( armorPid ) != -1 ) {
		PaintableArmorType = 4;
	} else if( PaintableCA2.find( armorPid ) != -1 ) {
		PaintableArmorType = 5;
	} else if( PaintableCA3.find( armorPid ) != -1 ) {	
		PaintableArmorType = 6;
	} else {
		cr.Say( SAY_NETMSG, "|0xFFFF00 Эту броню перекрасить не удастся." ); 
		return false;
	}
	
	if( IsTired( cr ) ) { return false; }
	if( IsTired( cr ) ) { return false; }
		if( cr.IsInjured() ) { 
		cr.Say( SAY_NETMSG, "|0xFF0000 Вы травмированы и не в состоянии перекрасить броню." );
		return false; 
	}
	
	StartMenuPaintArmor( cr, armor, PaintableArmorType );
	return true;
}

class MenuPaintArmor: CenteredMenuHandler {
    uint armor_id;
    uint map_id;
	uint8 armor_type;
	
    MenuPaintArmor( Item& armor, Map& map, uint8 PaintableArmorType ) {
        armor_id = armor.Id;
        map_id = map.Id;
		armor_type = PaintableArmorType;
    }

    bool MenuUpdate( Critter& cr, iDialogBox& menu ) {
        Map@ map = GetMap( map_id );
        Item@ armor = GetItem( armor_id );
	
        if( map is null || armor is null ) {
            return false;
        }
		
		uint16[] armorType;
		switch( armor_type ) 
		{
			case( 1 ):
				armorType = PaintableRobe;
				break;
			case( 2 ):
				armorType = PaintableJumpsuit;
				break;
			case( 3 ):
				armorType = PaintableLeather;
				break;
			case( 4 ):
				armorType = PaintableCA1;
				break;
			case( 5 ):
				armorType = PaintableCA2;
				break;
			case( 6 ):
				armorType = PaintableCA3;
				break;
		}
		uint len = armorType.length();
		for( uint i = 0; i < len; i ++ ) {
			ProtoItem@ armorBtn = GetProtoItem( armorType[i] );
			uint16 armorPid = armorBtn.ProtoId;
			string name = _GetProtoShortDisc( armorPid );
			if( menu.Button( name ) ) {
				cr.StatBase[ST_VAR7] = armorPid;
				start_paint_armor( cr, armor );
				return false;
			}
		}
		return true;
    }
	
	// UI менюхи
    string@ Description( Critter& cr ) {
	
		string info = "Покраска брони";
		Item@ armor = GetItem( armor_id );
		
		return info;
    }
	
    string@ ButtonCancel() {
        return ButtonDecorator( "Скрыть меню", null );
    }
}

void StartMenuPaintArmor( Critter& cr, Item& armor, uint8 PaintableArmorType )
{
    Map@ map = cr.GetMap();
    if( map is null ) {
        return;
    }

    iMenuHandler@ handler = MenuPaintArmor( armor, map, PaintableArmorType );
    iDialogBox@ menu = OpenMenu( cr, "Покраска брони", handler );
}

bool ltp_paint_inited = false;
void ltp_paint_init()
{
	LTPREG( LTP_ARMOR_PAINT, process_paint_armor )
	ltp_paint_inited = true;
}

bool start_paint_armor( Critter& cr, Item& armor )
{
	if( !ltp_paint_inited ) {
		ltp_paint_init();
	}
	
	uint hit_pause = ACTION_PAUSE_BASE - (cr.Stat[ST_AGILITY] * ACTION_PAUSE_BONUS_RATE );
	uint action_pause = CLAMP( hit_pause, ACTION_PAUSE_MIN, ACTION_PAUSE_MAX );
	uint[] values = { cr.Id };
	
	CreateTimeEvent( AFTER( REAL_MS( 700 ) ), "e_RepairSound", values, true);
	CreateTimeEvent( AFTER( REAL_MS( 1000 ) ), "gathering@e_TiredenessTimeout", values, true);	

	cr.SetAnims( COND_LIFE, 0, ANIM2_CROUCH );
	
	StartProcess( cr, LTP_ARMOR_PAINT, 0, armor.Id, 0, action_pause );
	return true;
}

uint process_paint_armor( Critter@ cr, int& param0, int& param1, int& param2 )
{
	LTPROCESS( cr, param0, LTP_ARMOR_PAINT )
	
	uint hit_pause = ACTION_PAUSE_BASE - ( cr.Stat[ST_AGILITY] * ACTION_PAUSE_BONUS_RATE );
	uint action_pause = CLAMP( hit_pause, ACTION_PAUSE_MIN, ACTION_PAUSE_MAX );
  	Item@ armor = GetItem( param1 );
	
	if( valid( armor ) )
    {
		param0++;
		
		uint install_rate = ( cr.Skill[SK_REPAIR] ) + ( cr.Stat[ST_AGILITY] * 10 ) + ( cr.Stat[ST_INTELLECT] * 10 ) + OBJECT_DPA_BASE; 
		int sequence_length = ceil( float( ( OBJECT_HP_BASE * ( armor.Proto.Item_Subtype - 69 ) ) / ( CLAMP( install_rate, OBJECT_DPA_MIN, OBJECT_DPA_MAX ) ) ) );
		
		if( param0 > sequence_length )
		{
			cr.Say( SAY_EMOTE, "завершает перекраску брони" );
			PaintArmor( cr, armor );
			cr.SetAnims( COND_LIFE, 0, ANIM2_IDLE );
			return 0;
		}
		
		uint[] values = { cr.Id };
		
		CreateTimeEvent( AFTER( REAL_MS( 700 ) ), "e_RepairSound", values, true);
		CreateTimeEvent( AFTER( REAL_MS( 1000 ) ), "gathering@e_TiredenessTimeout", values, true);

		return action_pause;
	}
	return 0;
}

void PaintArmor( Critter& cr, Item& armor )
{
    if( !valid( armor ) ) { return; }
    if( cr.StatBase[ST_VAR7] == 0 ) { return; }
    armor.ChangeProto( cr.StatBase[ST_VAR7] );
    armor.Update();
    cr.StatBase[ST_VAR7] = 0;
    cr.DeleteItem ( PID_COLORS, 1 );
}

#endif //REPAIR