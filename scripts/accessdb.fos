//gm access database script
//pm

/*
 * format :
 * sName:sPass:iAcce:iActive
 * 
 * TODO:
 * account add command
 * account delete command
 * account edit pass command
 * account disable\enable command
 * account change access command
 */

#include "_defines.fos"

#define ACCESS_DB_PATH		(".\\")
#define ACCESS_DB_NAME		("access.db")

#define ACCESS_DB_TEST		(":")
#define ACCESS_DB_EOL		("\n")

AccessDB AccountDataBase;

void AccountDataBaseInit(){
	AccountDataBase.DbLoad();
}

void AccountDataBaseMaster(){
	AccountDataBase.DbAccountAdd("master", "master", 0);
}

void AccountDataBaseCheck(string accountPass){
	AccountDataBase.DbAccountExist(accountPass);
}

void AcconuntDataBaseAuth(Critter& cr, string accountPass){
	AccountDataBase.DbAuthtorize(cr, accountPass);
}

class Account
{
	string	 	Name;
	string	 	Password;
	uint8	 	Access;
	uint 		GameId;
	bool	 	Active;
	
	Account(){
		Name = "";
		Password = "";
		Access = 0;
		GameId = 0;
		Active = false;
	}
	
	Account(string name, string password, uint8 access, uint id, bool active){
		Name = name;
		Password = password;
		Access = access;
		GameId = id;
		Active = active;
	}
	
}

class AccessDB
{
	Account[]	Accounts;
	
	AccessDB(){
		DbVirtualClear();
	}
	
	void DbLoad(){
		file f;
		
		if(f.open(ACCESS_DB_PATH+ACCESS_DB_NAME, "r") != -1){
			while(!f.isEndOfFile()){
				string line = "";
				f.readLine(line);
				//string@[] @ layer = split( word2, LINE_TOKEN );
				if(line.length() > 0){
					string@[]@ fields = split(line, ACCESS_DB_TEST);
					
					if(fields.length % 3 != 0){
						Log("Account DB !load : fields count error");
						return;
					}
					
					DbVirtualClear();
					
					for(uint8 i = 0, j = fields.length(); i < j; ++i){
						if(i % 3 == 0){
							
							int temp = 0;
							StrToInt(fields[i+2], temp);
							
							/*AccountName.insertLast(fields[i]);
							AccountPass.insertLast(fields[i+1]);
							AccountAcce.insertLast(temp);*/
							
							//Account @tempAcc(fields[i], fields[i+1], temp, true); 
							Accounts.insertLast(Account(fields[i], fields[i+1], temp, 0, true));
						}
					}
				}
			};
			
			Log("Account DB load successful, accounts : "+Accounts.length());
		}
	}
	
	private void DbAccountInsert(string line){
		file f;
		
		if(f.open(ACCESS_DB_PATH+ACCESS_DB_NAME, "a") != -1){
			f.writeString(line);
		}
	}
	
 	private int DbAccountCheck(string line, uint8 deep){
		
		string@[]@ fields = split(line, ACCESS_DB_TEST);

		for(uint8 i = 0, j = Accounts.length(); i < j; ++i){
		  
			if(Accounts[i].Name == fields[0]){
				Log( "find level 0" );
				if( deep > 0 ) 
				{
					Log("find level 1");
					if( Accounts[i].Password == fields[1] )
						return i;
					else
						return -1;
				}
				else return i;
			}
		}
		
		return -1;
	}
	
	private void DbVirtualClear(){
	  
		Accounts.resize(0);
	}
	
	private string FormatAccount(string name, string pass, uint8 access){
		return (""+name+ACCESS_DB_TEST+pass+ACCESS_DB_TEST+access+ACCESS_DB_EOL);
	}
	
	private bool DbSetAccess(Critter& cr, int index){
		if(index != -1 && Accounts[index].Active){
			//cr.SetAccess(ACCESS_ADMIN);
			Accounts[index].GameId = cr.Id;
			cr.Say(SAY_NETMSG, "Access changed to "+Accounts[index].Access);
			return true;
		}
		
		return false;
	}
	
	bool DbAuthtorize(Critter& cr, string name, string pass){
		  
		int index = DbAccountCheck(FormatAccount(name, pass, 0), 1);
		Log("index check "+index);
		return DbSetAccess(cr, index);
		
	}
	
	bool DbAuthtorize(Critter& cr, string accountPass){
		  
		int index = DbAccountCheck(accountPass, 1);
		Log("index check "+index);
		return DbSetAccess(cr, index);
		
	}
	
	void DbAccountAdd(string name, string pass, uint8 access){
		DbAccountInsert(FormatAccount(name, pass, 0));
	}
	
	bool DbAccountExist(string accountPass){
		return (DbAccountCheck(accountPass, 1) != -1);
	}
	
	bool DbAccountExist(string account, string pass){
		return (DbAccountCheck(FormatAccount(account, pass, 0), 1) != -1);
	}
}

void testdbload(Critter& cr, int, int, int){
	AccountDataBaseInit();
}

void testdbmaster(Critter& cr, int, int, int){
	AccountDataBaseMaster();
}