// Author: Anuri
// Mentors: Terpsic Mims, qthree, Mio, Frank Kost, Jonathan Joestar, Vvish
#ifndef CHOPPING
#define CHOPPING

#include "_utils.fos"
#include "_ltp.fos"
#include "gathering_h.fos"
#include "critter_skills_h.fos"

// Tree array search
uint16 FindTree( Item@ treeItem )
{
    return FindTree( treeItem.GetProtoId() );
}

uint16 FindTree( uint16 pid )
{    
    int index = 0;
    
    for( uint i = 0, l = TreeList.length(); i < l; i++ )
    {
        index = TreeList[i].find( pid );
        if( index != -1 )
		{
            return ++ i;
		}
	}
    return 0;
}

bool ltp_chopping_inited = false;
void ltp_chopping_init()
{
	LTPREG( LTP_CHOPPING, process_chopping )
	ltp_chopping_inited = true;
}

bool PrepareChopping( Critter& cr, Item@ tool, Item@ tree ) 
{
	Map@ map = cr.GetMap();
    if( !valid( map ) ) 
    {
    	return false;
    }
	if( !valid( tool ) || !valid(tree) )
	{
		return false;
	}
   	uint toolPid = tool.GetProtoId();
	if( ChoppingTools.find( toolPid ) == -1 )
	{
		return false;
	}
	if( tool.CritSlot != SLOT_HAND1 )
	{
		cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_EQUIP_TOOL );
		return false;
	}
	uint8 Tree = FindTree( tree );
	if( Tree == 0 )
	{
		return false;
	}
	if( Tree == 1 )
	{
		if( toolPid == PID_SHOVEL )
		{
			cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_WRONG_INSTRUMENT );
			return false;
		}
	}
	
	if( IsTired( cr ) )
	{
		return false;
	}
	if( cr.IsInjured() )
	{ 
		cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_INJURED_CANT_WORK );
		return false; 
	}
	
	start_chopping( cr, tool, tree );
	return true;
}

bool start_chopping( Critter& cr, Item& tool, Item& tree )
{
	if(!ltp_chopping_inited)
	{
		ltp_chopping_init();
	}
	
	if( valid( tool ) && valid( tree ) )
	{	
		uint hit_pause = ACTION_PAUSE_BASE - (cr.Stat[ST_AGILITY] * ACTION_PAUSE_BONUS_RATE );
		uint action_pause = CLAMP( hit_pause, ACTION_PAUSE_MIN, ACTION_PAUSE_MAX );
		StartProcess( cr, LTP_CHOPPING, 0, tool.Id, tree.Id, action_pause );
		CreateTimeEvent( AFTER( REAL_MS( 700 ) ), "e_ChoppingSound", cr.Id, false);
		CreateTimeEvent( AFTER( REAL_MS( 1000 ) ), "gathering@e_TiredenessTimeout", cr.Id, true);
		return true;
	}
	return false;
}

uint process_chopping( Critter@ cr, int& param0, int& param1, int& param2 )
{
    LTPROCESS( cr, param0, LTP_CHOPPING )

	uint hit_pause = ACTION_PAUSE_BASE - (cr.Stat[ST_AGILITY] * ACTION_PAUSE_BONUS_RATE );
	uint action_pause = CLAMP( hit_pause, ACTION_PAUSE_MIN, ACTION_PAUSE_MAX );
    Item@ tool = GetItem( param1 );
  	Item@ tree = GetItem( param2 );
  	if( valid( tool ) && valid( tree ) )
    {
      	param0++;
  		uint object_dpa = ( cr.Skill[SK_CHOPPING] ) + ( cr.Stat[ST_STRENGTH] * 10 ) + OBJECT_DPA_BASE; 
		int sequence_length = ceil( float( OBJECT_HP_BASE / ( CLAMP( object_dpa, OBJECT_DPA_MIN, OBJECT_DPA_MAX ) ) ) );
		if( param0 > sequence_length )
		{
                uint8 Tree = FindTree( tree );
                if( Tree == 0 )
                {
                    return 0;
                }
				if( Tree == 1 )
                {
                    if( tree.RESOURCE_CAPACITY <= OBJECT_HP_BASE )
					{	
						CutTree( cr, tree );
					}
					else
					{
						if( tree.RESOURCE_CAPACITY > ( OBJECT_HP_BASE * 2 ) )
							ChangeFrame( tree, 1 );
						if( tree.RESOURCE_CAPACITY <= ( OBJECT_HP_BASE * 2 ) )
							ChangeFrame( tree, 2 );
					}
                }
				if( Tree == 2 )
                {
                    if( tool.GetProtoId() != PID_SHOVEL )
                    {
                        cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_USE_SHOWEL );
                        return 0;
                    }
					if( tree.RESOURCE_CAPACITY == 0 )
					{
						EraseTimeEvent( tree.EVENT );
						tree.EVENT = 0;
						DeleteItem( tree );
					}
				}
			Profit( cr, tool, tree );
			int skillNum = SK_CHOPPING;
			Accident( cr, skillNum );
        }
		else
		{
			_CritAnimateSwing(cr);
			CreateTimeEvent( AFTER( REAL_MS( 700 ) ), "e_ChoppingSound", cr.Id, false);
			CreateTimeEvent( AFTER( REAL_MS( 1000 ) ), "gathering@e_TiredenessTimeout", cr.Id, true);
			return action_pause;
		}
    }
	return 0;
}
//Action sound delay time event
uint e_ChoppingSound(uint[]@ values)
{
	Critter@cr = GetCritter(values[0]); 
	Map@ map = cr.GetMap();
	string sound = _GetOneRandom( ChoppingSounds );
	PlayGatheringSound( cr, map, sound, 30 );
	return 0;
}

//Cut tree pid change, condition to regrow
uint CutTree( Critter& cr, Item@ tree )
{
	tree.ORIGINAL_TREE_PID = tree.GetProtoId();
	uint[] values = { tree.Id };
	tree.TREE_REGROW_TIME = 30 * 4; //time mul
	ChangeFrame( tree, 0 );
	switch( tree.RESOURCE_DNA )
	{
		case( 1 ):
			tree.ChangeProto( PID_TREE_CS1 );
			break;
		case( 2 ):
			tree.ChangeProto( PID_TREE_CS2 );
			break;
		case( 3 ):
			tree.ChangeProto( PID_TREE_CS3 );
			break;
		case( 4 ):
			tree.ChangeProto( PID_TREE_CL1 );	
			break;
		case( 5 ):
			tree.ChangeProto( PID_TREE_CL2 );	
			break;
		case( 6 ):
			tree.ChangeProto( PID_TREE_CL3 );	
			break;
		case( 7 ):
			tree.ChangeProto( PID_TREE_CL4 );	
			break;
		case( 8 ):
			tree.ChangeProto( PID_TREE_CL5 );	
			break;
		case( 9 ):
			tree.ChangeProto( PID_TREE_GL2S );	
			break;
	}
	return 0;
}

// Regrowth time event
uint e_TreeRegrow( uint[]@ values )
{
	uint itemId = values[0];
	Item@ cutTree = GetItem( itemId );
	if( valid( cutTree ) )    
	{
		uint newTreePID = cutTree.ORIGINAL_TREE_PID;
		cutTree.ChangeProto( newTreePID );
		cutTree.RESOURCE_CAPACITY = cutTree.Proto.StartValue_1;
		ChangeFrame( cutTree, 0 );
		EraseTimeEvent( cutTree.EVENT );
		cutTree.EVENT = 0;
	}
	return 0;
}

//Loot
bool Profit( Critter& cr, Item@ tool, Item@ tree )
{
	int amount = 0;
	uint toolMod = tool.GetProtoId();
	switch( toolMod )
	{	
		case( PID_REVKNIFE2 ):
		case( PID_MACHETE ):
			amount--;
			break;
		case( PID_AXE2 ):
			amount++;
			break;
	}
	
	uint lootRoll = ( Random( 0, 2 ) + ( cr.ParamBase[ SK_CHOPPING ] / 50 ) );
	amount+= lootRoll;
	if( amount < 1 )
	{
		 cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_NOTHING_USEFULL );
	}
	else
	{
		
		int skillNum = SK_CHOPPING;
		raiseSkill( cr, skillNum );
		
		cr.AddItem( PID_FIREWOOD, amount );
		
		cr.RunClientScript( "client_main@__message_result", PID_FIREWOOD, amount, 0, null, null );
		
		cr.StatBase[ST_EXPERIENCE] += 25;
		
		tree.RESOURCE_CAPACITY = tree.RESOURCE_CAPACITY - OBJECT_HP_BASE;		
	}
	return true;
}

void CutTreeManager() //export to gameplay.fos
{    
    Map@[] maps;
    for( int i = 0, iend = GetAllMaps( 0, maps ); i < iend; i++)
	{   
		CheckCutTrees( maps[i] );
	}
}

void CheckCutTrees( Map& map )
{
	if( valid( map ) )
	{ 
		Item@[] cutTrees = {};
		for( uint i = 0; i < TreeList[1].length(); i++ )
		{
			map.GetItems( TreeList[1][i], cutTrees );
		}
		if( cutTrees.length() > 0 )
		{
			Item@ tree = null;
			for( uint j = 0; j < cutTrees.length(); j++ )
			{
				@tree = cutTrees[j];
				
				if( !valid( tree ) )
				{
					continue;
				}
				if( tree.ORIGINAL_TREE_PID == 0 )
				{
					continue;
				}
				
				if( tree.TREE_REGROW_TIME > 0 )
				{
					tree.TREE_REGROW_TIME --;
				}
				else
				{
					uint[] values = { tree.Id };
					uint period = Random( 1, 12 );
					tree.EVENT = CreateTimeEvent( AFTER( REAL_MINUTE( period ) ), "e_TreeRegrow", values, true );
				}
			}
		}
	}
}

//ONE-TIME LIVE SERVER TREE UPGRADE
void _TreeUpgrade (Critter& player, int param0, int param1, int param2)
{
	for( int ii = 0, jj = TreeList[1].length() ; ii < jj; ii++)
	{
		array<Item@> worldTrees = array<Item@>();
		int count = GetAllItems(TreeList[1][ii], @worldTrees);
		for( int treeIndex = 0; treeIndex < count; treeIndex++ )
		{
			Item@ tree = worldTrees[treeIndex];
			EraseTimeEvent( tree.EVENT );
			tree.EVENT = 0;
			tree.TREE_REGROW_TIME = Random( 4, 24 );
		}
	}
}
#endif //CHOPPING