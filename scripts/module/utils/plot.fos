Color@ NewColor( int r = 255, int g = 255, int b = 255, bool inherited = true )
{
	Color@ result = Color();
	result.r = r;
	result.g = g;
	result.b = b;
	
	result.inherited = inherited;
	
	return result;
}

/*’ранит в себе данные о цвете, может наследовать от хоз€ина (работу с inherited следует довести до ума).*/
class Color
{
	int r;
	int g;
	int b;
	
	bool inherited;
	
	uint rgb()
	{
		return COLOR_RGB( r, g, b );
	}

	uint rgba(int a)
	{
		return COLOR_RGBA( r, g, b, a );
	}
	
	string info()
	{
		return ( inherited ? "i" : "!" ) + " " + r + " " + g + " " + b;
	}
}

Dot@ NewDot( Dot@ source ) 
{ 
	Dot@ result = Dot();
	
	result.x = source.x;
	result.y = source.y;
	
	@result.color = source.color;

	return result; 
}
Dot@ NewDot( int x = 0, int y = 0 ) { return NewDot( x, y, NewColor() ); }
Dot@ NewDot( int x, int y, Color@ color )
{
	Dot@ result = Dot();
	
	@result.color = color;
	
	result.x = x;
	result.y = y;
	
	return result;
}

/*“очка линии*/
class Dot : ProtoObject
{
	int x;
	int y;

	Line@ owner;
	Color@ color;
	
	float dist( float x, float y )
	{
		return Distance( this.x, this.y, x, y );
	}
	
	Dot@ remap( int x0, int y0, float scale )
	{
		x = x0 + x * scale;
		y = y0 + y * scale;
		
		return this;
	}

	Dot@ scale( int x0, int y0, float scale )
	{
		return NewDot(this).remap( x0, y0, scale );
	}
}

Line@ NewLine( Color@ color ) { return NewLine( null, color ); }
Line@ NewLine( string@ name = null, Color@ color = null )
{
	Line@ result = Line();
	
	result.name = valid(name) ? name : "";
	@result.color = color;
	
	result.dots.clear();
	
	return result;
}

/* рива€, попыталс€ использовать чуть более вмен€емый подкласс-список дл€ хранени€ точек*/
class Line
{
	ProtoObjectList dots;
	Color@ color;
	string name;
	
	Line@ add( int x, int y ) { return add( NewDot( x, y ) ); }
	Line@ add( Dot@ dot )
	{
		dots.add( dot );
		@dot.owner = @this;
		
		if( dot.color.inherited )
			dot.color = this.color;
		
		return this;
	}
	Dot@ dot( int index ) { return cast<Dot@> ( @dots.get(index) );	}
	Dot@ first() { return dot(0); }
	Dot@ last() { return dot(-1); }
	
	Dot@ closest( float x, float y )
	{ 
		if( dots.length() == 0 ) return null;
		
		float[] dist;
		for( uint i = 0, l = dots.length(); i < l; i++ )
			dist.insertLast( dot(i).dist( x, y ) );
		
		int n = MinIndex(dist);
		if( n == -1 )
			return null;
		
		return dot(n);
	}
	
	void draw( int x0 = 0, int y0 = 0, bool looped = false, float scale = 1 ) 
	{ //TODO: Ќужно тут как-то разветвить логику, т.к. отрисовщик может быть и на стороне клиента, и на стороне сервера, и вообще сторонней dll
		#ifdef __CLIENT
			DrawLine( this, x0, y0, scale, looped ); 
		#endif
	}
}