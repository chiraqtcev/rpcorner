bool CraftingInjure( Critter@ cr ) {
	if( !valid(cr) || cr.StatBase[ ST_BODY_TYPE ] >= BT_BRAHMIN )
		return false; //“равмы работают только на людей.
	
	uint[] no_craft_damages = { DAMAGE_RIGHT_ARM, DAMAGE_LEFT_ARM }; //{ DAMAGE_EYE, DAMAGE_RIGHT_ARM, DAMAGE_LEFT_ARM, DAMAGE_RIGHT_LEG, DAMAGE_LEFT_LEG };
	for( uint i = 0, l = no_craft_damages.length(); i < l; i++ )
		if( cr.DamageBase[no_craft_damages[i]] != 0 )
			return true;
		
	return false;
}

bool Activated( Critter@ cr ) 
{
	if( !valid(cr) || ( cr.Param[ QST_GAMEMODE ] != GAME_SURVIVAL && cr.Param[ QST_GAMEMODE ] != GAME_ADVENTURE ) )
		return false;

	return true;
}

int RollStat( Critter@ cr, int p1 )
{
	return Random(1, 12) + cr.Stat[p1];
}


bool replacedBy( Item@ &source, uint pid )
{
	Map@ map = GetMap( source.MapId );
	if( !valid( map ) ) return false;
	
	uint16 hx = source.HexX, hy = source.HexY;
	Item @item = map.AddItem( hx, hy, pid, 1 );
	
	DublicateItem( item, source );

	DeleteItem( source);
	@source = item;
	
	return true;
}

bool SamePic( uint PicMap, uint pid )
{
	ProtoItem@ proto = GetProtoItem( pid );
	if( !valid( proto ) ) return false;
	
	return proto.PicMap == PicMap;
}

Critter@[] getControlledNPC( Critter& cr )
{
    Critter@[] result;
    cr.GetFollowGroup( FIND_LIFE | FIND_ONLY_NPC, result );
	return result;
}

bool sameFaction( Critter& cr1, Critter& cr2 )
{
	if( cr1.ParamBase[ ST_FACTION ] != 0 )
		return cr1.ParamBase[ ST_FACTION ] == cr2.ParamBase[ ST_FACTION ];
	
	return false;
}

bool isOwningNPC( Critter& cr, Critter& npc )
{
	if( npc.ParamBase[ ST_FACTION ] != 0 )
		return npc.ParamBase[ ST_FACTION ] == cr.ParamBase[ ST_FACTION ];
	
	return npc.ParamBase[ MERC_MASTER_ID ] == int( cr.Id );		
}

bool isTesting( Critter& cr, int flag )
{
	return cr.Param[ QST_GAMEMODE ] == GAME_TEST && FLAG( cr.ParamBase[CR_TEST_MODE], flag );
}

bool hasItems( Critter& cr, uint16[] pids, int slot = -1 )
{
	return getItems( cr, pids, slot ).length() > 0;
}

Item@[] getItems( Critter& cr, uint16[] pids, int slot = -1 )
{
	Item@[] result;
	
	Item@[] items;
	uint count = cr.GetItems( uint(slot), items );
	
	for( uint i = 0; i < count; i++ )
	{
		uint16 itemPID = items[i].GetProtoId();
		
		if( pids.find( itemPID ) != -1 )
		{
			result.insertLast( items[i] );
			continue;
		}
		
		if( fast_containers.find( itemPID ) != -1 )
		{
			Item@[] subitems;
			uint subcount = items[i].GetItems( 0, subitems );
			
			for( uint j = 0; j < subcount; j++ )
				if( pids.find( subitems[j].GetProtoId() ) != -1 )
					result.insertLast( subitems[j] );						
		}
	}
	
	return result;
}

bool hasItem( Critter& cr, uint16 pid = 0, int slot = -1 )
{
	return valid( getItem( cr, pid, slot ) );
}

Item@ getItem( Critter& cr, uint16 pid = 0, int slot = -1 )
{
	Item@ result = cr.GetItem( pid, uint(slot) );
	if( valid( result ) )
		return result;

	Item@[] items;
	uint count = cr.GetItems( uint(slot), items );
	
	if( pid == 0 && count > 0 )
		return items[0];

	for( uint i = 0; i < count; i++ )
	{
		uint16 itemPID = items[i].GetProtoId();
		
		if( itemPID == pid )
			return items[i];
		
		if( fast_containers.find( itemPID ) != -1 )
		{
			Item@[] subitems;
			uint subcount = items[i].GetItems( 0, subitems );
			
			for( uint j = 0; j < subcount; j++ )
				if( subitems[j].GetProtoId() == pid )
					return subitems[j];
		}
	}
	return null;
}

int rollLuck( Critter@ cr )
{
	if( !valid( cr ) ) return 0;
	
return rollLuck( cr.Stat[ST_LUCK] );
}
int rollLuck( int luck )
{
	if( luck < 6 )
		return luck - 6;//-1 при 5 удачи, и -5 при 1 удачи
	
	return luck - 5;//+1 при 6 удачи, и +5 при 10 удачи
}

string IdName( Critter& cr )
{
	return "#" + cr.Id + ( cr.IsPlayer() ? " " + GetPlayerName( cr.Id ) : "" );
}

bool isContainer( Item@ item )
{
	return valid( item ) && item.GetType() == ITEM_TYPE_CONTAINER && item.Proto.Container_Volume > 0;
}

Critter@ getTarget( Critter& cr, int crId = 0 )
{
	Critter@ target = null;
	if( crId == 0 )
	{
		crId = cr.Id;
		@target = @cr;
	}
	else
	{
		@target = GetCritter( crId );
	}
	
	return target;
}

uint LoadedPercent( Item& item )
{
  return item.GetType() != ITEM_TYPE_CONTAINER ? 0 : ContainmentVolume( item ) * 100 / item.Proto.Container_Volume;
}

uint ItemsWeight( Critter& cr )
{
	return 	ItemsWeight( cr, SLOT_INV ) + 
			ItemsWeight( cr, SLOT_HAND1 ) + 
			ItemsWeight( cr, SLOT_HAND2 ) + 
			ItemsWeight( cr, SLOT_HEAD ) + 
			ItemsWeight( cr, SLOT_BACK ) + //”читываетс€ тип контейнера в слоте, облегчающий вес.
			ItemsWeight( cr, SLOT_MISC ) + //”читываетс€ тип контейнера в слоте, облегчающий вес.
			ItemsWeight( cr, SLOT_ARMOR ) * 0.5;
}

//ContainerWeightEase
uint ItemsWeight( Critter& cr, int slot )
{
	if( slot == SLOT_BACK || slot == SLOT_MISC )
	{
		Item@ ItemInSlot = cr.GetItem( 0, slot );
		if( valid( ItemInSlot ) )
			return ItemsWeight( ItemInSlot ) * ContainerWeightEase( ItemInSlot );
	}

    Item@[] list;
    cr.GetItems( slot, list );
	
    for( uint i = 0; i < list.length(); i++ )
        if( list[i].GetType() == ITEM_TYPE_CONTAINER )
        {
            Item@[] sublist;
            list[i].GetItems( 0, sublist );

            for( uint j = 0, jmax = sublist.length(); j < jmax; j++ )
                list.insertLast( sublist[j] );
        }
    
    uint result = 0;
    for( uint i = 0, imax = list.length(); i < imax; i++ )
        if( valid( list[i] ) )
        {
            result += list[i].GetCount() * list[i].Proto.Weight;

            if( Flasks.find( list[i].GetProtoId() ) != -1 ) {
                result += list[i].Val2;
			}
 
			if( glass_bottles[2].find(  list[i].GetProtoId() ) != -1 ) {
				Item@ openedBottle = list[i];
				result -= openedBottle.Proto.Partial_Item * 100 - list[i].Val2;
			}
		}
        else
            cr.Say( SAY_NETMSG, "#" + i + " !valid" );
    
    return result;
}

uint ItemsWeight( Item& item )
{ 
	return ItemsWeight( item, 0 ); 
}

uint ItemsWeight( Item& item, int count )
{
	if( item.GetType() != ITEM_TYPE_CONTAINER ) {
		return ( count == 0 ? item.GetCount() : count ) * item.Proto.Weight;
	}
	
    Item@[] list;
	item.GetItems( 0, list );

	for( uint i = 0; i < list.length(); i++ ) {
		if( list[i].GetType() == ITEM_TYPE_CONTAINER ) {
			Item@[] sublist;
			list[i].GetItems( 0, sublist );

			for( uint j = 0, jmax = sublist.length(); j < jmax; j++ ) {
				list.insertLast( sublist[j] );
			}
		}
	}
	
    uint result = 0;
	for( uint i = 0, imax = list.length(); i < imax; i++ ) {
		if( valid( list[i] ) ) {
			
			result += list[i].GetCount() * list[i].Proto.Weight;
			
			if( list[i].GetProtoId() == PID_POT_ALCO || Flasks.find( list[i].GetProtoId() ) != -1 ) {
				result += list[i].Val2;
			}
			
			if( glass_bottles[2].find( list[i].GetProtoId() ) != -1 ) {
                result += ( list[i].Proto.Weight - ( list[i].Proto.Partial_Item * 100 - list[i].Val2 ) ); // Val2 отвечает за заполненность тары, обратна€ логика дл€ бутылок
			}
		}
    }
    return result + item.GetCount() * item.Proto.Weight;
}

float ContainerBonusWeight( Item@ item )
{
	if( !valid( item ) ) return 0;
	
	switch( item.GetProtoId() )
	{
		case( PID_CR_CART ): return 3;
		case( PID_CR_BOX ):  return 1;
	}
	
	return 0.5;
}

float ContainerWeightEase( Item@ item )
{
	if( !valid( item ) ) return 0;
	
	switch( item.GetProtoId() )
	{
		case( PID_BACKPACK ):
		case( PID_PORTABLE_REFRIGERATOR ):
		case( PID_STUFF_SUPPLIES):		
			return 0.5;
		case( PID_BROWN_BAG ):
		case( PID_TRAVEL_BAG ):
		case( PID_CHEMTEC_CASE ):
		case( PID_METAL_CASE ):
		case( PID_BLOODY_FIRST_AID_BAG ):
		case( PID_FIRST_AID_BAG ):
		case( PID_cashbag ):
		case( PID_DOCTORS_BAG ):
		case( PID_FIRST_AID_KIT ):		
		case( PID_FIELD_MEDIC_KIT ):		
		case( PID_PARAMEDICS_BAG ):		
		case( PID_MEDICAL_SUPPLIES ):		
		case( PID_BRIEFCASE ):		
			return 0.8;
		case( PID_PORTMONE ):
		case( PID_AMMO_BELT ):
			return 0.1;
	}
	
	return 1.0;
}

int SNEAK_TIMEOUT( Critter@ cr )
{
	if( !valid( cr ) ) return 0;
	
	return __FullSecond + REAL_SECOND( MAX( 34 - cr.Stat[ ST_SEQUENCE ], 3 ) );
}

void setTimeout( Critter@ cr, uint id, int value )
{
	if( !valid( cr ) ) return;
	if( cr.Timeout[ id ] < int( REAL_SECOND(value) ) )
		cr.TimeoutBase[ id ] = __FullSecond + REAL_SECOND(value);
}

bool Find( Critter@& link, int id )
{
	if( id == 0 ) return false;
	@link = GetCritter( uint( id ) );	
	return valid( link );
}

Item@[] getItemsAround( Item& target )
{
	Item@[] empty_result; // остыль, т.к. нет нормального преобразовани€ типов из null.

	Map@ map = GetMap( target.MapId );
	if( !valid( map ) && Warning( "Can't find items around item #" + target.Id + ", as it's at the global map.", true ) ) return empty_result;
	return getItemsAround( map, target.HexX, target.HexY, 6 );

}

Item@[] getItemsAround( Critter& target )
{
	Item@[] empty_result; // остыль, т.к. нет нормального преобразовани€ типов из null.

	Map@ map = target.GetMap( );
	if( !valid( map ) && Warning( "Can't find items around critter #" + target.Id + ", as it's at the global map.", true ) ) return empty_result;
	return getItemsAround( map, target.HexX, target.HexY, 6 );
}

Item@[] getItemsAround( Map& map, uint16 x, uint16 y, uint8 range ) //TODO: range arg
{
	if( range == 0 ) {
		range == 1;
	}
	Item@[] result;
	
	for( uint i = 0; i < range; i++ )
	{
		uint16 tx = x, ty = y;
		map.MoveHexByDir( tx, ty, i, 1 );
		map.GetItems( tx, ty, result );
	}
	map.GetItems( x, y, result );
	
	return result;
}

string itemInfo( Item@ item )
{
	if( !valid( item ) )
		return "[пусто]";
	
	return "[" + item.GetProtoId() + ":" + item.GetCount() + "]";
}

string itemDesc( Scenery@ target )
{
	return !valid( target ) ? "[null]" : itemName( target.ProtoId ) + " PID " + target.ProtoId;
}

string itemDesc( Item@ item ) 
{
	if( !valid( item ) ) return "[null]";
	
	return itemName( item ) + itemCount(item) + " " + item.GetProtoId() + "#" + item.Id;
}

string itemName( Item& item ) 
{ 
	return itemName( item.GetProtoId(), Item_GetLexems( item ) ); 
}

string itemName( uint pid, string@ lexems = null )
{
	string@ name = GetItemMsgStr( pid * 100 );
	return valid( name ) ? "[ " + name + ( valid( lexems ) ? ", " + lexems : "" ) + " ]" : "";
}
string itemNameID( uint id ) 
{ 
	Item@ item = GetItem( id );
	if( !valid( item ) ) return "[null]";
	return itemName( item ); 
}

string getPID_name( int pid )
{
	string@ text = GetItemMsgStr( pid );
	return valid( text ) ? text : "[PID:" + pid + "]";
}

string itemCount( Item& item )
{
	if( !item.IsStackable() ) return "";

	uint count = item.GetCount();
	if( count > 1 )
		return " x" + count;
	
	return "";
}

string ItemState( Item& item, bool fullInfo = false )
{
	string info = "ќбъект " + ( fullInfo ? "є" + item.Id + ":" + item.GetProtoId() + " " : "" ) + "находитс€ ";
	switch( item.Accessory )
	{
		case( ACCESSORY_NONE ): info += "в нигде (создан через ~ais)"; break;
		case( ACCESSORY_CRITTER ): info += "у криттера є" + item.CritId + " в слоте є" + item.CritSlot; break;
		case( ACCESSORY_HEX ): info += "на карте є" + item.MapId + " в позиции (" + item.HexX + ", " + item.HexY + ")"; break;
		case( ACCESSORY_CONTAINER ): info += "внутри контейнера є" + item.ContainerId; break;
		default: info += "в нигде (особый случай, опишите в #багах)"; break;
	}
	return info + ".";	
}

int ContainmentVolume( Item@ item )
{
	if( !valid( item ) ) return 0;

	Item@[] loot;
	uint volume = 0;
	uint count = item.GetItems( uint(-1), loot );
	for( uint i = 0; i < count; i++ )
		volume += loot[i].Proto.Volume * loot[i].GetCount();
	
	return volume;
}

string FullItemInfo( Item@ item )
{
	if( !valid( item ) ) return "[null]";
	
	uint count = item.GetCount();
	float weight = float( item.Proto.Weight ) / 1000;
	string item_name = itemName( item );
	
	string info = 
		emptySpace( item_name, 60 - item_name.length()*0.5, "|0x231D18 ", "|0xAAAA00 " ) + item_name + "\n" +
		StyledText( "|", "ProtoID: ", item.GetProtoId() ) + 
		StyledText( "\n", "ID: ", item.Id ) +
		StyledText( "|", "Count: ", count ) + 
		StyledText( "\n", "Flags: ", item.Flags ) +
		StyledText( "|", "Cost: ", OneAll( item.Proto.Cost, count ) ) +
		StyledText( "\n", "Volume: ", OneAll( item.Proto.Volume, count ) ) +
		StyledText( "\n", "Weight: ", OneAll( weight, count ) ) +
		"";
		
	if( item.Proto.Deteriorable )
		info += StyledText( "\n", "Deterioration: ", item.Deterioration );
	
	if( item.Proto.Container_Volume > 0 )
		info += StyledText( "\n", "Used Space: ", ContainmentVolume( item ) + "/" + item.Proto.Container_Volume );
	
	uint8 type = item.GetType();
	if( type == ITEM_TYPE_DOOR || type == ITEM_TYPE_CONTAINER )
	{
		bool always_open = ( type == ITEM_TYPE_CONTAINER && !item.Proto.Container_Changeble );
		string state = "" +
			( FLAG( item.LockerCondition, LOCKER_ISOPEN ) ? "open " : "" ) +
			( FLAG( item.LockerCondition, LOCKER_JAMMED ) ? "jammed " : "" ) +
			( FLAG( item.LockerCondition, LOCKER_BROKEN ) ? "broken " : "" ) +
			( FLAG( item.LockerCondition, LOCKER_NOOPEN ) ? "blocked " : "" ) +
			( FLAG( item.LockerCondition, LOCKER_LOCKED ) ? "locked " : "" ) +
			( FLAG( item.LockerCondition, LOCKER_ELECTRO ) ? "electro " : "" ) +
			"";

		if( state.length() < 2 )//if( item.LockerCondition == 0 )
			state = always_open ? "always open" : "closed";

		info += StyledText( "|", "State: ", state );		
		
		if( FLAG( item.LockerCondition, LOCKER_LOCKED ) )
			info += StyledText( "\n", "Id: ", item.LockerId ) + StyledText( "\n", "Complexity: ", item.LockerComplexity );

		if( FLAG( item.LockerCondition, LOCKER_ELECTRO ) ) 
			info += StyledText( "\n", "Code: ", item.Val4 ) + StyledText( "\n", "Complexity: ", item.LockerComplexity );
	}
	return info;
}

string crInfo( int id, bool full = false ) { return crInfo( id <= 0 ? null : GetCritter( id ), full ); }
string crInfo( Critter@ cr, bool full = false )
{
	if( !valid( cr ) )
		return "[null]";
	
	uint id = cr.Id;
	
	string fullInfo = full ? " (" + cr.HexX + ":" + cr.HexY + ")" : "";
	
	string name = "unknown";
	if( !cr.IsPlayer() )
	{
		string@ name_str = GetDlgMsgStr( cr.GetProtoId() * 10 );
		name = ( valid( name_str ) ? name_str : "mob" );
	}
	else
		name = GetPlayerName( id );
	
	if( cr.ParamBase[ QST_INVIS ] == 1 )
		name = embed( name, "<", ">" );
	
	return "#" + id + " " + embed( name, "[ ", " ]" ) + fullInfo;
	// + ( full ? " DLG " + cr.Stat[ST_DIALOG_ID] + " PID " + cr.GetProtoId() + " BODYTYPE " + cr.StatBase[ ST_BODY_TYPE ] + " SKIN " + cr.StatBase[ ST_BASE_CRTYPE ] : "" );
}

string timeInfo()
{
	return __Day + "." + __Month + "." + __Year + " " + MakeTime( __FullSecond );
}

string TimeToString()
{
    uint16 year = 0;
    uint16 month = 0;
    uint16 dayOfWeek = 0;
    uint16 day = 0;
    uint16 hour = 0;
    uint16 minute = 0;
    uint16 second = 0;
    uint16 milliseconds = 0;
    GetTime( year, month, day, dayOfWeek, hour, minute, second, milliseconds );
    return "" + ( day > 9 ? ( "" + day ) : ( "0" + day ) ) + "." + ( month > 9 ? ( "" + month ) : ( "0" + month ) ) + "." + year + " " + ( hour > 9 ? ( "" + hour ) : ( "0" + hour ) ) + ":" + ( minute > 9 ? ( "" + minute ) : ( "0" + minute ) );
}

string RealDay()
{
    uint16 year = 0;
    uint16 month = 0;
    uint16 dayOfWeek = 0;
    uint16 day = 0;
    uint16 hour = 0;
    uint16 minute = 0;
    uint16 second = 0;
    uint16 milliseconds = 0;
    GetTime( year, month, day, dayOfWeek, hour, minute, second, milliseconds );
	
	string year_text = ( year + 228 ) + ".";//“.к. год-мес€ц-день насто€щие синхронизированы с временем игры, нужно прибавить дельту лет (2048 - 2020). ∆уткий костыль, но пока пусть будет так.
	
    return year_text + smart_two_digits( month, ".", true ) + smart_two_digits( day, "", true );
}

string RealTime()
{
    uint16 year = 0;
    uint16 month = 0;
    uint16 dayOfWeek = 0;
    uint16 day = 0;
    uint16 hour = 0;
    uint16 minute = 0;
    uint16 second = 0;
    uint16 milliseconds = 0;
    GetTime( year, month, day, dayOfWeek, hour, minute, second, milliseconds );
    return smart_two_digits( hour, ":", true ) + smart_two_digits( minute, ":", true ) + smart_two_digits( second, "", true );
}

//‘ормат: "[pid:count], [pid:count]"
string enlist( Item@[] list )
{
	if( !valid( list ) ) return "[null]";

	uint len = list.length();
	if( len == 0 ) return "[empty]";
	
	string result = itemInfo( list[0] );
	for( uint i = 1; i < len; i++ )
		result += ", " + itemInfo( list[i] );
	
	return result;
}

int GetGvar( uint gvar )
{
    GameVar@ var = GetGlobalVar( gvar );
    if( valid( var ) ) {
        return var.GetValue();
    } else {
        Log( "GVar " + gvar + " not valid" );
        return -1;
    }
}

void SetGvar( uint gvar, uint value )
{
    GameVar@ var = GetGlobalVar( gvar );
    if( valid( var ) ) {
        var = value;
    } else {
        Log("GVar " + gvar + " not valid");
    }
}

bool IsMutant( Critter& cr )
{
	uint[] mutants = { BT_SUPER_MUTANT, BT_GHOUL, BT_CENTAUR, BT_FLOATER, BT_ALIEN, BT_SWAMP_LURKER, BT_CROCS };
	return mutants.find( cr.Stat[ ST_BODY_TYPE ] ) != -1;
}

bool IsAnimal( Critter& cr )
{
	uint[] animals = { BT_BRAHMIN, BT_RADSCORPION, BT_RAT, BT_DOG, BT_MANTI, BT_DEADCLAW, BT_PLANT, BT_GECKO,
	BT_GIANT_ANT, BT_BIG_BAD_BOSS, BT_GIANT_BEETLE, BT_GIANT_WASP, BT_YAO, BT_MILLEPEDE, BT_LAVASH, BT_SPIDER };
	return animals.find( cr.Stat[ ST_BODY_TYPE ] ) != -1;
}

int GetProtoIdByName( string& name ) 
{
    return GetConstantValue( CONSTANTS_ITEM, name );
}