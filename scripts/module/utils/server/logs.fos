/*
#define ITEM_ACT_MOVED		(0)
#define ITEM_ACT_TOOK		(1)
#define ITEM_ACT_PUT		(2)
#define ITEM_ACT_PICKED		(3)
#define ITEM_ACT_DROPPED	(4)
#define ITEM_ACT_FOUND		(5)
*/
void CheckItemMovement( Critter& cr, Item& item, int skill ) 
{
	switch( skill )
	{
		case( SKILL_PICK_ON_GROUND ): 	
			if( item.GetType() != ITEM_TYPE_DOOR && item.GetType() != ITEM_TYPE_CONTAINER )
				LogItemMovement( cr, item, "поднимает" ); 
			break;
		case( SKILL_PUT_CONT ):			LogItemMovement( cr, item, "кладёт" ); break;
		case( SKILL_TAKE_CONT ):		LogItemMovement( cr, item, "берёт" ); break;
	}
}

void LogCrimeMovement( Critter& cr, Item& item, string action, bool isCrime = true ) 
{
	LogItemMovement( cr, item, action, isCrime );
}
void LogItemMovement( Critter& cr, Item& item, string action, bool isCrime = false ) 
{ //#id [name] action [name] xCount #id PID.
	string amount_info = "";
	
	if( action != "поднимает" && action != "кладёт на землю" )
	{
		uint amount = cr.ItemTransferCount();
		if( amount > 0 && item.GetCount() > 1 )
			amount_info = " " + ( item.GetCount() != amount ? "x" + amount : "все" );
	}

	string action_name = action;
	if( cr.ParamBase[ ST_LAST_CRIT_ID ] != 0 && cr.StatBase[ ST_LAST_STEAL_CR_ID ] == cr.ParamBase[ ST_LAST_CRIT_ID ] )
	{
		action_name = action == "кладёт" ? "подкладывает" : "выкрадывает";
		isCrime = true;
	}
	
	string info = crInfo( cr ) + " " + action_name + amount_info + " " + itemDesc( item );
	
	if( action == "кладёт" || action == "берёт" )
	{
		if( cr.ParamBase[ ST_LAST_CONT_ID ] != 0 )
		{
			Item@ target = GetItem( cr.ParamBase[ ST_LAST_CONT_ID ] );
			if( valid( target ) )
			{
				if( action == "кладёт" )
					info += " в";

				if( action == "берёт" )
					info += " из";
				
				info += " " + itemDesc( target );
			}
		}
		
		if( cr.ParamBase[ ST_LAST_CRIT_ID ] != 0 )
		{
			Critter@ target = GetCritter( cr.ParamBase[ ST_LAST_CRIT_ID ] );
			if( valid( target ) )
			{
				if( action == "кладёт" )
					info += " к";

				if( action == "берёт" )
					info += " у";

				info += " " + crInfo( target, true );
			}
		}
	}

	string result = SayLog( cr, info );
	
	if( isGM( cr ) )
	{
		DiscordSendMessage("containerlog", result);
		LogInfo( "logs\\containers.txt", result ); 
	}

	if( isCrime )
	{
		DiscordSendMessage("crimelog", "```" + result + "```");
		LogInfo( "logs\\crimes.txt", result ); 	
	}
}

string SayLog( Critter& cr, int sayType, string@ message ) { return SayLog( cr, sayType, message, null ); }
string SayLog( Critter& cr, int sayType, string@ message, string @pre_message )
{
	string data = ( valid( pre_message ) ? pre_message : "" ) + crInfo( cr ) + " - ";
	switch( sayType )
	{	//Можно было бы и просто массивом соответствия задать..
		case( SAY_NORM ): 	return SayPrepare( cr, data, message, "" );				
		case( SAY_EMOTE ): 	return SayPrepare( cr, data, message, "**" ); 			
		case( SAY_SOCIAL ):	return SayPrepare( cr, data, message, ":"	);			
		case( SAY_WHISP ):	return SayPrepare( cr, data, strlwr(message), ".." ); 	
		case( SAY_SHOUT ):	return SayPrepare( cr, data, strupr(message), "!!!"  );
		case( SAY_RADIO ): 	return SayPrepare( cr, data, message, "..пшш.." ); 		
		case( SAY_NETMSG ): return SayPrepare( cr, data, message, "" ); 			
		default: {
			string result = "Unhandled sayType for SayLog: #" + cr.Id + " " + sayType + " '" + message + "'";
			Log( result ); //TODO: Надо-ли дублировать информацию?
			testInfo( cr, result );
			return result; 
		}
	}
	return "";
}

string SayPrepare( Critter& cr, string data, string message, string effect ) 
{
	return SayLog( cr, data + effect + message + effect );
}

string CrimeLog( Critter& cr, string@ message ) 
{ 
	DiscordSendMessage("crimelog", "```" + message + "```");
	return LogInfo( "logs\\crimes.txt", SayLog( cr, message ) ); 
}

string SayLog( Critter@ cr, string@ message )
{
	if( valid( cr ) )
		return SayLog( cr.GetMap(), message, cr.HexX, cr.HexY );
	
	return "";
}

string SayLog( Map@ map, string@ message, int x = 0, int y = 0 )
{
	if( !valid( message ) ) { Log( "!valid message" ); return "[ !valid message ]"; }

	string result = "";
	
	string@ map_name = !valid(map) ? "Глобал" : GetGmMsgStr( ( map.GetProtoId() + 1 ) * 10 + 8 );
	if( !valid( map_name ) )
		@map_name = "[ Карта #" + map.Id + " PID " + map.GetProtoId() + " ]";
	
	string cords = "";
	if( x != 0 && y != 0 )
		cords = " (" + x + ":" + y + ")";
	
	result = FixedSize( RealDay() + " " + RealTime() + " = " + MakeTime( __FullSecond ) + map_name + cords + ":", 60 ) + message;

	//DiscordSendMessage("saylog", "```" + result + "```");
	return LogInfo( "logs\\saylog.txt", result );
}

void TrackItemState( Item& item )
{
	LogInfo( "logs\\containers.txt", "Найден " + itemDesc( item ) + ". " + ItemState( item ) ); 
}

string LogInfoTime( string filename, string text )
{
	return LogInfo( filename, timeInfo() + text );
}

string LogInfo( string filename, string text )
{
    file f;
    if( f.open( filename, "a" ) >= 0 )
    {
        f.writeString( text + "\n" );
        f.close();
    }
	return text;
}