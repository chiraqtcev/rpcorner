void DIALOG_MENU( Critter& cr, string[] data )
{
	if( !valid(data) || data.length() < 2 ) return;
	
	uint len = data.length() - 2;
	if( len > 20 ) { cr.Say( SAY_NETMSG, "Часть возможностей не влезла в список!" ); len = 20; }
	
	cr.ShowScreen( SCREEN_DIALOGBOX, len, data[0] );
	cr.Say( SAY_DIALOGBOX_TEXT, data[1] );
	for( uint i = 0; i < len; i++ )
		cr.Say( SAY_DIALOGBOX_BUTTON( i ), Centering( data[2 + i] ) );
		
	cr.Say( SAY_DIALOGBOX_BUTTON( len ), Centering( "Отмена" ) );
}

bool Warning( string@ text, bool result = false )
{
	if( valid( text ) )
		Log( text );
	
	return result;
}

bool action( Critter@ cr, string text, bool result = true ) { return SayReturn( cr, text, SAY_EMOTE_ON_HEAD, result ); }
bool SayReturn( Critter@ cr, string text, uint SAYTYPE, bool result = true )
{
	if( valid( cr ) )
		cr.Say( SAYTYPE, text );
	
	return result;
}

bool inform( Critter@ cr, string@ text, bool result = true, bool TMI = true ) 
{
	if( !valid( cr ) || !valid( text ) || !TMI ) 
		return result; 
	
	return testInfo( cr, text, SAY_NETMSG, result, true );
}

bool inform( Critter@ cr, Critter@ target, string@ text, bool show = false )
{
	if( !valid( cr ) || !isDebugging(1) ) return false;
	
	testInfo( cr, text );
	if( valid( target ) )
		testInfo( target, text );
	
	return true;
}

void Inform( Critter@ cr, string @text = null, uint color = 0 ) 					
{ 	
	if( !valid(cr) ) return; 
	cr.Say( SAY_NETMSG, ( (color != 0) ? UINTColor(color) : " " )  + checkNull(text) ); 
}

void InformWarning( Critter@ cr, string @text = null, uint color = 0 ) 				
{
	if( !valid(cr) ) return; 
	Inform(cr, text, COLOR_YELLOW); 
}

void InformError( Critter@ cr, string @text = null, uint color = 0 ) 				
{
	if( !valid(cr) ) return; 
	Inform(cr, text, COLOR_RED);	
}

void InformRandomText( Critter@ cr, string[] @texts = null, uint color = 0 ) 		
{
	if( !valid(cr) ) return; 
 	uint rand = Random( 0, texts.length()-1 ); 
	Inform(cr, texts[rand], color ); 
}

void InformWarningRandomText( Critter@ cr, string[] @texts = null, uint color = 0 ) 
{
	if( !valid(cr) ) return; 
	InformRandomText(cr, texts, COLOR_YELLOW); 	
}

void InformErrorRandomText( Critter@ cr, string[] @texts = null, uint color = 0 ) 	
{
	if( !valid(cr) ) return; 
	InformRandomText(cr, texts, COLOR_RED); 	
}

#ifdef DEBUG_MSG
	void DEBUG_SAY( Critter@ cr, string @text = null )
	{
		if( !valid(cr) ) return;
		
		if( cr.ParamBase[QST_IS_DEBUGGING] != 0 )
			cr.Say( SAY_NORM, checkNull(text) );
	}
	
	void DEBUG_SAY_ONHEAD( Critter@ cr, string @text = null )
	{
		if( !valid(cr) ) return;
		
		if( cr.ParamBase[QST_IS_DEBUGGING] != 0 )
			cr.Say( SAY_NORM_ON_HEAD, checkNull(text) );
	}
#endif
#ifndef DEBUG_MSG
	#define DEBUG_SAY # ( cr, text )
	#define DEBUG_SAY_ONHEAD # ( cr, text )
#endif

void HintEffect( Critter& cr, Critter& target, uint color, string@ text = null )
{
	cr.RunClientScript( "rp_client@__Inform", target.HexX, target.HexY, color, text, null );
}

void HintEffectDelta( Critter& cr, Critter& target, int old_value, int new_value, string@ text = null )
{
	string info = ( valid( text ) ? text : "" ) + new_value;
	uint color = COLOR_WHITE;
	
	int delta = new_value - old_value;
	if( delta > 0 )
	{
		color = COLOR_GREEN;
		info += "^";
 	}
	else if( delta < 0 )
	{
		color = COLOR_RED;		
		info += "v";
	}
	else
	{
		color = COLOR_GRAY;
		info += "=";
	}
	
	cr.RunClientScript( "rp_client@__Inform", target.HexX, target.HexY, color, info, null );
}

void Say( Critter@ cr, string @text = null, bool onHead = false   ) 				
{
	if( !valid(cr) ) return; 
	cr.Say( onHead ? SAY_NORM_ON_HEAD : SAY_NORM, checkNull(text) ); 	
}

void Emote( Critter@ cr, string @text = null, bool onHead = false ) 				
{
	if( !valid(cr) ) return; 
	cr.Say( onHead ? SAY_EMOTE_ON_HEAD : SAY_EMOTE, checkNull(text) ); 	
}	

bool testInfo( string@ text, bool result = false )
{
	if( !valid( text ) ) return result;
	
	Log( text );
	
	return result;
}

bool testInfo( Critter@ cr, string@ text, uint8 saytype = 11 /*SAY_NETMSG*/, bool result = false, bool show = false )
{
	if( !valid( text ) ) return result;
	
	if( show || ( valid( cr ) && cr.Param[ QST_GAMEMODE ] == GAME_TEST ) )
		cr.Say( saytype, text );
	
	return result;
}

bool _testInfo( Critter@ cr, int test_mode, uint8 saytype, string@ text, bool result = false, bool show = false )
{
	if( !valid( text ) ) return result;
	
	if( show || ( valid( cr ) && isTesting( cr, test_mode ) ) )
		cr.Say( saytype, text );
	
	return result;
}