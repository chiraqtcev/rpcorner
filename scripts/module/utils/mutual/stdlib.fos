#define VERSION_HASH          ( 2 )

string colorize_relations( string relation )
{
	if( relation == "war" ) 	return COLOR_RELATIONS_WAR + relation + COLOR_NETMSG;
	if( relation == "dislike" ) return COLOR_RELATIONS_DISLIKE + relation + COLOR_NETMSG;
	if( relation == "neutral" ) return COLOR_RELATIONS_NEUTRAL + relation + COLOR_NETMSG;
	if( relation == "like" ) 	return COLOR_RELATIONS_LIKE + relation + COLOR_NETMSG;
	if( relation == "ally" ) 	return COLOR_RELATIONS_ALLY + relation + COLOR_NETMSG;

	return COLOR_RELATIONS_NONE + relation + COLOR_NETMSG;
}

uint getHash( uint id, uint8 version )
{
    if( version == 0 || id == 0 )
        return 0;

    if( version == 2 )
    {
        uint temp = id + 23548;

        temp = temp * temp * temp;

        return temp;
    }

	return 0;
}

class CritterName
{
    uint   Id;
    string Name;
    uint   Hash;

    CritterName()
    {
        Id = 0;
        Name = "???";
        Hash = 0;
    }

    CritterName( uint id, string & name )
    {
        Id = id;
        Name = name;
        Hash = getHash( Id, VERSION_HASH );
    }

    CritterName( string & name, uint hash )
    {
        Id = 0;
        Name = name;
        Hash = hash;
    }

    CritterName( uint id, string & name, uint hash )
    {
        Id = id;
        Name = name;
        if( hash == 0 )
            Hash = getHash( Id, VERSION_HASH );
        else
            Hash = hash;
    }
	
	string toString() {
		return Id + " " + Name + " " + Hash;
	}
}

CritterName@ ParseCritterName( string@ line ) {
	if( !valid( line ) ) return null;
	
	string@[]@ data = splitEx( line, " " );
	if( data.length() != 3 ) return null;
	
	int Id = 0;
	if( !StrToInt( data[0], Id ) ) return null;
			
	string Name = data[1];
	
	int Hash = 0;
	if( !StrToInt( data[2], Hash ) ) return null;
	
	return CritterName( Id, Name, Hash );
}

uint getCritterId( CritterMutual@ cr )
{
	return valid( cr ) ? cr.Id : 0;
}

string genderEnding( CritterMutual& cr )
{
	switch( cr.Stat[ ST_GENDER ] )
	{
		case( 0 ): 
			return "";
		case( 1 ): 
			return "à";
		case( 2 ): 
			return "î";
	}
	return "";
}

string itemText( ItemMutual@ item, int max_length = 0 )
{
	if( !valid( item ) ) return "[null]";
	
	string@ name;
	if( item.Val9 == PID_POPUP || item.GetProtoId() == PID_POPUP )
	{
		#ifdef __SERVER
			@name = Item_GetLexems( item );
		#endif
		
		#ifdef __CLIENT
			@name = "" + item.Lexems;
		#endif
	}
	else
	{
		#ifdef __SERVER
			@name = GetMsgStr( 0, TEXTMSG_ITEM, STR_ITEM_INFO( item ) );
		#endif
		
		#ifdef __CLIENT
			@name = GetMsgStr( TEXTMSG_ITEM, STR_ITEM_INFO( item ) );
		#endif
	}
	
	string result = TRIM_DOTS( name );
	if( max_length > 0 && pixelength( result ) > max_length )
	{
		result = substring( result, 0, MIN( uint( max_length / 7.5f ), result.length() ) ) + "..";
	}
	
	return itemColor(item) + result + COLOR_NETMSG;
}

string getItemTextName(string lexems)
{
	string colorSuffix = lexems.length() > COLOR_NETMSG.length() && COLOR_NETMSG == substring(
		lexems, 
		lexems.length() - COLOR_NETMSG.length(), 
		COLOR_NETMSG.length()
	) ? COLOR_NETMSG : "";
			
	return substring( lexems, 0, findFirst( lexems, ". " ) ) + colorSuffix;
}

string getItemTextDescription(string lexems)
{
	if (lexems.length() < 1) return "";
	int pos = findFirst( lexems, ". " );
	int off = lexems[ pos + 1 ] == ' ' ? 1 : 0;
	return pos > 0 ? substring( lexems, pos + off + 1, lexems.length() - pos ) : "";
}

bool isDisabledSkill( uint skillIndex )
{
	uint[] disabled_skills = { SK_SPEECH, SK_SNEAK, SK_GAMBLING };
	return( disabled_skills.find( skillIndex ) != -1 );
}

bool isFarmingSkill( uint skillIndex )
{
	uint[] farming_skills = { SK_MINING, SK_CHOPPING, SK_SCAVENGING, SK_HUNTING, SK_FISHING, SK_FARMING, SK_COOKING, SK_SEX };
	return( farming_skills.find( skillIndex ) != -1 );
}

string itemColor( ItemMutual& item )
{
	switch( item.GetType() )
	{
		case( ITEM_TYPE_NONE     ): return COLOR_NONE; 
		case( ITEM_TYPE_ARMOR    ): return COLOR_ARMOR;
		case( ITEM_TYPE_DRUG     ): return COLOR_DRUGS; 
		case( ITEM_TYPE_WEAPON   ): return COLOR_WEAPON;  
		case( ITEM_TYPE_AMMO     ): return COLOR_AMMO;  
		case( ITEM_TYPE_MISC     ): return COLOR_MISC;  
		case( ITEM_TYPE_KEY      ): return COLOR_KEY;  
		case( ITEM_TYPE_CONTAINER): return COLOR_CONTAINER;  
		case( ITEM_TYPE_DOOR     ): return COLOR_DOOR;  
		case( ITEM_TYPE_GRID     ): return COLOR_GRID;  
		case( ITEM_TYPE_GENERIC  ): return COLOR_GENERIC;  
		case( ITEM_TYPE_WALL     ): return COLOR_WALL;  
		case( ITEM_TYPE_CAR      ): return COLOR_CAR;  
		case( ITEM_TYPE_PLANT    ): return COLOR_PLANT;     
		case( ITEM_TYPE_FOOD     ): return COLOR_FOOD;  
		case( ITEM_TYPE_DRINK    ): return COLOR_DRINK;  
	}
	return COLOR_NETMSG;
}