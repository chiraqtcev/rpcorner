const float e_const = 2.72;
const float pi_const = 3.14;
float disp( float x, float mu, float sigma )
{
	float grade_top = - ( x - mu ) * ( x - mu );
	float grade_bottom = ( 2 * sigma * sigma );
	if( grade_bottom == 0 )
		Log( "Division by zero occures at: x " + x + " mu " + mu + " sigma " + sigma + "." );
	float grade = grade_top / grade_bottom;
	
	float result = pow( e_const, grade ) / ( sigma * sqrt( 2 * pi_const ) );
	return result;
}

float StatDisp( float x, float mu, float sigma, float top, float val )
{
    return Disp( mu, sigma ).set( top, val ).value( x );
}

class Disp
{
	float mu;
	float sigma;
	float mult;
	
	Disp( float mu, float sigma, float mult = 1.0 )
	{
		this.mu = mu;
		this.sigma = sigma;
		this.mult = mult;
	}
	
	float get( float x )
	{
		return disp( x, mu, sigma ) * mult;
	}
	
	float value( float x, float start = 1.0, float step = 1.0 )
	{
		float sum = 0.0;
		for( float i = start; i < x; i += step )
			sum += get( i );
		
		return sum;
	}
	
	Disp@ set( float top, float val )
	{
		this.mult = 1.0;
		float sum = value( top );
		this.mult = val / sum;

		return this;
	}

	float sum( float x, float top, float val )
	{
		set( top, val );
		return value( x, 1.0, 1.0 );
	}
}