void Radiate( Critter& player, int param0, int param1, int param2 )
{
    Critter@ target = null;
    if( param0 == 0 )
        @target = player;
    else
        @target = GetCritter( param0 );
    AffectRadiation( target, param1 );
}

void ViewPlanes( Critter& player, int param0, int param1, int param2 )
{
    if( param0 == 0 )
        param0 = 20;

    Map@ map = player.GetMap();
    if( not valid( map ) )
        return;

    Critter@[] critters;
    uint count = 0;

    if( param1 == 0 )
    {
        count = map.GetCrittersHex( player.HexX, player.HexY, param0, FIND_ALL | FIND_ONLY_NPC, critters ); 
    }
    else
    {
        Critter@ cr = GetCritter( param1 );
        if( not valid( cr ) )
            return;
        critters.resize( 1 );
        @critters[ 0 ] = cr;
    }

    for( uint i = 0; i < count; i++ )
    {
        NpcPlane@[] p;
        uint pcount = critters[ i ].GetPlanes( p );
        for( uint j = 0; j < pcount; j++ )
        {
            uint[] param = { critters[ i ].Id, p[ j ].Type, p[ j ].Priority };
            switch( p[ j ].Type )
            {
            case AI_PLANE_MISC:
                param.resize( 5 );
                param[ 3 ] = p[ j ].Misc_WaitSecond;
                param[ 4 ] = p[ j ].Misc_ScriptId;
                break;
            case AI_PLANE_ATTACK:
                param.resize( 5 );
                param[ 3 ] = p[ j ].Attack_TargId;
                param[ 4 ] = p[ j ].Attack_MinHp;
                break;
            case AI_PLANE_WALK:
                param.resize( 8 );
                param[ 3 ] = p[ j ].Walk_HexX;
                param[ 4 ] = p[ j ].Walk_HexY;
                param[ 5 ] = p[ j ].Walk_Dir;
                if( p[ j ].Run )
                    param[ 6 ] = 1;
                else
                    param[ 6 ] = 0;
                param[ 7 ] = p[ j ].Walk_Cut;
                break;
            case AI_PLANE_PICK:
                param.resize( 6 );
                param[ 3 ] = p[ j ].Pick_HexX;
                param[ 4 ] = p[ j ].Pick_HexY;
                param[ 5 ] = p[ j ].Pick_Pid;
                break;
            }
            CreateTimeEvent( __FullSecond + 60 + j, "e_ViewPlanes", param, false );
        }
    }
}

uint e_ViewPlanes( uint[] @ values )
{
    Critter@ crit = GetCritter( values[ 0 ] );
    if( not valid( crit ) )
        return 0;

    string msg = "error";
    switch( values[ 1 ] )
    {
    case AI_PLANE_MISC:
        msg = "<<MISC>> Prior=" + values[ 2 ];
        msg += " WaitMinute=" + values[ 3 ] + " ScriptId=" + values[ 4 ];
        break;
    case AI_PLANE_ATTACK:
        msg = "<<ATTACK>> Prior=" + values[ 2 ];
        msg += " TargId=" + values[ 3 ] + " MinHp=" + values[ 4 ];
        break;
    case AI_PLANE_WALK:
        msg = "<<WALK>> Prior=" + values[ 2 ];
        msg += " HexX=" + values[ 3 ] + " HexY=" + values[ 4 ] + " Dir=" + values[ 5 ];
        msg += " Run=" + values[ 6 ] + " Cut=" + values[ 7 ];
        break;
    case AI_PLANE_PICK:
        msg = "<<PICK>> Prior=" + values[ 2 ];
        msg += " HexX=" + values[ 3 ] + " HexY=" + values[ 4 ] + " Pid=" + values[ 5 ];
        break;
    }

    crit.Say( SAY_NORM_ON_HEAD, msg );
    return 0;
}

#define FIND_DIST    ( 16 )

#define def    # ( X, DEF )( X == 0 ? DEF : X )

void lvl( Critter& player, int param0, int param1, int param2 )
{
    Critter@[] critters;
    uint count = player.GetMap().GetCrittersHex( player.HexX, player.HexY, FIND_DIST, FIND_LIFE | FIND_ALL, critters );
    for( uint i = 0; i < count; i++ )
        critters[ i ].Say( SAY_NORM_ON_HEAD, "" + ( critters[ i ].Stat[ ST_LEVEL ] ) );
}

void team( Critter& player, int param0, int param1, int param2 )
{
    Critter@[] critters;
    uint count = player.GetMap().GetCrittersHex( player.HexX, player.HexY, FIND_DIST, FIND_LIFE | FIND_ALL, critters );
    for( uint i = 0; i < count; i++ )
        critters[ i ].Say( SAY_NORM_ON_HEAD, "" + ( critters[ i ].Stat[ ST_TEAM_ID ] ) );
}

void role( Critter& player, int param0, int param1, int param2 )
{
    Critter@[] critters;
    uint count = player.GetMap().GetCrittersHex( player.HexX, player.HexY, FIND_DIST, FIND_LIFE | FIND_ALL, critters );
    for( uint i = 0; i < count; i++ )
        critters[ i ].Say( SAY_NORM_ON_HEAD, "" + ( critters[ i ].Stat[ ST_NPC_ROLE ] ) );
}

void info( Critter& player, int param0, int param1, int param2 )
{
    Critter@[] critters;
    uint count = player.GetMap().GetCrittersHex( player.HexX, player.HexY, FIND_DIST, FIND_LIFE | FIND_ALL, critters );
    for( uint i = 0; i < count; i++ )
        critters[ i ].Say( SAY_NORM_ON_HEAD, "" + ( critters[ i ].Stat[ param0 ] ) );
}

void hp( Critter& player, int param0, int param1, int param2 )
{
    Critter@[] critters;
    uint count = player.GetMap().GetCrittersHex( player.HexX, player.HexY, FIND_DIST, FIND_LIFE | FIND_ALL, critters );
    for( uint i = 0; i < count; i++ )
        critters[ i ].Say( SAY_NORM_ON_HEAD, "" + ( critters[ i ].Stat[ ST_CURRENT_HP ] ) + "/" + "" + ( critters[ i ].Stat[ ST_MAX_LIFE ] ) );
}

// plan count
void planc( Critter& player, int param0, int param1, int param2 )
{
    Critter@[] critters;
    uint count = player.GetMap().GetCrittersHex( player.HexX, player.HexY, FIND_DIST, FIND_LIFE | FIND_ALL, critters );
    for( uint i = 0; i < count; i++ )
        critters[ i ].Say( SAY_NORM_ON_HEAD, "" + ( critters[ i ].GetPlanes( null ) ) );
}

// show plans list
void plans( Critter& player, int param0, int param1, int param2 )
{
    NpcPlane@[] planes;
    string str;
    Critter@[] critters;
    uint   count = player.GetMap().GetCrittersHex( player.HexX, player.HexY, FIND_DIST, FIND_LIFE | FIND_ALL, critters );
    for( uint i = 0; i < count; i++ )
    {
        str = "";
        uint count = critters[ i ].GetPlanes( planes );
        for( uint j = 0; j < count; j++ )
        {
            switch( planes[ j ].Type )
            {
            case AI_PLANE_MISC:
                str = str + "M ";
                break;
            case AI_PLANE_ATTACK:
                str = str + "A ";
                break;
            case AI_PLANE_WALK:
                str = str + "W ";
                break;
            case AI_PLANE_PICK:
                str = str + "P ";
                break;
            case AI_PLANE_PATROL:
                str = str + "P ";
                break;
            case AI_PLANE_COURIER:
                str = str + "C ";
                break;
            }
        }
        critters[ i ].Say( SAY_NORM_ON_HEAD, str );
    }
}

// player level info
void lvli( Critter& player, int param0, int param1, int param2 )
{
    Critter@[] critters;
    uint count = player.GetMap().GetCrittersHex( player.HexX, player.HexY, FIND_DIST * 2, FIND_LIFE | FIND_ONLY_PLAYERS, critters );
    for( uint i = 0; i < count; i++ )
        player.Say( SAY_NETMSG, GetPlayerName( critters[ i ].Id ) + ": " + "" + ( critters[ i ].Stat[ ST_LEVEL ] ) );
}

void dmg( Critter& player, int param0, int param1, int param2 )
{
    Critter@ target = GetCritter( param0 );
    if( not valid( target ) )
        return;
    InjureCritter( target, param1, param2, 0, player.Id );
}

void kill( Critter& player, int param0, int param1, int param2 )
{
    Critter@ target = GetCritter( param0 );
    if( not valid( target ) )
        return;
    target.Say( SAY_NETMSG, "Кара небесная поразила вас!" );
    target.ToDead( def( param1, ANIM2_DEAD_PULSE_DUST ), player );
    // target.SetTimeout(TO_REPLICATION, 3);
}

void body( Critter& player, int param0, int param1, int param2 )
{
    Critter@ target = GetCritter( def( param0, player.Id ) );
    if( not valid( target ) )
        return;
    target.ChangeCrType( param1 );
}

void anim( Critter& player, int param0, int param1, int param2 )
{
    Critter@ target = GetCritter( def( param0, player.Id ) );
    if( not valid( target ) )
        return;
    target.Animate( param1, param2, null, true, true );
}

void testmap( Critter& player, int param0, int param1, int param2 )
{
    Critter@[] groups;
    groups.insertLast( @player );
    uint      locid = CreateLocation(
        def( param1, 400 ), player.WorldX, player.WorldY, groups );
    Location@ loc = GetLocation( locid );
    // if(not valid(loc)) GetMapByPid(mapProtoId, skipCount);
    if( not valid( loc ) )
    {
        player.Say( SAY_NETMSG, "Location not found" );
        return;
    }
    Map@ map;
    if( param0 != 0 )
        @map = loc.GetMap( param0 );
    else
        @map = loc.GetMapByIndex( 0 );
    if( not valid( map ) )
        return;
    player.TransitToMap( map.Id, 0 );
}

void CalmDown( Critter& player, int crId, int param1, int param2 )
{
    Critter@ cr = GetCritter( crId );
    if( !valid( cr ) || cr.IsPlayer() )
    {
        player.Say( SAY_NETMSG, "НПЦ не найдет" );
        return;
    }
    else
        cr.ClearEnemyStack();
}

void god( Critter& player, int, int, int )
{
    for( uint i = ST_STRENGTH; i <= ST_LUCK; i++ )
        player.StatBase[ i ] = 10;
    for( uint i = ST_NORMAL_ABSORB; i <= ST_EXPLODE_ABSORB; i++ )
        player.StatBase[ i ] = 100;
    for( uint i = ST_NORMAL_RESIST; i <= ST_POISON_RESISTANCE; i++ )
        player.StatBase[ i ] = 100;
    for( uint i = SK_SMALL_GUNS; i <= SK_OUTDOORSMAN; i++ )
        player.SkillBase[ i ] = 300;
    player.StatBase[ ST_MELEE_DAMAGE ] = 999;
    player.StatBase[ ST_ARMOR_CLASS ] = 100;
    player.StatBase[ ST_CURRENT_HP ] = 9999;
    player.StatBase[ ST_MAX_LIFE ] = 9999;
}

void mapid( Critter& player, int, int, int )
{
    Map@ map = player.GetMap();
    player.Say( SAY_NETMSG, "" + ( map.GetProtoId() ) );
}

void items( Critter& player, int param0, int param1, int param2 )
{
    Item@[] items;
    uint count = player.GetMap().GetItems( player.HexX, player.HexY, items );
    for( uint i = 0; i < count; i++ )
        player.Say( SAY_NETMSG, "" + items[ i ].GetProtoId() );
}

void id( Critter& player, int param0, int param1, int param2 )
{
    Critter@[] critters;
    uint count = player.GetMap().GetCrittersHex( player.HexX, player.HexY, FIND_DIST, FIND_LIFE | FIND_ALL, critters );
    for( uint i = 0; i < count; i++ )
        critters[ i ].Say( SAY_NORM_ON_HEAD, "" + ( critters[ i ].Id ) );
}

// ~run debug ToMapEntire 42 0 0
void ToMapEntire( Critter& player, int mapPid, int entire, int skip )
{
    Map@ map = ::GetMapByPid( mapPid, skip );
    if( valid( map ) )
    {
        player.TransitToMap( map.Id, entire );
    }
    else
    {
        player.Say( SAY_NETMSG, "Карта с pid=" + mapPid + " не найдена" );
    }
}

void ToMap( Critter& player, int mapPid, int X, int Y )
{
    Map@ map = GetMapByPid( mapPid, 0 );
    if( valid( map ) )
    {
        player.TransitToMap( map.Id, X, Y, 0 );
    }
    else
    {
        player.Say( SAY_NETMSG, "Карта с pid=" + mapPid + " не найдена" );
    }
}

// ищет нпц по диалогу на карте указанного прототипа
void NpcByDialog( Critter& player, int mapPid, int dialog, int )
{
    Map@ map = ::GetMapByPid( mapPid, 0 );
    if( valid( map ) )
    {
        Critter @[] npc;

        if( map.GetCritters( 0, FIND_ALL | FIND_ONLY_NPC, npc ) == 0 )
        {
            player.Say( SAY_NETMSG, "не найдено нпц с таким диалогом" );
        }
        else
        {
            uint idF = 0;
            uint l = 0;
            for( uint i = 0; i < npc.length(); i++ )
            {
                if( npc[ i ].Stat[ ST_DIALOG_ID ] == dialog )
                {
                    l++;
                    idF = ( idF == 0 ? npc[ i ].Id : idF );
                }
            }
            player.Say( SAY_NETMSG, "Найдено нпц, в штуках:" + l + " Id первого:" + idF );
        }
    }
}

void SetReputation( Critter& cr, int crId, int num, int val )
{
    Critter@ toCr = GetCritter( crId );
    if( valid( toCr ) )
        toCr.ReputationBase[ num ] = val;
}

void Siren( Critter& cr, int, int, int )
{
    Map @ map = cr.GetMap();
    if( !valid( map ) )
    {
        cr.Say( SAY_NETMSG, "Невозможно проиграть звук на глобальной карте" );
        return;
    }
    map.PlaySound( "AIRSIREN.OGG" );
}

void Mirelurk( Critter& cr, int, int, int )
{
    cr.GetMap().AddNpc( 487, cr.HexX - 3, cr.HexY - 3, 0, null, null, null );

}

void SetMode( Critter& cr, int id, int mode, int value )
{
    Critter @ crit = GetCritter( id );
    crit.ModeBase[ mode ] = value;
}

void RunMapLoop( Critter& player, int ms, int param1, int param2 )
{
    Map@ map = player.GetMap();
    map.SetLoopTime( 0, ms );
    map.SetLoopTime( 1, ms + 500 );
    map.SetEvent( MAP_EVENT_LOOP_0, "e_Map_Loop_0_Run" );
    map.SetEvent( MAP_EVENT_LOOP_1, "e_Map_Loop_1_Run" );
}

void e_Map_Loop_0_Run( Map& map )
{
    map.SetLoopTime( 0, 3000 );
    Display_Ms_Msg( map );
}

void e_Map_Loop_1_Run( Map& map )
{
    map.SetLoopTime( 1, 3000 );
    Display_Ms_Msg( map );
}

void Display_Ms_Msg( Map& map )
{
    uint16 year = 0, month = 0, week = 0, day = 0, hour = 0, minute = 0, sec = 0, ms = 0;
    Critter @[] critArr( 1 );
    map.GetCritters( 0, FIND_ALL, critArr );

    if( critArr.length() == 0 )
        Log( "Не найдено криттеров" );
    else
    {

        Critter @ crt = critArr[ critArr.length() - 1 ];
        GetTime( year, month, week, day, hour, minute, sec, ms );
        crt.Say( SAY_SHOUT, "Current local second " + sec + "," + ms ); // SAY_SHOUT
    }
}

void Check_Dict_Element( Critter& player, int, int, int )
{
    dictionary dict;
    dict.set( player.Id + "|" + 1, 1 );
    dict.set( player.Id + "|" + 2, 2 );
    dict.set( player.Id + "|" + 3, 3 );
    if( dict.exists( player.Id + "|*" ) )
        player.Say( SAY_NORM, "Словарь обрабатывает звездочку в ключе" );
    else
        player.Say( SAY_NORM, "Хуй вам, словарь не обрабатывает звездочку в ключе" );
}

void SetRain( Critter& player, int capacity, int param1, int param2 )
{
    Map@ map = player.GetMap();
    if( !valid( map ) )
        return;
    map.SetRain( capacity );
}

void GetRain( Critter& player, int param0, int param1, int param2 )
{
    Map@ map = player.GetMap();
    if( !valid( map ) )
        return;
    player.Say( SAY_NETMSG, "Rain power: " + map.GetRain() );
}

void GetParam( Critter& player, int crId, int num, int val )
{
    if( crId == 0 )
        crId = player.Id;
    Critter@ toCr = GetCritter( crId );
    if( valid( toCr ) )
        player.Say( SAY_NETMSG, " " + toCr.Param[ num ] );
}

void GetParamBase( Critter& player, int crId, int num, int val )
{
    if( crId == 0 )
        crId = player.Id;
    Critter@ toCr = GetCritter( crId );
    if( valid( toCr ) )
        player.Say( SAY_NETMSG, " " + toCr.ParamBase[ num ] );
}

void SetParam( Critter& player, int crId, int num, int val )
{
    if( crId == 0 )
        crId = player.Id;
    Critter@ toCr = GetCritter( crId );
    if( valid( toCr ) )
    {
        toCr.ParamBase[ num ] = val;
        player.Say( SAY_NETMSG, "Done." );
    }
}

void GetId( Critter& player, int playerId, int param1, int param2 )
{
    player.ShowScreen( SCREEN_CLOSE, 0, "" );
    player.ShowScreen( SCREEN_SAY, 0, "answer_GetId" );
    player.Say( SAY_SAY_TITLE, "Введите логин персонажа." );
}

void answer_GetId( Critter& player, uint answerI, string& answerS )
{
    if( answerS.length() < 3 )
        return;

    Critter@ cr = GetPlayer( answerS );

    if( !valid( cr ) )
    {
        player.Say( SAY_NETMSG, "Нет такого персонажа." );
        return;
    }

    player.Say( SAY_NETMSG, "Login: " + answerS + " Id: " + cr.Id );
}

void NetId( Critter& player, int searchRadius, int, int )
{
    Critter @[] crits;
    player.GetMap().GetCrittersHex( player.HexX, player.HexY, searchRadius, FIND_ALL, crits );
    player.Say( SAY_NETMSG, "my info: HexX=" + player.HexX + "; HexY=" + player.HexY + "; SearchRadius=" + searchRadius );
    for( uint i = 0; i < crits.length(); i++ )
    {
        player.Say( SAY_NETMSG, "Critter Pid:" + crits[ i ].GetProtoId() + "; Dialog:" + crits[ i ].Stat[ ST_DIALOG_ID ] + "; Id:" + crits[ i ].Id );
    }
    player.Say( SAY_NETMSG, "Total: " + crits.length() );
}

void SetCritParam( Critter& player, int id, int param, int value )
{
    Critter @ cr = GetCritter( id );
    if( valid( cr ) )
    {
        cr.ParamBase[ param ] = value;
    }
}

void GetCritParam( Critter& player, int id, int param, int value )
{
    Critter @ cr = GetCritter( id );
    if( valid( cr ) )
    {
        player.Say( SAY_NETMSG, "Param #" + param + " val= " + cr.Param[ param ] );
    }
}

void ShowLocation( Critter& player, int, int, int )
{
    Map @ map = player.GetMap();
    if( valid( map ) )
    {
        Location @ loc = map.GetLocation();
        if( valid( loc ) && !loc.Visible )
            loc.Visible = true;
    }
}

void GetMap( Critter& player, int param0, int param1, int param2 )
{
    Map@   map = player.GetMap();
    string str = map.Id;
    player.Say( SAY_NETMSG, "КАРТА - " + str );
    str = player.HexX + " " + player.HexY;
    player.Say( SAY_NETMSG, "Координаты - " + str );
    str = player.Dir;
    player.Say( SAY_NETMSG, "Направление - " + str );
}

void GetEnemyStack( Critter& player, int crId, int param1, int param2 )
{
    uint[] enemyStack;
    uint     x = 0;
    string   str;
    Critter@ cr = GetCritter( crId );
    if( !valid( cr ) )
        player.Say( SAY_NETMSG, "Криттер не найдет" );
    else if( cr.IsPlayer() )
        player.Say( SAY_NETMSG, "Криттер не является НПЦ" );
    else
    {
        cr.GetEnemyStack( enemyStack );
        player.Say( SAY_NETMSG, "Список врагов:" );
        while( x < enemyStack.length() )
        {
            str = "";
            str += x;
            str += ": ";
            str += enemyStack[ x ];
            player.Say( SAY_NETMSG, str );
            x++;
        }
    }

}

void deleteCritter( Critter& player, int id, int param, int value )
{
    Critter@ cr = GetCritter( id );
    if( valid( cr ) )
        DeleteNpc( cr );
}

void rotateCritter( Critter& player, int id, int param, int value )
{
    Critter@ cr = GetCritter( id );
    if( valid( cr ) )
    {
        cr.SetHomePos( cr.HexX, cr.HexY, param );
        cr.SetDir( param );
    }
}

void changeHome( Critter& player, int id, int x, int y )
{
    Critter@ cr = GetCritter( id );
    cr.SetHomePos( x, y, 0 );
}

void teleportCritter( Critter& player, int id, int x, int y )
{
    Critter@ cr = GetCritter( id );
    if( valid( cr ) )
        cr.TransitToHex( x, y, 0 );
}

void getCoords( Critter& player, int id, int x, int y )
{
    Critter@ cr = GetCritter( id );
    player.Say( SAY_NETMSG, "X = " + cr.HexX + " Y = " + cr.HexY );
}

void unlock( Critter& player, int itemId, int param, int param2 )
{
    Map@  map = player.GetMap();
    Item@ item = map.GetItem( itemId );

    if( valid( item ) )
    {
        item.LockerCondition = LOCKER_ISOPEN;
        item.LockerComplexity = 0;
        item.LockerId = 0;
        item.Update();
    }
}

void cleanEnemyStacks( Critter& player, int, int, int )
{
    Map@ map = player.GetMap();
    Critter@[] crits;
    uint crCount = map.GetCritters( 0, FIND_LIFE, crits );
    for( uint i = 0; i < crCount; ++i )
    {
        if( crits[ i ].IsNpc() )
        {
            crits[ i ].ClearEnemyStack();
            crits[ i ].DropPlanes();
        }
    }
}

void SetSkin( Critter& player, int param0, int param1, int param2 )
{
    Critter@ target = GetCritter( def( param0, player.Id ) );
    if( not valid( target ) )
        return;
    if( target.ChangeCrType( param1 ) )
        target.StatBase[ ST_BASE_CRTYPE ] = param1;
}

void CreateLoc( Critter& player, int param0, int param1, int param2 )
{
    CreateLocation( param0, param1, param2, null );
}

void DeleteLoc( Critter& player, int param0, int param1, int param2 )
{
    Location@ loc = GetLocationByPid( param0, 0 );
    DeleteLocation( loc.Id );
}

void getMapId( Critter& cr, int param0, int param1, int param2 )
{
    Map @ map = cr.GetMap();
    if( !valid( map ) )
        return;
    string msg = map.Id;
//   cr.Say(SAY_NETMSG, msg);
    Location @ loc = map.GetLocation();
    if( !valid( loc ) )
    {
        msg += "loc err";
    }
    else
    {
        msg += " " + loc.Id;
    }
    cr.Say( SAY_NETMSG, msg );

}

void setcoolarmor( Critter& cr, int p0, int p1, int p2 )
{
    if( p1 == 0 )
    {
        cr.Say( SAY_NETMSG, "invalid armor pid (second parameter)" );
        return;
    }
    ;
    Critter @ target = GetCritter( def( p0, cr.Id ) );
    Item @ armor = target.GetItem( p1, SLOT_INV );
    if( !valid( armor ) )
    {
        cr.Say( SAY_NETMSG, "armor !valid" );
        return;
    }
    armor.Val1 = target.Id;
    armor.Val2 = target.StatBase[ ST_BASE_CRTYPE ];
    cr.Say( SAY_NETMSG, "BaseCrTypeTarget " + armor.Val2 );
    armor.SetScript( "debug@_CoolArmor" );
    armor.Update();
}


void _CoolArmor( Item& armor, bool firstTime )
{
    if( firstTime )
    {
        armor.SetEvent( ITEM_EVENT_MOVE, "e_ArmorMove" );
    }
}

void e_ArmorMove( Item& item, Critter& cr, uint8 fromSlot )
{
    string msg = fromSlot + " " + item.CritSlot;
    cr.Say( SAY_NETMSG, msg );
    if( item.Val1 != int( cr.Id ) )
        return;
    if( ( item.CritSlot == SLOT_HAND1 || item.CritSlot == SLOT_HAND1 ) && fromSlot == SLOT_INV )
    {
        cr.ChangeCrType( 3 );
        cr.MoveItem( item.Id, item.GetCount(), SLOT_ARMOR );
        cr.Action( ACTION_MOVE_ITEM, SLOT_ARMOR, item );
        cr.Action( ACTION_REFRESH, 0, null );
        item.Update();
    }
}

void GetAllPl( Critter& cr, int p0, int p1, int p2 )
{
    Critter@[] crs;
    string msg;
    GetAllPlayers( crs );
    if( crs.length() > 0 )
    {
        msg = crs.length();
        cr.Say( SAY_NETMSG, msg );
    }
}

void delItem( Critter& cr, int p0, int p1, int p2 )
{
    if( p0 != 1 )
    {
        Item @ item = cr.GetMap().GetItem( p1 );
        if( !valid( item ) )
            return;
        DeleteItem( item );
    }
    else
    {
        Item @[] items;
        cr.GetMap().GetItems( p1, items );
        if( items.length() > 0 )
        {
            DeleteItems( items );
        }
    }
}

void setblankscript( Critter& cr, int p0, int p1, int p2 )
{
    Item @ item = GetItem( p0 );
    if( !valid( item ) )
        return;
    item.SetScript( "" );
}

void spawnmob( Critter& cr, int p0, int p1, int p2 )
{
    uint16   hexX = 0, hexY = 0;
    Critter@[] crs;
    Critter@ mob;
    Map @ map = cr.GetMap();
    map.GetEntireCoords( p2, 0, hexX, hexY );
    map.GetCritters( 0, FIND_LIFE, crs );
    for( uint8 i = 0; i < p1; i++ )
    {
        @mob = map.AddNpc( p0, hexX + Random( -5, 5 ), hexY + Random( -5, 5 ), Random( 0, 5 ), null, null, null );
        mob.AddEnemyInStack( cr.Id );
    }
}

void delmob( Critter& cr, int p0, int p1, int p2 )
{
    Critter@[] crs;
    Map @ map = cr.GetMap();
    p1 = ( p1 == 0 ? FIND_DEAD : FIND_ALL );
    map.GetCritters( p0, p1, crs );
    for( uint16 i = 0; i < crs.length(); i++ )
    {
        DeleteNpc( crs[ i ] );
    }
}

void getadmin( Critter& cr, int p0, int p1, int p2 )
{
    Critter @[] crs;
    string msg;
    GetAllPlayers( crs );
    for( uint8 i = 0; i < crs.length(); i++ )
    {
        if( crs[ i ].GetAccess() >= ACCESS_TESTER )
        {
            msg += "player " + GetPlayerName( crs[ i ].Id ) + " id " + crs[ i ].Id + " access " + crs[ i ].GetAccess() + "\n";
        }
    }
    cr.Say( SAY_NETMSG, msg );
}

void getAllPls( Critter& cr, int p1, int p2, int p3 )
{
    #ifdef ANYDATA_ONLINE
    if( IsAnyData( DATA_ALL_PLAYERS ) )
    {
        uint16[] ids;
        Critter @ cr1;
        GetAnyData( DATA_ALL_PLAYERS, ids );
        for( uint i = 0; i < ids.length(); i++ )
        {
            @cr1 = GetCritter( ids[ i ] );
            if( cr1 is null )
                continue;
            cr.Say( SAY_NETMSG, " i " + i + " id= " + ids[ i ] + " access " + cr1.GetAccess() );
        }
    }
    #endif
    #ifndef ANYDATA_ONLINE
    Critter@[] crs;
    GetAllPlayers( crs );
    for( uint i = 0; i < crs.length(); i++ )
    {
        if( crs[ i ] is null )
            continue;
        cr.Say( SAY_NETMSG, " i " + i + " id= " + crs[ i ].Id + " access " + crs[ i ].GetAccess() );
    }
    #endif
    /*
       string func = "general_unsafe@unsafe_show_flare";
       cr.RunClientScript("client_script@GetPlayersWorldRadius", cr.WorldX, cr.WorldY, 300, func, null);
     */
}


void openDoor( Critter& cr, int p1, int p2, int p3 )
{
    Item@ item = GetItem( uint( p1 ) );
    if( item is null )
        return;

    item.LockerOpen();
}

void closeDoor( Critter& cr, int p1, int p2, int p3 )
{
    Item@ item = GetItem( uint( p1 ) );
    if( item is null )
        return;

    item.LockerClose();
}

void BlockHex( Critter& cr, int p1, int p2, int p3 )
{
    Map@ map = cr.GetMap();
    if( map is null )
        return;
    map.BlockHex( cr.HexX + p1, cr.HexY + p2, p3 != 0 );
}

void UnblockHex( Critter& cr, int p1, int p2, int p3 )
{
    Map@ map = cr.GetMap();
    if( map is null )
        return;
    map.UnblockHex( cr.HexX + p1, cr.HexY + p2 );
}

void noopenDoor( Critter& cr, int p1, int p2, int p3 )
{
    Item@ door = GetItem( uint( p1 ) );
    if( door is null )
        return;
    if( p2 == 0 )
        SETFLAG( door.LockerCondition, LOCKER_NOOPEN );
    else
        UNSETFLAG( door.LockerCondition, LOCKER_NOOPEN );
}

void clearDoor( Critter& cr, int p1, int p2, int p3 )
{
    Item@ door = GetItem( uint( p1 ) );
    if( door is null )
        return;

    door.LockerClose();

    door.LockerCondition = 0;
    door.LockerId = 0;
    door.LockerComplexity = 0;
    door.Val0 = 0;
    door.Val1 = 0;
}

void di( Critter& cr, int p1, int p2, int p3 )
{
    Item@ item = GetItem( uint( p1 ) );
    if( item is null )
        return;

    DeleteItem( item );
}

void setScale( Critter& cr, int p1, int p2, int p3 )
{
    cr.ParamBase[ ST_SCALE_FACTOR ] = p1;
}
// ID to knock by anubis
void knock( Critter& player, int id, int param1, int param2 )
{
    Critter@ cr = GetCritter( id );
    cr.Say( SAY_EMOTE_ON_HEAD, "теряет сознание" );
    cr.ToKnockout( KNOCKOUT_ANIM2_DEFAULT( true ), 100, cr.HexX, cr.HexY );
}

void liststats( Critter& cr, int p0, int p1, int )
{
    Critter @ target = GetCritter( def( p0, cr.Id ) );
    for( uint16 i = STAT_BEGIN; i < STAT_END; i++ )
    {
        cr.Say( SAY_NETMSG, "id " + target.Id + " stat " + i + " " + target.Stat[ i ] );
    }

    for( uint16 i = SKILL_BEGIN; i < SKILL_END; i++ )
    {
        cr.Say( SAY_NETMSG, "id " + target.Id + " skill " + i + " " + target.Skill[ i ] );
    }
}

void HideAllMaps( Critter& cr, int, int, int )
{
    Critter@[] crs;
    uint crLen = GetAllPlayers( crs );

    Location@[]  locations;
    uint len = GetAllLocations( 0, locations );

    for( uint i = 0; i < len; i++ )
    {
        Location@ loc = locations[ i ];
        if( loc is null )
            continue;

        if( loc.Visible )
        {
            loc.Visible = false;
            Log( "Скрыта локация " + loc.Id );
        }

        loc.GeckVisible = false;

        for( uint k = 0; k < crLen; k++ )
        {
            if( crs[ k ].UnsetKnownLoc( true, loc.Id ) )
                Log( "Стерта для " + crs[ k ].Id );
        }
    }
}

void GM_liststats( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ param4 )
{
    Critter @ target = GetCritter( param0 );
    for( uint16 i = STAT_BEGIN; i < STAT_END; i++ )
    {
        player.Say( SAY_NETMSG, "id " + target.Id + " stat " + i + " " + target.Stat[ i ] );
    }

    for( uint16 i = SKILL_BEGIN; i < SKILL_END; i++ )
    {
        player.Say( SAY_NETMSG, "id " + target.Id + " skill " + i + " " + target.Skill[ i ] );
    }
}

void testcte( Critter& cr, int p0, int p1, int )
{
    for( uint8 i = 0; i <= p1; i++ )
    {
        cr.AddTimeEvent( "cte_test", p0 + Random( p0, p0 * 3 ), CTE_TEST, i );
    }
}

uint cte_test( Critter& cr, int identifier, uint& rate )
{
    cr.Say( SAY_NETMSG, "test cte " + rate );
    return 0;
}

void itemsetval( Critter& cr, int p0, int p1, int p3 )
{
    Item @ item = GetItem( p0 );
    if( @item == null )
        return;
    switch( p1 )
    {
    case 0:
        item.Val0 = p3;
        break;
    case 1:
        item.Val1 = p3;
        break;
    case 3:
        item.Val2 = p3;
        break;
    case 4:
        item.Val4 = p3;
        break;
    case 5:
        item.Val5 = p3;
        break;
    case 6:
        item.Val6 = p3;
        break;
    case 7:
        item.Val7 = p3;
        break;
    // case 0 : item.Val8 = p3; break;
    default:
        break;
    }

}

void itemgetval( Critter& cr, int p0, int p1, int p3 )
{
    Item @ item = GetItem( p0 );
    if( @item == null )
        return;
    string msg = "" + item.Val0 + "\n" +
                 item.Val1 + "\n" +
                 item.Val2 + "\n" +
                 item.Val3 + "\n" +
                 item.Val4 + "\n" +
                 item.Val5 + "\n" +
                 item.Val6 + "\n" +
                 item.Val7 + "\n" +
                 item.Val8 + "\n" +
                 item.Val9;

    cr.Say( SAY_NETMSG, msg );

}

void chagecell( Critter& cr, int x, int y, int )
{
    cr.StatBase[ ST_CELL_X ] = x;
    cr.StatBase[ ST_CELL_Y ] = y;
}

void testbox( Critter& cr, int p0, int, int )
{
    uint8 flags = 0;
    SETFLAG( flags, INPUTBOX_CLOSE_ON_ENTER );   // close on enter
    ShowInputBoxScreen( cr, "debug@unsafe_test_inputbox#mywindow", p0, flags );
}

void unsafe_test_inputbox( Critter& cr, int skill, int p1, int p2, string@ message, int[] @ p4 )
{
    cr.Say( SAY_NORM, "message " + message );
}

void dropwild( Critter& cr, int, int, int )
{
    DropWild();
}

void setworld( Critter& cr, int id, int x, int y )
{
    Critter @ target = GetCritter( id > 0 ? id : cr.Id );
    if( target is null )
        return;

    target.SetWorldPos( x, y );
}

void additemsrndpic( Critter& cr, int id, int x, int y )
{
    Map @ map = cr.GetMap();
    if( map is null )
    {
        cr.Say( SAY_NETMSG, "map" );
        return;
    }

    for( uint8 i = 0; i < x; ++i )
    {
        Item @ item = map.AddItem( cr.HexX + ( Random( -10, 10 ) ), cr.HexY + ( Random( -10, 10 ) ), 2004, 1 );
        if( item is null )
            continue;
        /*
           string = "";
           brl1000.frm
         * brl2000.frm
         * tirs002.frm
         * weed05.frm
         * weed08.frm
         * boxes1.frm
         * boxes2.frm
         * boxes3.frm
         * boxes4.frm
         * car2.frm
         * car4.frm
         * chair1.frm
         * chair3.frm
         * njunk5.frm
         * njunk6.frm
         * trash3.frm
         * t
         */

        uint hash = GetStrHash( "art\\scenery\\corpse1.png" );


        item.SetMapPic( hash );

        cr.Say( SAY_NETMSG, "add " + hash );
    }

}

void delsatmobs( Critter& cr, int id, int x, int y )
{
    for( uint8 i = id; i < x; ++i )
    {
        Location @ loc = GetLocationByPid( i, 0 );
        if( loc is null )
            continue;

        Map @ map = loc.GetMapByIndex( 0 );
        if( map is null )
            continue;

        Critter@[] crs;
        map.GetCritters( 0, FIND_ALL | FIND_ONLY_NPC, crs );
        Log( "delete len " + crs.length() );
        for( uint16 ii = 0, jj = crs.length(); ii < jj; ++ii )
        {
            if( crs[ ii ] is null )
                continue;

            Log( "delete " + ii );
            DeleteNpc( crs[ ii ] );
        }
    }
}

void itemrndpic( Critter& cr, int id, int x, int y )
{
    Item @ item = GetItem( id );
    if( item is null )
        return;

    uint hash = GetStrHash( "art\\scenery\\corpse1.png" );
    item.SetMapPic( hash );
}

void evilplant( Critter& cr, int id, int, int )
{
    cr.GetMap().AddNpc( id, cr.HexX - 3, cr.HexY - 3, 0, null, null, "mob@_MobInit" );

}

void droptime( Critter& cr, int id, int, int )
{
    for( uint i = TIMEOUT_BEGIN; i < TIMEOUT_END; i++ )
    {
        cr.TimeoutBase[ i ] = 0;
    }
}

void addtime( Critter& cr, int id, int, int )
{
    uint time = cr.TimeoutBase[ TO_REPLICATION ];
    if( time > __FullSecond )
    {
        time += REAL_SECOND( 10 );
    }
    else
    {
        time = __FullSecond + REAL_MINUTE( 1 );
    }

    cr.TimeoutBase[ TO_REPLICATION ] =  time;
}
void        gettile( Critter& cr, int id, int, int )
{
    Map @ map = cr.GetMap();
    if( map is null )
        return;
    // for(uint8 i = 0; i < 5; ++i){
    uint hash = map.GetTile( THX( cr.HexX ), THX( cr.HexY ) ); // GetTile(map, THX(cr.HexX), THX(cr.HexY), i);
    cr.Say( SAY_NETMSG, "tile hash\n* " + hash );
    // }
}

void gettiles( Critter& cr, int id, int, int )
{
    uint hash0 = GetStrHash( "art/tiles/road02.frm" ),
         hash1 = GetStrHash( "road02.frm" );
    cr.Say( SAY_NETMSG, "tile hash\n* " + hash0 + "\ntile hash\n* " + hash1 );
}

void varset( Critter& cr, int id, int x, int )
{
    GameVar@ isStored = GetLocalVar( LIVAR_motel_isStored, id );

    int      val = isStored.GetValue();

    cr.Say( SAY_NETMSG, "" + val );

    if( x > 0 )
    {
        uint8 temp = Random( 1, 100 );

        isStored.opAssign( temp );
    }
}

void spawnsateng( Critter& cr, int id, int val, int )
{
    Location @ loc;
    Item @ item;
    for( uint8 i = 13; i < 25; ++i )
    {
        @loc = GetLocation( i );
        if( loc is null )
            continue;

        Map @ map = loc.GetMapByIndex( 0 );
        if( map is null )
            continue;

        Item@[] conts;
        map.GetItemsByType( ITEM_TYPE_CONTAINER, conts );
        // GetItemsByType (int type, Item@[]@+ items)
        uint16 len = conts.length();

        // uint8 count = 2
        for( uint16 ii = 0; ii < 2; ++ii )
        {

            @item = conts[ Random( 0, len - 1 ) ];

            if( !(item is null) )
            {
                item.AddItem( PID_MICRO_FUSION_CELL, Random( 1, 3 ), 0 );
                Log( "SPAWN " + item.HexX + ":" + item.HexY );
            }
        }
    }
}

void testscreen(Critter& cr, int, int, int){
	cr.ShowScreen( SCREEN_DIALOGBOX, 2, "answer_test" );
        cr.Say( SAY_DIALOGBOX_TEXT, "Вас устраивает ваша зарплата?" );
        cr.Say( SAY_DIALOGBOX_BUTTON( 0 ), "Да" );
        cr.Say( SAY_DIALOGBOX_BUTTON( 1 ), "Нет" );
}

void answer_test( Critter& cr, uint answerI, string& answerS )
{
	string msg = "";
	if(answerI > 0){
		msg = "Правда чтоли?";
	}else{
		msg = "ВРешь!";
	}
	
	cr.Say(SAY_NETMSG, msg);
}