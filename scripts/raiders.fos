#include "_utils.fos"

#include "entire.fos"
#include "pids_groups.fos"
#include "_npc_pids.fos"
#include "_teams.fos"
#include "_bags.fos"
#include "npc_planes_h.fos"

#define GuardPID        ( 128 )
#define CRITTER_TEAM    ( 128 )

import void GM_MobInit( Critter& npc ) from "mob";

uint attackTarget = 0;
// temp

void unsafe_AdvancedSpawnNPC( Critter& player, int type, int weapon, int AI_type, string@ param3, int[] @ param4 )
{
	if( isGM( player ) )
		AdvancedSpawnNPC( player, type, weapon, AI_type, param3, param4 );
}

void AdvancedSpawnNPC( Critter& player, int type, int weapon, int AI_type, string@ param3, int[] @ param4 )
{
    if( !valid( player ) )
        return;
    Map @ map = player.GetMap();
    AdvancedSpawn( player, map, type, weapon, AI_type, param4[ 0 ], param4[ 1 ] );
}

void unsafe_stopMob( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ vals )
{
	if( isGM( player ) )
		stopMob( player, param0, param1, param2, param3, vals );
}

void stopMob( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ vals )
{
    for( uint i = param0 * 10, ii = 10 + param0 * 10; i < ii; i++ )
    {
        Critter@ controlled = GetCritter( vals[ i ] );

        if( valid( player ) && valid( controlled ) && !controlled.IsPlayer() )
        {
            controlled.ErasePlane( -1, true );
            controlled.ClearEnemyStack();
            controlled.EraseTimeEvents( 9 );
            controlled.SetDir( GetDirection( controlled.HexX, controlled.HexY, param1, param2 ) );
        }
    }
}

void controlMob( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ param4 )
{
    player.RunClientScript( "client_gui@_SetControlCritters", param0, 0, 0, null, null );
	Critter@ target = GetCritter( param0 );
	if ( valid( target ) ) target.ParamBase[ MERC_MASTER_ID ] = player.Id;
}

void unsafe_moveMob( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ vals )
{
	if( isGM( player ) )
		moveMob( player, param0, param1, param2, param3, vals );
}

void moveMob( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ vals )
{
    for( uint i = param0 * 10, ii = 10 + param0 * 10; i < ii; i++ )
    {
        Critter@ controlled = GetCritter( uint( vals[ i ] ) );

        if( valid( player ) && valid( controlled ) && controlled.IsNpc() )
        {
            controlled.ModeBase[ MODE_NO_HOME ] = 1;
            controlled.ErasePlane( -1, true );
            AddWalkPlane( controlled, 1, param1, param2, GetDirection( controlled.HexX, controlled.HexY, param1, param2 ), valid( param3 ), 0 );
            controlled.ClearEnemyStack();
        }
    }
}

void unsafe_attackMob( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ vals )
{
	if( isGM( player ) )
		attackMob( player, param0, param1, param2, param3, vals );
}

void attackMob( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ vals )
{
    Critter@ target = GetCritter( param0 );
	
    for( uint i = param1 * 10, ii = 10 + param1 * 10; i < ii; i++ )
    {
        Critter@ controlled = GetCritter( vals[ i ] );
        if( valid( player ) && valid( controlled ) && valid( target ) && controlled.IsNpc() )
        {
            controlled.ModeBase[ MODE_NO_HOME ] = 1;
            controlled.ErasePlane( -1, true );
            AddAttackPlane( controlled, 0, target, __RunOnCombat );
            controlled.AddEnemyInStack( target.Id );
        }
    }
}

void unsafe_assaultMob( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ vals )
{
	if( isGM( player ) )
		assaultMob( player, param0, param1, param2, param3, vals );
}

void assaultMob( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ vals )
{
    Critter@[] players, guards;
    Critter@ target = GetCritter( param0 );
    Map@     map = player.GetMap();

    for( uint i = param2 * 10, ii = 10 + param2 * 10; i < ii; i++ )
    {
        Critter@ controlled = GetCritter( vals[ i ] );
        if( valid( player ) && valid( controlled ) && valid( target ) && controlled.IsNpc() && map.GetCritters( 0, FIND_LIFE_AND_KO | FIND_ONLY_PLAYERS, players ) > 0 )
        {
            controlled.StatBase[ ST_VAR7 ] =  CRITTER_TEAM;
            for( uint j = 0, jj = players.length(); j < jj; j++ )
            {
                if( players[ j ].StatBase[ ST_VAR7 ] != controlled.StatBase[ ST_VAR7 ] )
                {
                    AddAttackPlane( controlled, 0, players[ j ], __RunOnCombat );
                    controlled.AddEnemyInStack( players[ j ].Id );
                }
            }
        }
    }
}

void unsafe_deleteMob( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ vals )
{
	if( isGM( player ) )
		deleteMob( player, param0, param1, param2, param3, vals );
}

void deleteMob( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ vals )
{
    for( uint i = param2 * 10, ii = 10 + (param2 * 10); i < ii; i++ )
    {
        Critter@ controlled = GetCritter( vals[ i ] );
        if( valid( player ) && valid( controlled ) && controlled.IsNpc() && controlled.Stat[ ST_DIALOG_ID ] == 0 )
            DeleteNpc( controlled );
    }
}

void unsafe_FreeMob( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ vals )
{
	if( isGM( player ) ) 
		FreeMob( player, param0, param1, param2, param3, vals );
}

void FreeMob( Critter& player, int group, int index, int param2, string@ param3, int[] @ mobs )
{
	Critter@ mob = GetCritter( mobs[ group * 10 + index ] );
	if( !valid( mob ) ) return;
	mob.ModeBase[ MODE_NO_HOME ] = 0;
}

void unsafe_HomeMob( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ vals )
{
	if( isGM( player ) ) 
		HomeMob( player, param0, param1, param2, param3, vals );
}

void HomeMob( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ vals )
{
	player.Say( SAY_NETMSG, "”становлен хомгекс и 'домашний' режим." );
    for( uint i = param2 * 10, ii = 10 + (param2 * 10); i < ii; i++ )
    {
        Critter@ controlled = GetCritter( vals[ i ] );
        if( valid( player ) && valid( controlled ) && controlled.IsNpc() )
        {
            controlled.SetHomePos( controlled.HexX, controlled.HexY, controlled.Dir );
            controlled.ModeBase[ MODE_NO_HOME ] = 0;
        }
    }
}

void unsafe_MobHome( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ vals )
{
	if( isGM( player ) ) 
		MobHome( player, param0, param1, param2, param3, vals );
}

void MobHome( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ vals )
{
    Critter@ target = GetCritter( param0 );
    target.ModeBase[ MODE_NO_HOME ] = 0;
}

void unsafe_chaseMob( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ vals )
{
	if( isGM( player ) )
		chaseMob( player, param0, param1, param2, param3, vals );
}

void chaseMob( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ vals )
{
    Critter@ target = GetCritter( param0 );

    for( uint i = param2 * 10, ii = 10 + param2 * 10; i < ii; i++ )
    {
        Critter@ controlled = GetCritter( vals[ i ] );
        if( valid( player ) && valid( controlled ) && valid( target ) && controlled.IsNpc() )
        {
            controlled.ErasePlane( -1, true );
            controlled.ModeBase[ MODE_NO_HOME ] = 1;
            controlled.StatBase[ ST_KILLER_PERSON ] = target.Id;
            controlled.AddTimeEvent( "follow", 30, 9 );
        }
    }
}

void unsafe_GatherMob( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ vals )
{
	if( isGM( player ) )
		GatherMob( player, param0, param1, param2, param3, vals );
}

void GatherMob( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ vals )
{
    for( uint i = param2 * 10, ii = 10 + param2 * 10; i < ii; i++ )
    {
        Critter@ controlled = GetCritter( vals[ i ] );
        if( !valid( controlled ) )
			continue;
		
		if( controlled.IsPlayer() && controlled.Param[ QST_GAMEMODE ] == GAME_START )
		{
			player.Say( SAY_NETMSG, crInfo( controlled ) + " находитс€ в стартовом режиме. ƒайте игроку сначала активироватьс€ у гида!" );
			continue;
		}

		Map@ map = player.GetMap();
		if( not valid( map ) )
			return;
		
		uint8 temp_dir = player.Dir;

		for( uint i = 0; i < 6; i++ )
		{
			uint16 hexX = player.HexX, hexY = player.HexY;
			map.MoveHexByDir( hexX, hexY, ( temp_dir + i ) % 6, 2 + param1 );
			// if( not map.IsHexPassed( hexX, hexY ) )
				// continue;
				
			Location@ loc = map.GetLocation();
			if(!valid(loc)) return;
			
			controlled.SetWorldPos(loc.WorldX, loc.WorldY);
			controlled.TransitToMap( map.Id, hexX, hexY, 0 );
			break;
		}
    }
}

uint follow( Critter& cr, int master, uint& rate )
{
    int8     y = 0;
    cr.ClearEnemyStack();
    Critter@ daddy = GetCritter( cr.Stat[ ST_KILLER_PERSON ] );
    Map@     daddymap = null;
    Map@     crmap = cr.GetMap();
    if( valid( daddy ) )
        @daddymap = daddy.GetMap();
    else
        return 0;
    cr.ErasePlane( -1, true );

    if( ( !valid( daddymap ) ) && ( valid( crmap ) ) )
    {
        cr.TransitToGlobalGroup( daddy.Id );
    }
    else if( ( valid( daddymap ) ) && ( valid( crmap ) ) && ( daddymap.Id == crmap.Id ) )
    {
        AddWalkPlane( cr, 0, daddy.HexX, daddy.HexY, GetDirection( cr.HexX, cr.HexY, daddy.HexX, daddy.HexY ), false, 1 );
    }
    else if( ( valid( daddymap ) ) && ( valid( crmap ) ) && ( crmap.Id != daddymap.Id ) )
    {
        uint8 findPos = 1;
        while( findPos <= 10 )
        {
            if( daddymap.IsHexPassed( daddy.HexX + findPos, daddy.HexY + findPos ) )
            {
                cr.TransitToMap( daddymap.Id, daddy.HexX + findPos, daddy.HexY + findPos, Random( 0, 5 ) );
                findPos = 10;
            }
            findPos++;
        }
    }
    return 30;
}

void AdvancedSpawn( Critter& player, Map& map, int type, int weapon, int AI_type, uint16 hexX, uint16 hexY )
{
    if( type == 0 )
    {
        player.Say( SAY_NETMSG, " #spawn [тип] [оружие] [AI]" );	
        player.Say( SAY_NETMSG, "“ип:" );
        player.Say( SAY_NETMSG, "1 - крыса" );
        player.Say( SAY_NETMSG, "2 - мантис" );
        player.Say( SAY_NETMSG, "3 -  муравей" );
        player.Say( SAY_NETMSG, "4 -  свинокрыс" );
        player.Say( SAY_NETMSG, "5 -  кротокрыс" );
        player.Say( SAY_NETMSG, "6 -  большой кротокрыс" );
        player.Say( SAY_NETMSG, "7 -  гекко" );
        player.Say( SAY_NETMSG, "8 -  золотой гекко" );
        player.Say( SAY_NETMSG, "9 -  собака" );
        player.Say( SAY_NETMSG, "10 -  малый скорпион" );
        player.Say( SAY_NETMSG, "11 -  большой скорпион" );
        player.Say( SAY_NETMSG, "12 -  брамин" );
        player.Say( SAY_NETMSG, "13 -  чужой" );
        player.Say( SAY_NETMSG, "14 -  малый коготь" );
        player.Say( SAY_NETMSG, "15 -  большой коготь" );
        player.Say( SAY_NETMSG, "16 -  кентавр" );
        player.Say( SAY_NETMSG, "17 -  летун" );
        player.Say( SAY_NETMSG, "18 -  огнегекко" );
        player.Say( SAY_NETMSG, "19 -  кентавр2" );
        player.Say( SAY_NETMSG, "20 -  каннибал" );
        player.Say( SAY_NETMSG, "21 -  каннибал ж" );
        player.Say( SAY_NETMSG, "22 -  рейдер" );
        player.Say( SAY_NETMSG, "23 -  рейдер ж" );
        player.Say( SAY_NETMSG, "24 -  работорг" );
        player.Say( SAY_NETMSG, "25 -  работорг ж" );
        player.Say( SAY_NETMSG, "26 -  мародер" );
        player.Say( SAY_NETMSG, "27 -  мародер ж" );
        player.Say( SAY_NETMSG, "28 -  гуль" );
        player.Say( SAY_NETMSG, "29 -  супермутант" );
        player.Say( SAY_NETMSG, "30 -  раб" );
        player.Say( SAY_NETMSG, "31 -  раб ж" );
        player.Say( SAY_NETMSG, "32 -  мальчик" );
        player.Say( SAY_NETMSG, "33 -  девочка" );
        player.Say( SAY_NETMSG, "34 -  путешественник" );
        player.Say( SAY_NETMSG, "35 -  путешественница" );
        player.Say( SAY_NETMSG, "ќружие:" );
        player.Say( SAY_NETMSG, "1-без оружи€" );		
        player.Say( SAY_NETMSG, "1-нож" );
        player.Say( SAY_NETMSG, "2-кастет" );
        player.Say( SAY_NETMSG, "3-копье" );
        player.Say( SAY_NETMSG, "10-лоу револьвер" );
        player.Say( SAY_NETMSG, "14-самопал винт." );
        player.Say( SAY_NETMSG, "18-лоу смг" );
        player.Say( SAY_NETMSG, "19-больша€ пушка" );
        player.Say( SAY_NETMSG, "20 - 10мм" );
        player.Say( SAY_NETMSG, "21 -  маузер" );
        player.Say( SAY_NETMSG, "22 -  дисерт игл" );
        player.Say( SAY_NETMSG, "23 -  охотка" );
        player.Say( SAY_NETMSG, "AI:" );
        player.Say( SAY_NETMSG, "0-контроль" );
        player.Say( SAY_NETMSG, "1-моб" );
        player.Say( SAY_NETMSG, "2-гарнизонћодока" );
        player.Say( SAY_NETMSG, "3-нейтрал" );
        player.Say( SAY_NETMSG, "4-моб-Ћидер" );
        player.Say( SAY_NETMSG, "5-моб-миньон" );
        return;
    }
    int NPC1 = NPC_PID_RegularRat + type;
    if( type >= 36 )
        NPC1 = type;
	player.ParamBase[ MERC_DEFEND_MASTER ] = NPC1;// оманда #spawn pid теперь можнт быть легко повторена через √ћ-меню "повтор спауна".
    Critter@ cr = map.AddNpc( NPC1, hexX, hexY, Random( 0, 5 ), null, null, null );
    if( valid( cr ) )
    {
        cr.ParamBase[ ST_FACTION ] = player.ParamBase[ CR_VAL3 ];
		cr.ParamBase[ CR_IS_AGGRESSIVE ] = player.ParamBase[ CR_VAL4 ]; // 0 ? "ѕассив" : "јктив"
		cr.StatBase[ ST_TEAM_ID ] = player.ParamBase[ CR_VAL5 ];
		
		cr.StatBase[ ST_AI_ID ] = 207;
        cr.StatBase[ ST_REPLICATION_TIME ] = -1;//__FullSecond + REAL_HOUR( 2 );
        cr.ModeBase[ MODE_NO_HOME ] = 0;	
        cr.ModeBase[ MODE_UNLIMITED_AMMO ] = 1;
        if( type >= 20 )
        {
            int weapon2;
            switch( weapon )
            {
            case 0:
                weapon2 = 0;
                break;
            case 1:
                weapon2 = PID_REVKNIFE1;
                break;
            case 2:
                weapon2 = PID_REVFIST1;
                break;
            case 3:
                weapon2 = PID_SPEAR_P;
                break;
            case 4:
                weapon2 = PID_KNIFE;
                break;
            case 5:
                weapon2 = PID_CHAIN;
                break;
            case 6:
                weapon2 = PID_CROWBAR;
                break;
            case 7:
                weapon2 = PID_SPEAR;
                break;
            case 8:
                weapon2 = PID_SHIV;
                break;
            case 9:
                weapon2 = PID_SWITCHBLADE;
                break;
            case 10:
                weapon2 = PID_REVOLVER_LOW;
                break;
            case 11:
                weapon2 = PID_PISTOL_LOW;
                break;
            case 12:
                weapon2 = PID_SHOTPISTOL_LOW;
                break;
            case 13:
                weapon2 = PID_REV_RIFLE_LOW;
                break;
            case 14:
                weapon2 = PID_SPRINGER_RIFLE;
                break;
            case 15:
                weapon2 = PID_ZIP_GUN;
                break;
            case 16:
                weapon2 = PID_SNIPER_GUN_LOW;
                break;
            case 17:
                weapon2 = PID_SMOKE_GUN_LOW;
                break;
            case 18:
                weapon2 = PID_DRUM_GUN_LOW;
                break;
            case 19:
                weapon2 = PID_BIGGUN_LOW;
                break;
            case 20:
                weapon2 = PID_10MM_PISTOL;
                break;
            case 21:
                weapon2 = PID_9MM_MAUSER;
                break;
            case 22:
                weapon2 = PID_DESERT_EAGLE;
                break;
            case 23:
                weapon2 = PID_HUNTING_RIFLE;
                break;
            }
            if( weapon > 23 )
                cr.AddItem( weapon, 1 );
            else if( weapon2 > 0 )
                cr.AddItem( weapon2, 1 );
        }
        if( AI_type == 0 && valid( player ) )
        {
            controlMob( player, cr.Id, 0, 0, null, null );
        }
        else if( AI_type == 1 )
        {
            GM_MobInit( cr);
        }
        else if( AI_type == 2 )
        {
            Critter@[] players, guards;
            Map@ map = player.GetMap();
            if( valid( player ) && valid( cr ) && map.GetCritters( 0, FIND_LIFE_AND_KO | FIND_ONLY_PLAYERS, players ) > 0 )
            {
                cr.StatBase[ ST_VAR7 ] =  CRITTER_TEAM;
                for( uint j = 0, jj = players.length(); j < jj; j++ )
                {
                    if( players[ j ].StatBase[ ST_VAR7 ] != cr.StatBase[ ST_VAR7 ] )
                    {
                        AddAttackPlane( cr, 0, players[ j ], __RunOnCombat );
                        cr.AddEnemyInStack( players[ j ].Id );
                    }
                }
            }
		}		
    }
}