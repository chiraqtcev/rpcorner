// Author: Mio
// Инструментарий для различных нужд.

#include "_macros.fos"

// ####################################################################################################
// #                                              Define                                              #
// ####################################################################################################

// Flags
#define FLAG_01									( 0x00000001 )
#define FLAG_02									( 0x00000002 )
#define FLAG_03									( 0x00000004 )
#define FLAG_04									( 0x00000008 )
#define FLAG_05									( 0x00000010 )
#define FLAG_06									( 0x00000020 )
#define FLAG_07									( 0x00000040 )
#define FLAG_08									( 0x00000080 )
#define FLAG_09									( 0x00000100 )
#define FLAG_10									( 0x00000200 )
#define FLAG_11									( 0x00000400 )
#define FLAG_12									( 0x00000800 )
#define FLAG_13									( 0x00001000 )
#define FLAG_14									( 0x00002000 )
#define FLAG_15									( 0x00004000 )
#define FLAG_16									( 0x00008000 )
#define FLAG_17									( 0x00010000 )
#define FLAG_18									( 0x00020000 )
#define FLAG_19									( 0x00040000 )
#define FLAG_20									( 0x00080000 )
#define FLAG_21									( 0x00100000 )
#define FLAG_22									( 0x00200000 )
#define FLAG_23									( 0x00400000 )
#define FLAG_24									( 0x00800000 )
#define FLAG_25									( 0x01000000 )
#define FLAG_26									( 0x02000000 )
#define FLAG_27									( 0x04000000 )
#define FLAG_28									( 0x08000000 )
#define FLAG_29									( 0x10000000 )
#define FLAG_30									( 0x20000000 )
#define FLAG_31									( 0x40000000 )
#define FLAG_32									( 0x80000000 )

#define STARTING_POINT							( 1 )						// Начало отсчёта.
#define INDEX									# ( X ) ( X - STARTING_POINT )

// Checks
#define CH_BOOL									( 1 )
#define CH_COUNT								( 2 )
#define CH_ST_BOOL								( 3 )
#define CH_ST_COUNT								( 4 )
#define CH_ITEM_BOOL							( 5 )
#define CH_ITEM_COUNT							( 6 )

#define NUM_MENU_BRANCH							( 1 )						// Ветвь меню. Начальный индекс.
#define BIT_MENU_BRANCH							( 4 )						// 
#define NUM_MENU_DEPTH							( 5 )						// Глубина веток меню. Начальный индекс.
#define BIT_MENU_DEPTH							( 4 )						// 
#define NUM_MENU_COUNT							( 9 )						// Количество пунктов меню. Начальный индекс.
#define BIT_MENU_COUNT							( 4 )						// 
#define NUM_MENU_CHOICE							( 13 )						// Выбор в меню. Начальный индекс.
#define BIT_MENU_CHOICE							( 4 )						// 
#define NUM_MENU_MENUMARK_1						( 17 )						// Запомненный выбор. Начальный индекс.
#define BIT_MENU_MENUMARK_1						( 4 )						// 
#define NUM_MENU_MENUMARK_2						( 21 )						// 
#define BIT_MENU_MENUMARK_2						( 4 )						// 
#define NUM_MENU_MENUMARK_3						( 25 )						// 
#define BIT_MENU_MENUMARK_3						( 4 )						// 
// 4 bit свободно.

// 
#define MENU_BRANCH								( 0 )
#define MENU_DEPTH								( 1 )
#define MENU_COUNT								( 2 )
#define MENU_CHOICE								( 3 )
#define MENU_MENUMARK_1							( 4 )
#define MENU_MENUMARK_2							( 5 )
#define MENU_MENUMARK_3							( 6 )

int[] Flaglist = { FLAG_01, FLAG_02, FLAG_03, FLAG_04, FLAG_05, FLAG_06, FLAG_07, FLAG_08, FLAG_09, FLAG_10, FLAG_11, FLAG_12, FLAG_13, FLAG_14, FLAG_15, FLAG_16, FLAG_17, FLAG_18, FLAG_19, FLAG_20, FLAG_21, FLAG_22, FLAG_23, FLAG_24, FLAG_25, FLAG_26, FLAG_27, FLAG_28, FLAG_29, FLAG_30, FLAG_31, int(FLAG_32) };

// ####################################################################################################
// #                                           Compression                                            #
// ####################################################################################################



int[] MinMax( int[] list )
{
	int[] MM = { list [ 0 ], list [ 0 ] };
	for( uint8 i = 1, l = list.length(); i < l; i++ )
	{
		if( MM[ 0 ] > list[ i ] ) { MM[ 0 ] = list[ i ]; }
		if( MM[ 1 ] < list[ i ] ) { MM[ 1 ] = list[ i ]; }
	}
	return MM;
}

uint8 ChoiceMask( int[] list )
{
	uint8 sum = 0;
	uint8 length = list.length();
	for( uint8 i = 0; i < length; i++ ) { if( list[ i ] != 0 ) { sum++; } }
	if( sum <= 0 ) { return 0; }
	uint8 random = Random( 1, sum );
	sum = 0;

	for( uint8 i = 0; i < length; i++ )
	{
		if( list[ i ] != 0 ) { sum++; }
		if( sum == random ) { return i; }
	}

	return 0;
}

int BitUnpacker( int storage, uint8 index, uint8 bit )
{
	int sum = 0;
	for( uint8 i = index, l = index + bit, counter = 0; i < l; i++ )
	{
		if( FLAG( storage, Flaglist[ i ] ) ) { sum += 1 << counter; }
		counter++;
	}
	return sum;
}
int BitPacker( int cell, int storage, uint8 index, uint8 bit )
{
	for( int8 i = index, l = ( index + bit ) - 1; l >= i; l-- )
	{
		bit--;
		if( cell >= int( 1 << bit ) ) { cell -= 1 << bit; SETFLAG( storage, Flaglist[ l ] ); } else { UNSETFLAG( storage, Flaglist[ l ] ); }
	}
	return storage;
}
int BitZeroing( int storage, uint8 index, uint8 bit )
{
	for( uint8 i = index, l = index + bit; l > i; l-- ) { UNSETFLAG( storage, Flaglist[ l-1 ] ); }
	return storage;
}
int BitChange( int number, int storage, uint8 index, uint8 bit )
{
	if( number == 0 ) { return storage; }
	bit = CLAMP( bit, 1, 32 );
	if( index + bit > 32 ) { return 0; }

	int result = BitUnpacker( storage, index, bit ) + number;

	return BitPacker( result, storage, index, bit );
}



// ####################################################################################################
// #                                          Sp Compression                                          #
// ####################################################################################################

int MenuChoice( int storage, uint answerI, string cell, bool rec ) // Память координатора меню.
{
	string[] mask = { "MENU_BRANCH", "MENU_DEPTH", "MENU_COUNT", "MENU_CHOICE", "MENU_MENUMARK_1", "MENU_MENUMARK_2", "MENU_MENUMARK_3" };
	uint8 mark;
	for( uint8 i = 0, l = mask.length(); i < l; i++ ) { if( mask[ i ] == cell ) { mark = i; break; } }
	uint8[] NUMlist = { NUM_MENU_BRANCH, NUM_MENU_DEPTH, NUM_MENU_COUNT, NUM_MENU_CHOICE, NUM_MENU_MENUMARK_1, NUM_MENU_MENUMARK_2, NUM_MENU_MENUMARK_3 };
	uint8[] BITlist = { BIT_MENU_BRANCH, BIT_MENU_DEPTH, BIT_MENU_COUNT, BIT_MENU_CHOICE, BIT_MENU_MENUMARK_1, BIT_MENU_MENUMARK_2, BIT_MENU_MENUMARK_3 };
	if( !rec ) { return BitUnpacker( storage, INDEX( NUMlist[ mark ] ), BITlist[ mark ] ); }
	return BitPacker( answerI, storage, INDEX( NUMlist[ mark ] ), BITlist[ mark ] );
}

int[] CleanDuplicates( int[] list )
{
	int[] listA = list;
	listA.sortAsc();
	int position = listA[ 0 ];
	int[] listB = {};
	listB.insertLast( position );
	for( int8 i = 0, l = listA.length(); i < l; i++ )
	{
		if( listA[ i ] > position ) { listB.insertLast( listA[ i ] ); position = listA[ i ];  }
	}
	return listB;
}
string[] SortingSTR( string[] list, int[] listX, bool invert )
{
	int[] barriers = CleanDuplicates( listX );
	if( invert ){ barriers.sortDesc(); }
	string[] Resultlist = {};
	for( int8 i = 0, l = barriers.length(); i < l; i++ )
	{
		for( int8 ii = 0, ll = listX.length(); ii < ll; ii++ )
		{
			if( listX[ ii ] == barriers[ i ] ) { Resultlist.insertLast( list[ ii ] ); }
		}
	}

	return Resultlist;
}
int[] SortingINT( int[] list, int[] listX, bool invert )
{
	int[] barriers = CleanDuplicates( listX );
	if( invert ){ barriers.sortDesc(); }
	int[] Resultlist = {};
	for( int8 i = 0, l = barriers.length(); i < l; i++ )
	{
		for( int8 ii = 0, ll = listX.length(); ii < ll; ii++ )
		{
			if( listX[ ii ] == barriers[ i ] ) { Resultlist.insertLast( list[ ii ] ); }
		}
	}

	return Resultlist;
}

string Dictkeys( int number, string[] list, int[] listX )
{
	for( int8 i = 0, l = list.length()-1; l >= i; l-- )
	{
		if( number >= listX[ l ] ) { return list[ l ]; }
	}
	return "";
}
string Colorizing( int number, string[] list, int[] listX )
{
	for( int8 i = 0, l = list.length()-1; l >= i; l-- )
	{
		if( number >= listX[ l ] ) { return "|"+list[ l ]+" "; }
	}
	return "";
}

int16 CheckInv( Critter& initiator, Critter@ target, uint16 check )
{
	uint16 result = _CritCountItem( initiator, check );
	if( result > 0 ) { return result; }
	else if( valid( target ) )
	{
		result = _CritCountItem( target, check );
		if( result > 0 ) { return -( result ); }
	}
	return 0;
}
string[] StatusMaker( Critter& initiator, Critter@ target, string[] list, int[] listX, uint8[] listV )
{
	string lineV = "";
	string[] listresult = {};
	for( uint8 i = 0, l = listX.length(); i < l; i++ )
	{
			 if( listV[ i ] == CH_BOOL )       { lineV = ( listX[ i ] > 0 ? "+" : "-" ) + " " + list[ i ]; }
		else if( listV[ i ] == CH_COUNT )      { lineV = ( listX[ i ] > 0 ? ""+listX[ i ] : "-" ) + " " + list[ i ]; }
		else if( listV[ i ] == CH_ST_BOOL )    { lineV = ( target.ParamBase[ listX[ i ] ] > 0 ? "+" : "-" ) + " " + list[ i ]; }
		else if( listV[ i ] == CH_ST_COUNT )   { lineV = ( ""+target.ParamBase[ listX[ i ] ] ) + " " + list[ i ]; }
		else if( listV[ i ] == CH_ITEM_BOOL )  { lineV = ( CheckInv( initiator, target, listX[ i ] ) != 0 ? "+" : "-" ) + " " + list[ i ]; }
		else if( listV[ i ] == CH_ITEM_COUNT ) { int16 Var = CheckInv( initiator, target, listX[ i ] ); lineV = ( Var != 0 ? ""+Var : "-" ) + " " + list[ i ]; }
		listresult.insertLast( lineV );
	}
	return listresult;
}

bool MovePosition( Critter& player )
{
	if( player.Param[ ST_CELL_X ] == player.HexX && player.Param[ ST_CELL_Y ] == player.HexY ) { return false; }

	player.ParamBase[ ST_CELL_X ] = player.HexX;
	player.ParamBase[ ST_CELL_Y ] = player.HexY;

	return true;
}

