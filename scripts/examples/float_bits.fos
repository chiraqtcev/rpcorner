#include "_macros.fos"

// to test that encodeda and decoded value is the same as original
// ~run examples/float_bits TestOnce [числитель дроби] [знаменатель дроби] 0
// for 0.384 do
// ~run examples/float_bits TestOnce 384 1000 0
void TestOnce( Critter& player, int param0, int param1, int param2 ) {
    float numerator = param0;
    float denominator = param1;
    float val = numerator / denominator;
    player.Say(SAY_NETMSG, "Before: "+val);
    uint bits = FloatToBits(val);
    player.Say(SAY_NETMSG, "Bits: "+bits);
    float decoded = FloatFromBits(bits);
    player.Say(SAY_NETMSG, "After: "+decoded);
}

// to showcase how to use it with CreateTimeEvent and uint array
// ~run examples/float_bits TestLoop [числитель дроби] [знаменатель дроби] [количество повторов инкремента по 0.01]
// for 0.384 and 10 additional increments do
// ~run examples/float_bits TestLoop 384 1000 10
void TestLoop( Critter& player, int param0, int param1, int loops ) {
    float numerator = param0;
    float denominator = param1;
    float val = numerator / denominator;
    player.Say(SAY_NETMSG, "Before: "+val);
    uint[] values = {player.Id, FloatToBits(val), loops};
    CreateTimeEvent( AFTER( REAL_SECOND( 1 ) ), "e_MyFunc", values, false );
}

// store and modify float in time events array
uint e_MyFunc(uint[]@ values) {
    Critter@ player = GetCritter(values[0]);
    // decode float from uint array
    float decoded = FloatFromBits(values[1]);
    // do something with decoded value here
    decoded += 0.01;
    player.Say(SAY_NETMSG, "Incremented: "+decoded);

    if( values[2] > 0) {
        values[2] -= 1;
        // encode and save back
        values[1] = FloatToBits(decoded);
        return REAL_SECOND( 1 );
    }
    return 0;
}

#define FIELD_0_UINT (0)
#define FIELD_1_INT (1)
#define FIELD_2_FLOAT (2)

bool SaveField(uint[]& values, uint field, uint& new_value) {
    uint encoded = 0;
    switch (field) {
        case FIELD_0_UINT:
            encoded = new_value;
            break;
        default:
            return false;
    }
    values[field] = encoded;
    return true;
}

bool SaveField(uint[]& values, uint field, int& new_value) {
    uint encoded = 0;
    switch (field) {
        case FIELD_1_INT:
            encoded = new_value;
            break;
        default:
            return false;
    }
    values[field] = encoded;
    return true;
}

bool SaveField(uint[]& values, uint field, float& new_value) {
    uint encoded = 0;
    switch (field) {
        case FIELD_2_FLOAT:
            // explicitly convert float to bits
            encoded = FloatToBits(new_value);
            break;
        default:
            return false;
    }
    values[field] = encoded;
    return true;
}

bool LoadField(uint[]& values, uint field, uint& output) {
    uint encoded = values[field];
    switch (field) {
        case FIELD_0_UINT:
            output = encoded;
            break;
        default:
            return false;        
    }
    return true;
}

bool LoadField(uint[]& values, uint field, int& output) {
    uint encoded = values[field];
    switch (field) {
        case FIELD_1_INT:
            output = encoded;
            break;
        default:
            return false;
    }
    return true;
}

bool LoadField(uint[]& values, uint field, float& output) {
    uint encoded = values[field];
    switch (field) {
        case FIELD_2_FLOAT:
            // convert bits to float
            output = FloatFromBits(encoded);
            break;
        default:
            return false;
    }
    return true;
}

void TestSaveLoad( Critter& player, int param0, int param1, int loops ) {
    uint a = 123;
    int b = -456;
    float c = -123.456;
    uint[] values = {0, 0, 0};
    if( !SaveField(values, FIELD_0_UINT, a) ||
        !SaveField(values, FIELD_1_INT, b) ||
        !SaveField(values, FIELD_2_FLOAT, c)
    ) {
        player.Say(SAY_NETMSG, "Failed to save a field");
        return;
    }

    uint new_a = 0;
    int new_b = 0;
    float new_c = 0.0;
    if( !LoadField(values, FIELD_0_UINT, new_a) ||
        !LoadField(values, FIELD_1_INT, new_b) ||
        !LoadField(values, FIELD_2_FLOAT, new_c)
    ) {
        player.Say(SAY_NETMSG, "Failed to load a field");
        return;
    }

    player.Say(SAY_NETMSG, "a: "+new_a);
    player.Say(SAY_NETMSG, "b: "+new_b);
    player.Say(SAY_NETMSG, "c: "+new_c);
}
