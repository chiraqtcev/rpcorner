#include "_macros.fos"
#include "_ltp.fos"

// в своих скриптах вам понадобится местная глобальная переменная
// bool ltp_inited=false;
// которая будет указывать, прошла ли инициализация (регистрация) процесса

void ltp_init()
{
    // регистрируем процесс LTP_TEST на вызов process_test(Critter@, uint&)
    LTPREG( LTP_TEST, process_test )

    // ltp_inited=true;
}

// регистрация тестового процесса, вызвать перед тем как выполнять старт, если не используется автоматическая инициализация с ltp_inited
void procReg( Critter& player, int var, int con, int param2 )
{
    ltp_init();
}

// заставляет запустить процесс вида type через time с параметром param
void procStart( Critter& cr, int type, int time, int param )
{
    // if(!ltp_inited) ltp_init(); //проверяем перед стартом прошла ли инициализация, если нет то регистрируем процесс
    StartProcess( cr, uint8( type ), param, uint( time ) );
}

// останавливает текущий процесс у вызываемого
void procStop( Critter& cr, int type, int time, int param )
{
    StopProcess( cr );
}

uint process_test( Critter@ cr, int& param0, int& param1, int& param2 )
{
    // добавляем макросом кусок кода, который отвечает на пробный вызов функции после бинда
    LTPROCESS( cr, param0, LTP_TEST )

    // то же самое, если используются стандартные названия параметров функции (Critter@ cr, int& param0, int& *, int& *)
    // LTPROCESSD(LTP_TEST)

    // выполняем цикличное действие
    cr.Say( SAY_EMOTE, "ОЛОЛО Я ЕБУ ГУСЕЙ" );

    // param можно использовать в своих целях он не будет сбрасываться между циклами, только после повтороного старта процесса
    param0 += 1;

    // если param больше десяти, то сбрасываем param и останавливаем процесс
    if( param0 > 10 )
    {
        param0 = 0;
        return 0;
    }

    // иначе указываем вызвать новый цикл процесса через 2-5 секунд
    return Random( 2000, 5000 );
}
