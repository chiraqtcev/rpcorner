#include "_utils.fos"

#define BLACK "|0x000000 "
#define WHITE "|0xFFFFFF "

#define RED   "|0xFF0000 "
#define GREEN "|0x00FF00 "
#define BLUE  "|0x0000FF "

#define YELLOW "|0xFFFF00 "
#define PINK   "|0xFF00FF "
#define CYAN   "|0x00FFFF "

/*
class DataList
class Link : Data
class Group : Link
class InvalidData : Data
class Data
*/

void go( Critter& cr, int, int, int )
{
	cr.Say( SAY_NORM, "Итак, что у нас по структуре?" );
	
	generate();
	
	cr.Say( SAY_NORM, global.enlist(true) );
}

#define PATH	"data\\struct\\"
void generate()
{
	global.add( 
		Group( "STATS", "Базовые статы, доступные при регистрации персонажа." )
			.affects( parseDataString( readFile( PATH + "stats.txt" ) ) ) 
		).add( Data( "ST_MAX_LIFE", 7 )
			.derives( Link( "Влияние силы на макс ХП", "[СИЛ x 5]" ).derives( "ST_STRENGTH" ) )
			.derives( Link( "Влияние выносливости на макс ХП", "[ВЫН x 10]" ).derives( "ST_STRENGTH" ) )
		)
		;
}

string@ readFile( string@ filename )
{
	if( !valid( filename ) ) return "[invalid filename]";
	
	
	file source;
    if( source.open( filename, "r" ) < 0 )
		return "[ Can't open file: '" + filename + "' ]";
	
	string line;
    string result = "";
	while( !source.isEndOfFile() )
	{
		source.readLine( line );
		result += line;
	}
	source.close();
	
	return result;
}

Data@[] parseDataString( string@ text )
{
	Data@[] result;

	if( !valid( text ) ) return result;
	
	string@[]@ lines = split( text, "\n" );
	
	if( !valid( lines ) ) return result;	
	
	for( uint i = 0, len = lines.length(); i < len; i++ )
		if( lines[i].length() > 1 )
		{
			string@[]@ data = split( lines[i], " " );
			if( !valid( data ) )
				result.insertLast( Data( lines[i], lastID++ ) );
			else
			{
				switch( data.length() )
				{
					case( 1 ): {
						result.insertLast( Data( data[0], lastID++ ) );
						break; }
						
					case( 2 ): {
						string name = data[0];
						string value = substring( data[1], 0, data[1].length() - 1 );
						int id = lastID;
						if( !StrToInt( value, id ) )
							result.insertLast( Link( name, value ) );
						else
							result.insertLast( Data( name, id ) );
					break; }
					
					default: {
						int offset = data[0].length();
						int length = lines[i].length();
						result.insertLast( Link( data[0], substring( lines[i], offset, length - offset ) ) );
					}
				}
			}
		}
	
	return result;
}

Data@ GetFirst( string@ name ) { return global.getFirst( name ); }
Data@ GetFirst( int id ) 	   { return global.getFirst( id   ); }

DataList global;
class DataList
{
	Data@[] list;
	
	bool empty()
	{
		return( !valid( list ) || list.length() == 0 );
	}
	
	int index( Data@ link )
	{
		if( !valid( link ) ) return -1;
		
		for( uint i = 0, len = list.length(); i < len; i++ )
			if( list[i].equals( link ) )
				return i;
		
		return -1;
	}
	
	Data@ getFirst( string@ name )
	{
		if( !valid( name ) ) return InvalidData( name );
		
		for( uint i = 0, len = list.length(); i < len; i++ )
		{
			if( list[i].name == name )
				return list[i];

			//TODO: Привести этот код в нормальный вид. Такое дикое кастование добром не кончится.
			Group@ sublist = cast<Group>(list[i]);
			if( valid( sublist ) )
			{
				Data@ link = sublist.affects_on.getFirst( name );
				
				InvalidData@ empty = cast<InvalidData>(link);
				if( !valid( empty ) ) //Попытка кастовать до ошибки - костыль проверки на "правильность" данных.
					return link; //Ведь если оно кастуется - значит в подлисте не был обнаружен искомый объект.
			}
		}
			
		return InvalidData( name );
	}
	
	Data@ getFirst( int id )
	{
		for( uint i = 0, len = list.length(); i < len; i++ )
		{
			if( list[i].id == id )
				return list[i];

			//TODO: Привести этот код в нормальный вид. Такое дикое кастование добром не кончится.
			Group@ sublist = cast<Group>(list[i]);
			if( valid( sublist ) )
			{
				Data@ link = sublist.affects_on.getFirst( id );
				
				InvalidData@ empty = cast<InvalidData>(link);
				if( !valid( empty ) ) //Попытка кастовать до ошибки - костыль проверки на "правильность" данных.
					return link; //Ведь если оно кастуется - значит в подлисте не был обнаружен искомый объект.
			}
			//TODO: Как-то устаканить то, что группификаторы affect-ят содержимое, и derived-ся от хозяев-списков.
		}

		return InvalidData( id );
	}
	
	bool has( Data@ link )
	{
		return( index( link ) != -1 );
	}
	
	DataList@ add( Data@[] items )
	{
		if( valid( items ) )
			for( uint i = 0, len = items.length(); i < len; i++ )
				add( items[i] );
			
		return this;
	}

	DataList@ add( Data@ item )
	{
		if( !valid( item ) ) return this;
		
		int n = index( item );
		if( n != -1 )
			@list[n] = item;
		else
			list.insertLast( item );
		
		return this;
	}
	
	string enlist( bool fullInfo = false )
	{
		if( !valid( list ) || list.length() == 0 )
			return "[null]";
		
		string result = "";
		for( uint i = 0, len = list.length(); i < len; i++ )
			result += GREEN + "\n" + i + ")\t" + list[i].toString( fullInfo );
		
		return result;
	}
}

//TODO: Более адекватный счётчик.
int lastID = 0;

bool Equals( string@ a, string@ b )
{//TODO: Привести в божеский вид, вышла крайне ресурсозатратная проверка.
	if( !valid(a) || !valid(b) ) return false;
	
	if( a.length() != b.length() )
		return false;
	
	if( findFirst( a, b ) == -1 || findFirst( b, a ) == -1 )
		return false;
	
	return true;
}

class Link : Data
{
	string description;
	//TODO: Вставить формулу, делегатом, а не банальное строковое описание. Скорей всего для этого будет использоваться отдельный класс.
	
	Link( string name, string description )
	{
		this.id = lastID++;
		this.name = name;
		this.description = description;
	}

	bool inherited_equality( Data@ other ) override
	{
		Link@ casted = cast<Link>(other);
		if( !valid( casted ) )
			return false;
		
		return Equals( this.description, casted.description );
		//TODO: Сделать более динамическую и адекватную проверку, используя грамотное ООП, а не это жалкое подобие наследования.
	}

	string info() override
	{
		return RED + "#" + id + YELLOW + ":\t" + GREEN + name + ". " + WHITE + description;
	}
}

class Group : Link
{ //TODO: Какой-либо отдельный группификатор, ведь этот клас нужен лишь для организации вывода данных.
	Group( string name, string description )
	{
		super( name, description );
	}

	string affects_info() override
	{
		if( !affects_on.empty() )
			return YELLOW + "\n\tContains of: " + affects_on.enlist() + "\n";
		
		return "";
	}
	
	string derivers_info() override
	{
		if( !derived_by.empty() )
			return YELLOW + "\n\tIs used in: " + derived_by.enlist() + "\n";

		return "";
	}
}

class InvalidData : Data
{	//TODO: Более удобный приём для отлова !valid и null ссылок, вызваных отсутствием '.?' проверки в языке AS.
	InvalidData( string name )			{ Create( "[invalid] " + name, id ); }
	InvalidData( int id )				{ Create( "[invalid]"		 , id ); }
	InvalidData( string name, int id )	{ Create( "[invalid] " + name, id ); }

	void Create( string name, int id )
	{
		this.name = name;
		this.id = id;
	}
}

class Data
{
	string name;
	int id;
	
	Data( string name, int id )
	{
		this.name = name;
		this.id = id;
	}
	
	bool equals( Data@ other )
	{
		if( this.id != other.id )
			return false;
		
		if( this.name != other.name )
			return false;
		
		return inherited_equality( other );
	}
	
	bool inherited_equality( Data@ other ) //overridable
	{
		return true;
	}
	
	string info()
	{
		return RED + "#" + id + YELLOW + ":\t" + GREEN + name;
	}
	
	string affects_info()
	{
		if( !affects_on.empty() )
			return YELLOW + "\n\tAffects on: " + affects_on.enlist() + "\n";

		return "";
	}
	
	string derivers_info()
	{
		if( !derived_by.empty() )
			return YELLOW + "\n\tDerived by: " + derived_by.enlist() + "\n";
		
		return "";
	}
	
	string toString( bool fullInfo )//TODO: Заменить на InfoDepth - падающую с каждой итерацией вложения. Основной проблемой реализации будет защита от рекурсии и циклов зависимостей.
	{
		return info() + ( fullInfo ? affects_info() + derivers_info() : "" );
	}
	
	DataList affects_on;
	DataList derived_by;
	
	Data@ affects( Data@[] targets )
	{
		if( valid( targets ) )
			for( uint i = 0, len = targets.length(); i < len; i++ )
				affects( targets[i] );
			
		return this;
	}
	Data@ affects( Data@ target )
	{
		affects_on.add( target );
		target.derived_by.add( this );
		
		return this;
	}
	Data@ affects( int id ) { return affects( GetFirst( id ) ); }
	Data@ affects( string@ name )
	{
		if( !valid( name ) ) return this;
		
		return affects( GetFirst( name ) );
	}

	Data@ derives( Data@[] sources )
	{
		if( valid( sources ) )
			for( uint i = 0, len = sources.length(); i < len; i++ )
				affects( sources[i] );
			
		return this;
	}
	Data@ derives( Data@ source )
	{
		derived_by.add( source );
		source.affects_on.add( this );

		return this;
	}
	Data@ derives( int id ) { return derives( GetFirst( id ) ); }
	Data@ derives( string@ name )
	{
		if( !valid( name ) ) return this;
		
		return derives( GetFirst( name ) );
	}

}