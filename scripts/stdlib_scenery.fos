/** @file
 *
 * Набор стандартных действий для объектов сценери.
 *
 */

#define RUN_DIALOG     ( 1 )
#define RUN_TRIGGER    ( 2 )
#define RUN_SCENERY    ( 3 )
#define RUN_ITEM       ( 4 )
#define RUN_MSG        ( 5 )

import bool TransitToMap( Critter& cr, int locPid, int mapIndex, int entranceNum ) from "stdlib";

/** Запускает указанный в параметре диалог при использовании сценери.
 *
 * Для использования, в маппере установите следующие значения параметров на нужном сценери:
 * @arg ScriptName = scenery
 * @arg FuncName = s_Dialog
 * @arg ParamsCount = 1
 * @arg Parameter0 = Номер вызываемого диалога (см. @b dialogs.lst)
 *
 * @param   dialogId  Номер диалога. В маппере указывается как @a Parameter0.
 *
 * @remarks Данная функция будет запускать диалог только в том случае,
 *          если игрок не использовал на сценери навыков или предметов.
 */

/* повтор
   bool s_Dialog(Critter& player, Scenery& scenery, int skill, Item@ item, int dialogId)
   {
        // запускаем диалог, если игрок не применял к сценери скилл или итем
        if (skill == -1 && item is null)
        {
                return RunDialog(player, uint16(dialogId), scenery.HexX, scenery.HexY, false);
        }
        else
        {
                return false;
        }
   }
 */

bool s_DialogNpc( Critter& player, Scenery& scenery, int skill, Item@ item )
{
    return DialogNpc( RUN_SCENERY, player, scenery.HexX, scenery.HexY, -1, null, scenery, null,
                      0, 0, 0, 0, 0, skill, item ) == 1;
}

/** Перемещает игрока на карту в локации на точку с указанным номером.
 *
 * Для использования, в маппере установите следующие значения параметров на нужном сценери:
 * @arg ScriptName  = scenery
 * @arg FuncName    = s_TransitToMap
 * @arg ParamsCount = 3
 * @arg Parameter0  = Номер локации (см. @b CITIES.TXT)
 * @arg Parameter1  = Индекс карты (также указывается в @b CITIES.TXT)
 * @arg Parameter2  = Номер точки входа.
 *
 * @remarks При поиске локации используется первая локация с указанным номером
 *          прототипа (<code>skipCount == 0</code>).
 */
bool s_TransitToMap( Critter& player, Scenery& scenery, int skill, Item@ item, int locPid, int mapIndex, int entranceNum )
{
    // запускаем диалог, если игрок не применял к сценери скилл или итем
    if( skill != -1 || not (item is null) )
    {
        return false;
    }

    return TransitToMap( player, locPid, mapIndex, entranceNum );
}


bool s_ToHeal( Critter& player, Scenery& scenery, int skill, Item@ item )
{
    return ToHeal( RUN_SCENERY, player, scenery.HexX, scenery.HexY, -1, null, scenery, null,
                   0, 0, 0, 0, 0, skill, item ) == 1;
}

bool s_ShowLocation( Critter& player, Scenery& scenery, int skill, Item@ item )
{
    return ShowLocation( RUN_SCENERY, player, scenery.HexX, scenery.HexY, -1, null, scenery, null,
                         0, 0, 0, 0, 0, skill, item ) == 1;
}

bool s_FadeOut( Critter& player, Scenery& scenery, int skill, Item@ item )
{
    return FadeOut( RUN_SCENERY, player, scenery.HexX, scenery.HexY, -1, null, scenery, null,
                    0, 0, 0, 0, 0, skill, item ) == 1;
}

bool s_FadeOutAll( Critter& player, Scenery& scenery, int skill, Item@ item )
{
    return FadeOutAll( RUN_SCENERY, player, scenery.HexX, scenery.HexY, -1, null, scenery, null,
                       0, 0, 0, 0, 0, skill, item ) == 1;
}

bool s_TransitToGlobal( Critter& player, Scenery& scenery, int skill, Item@ item )
{
    return TransitToGlobal( RUN_SCENERY, player, scenery.HexX, scenery.HexY, -1, null, scenery, null,
                            0, 0, 0, 0, 0, skill, item ) == 1;
}

bool s_TransitGroupToGlobal( Critter& player, Scenery& scenery, int skill, Item@ item )
{
    return TransitGroupToGlobal( RUN_SCENERY, player, scenery.HexX, scenery.HexY, -1, null, scenery, null,
                                 0, 0, 0, 0, 0, skill, item ) == 1;
}

bool s_TransitToLocation( Critter& player, Scenery& scenery, int skill, Item@ item )
{
    return TransitToLocation( RUN_SCENERY, player, scenery.HexX, scenery.HexY, -1, null, scenery, null,
                              0, 0, 0, 0, 0, skill, item ) == 1;
}

bool s_TransitToNewLocation( Critter& player, Scenery& scenery, int skill, Item@ item )
{
    return TransitToNewLocation( RUN_SCENERY, player, scenery.HexX, scenery.HexY, -1, null, scenery, null,
                                 0, 0, 0, 0, 0, skill, item ) == 1;
}

bool s_InfoMessage( Critter& player, Scenery& scenery, int skill, Item@ item )
{
    return InfoMessage( RUN_SCENERY, player, scenery.HexX, scenery.HexY, -1, null, scenery, null,
                        0, 0, 0, 0, 0, skill, item ) == 1;
}

bool s_NpcMessageNorm( Critter& player, Scenery& scenery, int skill, Item@ item )
{
    return NpcMessageNorm( RUN_SCENERY, player, scenery.HexX, scenery.HexY, -1, null, scenery, null,
                           0, 0, 0, 0, 0, skill, item ) == 1;
}

bool s_NpcMessageShout( Critter& player, Scenery& scenery, int skill, Item@ item )
{
    return NpcMessageShout( RUN_SCENERY, player, scenery.HexX, scenery.HexY, -1, null, scenery, null,
                            0, 0, 0, 0, 0, skill, item ) == 1;
}

bool s_NpcMessageWhisp( Critter& player, Scenery& scenery, int skill, Item@ item )
{
    return NpcMessageWhisp( RUN_SCENERY, player, scenery.HexX, scenery.HexY, -1, null, scenery, null,
                            0, 0, 0, 0, 0, skill, item ) == 1;
}

bool s_NpcMessageEmo( Critter& player, Scenery& scenery, int skill, Item@ item )
{
    return NpcMessageEmo( RUN_SCENERY, player, scenery.HexX, scenery.HexY, -1, null, scenery, null,
                          0, 0, 0, 0, 0, skill, item ) == 1;
}

bool s_TimeOutSet( Critter& player, Scenery& scenery, int skill, Item@ item )
{
    return TimeOutSet( RUN_SCENERY, player, scenery.HexX, scenery.HexY, -1, null, scenery, null,
                       0, 0, 0, 0, 0, skill, item ) == 1;
}

bool s_TimeOutSub( Critter& player, Scenery& scenery, int skill, Item@ item )
{
    return TimeOutSub( RUN_SCENERY, player, scenery.HexX, scenery.HexY, -1, null, scenery, null,
                       0, 0, 0, 0, 0, skill, item ) == 1;
}

bool s_TimeOutAdd( Critter& player, Scenery& scenery, int skill, Item@ item )
{
    return TimeOutAdd( RUN_SCENERY, player, scenery.HexX, scenery.HexY, -1, null, scenery, null,
                       0, 0, 0, 0, 0, skill, item ) == 1;
}

bool s_GroupSetVar( Critter& player, Scenery& scenery, int skill, Item@ item )
{
    return GroupSetVar( RUN_SCENERY, player, scenery.HexX, scenery.HexY, -1, null, scenery, null,
                        0, 0, 0, 0, 0, skill, item ) == 1;
}

bool s_ZoneSetShadow( Critter& player, Scenery& scenery, int skill, Item@ item )
{
    return ZoneSetShadow( RUN_SCENERY, player, scenery.HexX, scenery.HexY, -1, null, scenery, null,
                          0, 0, 0, 0, 0, skill, item ) == 1;
}

bool s_SetHomePos( Critter& player, Scenery& scenery, int skill, Item@ item )
{
    return SetHomePos( RUN_SCENERY, player, scenery.HexX, scenery.HexY, -1, null, scenery, null,
                       0, 0, 0, 0, 0, skill, item ) == 1;
}

bool s_KillNpcByRole( Critter& player, Scenery& scenery, int skill, Item@ item )
{
    return KillNpcByRole( RUN_SCENERY, player, scenery.HexX, scenery.HexY, -1, null, scenery, null,
                          0, 0, 0, 0, 0, skill, item ) == 1;
}

bool s_KillNpcOnMapByRole( Critter& player, Scenery& scenery, int skill, Item@ item )
{
    return KillNpcOnMapByRole( RUN_SCENERY, player, scenery.HexX, scenery.HexY, -1, null, scenery, null,
                               0, 0, 0, 0, 0, skill, item ) == 1;
}

bool s_ToLifeNpc( Critter& player, Scenery& scenery, int skill, Item@ item )
{
    return ToLifeNpc( RUN_SCENERY, player, scenery.HexX, scenery.HexY, -1, null, scenery, null,
                      0, 0, 0, 0, 0, skill, item ) == 1;
}

bool s_Attack( Critter& player, Scenery& scenery, int skill, Item@ item )
{
    return Attack( RUN_SCENERY, player, scenery.HexX, scenery.HexY, -1, null, scenery, null,
                   0, 0, 0, 0, 0, skill, item ) == 1;
}

bool s_Attack2( Critter& player, Scenery& scenery, int skill, Item@ item )
{
    return Attack2( RUN_SCENERY, player, scenery.HexX, scenery.HexY, -1, null, scenery, null,
                    0, 0, 0, 0, 0, skill, item ) == 1;
}

bool s_AttackStop2( Critter& player, Scenery& scenery, int skill, Item@ item )
{
    return AttackStop2( RUN_SCENERY, player, scenery.HexX, scenery.HexY, -1, null, scenery, null,
                        0, 0, 0, 0, 0, skill, item ) == 1;
}

bool s_AttackStop( Critter& player, Scenery& scenery, int skill, Item@ item )
{
    return AttackStop( RUN_SCENERY, player, scenery.HexX, scenery.HexY, -1, null, scenery, null,
                       0, 0, 0, 0, 0, skill, item ) == 1;
}

bool s_AttackForced2( Critter& player, Scenery& scenery, int skill, Item@ item )
{
    return AttackForced2( RUN_SCENERY, player, scenery.HexX, scenery.HexY, -1, null, scenery, null,
                          0, 0, 0, 0, 0, skill, item ) == 1;
}

bool s_Kill( Critter& player, Scenery& scenery, int skill, Item@ item )
{
    return Kill( RUN_SCENERY, player, scenery.HexX, scenery.HexY, -1, null, scenery, null,
                 0, 0, 0, 0, 0, skill, item ) == 1;
}

bool s_Damage( Critter& player, Scenery& scenery, int skill, Item@ item )
{
    return Damage( RUN_SCENERY, player, scenery.HexX, scenery.HexY, -1, null, scenery, null,
                   0, 0, 0, 0, 0, skill, item ) == 1;
}

bool s_SayEnt( Critter& player, Scenery& scenery, int skill, Item@ item )
{
    return SayEnt( RUN_SCENERY, player, scenery.HexX, scenery.HexY, -1, null, scenery, null,
                   0, 0, 0, 0, 0, skill, item ) == 1;
}

bool s_DoorOpen( Critter& player, Scenery& scenery, int skill, Item@ item )
{
    return DoorOpen( RUN_SCENERY, player, scenery.HexX, scenery.HexY, -1, null, scenery, null,
                     0, 0, 0, 0, 0, skill, item ) == 1;
}

bool s_DoorClose( Critter& player, Scenery& scenery, int skill, Item@ item )
{
    return DoorClose( RUN_SCENERY, player, scenery.HexX, scenery.HexY, -1, null, scenery, null,
                      0, 0, 0, 0, 0, skill, item ) == 1;
}


bool s_DoorControl( Critter& player, Scenery& scenery, int skill, Item@ item )
{
    return DoorControl( RUN_SCENERY, player, scenery.HexX, scenery.HexY, -1, null, scenery, null,
                        0, 0, 0, 0, 0, skill, item ) == 1;
}


bool s_Secret( Critter& player, Scenery& scenery, int skill, Item@ item )
{
    return Secret( RUN_SCENERY, player, scenery.HexX, scenery.HexY, -1, null, scenery, null,
                   0, 0, 0, 0, 0, skill, item ) == 1;
}
