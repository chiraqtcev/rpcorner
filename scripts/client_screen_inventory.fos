// inventory screen
// pm

#include "_client_defines.fos"
#include "client_gui_h.fos"
#include "_colors.fos"
#include "sprite.fos"
#include "_defines.fos"
#include "_macros.fos"
#include "_msgstr.fos"

#define INVENTORY_ITEMS_LIST_COUNT    ( 20 )

// #define __DEBUG

class ScreenInventory : IGUIScreenCallbackShow, IGUIScreenCallbackHide
{
    IGUIScreenOpt@     screenOpt;
    InvItemList@       ItemList;
    InventoryItemShow@ ItemShow;
    InventoryItemButton@[] InventoryButtons;

    ScreenInventory()
    {}

    void OnShow( int p0, int p1, int p2 )
    {
        @screenOpt = GUI_GetScreenOptions();
    }

    void OnHide( int p0, int p1, int p2 )
    {}
}

class InvItemList : IGUIElementCallbackInit // , IGUIElementCallbackMouseClick
{
    IGUIElementOpt@ Options;
    ScreenInventory @ Instance;
    InventoryItem[] InventoryItems;

    uint8 prevIndex;

    InvItemList( ScreenInventory & instance )
    {
        @Instance = instance;
        prevIndex = uint8( -1 );
    }

    void OnInit()
    {
        @Options = GUI_GetElementOptions();
        @Instance.ItemList = this;

        LoadInventory();
        ShowList();

    }
    /*
       void OnMouseClick(int click)
       {
       }*/

    bool LoadInventory()
    {
        CritterCl @ choo = GetChosen();
        if( choo is null )
            return false;

        ItemCl@[] invItems;
        choo.GetItems( -1, invItems );

        InventoryItems.resize( 0 );
// #ifdef __DEBUG
        Message( "length items " + invItems.length() );
// #endif
        uint16 itemsLen = invItems.length();
        uint16[] ids;
        uint16[] count;
        uint16[] protos;

        // ids.resize(itemsLen);
        // count.resize(itemsLen);

        for( uint16 i = 0; i < itemsLen; ++i )
        {
            uint16 protoIndex = uint16( protos.find( invItems[ i ].GetProtoId() ) );
            if( protoIndex != uint16( -1 ) )
            {
                // if(count[protoIndex] ==

                // count[protoIndex]++;
                protos.insertAt( protoIndex, invItems[ i ].GetProtoId() );
                ids.insertAt( protoIndex, invItems[ i ].Id );
                count.insertAt( protoIndex, invItems[ i ].GetCount() );
            }

            else
            {
                protos.insertLast( invItems[ i ].GetProtoId() );
                ids.insertLast( invItems[ i ].Id );
                count.insertLast( invItems[ i ].GetCount() );
            }

            //	invItems.removeAt(i);
            Message( "" + invItems[ i ].Id );
            ItemCl @ test = GetItem( invItems[ i ].Id );
            if( test !is null )
                Message( "successful" );

        }

        #ifdef __DEBUG
        // Message("name item "+GetMsgStr(TEXTMSG_ITEM,STR_ITEM_INFO(invItems[i]))+" "+invItems[i].GetCount()+" "+invItems[i].Id);
        // Message("ids len "+ids.length());
        for( uint16 i = 0, j = protos.length(); i < j; ++i )
        {
            Message( "protos " + protos[ i ] + " ids " + ids[ i ] + " count " + count[ i ] );
        }
        #endif

        // ids.insertAt(0, uint16(-1)); //temp
        // protos.insertAt(0, uint16(-1));
        // count.insertAt(0, uint16(-1));

        uint16 index = count[ 0 ],
               whileI = 0,
               protoId = 0;
        do
        {
            // ItemCl @ tempItem;
            uint16[] tempIds;
            uint16[] tempCounts;

            #ifdef __DEBUG
            Message( "tempCounts " + index + " ids " + ids.length() + " count " + count.length() + " whileI " + whileI + " ids " + ids[ whileI ] + " protos len " + protos.length() );
            #endif
            // for(;whileI < whileI+index; ++whileI)
            // while(!((protos.length()-1)-whileI != 0 && protos[whileI] == protos[whileI+1]))

            protoId = protos[ 0 ];
            // index = count[whileI];

            // for(uint16 i = whileI, j = whileI+index; i < j; ++i)
            while( protoId == protos[ 0 ] )
            {
                // @tempItem = GetItem(ids[whileI]);

                tempIds.insertLast( ids[ 0 ] );
                tempCounts.insertLast( count[ 0 ] );

                protos.removeAt( 0 );
                ids.removeAt( 0 );
                count.removeAt( 0 );

                // whileI = i;
                #ifdef __DEBUG
                // Message("whileI "+whileI+" tempIds "+tempIds[whileI]+" tempCounts "+tempCounts[whileI]);
                #endif /*
                                                 //if(protos.length()-(whileI+1) == 0 || protos[whileI] != protos[whileI+1]) break;	*/
            }
            ;

            InventoryItem tempInvItem( tempIds, tempCounts, GetMsgStr( TEXTMSG_ITEM, protos[ 0 ] * 100 ) );
            InventoryItems.insertLast( tempInvItem );

            tempIds.resize( 0 );
            tempCounts.resize( 0 );

            // whileI++;
            #ifdef __DEBUG
            // Message("name inven "+InventoryItems[whileI].Name+" "+InventoryItems[whileI].Id.length());
            #endif

        }
        while( ids.length() > 1 );
        return true;
    }

    bool ShowList()
    {
        uint16 itemsLen = InventoryItems.length(),
               index = 0;


        #ifdef __DEBUG
        Message( "inv len " + itemsLen );
        #endif
        for( uint16 i = 0, j = INVENTORY_ITEMS_LIST_COUNT; i < j; ++i )
        {
            uint16 itemsCout = 0;
            string name = "";
            if( i < itemsLen )
            {
                for( uint16 ii = 0, jj = InventoryItems[ i ].Id.length(); ii < jj; ++ii )
                {
                    itemsCout += InventoryItems[ i ].Count[ ii ];
                }

                index = ( InventoryItems[ i ].Child ? index : i );
                name = ( " " + ( InventoryItems[ i ].Child ? "\\-- " : "+ " ) + InventoryItems[ i ].Name );

                for( uint16 ii = InventoryItems[ i ].Name.length(); ii < 60; ++ii )
                {
                    name += " ";
                }

                name += " x" + itemsCout;


            }

            name = ( name == "" ? "no item" : name );          // (InventoryItems[i].Child ? InventoryItems[i].Count : itemsCout);
            if( Instance.InventoryButtons[ i ] is null )
            {
                Message( "null button" );
                continue;
            }
            Instance.InventoryButtons[ i ].Options.Text( "" + name, FONT_FALLOUT, COLOR_SAND, COLOR_GREEN, FT_CENTERY );
            Instance.InventoryButtons[ i ].InvItemIndex = index;
            #ifdef __DEBUG
            if( i < itemsLen )
            {
                Message( "inven item " + index + " ids len " + InventoryItems[ i ].Id.length() );
            }
            #endif
        }

        return true;
    }

    void SelectItem( uint8 index )
    {
        if( prevIndex != uint8( -1 ) )
            Instance.InventoryButtons[ prevIndex ].PressPic( false );
        Instance.InventoryButtons[ index ].PressPic( true );

        if( index < InventoryItems.length() )
        {
            ItemCl @ item = GetItem( InventoryItems[ index ].Id[ 0 ] );
            Message( "" + InventoryItems[ index ].Id[ 0 ] );
            if( item !is null )
            {
                uint spriteHash = item.Proto.PicInv;
                Message( " " + spriteHash );
            }
        }

        prevIndex = index;
    }

    void DropItem( uint8 index )
    {
        // ShowList();
        // if(index != prevIndex)
        if( !InventoryItems[ index ].Child )
        {
            uint16 invItemIndex = Instance.InventoryButtons[ index ].InvItemIndex;
            uint16 dropLen = InventoryItems[ invItemIndex ].Id.length();
            // InventoryItems[invItemIndex].Name[1] = '-';

            Message( "" + dropLen + " " + invItemIndex );


            // Instance.InventoryButtons[index].Options.Text("work",FONT_FALLOUT,COLOR_SAND, COLOR_GREEN,FT_CENTERX|FT_CENTERY);
            for( uint16 i = 0; i < dropLen; ++i )
            {
                InventoryItem tempInvItem( InventoryItems[ invItemIndex ].Id[ i ], InventoryItems[ invItemIndex ].Count[ i ], InventoryItems[ invItemIndex ].Name );
                InventoryItems.insertAt( index + i + 1, tempInvItem );
                // InventoryItemButton inventoryButton(Instance, i);
                // Instance.InventoryButtons[i].Options.Text(""+InventoryItems[invItemIndex].Name+" "+InventoryItems[invItemIndex].Count[i-index-1],FONT_FALLOUT,COLOR_SAND, COLOR_GREEN,FT_CENTERX|FT_CENTERY);
                // inventoryButton.Options.Text(""+InventoryItems[invItemIndex].Name+" "+InventoryItems[invItemIndex].Count[i-index-1],FONT_FALLOUT,COLOR_SAND, COLOR_GREEN,FT_CENTERX|FT_CENTERY);

                // Instance.InventoryButtons.insertAt(i, inventoryButton);
            }
            ShowList();
        }
        // else
        // {

        // }
        // prevIndex = index;
    }

    void RollUpItem( uint8 index )
    {
        // if(prevIndex == index)
        // {
        Message( "index " + index );
        if( !InventoryItems[ index ].Child && InventoryItems[ index + 1 ].Child )
        {
            index++;
            Message( "index " + index );
            while( index < InventoryItems.length() && InventoryItems[ index ].Child )
            {
                Message( "index " + index + " " + InventoryItems.length() );
                InventoryItems.removeAt( index );
                // index++;
            }
            ;

            ShowList();
        }
        // }
    }

}

class InventoryItemButton : IGUIElementCallbackInit, IGUIElementCallbackMouseClick
{
    IGUIElementOpt@ Options;
    ScreenInventory @ Instance;

    bool   Rolled;

    uint8  Index;
    uint16 InvItemIndex;

    InventoryItemButton( ScreenInventory & instance, uint8 index )
    {
        @Instance = instance;
        Index = index;
        Rolled = false;
    }

    void OnInit()
    {
        @Options = GUI_GetElementOptions();
        // @Instance.Hand_[HandType] = this;
        Instance.InventoryButtons.insertAt( Index, this );


    }

    void OnMouseClick( int click )
    {
        Instance.ItemList.SelectItem( Index );

        if( click == MOUSE_CLICK_LEFT )
        {
            !Rolled ? Instance.ItemList.DropItem( Index ) : Instance.ItemList.RollUpItem( Index );
            Rolled = ( Rolled ? false : true );
        }
        /*if(Rolled)
           {
                Instance.ItemList.RollUpItem(Index);
           }*/

    }

    void PressPic( bool press )
    {
        Options.UpPic( press ? "invItemDown.png" : "invItemUp.png" );
    }
}

class InventoryItemShow : IGUIElementCallbackInit
{
    IGUIElementOpt@ Options;
    ScreenInventory @ Instance;

    InventoryItemShow( ScreenInventory & instance )
    {
        @Instance = instance;
    }

    void OnInit()
    {
        @Options = GUI_GetElementOptions();
        @Instance.ItemShow = this;
    }

    // void


}

class InventoryItem
{
    InventoryItem()
    {
        Child = false;
    }

    InventoryItem( uint16 id, uint16 count, string name )
    {
        Id.resize( 1 );
        Count.resize( 1 );

        Id[ 0 ] = id;
        Count[ 0 ] = count;
        Name = name;

        Child = true;
    }

    InventoryItem( uint16[] id, uint16[] count, string name )
    {
        Id = id;
        Count = count;
        Name = name;

        Child = false;
    }

    uint16[] Id;
    uint16[] Count;
    string Name;
    bool   Child;
}

void InitInventoryTnfScreen()
{
    ScreenInventory screenInventory();
    GUI_CreateScreen( CLIENT_SCREEN_INVENTORY_TNF, "invScreen.png" )
    .CallbackShow( screenInventory )
    .CallbackHide( screenInventory )
    .CanMove( true )
    // .Position(155,111)
    .Modal( false )
    .Multiinstance( true );

    // screenInventory.InventoryButtons.resize(INVENTORY_ITEMS_LIST_COUNT);
    uint16 y = 0;

    for( uint8 i = 0; i < INVENTORY_ITEMS_LIST_COUNT; ++i )
    {
        InventoryItemButton TempInvButt( screenInventory, i );
        GUI_AddScreenElement( CLIENT_SCREEN_INVENTORY_TNF, "invItemUp.png", 0, y )
        .CallbackInit( TempInvButt )
        .CallbackMouseClick( TempInvButt );
        // .DownPic("invItemDown.png");

        y += 20;
    }

    InvItemList itemList( screenInventory );
    GUI_AddScreenElement( CLIENT_SCREEN_INVENTORY_TNF, "invItemList.png", 0, 0 )
    .CallbackInit( itemList )
    .SetVisible( false );
    // .CallbackMouseClick()
    // .DownPic("invItemDown.png");

    InventoryItemShow itemShow( screenInventory );
    GUI_AddScreenElement( CLIENT_SCREEN_INVENTORY_TNF, "invItemShow.png", 550, 0 )
    .CallbackInit( itemList );
}
