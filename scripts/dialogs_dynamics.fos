//Простенький прототип модуля, синхронизирующего dictionary с файлом-хранилищем.
#include "FileDictionary.fos"

//Ниже - образец примитивного кода для Кайнда. Таким макаром можно выводить и устанавливать любые лексемы по их имени.
//Напоминаю - лексемы хранятся в файле, и дублируются в dictionary (для ускорения обработки).

void s_text1( Critter& player, Critter@ npc, string@ lexems )
{
	if( !valid( lexems ) ) return;
	
	if( IS_DIALOG_SAY_MODE( lexems ) )
	{
		set( "data1", lexems );
	}
    else
	{
		lexems = get( "data1" );
		testInfo( player, lexems ); //Выводит информацию о лексемах персонажу в игровом режиме TESTER
	}		
}

void s_text2( Critter& player, Critter@ npc, string@ lexems )
{
	if( !valid( lexems ) ) return;

	if( IS_DIALOG_SAY_MODE( lexems ) )
	{
		if( lexems == " " )
		{
			set( "data1", "" );
			set( "data2", "" );
			return;
		}
		
		string data1 = get( "data1" );
		if( data1 == "$data1" || data1 == "$data1" + "???" )
			set( "data1", lexems );
		else
			set( "data2", lexems );
	}
    else
	{
		lexems = get( "data1" ) + get( "data2" );
		testInfo( player, lexems ); //Выводит информацию о лексемах персонажу в игровом режиме TESTER
	}		
}

void s_text3( Critter& player, Critter@ npc, string@ lexems )
{
	if( !valid( lexems ) ) return;

	string[] values = { "greka", "reka", "ruka", "rak" };
	
	if( IS_DIALOG_SAY_MODE( lexems ) )
	{
		if( lexems == " " )
		{
			for( uint i = 0, l = values.length(); i < l; i++ )
				set( values[i], "???" );
			
			return;
		}
		
		string[] correct = { "грека", "реку", "руку", "рак" };
		
		int index = correct.find( lexems );
		if( index != -1  )
			set( values[index], lexems );
			//set( values[index], correct[index] ); //Запись эквивалентна, т.к. lexems равно этому значению. Просто как пример.
	}
    else
	{
		string result = "";
		for( uint i = 0, l = values.length(); i < l; i++ )
			result += get( values[i] );
		
		lexems = result;
		testInfo( player, lexems ); //Выводит информацию о лексемах персонажу в игровом режиме TESTER
	}		
}
 //KindMan812: Ниже - лексемы для Перфекшена. Мэр, Шериф, 10 копов, квартиры. Для вывода любых из лексем в диалоге - привязывайте скрипт к диалогу dialog@get_text_perf ; Для изменения лексемы через диалог - Используйте скрипт dialog@s_mer - меняет лексему Мэра и т.д. 
void get_text_perf( Critter& player, Critter@ npc, string@ lexems )
{
	if( !valid( lexems ) ) return;
	lexems = get( "mer" ) + get( "sherif" )+ get( "cop1" )+ get( "cop2" )+ get( "cop3" )+ get( "cop4" )+ get( "cop5" )+ get( "cop6" )+ get( "cop7" )+ get( "cop8" )+ get( "cop9" )+ get( "cop10" )+ get( "flat1" )+ get( "flat2" )+ get( "flat3" )+ get( "flat4" )+ get( "flat5" )+ get( "flat6" )+ get( "flat7" )+ get( "flat8" )+ get( "flat9" )+ get( "flat10" );
}
void s_mer( Critter& player, Critter@ npc, string@ lexems )
{
	if( !valid( lexems ) ) return;
	
	if( IS_DIALOG_SAY_MODE( lexems ) )
	{
		set( "mer", lexems );
	}
    else
	{
		lexems = get( "mer" );
		testInfo( player, lexems ); //Выводит информацию о лексемах персонажу в игровом режиме TESTER
	}		
}
void s_sherif( Critter& player, Critter@ npc, string@ lexems )
{
	if( !valid( lexems ) ) return;
	
	if( IS_DIALOG_SAY_MODE( lexems ) )
	{
		set( "sherif", lexems );
	}
    else
	{
		lexems = get( "sherif" );
		testInfo( player, lexems ); //Выводит информацию о лексемах персонажу в игровом режиме TESTER
	}		
}
void s_cop1( Critter& player, Critter@ npc, string@ lexems )
{
	if( !valid( lexems ) ) return;
	
	if( IS_DIALOG_SAY_MODE( lexems ) )
	{
		set( "cop1", lexems );
	}
    else
	{
		lexems = get( "cop1" );
		testInfo( player, lexems ); //Выводит информацию о лексемах персонажу в игровом режиме TESTER
	}		
}
void s_cop2( Critter& player, Critter@ npc, string@ lexems )
{
	if( !valid( lexems ) ) return;
	
	if( IS_DIALOG_SAY_MODE( lexems ) )
	{
		set( "cop2", lexems );
	}
    else
	{
		lexems = get( "cop2" );
		testInfo( player, lexems ); //Выводит информацию о лексемах персонажу в игровом режиме TESTER
	}		
}
void s_cop3( Critter& player, Critter@ npc, string@ lexems )
{
	if( !valid( lexems ) ) return;
	
	if( IS_DIALOG_SAY_MODE( lexems ) )
	{
		set( "cop3", lexems );
	}
    else
	{
		lexems = get( "cop3" );
		testInfo( player, lexems ); //Выводит информацию о лексемах персонажу в игровом режиме TESTER
	}		
}
void s_cop4( Critter& player, Critter@ npc, string@ lexems )
{
	if( !valid( lexems ) ) return;
	
	if( IS_DIALOG_SAY_MODE( lexems ) )
	{
		set( "cop4", lexems );
	}
    else
	{
		lexems = get( "cop4" );
		testInfo( player, lexems ); //Выводит информацию о лексемах персонажу в игровом режиме TESTER
	}		
}
void s_cop5( Critter& player, Critter@ npc, string@ lexems )
{
	if( !valid( lexems ) ) return;
	
	if( IS_DIALOG_SAY_MODE( lexems ) )
	{
		set( "cop5", lexems );
	}
    else
	{
		lexems = get( "cop5" );
		testInfo( player, lexems ); //Выводит информацию о лексемах персонажу в игровом режиме TESTER
	}		
}
void s_cop6( Critter& player, Critter@ npc, string@ lexems )
{
	if( !valid( lexems ) ) return;
	
	if( IS_DIALOG_SAY_MODE( lexems ) )
	{
		set( "cop6", lexems );
	}
    else
	{
		lexems = get( "cop6" );
		testInfo( player, lexems ); //Выводит информацию о лексемах персонажу в игровом режиме TESTER
	}		
}
void s_cop7( Critter& player, Critter@ npc, string@ lexems )
{
	if( !valid( lexems ) ) return;
	
	if( IS_DIALOG_SAY_MODE( lexems ) )
	{
		set( "cop7", lexems );
	}
    else
	{
		lexems = get( "cop7" );
		testInfo( player, lexems ); //Выводит информацию о лексемах персонажу в игровом режиме TESTER
	}		
}
void s_cop8( Critter& player, Critter@ npc, string@ lexems )
{
	if( !valid( lexems ) ) return;
	
	if( IS_DIALOG_SAY_MODE( lexems ) )
	{
		set( "cop8", lexems );
	}
    else
	{
		lexems = get( "cop8" );
		testInfo( player, lexems ); //Выводит информацию о лексемах персонажу в игровом режиме TESTER
	}		
}
void s_cop9( Critter& player, Critter@ npc, string@ lexems )
{
	if( !valid( lexems ) ) return;
	
	if( IS_DIALOG_SAY_MODE( lexems ) )
	{
		set( "cop9", lexems );
	}
    else
	{
		lexems = get( "cop9" );
		testInfo( player, lexems ); //Выводит информацию о лексемах персонажу в игровом режиме TESTER
	}		
}
void s_cop10( Critter& player, Critter@ npc, string@ lexems )
{
	if( !valid( lexems ) ) return;
	
	if( IS_DIALOG_SAY_MODE( lexems ) )
	{
		set( "cop10", lexems );
	}
    else
	{
		lexems = get( "cop10" );
		testInfo( player, lexems ); //Выводит информацию о лексемах персонажу в игровом режиме TESTER
	}		
}
void s_flat1( Critter& player, Critter@ npc, string@ lexems )
{
	if( !valid( lexems ) ) return;
	
	if( IS_DIALOG_SAY_MODE( lexems ) )
	{
		set( "flat1", lexems );
	}
    else
	{
		lexems = get( "flat1" );
		testInfo( player, lexems ); //Выводит информацию о лексемах персонажу в игровом режиме TESTER
	}		
}
void s_flat2( Critter& player, Critter@ npc, string@ lexems )
{
	if( !valid( lexems ) ) return;
	
	if( IS_DIALOG_SAY_MODE( lexems ) )
	{
		set( "flat2", lexems );
	}
    else
	{
		lexems = get( "flat2" );
		testInfo( player, lexems ); //Выводит информацию о лексемах персонажу в игровом режиме TESTER
	}		
}
void s_flat3( Critter& player, Critter@ npc, string@ lexems )
{
	if( !valid( lexems ) ) return;
	
	if( IS_DIALOG_SAY_MODE( lexems ) )
	{
		set( "flat3", lexems );
	}
    else
	{
		lexems = get( "flat3" );
		testInfo( player, lexems ); //Выводит информацию о лексемах персонажу в игровом режиме TESTER
	}		
}
void s_flat4( Critter& player, Critter@ npc, string@ lexems )
{
	if( !valid( lexems ) ) return;
	
	if( IS_DIALOG_SAY_MODE( lexems ) )
	{
		set( "flat4", lexems );
	}
    else
	{
		lexems = get( "flat4" );
		testInfo( player, lexems ); //Выводит информацию о лексемах персонажу в игровом режиме TESTER
	}		
}
void s_flat5( Critter& player, Critter@ npc, string@ lexems )
{
	if( !valid( lexems ) ) return;
	
	if( IS_DIALOG_SAY_MODE( lexems ) )
	{
		set( "flat5", lexems );
	}
    else
	{
		lexems = get( "flat5" );
		testInfo( player, lexems ); //Выводит информацию о лексемах персонажу в игровом режиме TESTER
	}		
}
void s_flat6( Critter& player, Critter@ npc, string@ lexems )
{
	if( !valid( lexems ) ) return;
	
	if( IS_DIALOG_SAY_MODE( lexems ) )
	{
		set( "flat6", lexems );
	}
    else
	{
		lexems = get( "flat6" );
		testInfo( player, lexems ); //Выводит информацию о лексемах персонажу в игровом режиме TESTER
	}		
}
void s_flat7( Critter& player, Critter@ npc, string@ lexems )
{
	if( !valid( lexems ) ) return;
	
	if( IS_DIALOG_SAY_MODE( lexems ) )
	{
		set( "flat7", lexems );
	}
    else
	{
		lexems = get( "flat7" );
		testInfo( player, lexems ); //Выводит информацию о лексемах персонажу в игровом режиме TESTER
	}		
}
void s_flat8( Critter& player, Critter@ npc, string@ lexems )
{
	if( !valid( lexems ) ) return;
	
	if( IS_DIALOG_SAY_MODE( lexems ) )
	{
		set( "flat8", lexems );
	}
    else
	{
		lexems = get( "flat8" );
		testInfo( player, lexems ); //Выводит информацию о лексемах персонажу в игровом режиме TESTER
	}		
}
void s_flat9( Critter& player, Critter@ npc, string@ lexems )
{
	if( !valid( lexems ) ) return;
	
	if( IS_DIALOG_SAY_MODE( lexems ) )
	{
		set( "flat9", lexems );
	}
    else
	{
		lexems = get( "flat9" );
		testInfo( player, lexems ); //Выводит информацию о лексемах персонажу в игровом режиме TESTER
	}		
}
void s_flat10( Critter& player, Critter@ npc, string@ lexems )
{
	if( !valid( lexems ) ) return;
	
	if( IS_DIALOG_SAY_MODE( lexems ) )
	{
		set( "flat10", lexems );
	}
    else
	{
		lexems = get( "flat10" );
		testInfo( player, lexems ); //Выводит информацию о лексемах персонажу в игровом режиме TESTER
	}		
}