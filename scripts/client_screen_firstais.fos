// fist aid && medic bag drugs screen
// pm



#include "_client_defines.fos"
#include "client_gui_h.fos"
#include "_colors.fos"
#include "_msgstr.fos"
#include "_macros.fos"

bool __isScreenType = false;

string[] drugNamesAid = { "Антисептик", "Здоровье", "Кровотечение" };
string[] drugNamesDoc = { "Антисептик", "Зажим", "Нитки", "Анестезия" };


class ScreenMain : IGUIScreenCallbackShow, IGUIScreenCallbackHide
{
    ButtonSetDrugType@[] BtnsDrugs;
    uint8  ScreenType;
    uint   ItemId;
    uint16 ItemState;


    void OnShow( int itemId, int itemState, int screenType )
    {
        ItemId = itemId;
        ItemState = itemState;

        Message( "" + itemId + " " + itemState );

        for( uint8 i = 0; i < BtnsDrugs.length(); i++ )
        {
            if( FLAG( ItemState, pow( 2, BtnsDrugs[ i ].Type ) ) )
                BtnsDrugs[ i ].SwitchState();
        }
    }

    void OnHide( int p0, int p1, int p2 )
    {
        /*
              Message("hide");
              for(uint8 i = 0; i < BtnsDrugs.length(); i++)
              {
                      if(BtnsDrugs[i].IsActive) SETFLAG(ItemState, BtnsDrugs[i].Type);
                      Message(""+BtnsDrugs[i].Type);
              }
         */

    }
}

class ButtonSetDrugType : IGUIElementCallbackInit, IGUIElementCallbackMouseClick
{
    ScreenMain@     Instance;
    IGUIElementOpt@ Options;
    uint8           Type;
    bool            IsActive;

    ButtonSetDrugType( ScreenMain & instance, uint8 type )
    {
        @Instance = instance;
        Type = type;
        IsActive = false;
    }
    void OnInit()
    {
        @Options = GUI_GetElementOptions();
        @Instance.BtnsDrugs[ Type - 1 ] = this;

        if( Type > 3 && !__isScreenType )
        {
            Options.SetVisible( false );
        }

        if( FLAG( Instance.ItemState, pow( 2, Type ) ) )
            SwitchState();
    }

    void OnMouseClick( int click )
    {
        if( click == MOUSE_CLICK_LEFT )
        {
            SwitchState();
        }
    }

    void SwitchState()
    {
        IsActive = ( IsActive ? false : true );
        Options.Switch( IsActive );
    }
}

class ButtonOk : IGUIElementCallbackMouseClick
{
    ScreenMain@ Instance;

    ButtonOk( ScreenMain & instance )
    {
        @Instance = instance;
    }
    void OnMouseClick( int click )
    {
        if( click == MOUSE_CLICK_LEFT )
        {
            uint16 stateFlag = Instance.ItemState;

            for( uint8 i = 0; i < Instance.BtnsDrugs.length(); i++ )
            {
                if( Instance.BtnsDrugs[ i ].Options.GetVisible() )
                {
                    uint8 flag = pow( 2, Instance.BtnsDrugs[ i ].Type );
                    if( Instance.BtnsDrugs[ i ].IsActive )
                        SETFLAG( stateFlag, flag );
                    else
                        UNSETFLAG( stateFlag, flag );

                    Instance.ItemState = stateFlag;
                    Message( "" + Instance.ItemState );
                }
            }

            GUI_HideScreen( CLIENT_SCREEN_FIRSTAID, 0, 0, 0 );
            ChangeCursor( CURSOR_DEFAULT );

            RunServerScriptUnsafe( "heal@unsafe_setDrugsPriority", Instance.ItemId, stateFlag, 0, "message", null );

            // ::HideScreen(CLIENT_SCREEN_FIRSTAID,2,2,2);

        }
    }
}

class ButtonText : IGUIElementCallbackInit
{
    ScreenMain@     Instance;
    IGUIElementOpt@ Options;
    uint8           Type;

    ButtonText( ScreenMain & instance, uint8 type )
    {
        @Instance = instance;
        Type = type;
    }
    void OnInit()
    {
        @Options = GUI_GetElementOptions();
        if( Type > 3 && !__isScreenType )
        {
            Options.SetVisible( false );
        }
        // @Instance.BtnsDrugs[Type-1] = this;

        // if(FLAG(Instance.ItemState, pow(2, Type))) SwitchState();
    }
}

void InitFirstAidScreen() // Export
{
    ScreenMain screenMain();
    GUI_CreateScreen( CLIENT_SCREEN_FIRSTAID, "firstaid.png" )
    .CallbackShow( screenMain )
    .CloseOnMiss( true )
    .AutoCursor( true, CURSOR_DEFAULT );

    screenMain.BtnsDrugs.resize( 7 );
    uint8 axistY = 0;
    for( uint i = 1; i <= 7; i++ )
    {
        ButtonSetDrugType buttonDrugSet( screenMain, i );
        GUI_AddScreenElement( CLIENT_SCREEN_FIRSTAID, "PRFXOUT.FRM", 20, 5 + axistY )
        // .Position("RadioBroadcastSend"+i)
        .CallbackInit( buttonDrugSet )
        .CallbackMouseClick( buttonDrugSet )
        .DownPic( "PRFXIN.FRM" );

        ButtonText buttonText( screenMain, i );
        GUI_AddScreenElement( CLIENT_SCREEN_FIRSTAID, null, -300, -286 + axistY )
        .CallbackInit( buttonText )
        .Text( ( i - 1 < 3 ? ( !__isScreenType ? drugNamesAid[ i - 1 ] : drugNamesDoc[ i - 1 ] ) : "no index" ), FONT_FALLOUT, COLOR_SAND, 0, FT_CENTERX | FT_CENTERY | FT_BORDERED );

        axistY += 20;
    }

    ButtonOk buttonOk( screenMain );
    GUI_AddScreenElement( CLIENT_SCREEN_FIRSTAID, "character_select_done1.png", 40, 150 )
    .CallbackMouseClick( buttonOk )
    .DownPic( "character_select_done2.png" );
}

void ShowScreen( int p0, int p1, int p2, string@ + p3, int[] @ + p4 )
{
    ShowScreen( CLIENT_SCREEN_FIRSTAID, p0, p1, p2 );
    Message( "" + p2 );
    __isScreenType = ( p2 > 0 ? true : false );
}
