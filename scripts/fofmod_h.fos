#ifndef __FOFMOD_H__
#define __FOFMOD_H__


#include "serializator.fos"

#define FOFMOD_SOUND_TYPE_SOUND ( 0 )
#define FOFMOD_SOUND_TYPE_MUSIC ( 1 )

	
// shared interface ISerializible
// {
// 	void Serialize( Serializator &in serializer );
// }

// shared interface IStringifyable
// {
// 	string Stringify();
// }

// shared class UniqueIdentifier : IStringifyable , ISerializible
// {
// 	uint epoch;
// 	uint generation;
// 	uint id;
// 	uint timeStamp;

// 	UniqueIdentifier()
// 	{
// 		this.epoch 			 = 0;
// 		this.generation 	 = 0;
// 		this.id 			 = 0;
// 		this.timeStamp		 = 0;
// 	}

// 	UniqueIdentifier( const UniqueIdentifier &in other )
// 	{
// 		this = other;
// 	}

// 	UniqueIdentifier@ opAssign( const UniqueIdentifier &in other )
// 	{
// 		this.epoch = other.epoch;
// 		this.generation = other.generation;
// 		this.id = other.id;
// 		this.timeStamp = other.timeStamp;
// 		return this;
// 	}

// 	bool opEquals( const UniqueIdentifier &in other )
// 	{
// 		bool result = true;
// 		result =  result && (this.epoch == other.epoch);
// 		result =  result && (this.generation == other.generation);
// 		result =  result && (this.id == other.id);
// 		result =  result && (this.timeStamp == other.timeStamp);
// 		return result;
// 	}

// 	string Stringify()
// 	{
// 		string result = "";
// 		result = this.epoch + "::" + this.generation + "::" + this.id + "::" + this.timeStamp ;
// 		return result;
// 	}

// 	void Serialize( Serializator &in serializer )
// 	{
// 		serializer.Set( this.epoch );
// 		serializer.Set( this.generation );
// 		serializer.Set( this.id );
// 		serializer.Set( this.timeStamp );
// 	}

// }

// shared interface IUIDGenerator
// {
// 	UniqueIdentifier@ Generate();
// }


// shared class UniqueIdentifierGenerator : IUIDGenerator
// {
// 	UniqueIdentifier prototype;

// 	UniqueIdentifierGenerator()
// 	{
// 		prototype = UniqueIdentifier();
// 	}

// 	UniqueIdentifier@ Generate()
// 	{
// 		UniqueIdentifier@ result = UniqueIdentifier( this.prototype );
// 		this.Forward();
// 		return result;
// 	}

// 	void Forward()
// 	{
// 		const uint MAXUINT = 0xFFFFFFFF;
// 		if( this.prototype.id++ == MAXUINT )
// 		{
// 			if( this.prototype.generation++ == MAXUINT )
// 			{
// 				this.prototype.epoch++;
// 			}
// 		}
//
//		this.prototype.timeStamp = GetTick();
// 	}
// }


// shared class Sound : ISerializible
// {
// 	string filename;
// 	UniqueIdentifier identifier;

// 	#ifdef __CLIENT
// 	FMODChannel@ channel;
// 	#endif

// 	Sound( string filename )
// 	{
// 		#ifdef __CLIENT
// 		@this.channel = null;
// 		#endif
// 		this.filename = filename;
// 		this.identifier = UniqueIdentifier();
// 	}

// 	Sound( string filename, UniqueIdentifier identifier )
// 	{
// 		#ifdef __CLIENT
// 		@this.channel = null;
// 		#endif
// 		this.filename = filename;
// 		this.identifier = identifier;
// 	}

// 	void Serialize( Serializator &in serializer )
// 	{
// 		serializer.Set( this.filename );
// 		this.identifier.Serialize( serializer );
// 	}

// 	void Update(){} // virtual
// }


// exports
#ifndef FOFMOD_MODULE

	#ifdef __CLIENT
	import bool FOFMOD_Initialize() from 	"fofmod";
	import void FOFMOD_Test() from 			"fofmod";
	import void FOFMOD_TestSounds() from 	"fofmod";
	import void FOFMOD_Update() from 		"fofmod";
	// returns paused sound, unpause manually when needed.
	import FMODChannel@ FOFMOD_PlaySound( string& filename, uint16 hexX, uint16 hexY, uint minDistance, uint maxDistance ) from "fofmod";
	import FMODChannel@ FOFMOD_PlaySound( string& filename ) from "fofmod";
	import void __PlayWeaponSound( int soundId, int hexX, int hexY, string@ path, int[]@ param4 ) from "fofmod";
	import void __PlaySound( int soundId, int hexX, int hexY, string@ path, int[]@ param4 ) from "fofmod";
	#endif

	import void CoordinatesHexToGrid(int x, int y, float &out ox, float &out oy) from "fofmod";
	
#endif // FOFMOD_MODULE

#endif