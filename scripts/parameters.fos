#ifndef PARAMETERS
#define PARAMETERS

#include "_utils.fos"

#ifdef __CLIENT
	# include "_client_defines.fos"
	# include "_msgstr.fos"
	import void SetChosenTabLevelUp( bool enable )  from "chosen_tabs";
	import int  GUI_GetActiveScreen() from "client_gui";
#endif // __CLIENT

#ifndef __CLIENT
	#include "perks_h.fos"
#endif // __CLIENT

#ifdef __SERVER
	#include "speed_h.fos"
#endif // __SERVER

#ifndef __CLIENT
	void changedParam_CR_HUNGER_SPEED( Critter& cr, uint, int oldValue )
	{
		if( cr.GetTimeEvents( CTE_HUNGER, null, null, null ) > 0 )
		{
			cr.EraseTimeEvents( CTE_HUNGER );
		}
		
		cr.SayMsg( SAY_EMOTE_ON_HEAD, TEXTMSG_TEXT, STR_EMOTE_WAMBLES );
		
		cr.AddTimeEvent( "gameplay@cte_Hunger", REAL_SECOND( cr.Param[ CR_HUNGER_SPEED ] ), CTE_HUNGER, 0 );
	}

	void changedParam_CR_THIRST_SPEED( Critter& cr, uint, int oldValue )
	{
		if( cr.GetTimeEvents( CTE_THIRST, null, null, null ) > 0 )
		{
			cr.EraseTimeEvents( CTE_THIRST );
		}
		
		cr.SayMsg( SAY_EMOTE_ON_HEAD, TEXTMSG_TEXT, STR_EMOTE_LICKS_LIPS );
		
		cr.AddTimeEvent( "gameplay@cte_Thirst", REAL_SECOND( cr.Param[ CR_THIRST_SPEED ] ), CTE_THIRST, 0 );
	}

	void changedParam_CR_DRUNK_SPEED( Critter& cr, uint, int oldValue )
	{
		if( cr.GetTimeEvents( CTE_DRUNK, null, null, null ) > 0 )
		{
			cr.EraseTimeEvents( CTE_DRUNK );
		}
		
		cr.SayMsg( SAY_EMOTE_ON_HEAD, TEXTMSG_TEXT, STR_EMOTE_STAGGERS );
		
		cr.AddTimeEvent( "gameplay@cte_Drunk", REAL_SECOND( cr.Param[ CR_DRUNK_SPEED ] ), CTE_DRUNK, 0 );
	}

	void changedParam_CR_GLOBAL_OVERDOSE_SPEED( Critter& cr, uint, int oldValue )
	{
		if( cr.GetTimeEvents( CTE_GLOBAL_OVERDOSE, null, null, null ) > 0 )
		{
			cr.EraseTimeEvents( CTE_GLOBAL_OVERDOSE );
		}
		cr.AddTimeEvent( "gameplay@cte_Global_Overdose", REAL_SECOND( cr.Param[ CR_GLOBAL_OVERDOSE_SPEED ] ), CTE_GLOBAL_OVERDOSE, 0 );
	}

	import uint EraseAttackPlane( Critter& npc, Critter& target ) from "npc_planes";

	void changedParam_Hp( Critter& cr, uint, int oldValue )
	{
		int curHp = cr.StatBase[ ST_CURRENT_HP ];
		int DeathHitPoints = DeathBehaviour(cr).get();
		
		if( curHp < 1 && curHp > DeathHitPoints )
		{
			bool attackFront = true;
			if( !cr.IsKnockout() && !cr.IsDead() )
			{
				cr.StatBase[ST_VAR7] == 1 ? attackFront = false : attackFront == true;
				cr.ToKnockout( KNOCKOUT_ANIM2_DEFAULT( attackFront ), 0, cr.HexX, cr.HexY );
			}
		}
		
		if( curHp <= DeathHitPoints && !cr.IsDead() ) 
		{
			if( cr.IsPlayer() )
			{
				cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_ABOUT_TO_DIE );
			}
			
			uint anim2Dead = ANIM2_DEAD_FRONT;
			if( cr.IsKnockout() )
			{
				anim2Dead = cr.Anim2Knockout == ANIM2_IDLE_PRONE_FRONT ? ANIM2_DEAD_PRONE_FRONT : ANIM2_DEAD_PRONE_BACK;
			}
			cr.ToDead( anim2Dead, null );
			
			if( cr.StatBase[ ST_KILLER_PERSON ] > 0 )
			{
				Critter@ killer = GetCritter( cr.StatBase[ ST_KILLER_PERSON ] );
				if( valid(killer) )
				{
					killer.KillBase[ KILL_BEGIN + cr.Stat[ ST_BODY_TYPE ] ]++;
				}
			}
		}
		
		/* Добивание мобами
		if( curHp < 1 && cr.IsPlayer() )
		{
			Map@ map = cr.GetMap();
			if( valid( map ) )
			{
				Critter@[] source = { cr };
				Critter@[] crits;

				map.GetCrittersSeeing( source, true, FIND_LIFE_AND_KO | FIND_ONLY_NPC, crits );

				for( int i = 0, j = crits.length(); i < j; i++ )
				{
					if( crits[i].Id != cr.Id )
					{
						crits[i].EraseEnemyFromStack( cr.Id );
						EraseAttackPlane( crits[i], cr );
					}
				}
			}
		}
		*/

		if( curHp > cr.Stat[ ST_MAX_LIFE ] )
		{
			cr.StatBase[ ST_CURRENT_HP ] = cr.Stat[ ST_MAX_LIFE ];
		}
	}

	void changedParam_Experience( Critter& cr, uint, int oldValue )
	{   
		int luckRoll = Random( 1, 15 );
		int luckMultiplier = cr.Stat[ ST_LUCK ] >= luckRoll ? 2 : 1;
		int exp = cr.StatBase[ ST_EXPERIENCE ] - oldValue;
		if( exp > 0 )
		{
			uint level = cr.Stat[ ST_LEVEL ];
			if( level >= __LevelCap && not __LevelCapAddExperience )
			{
				return;
			}
			
			float bonus_mul = ( cr.Stat[ ST_CHARISMA ] + cr.Stat[ ST_INTELLECT ] / 2 + cr.Stat[ ST_PERCEPTION ] / 2 ) * 0.15;
			float debuff_skilled = ( cr.Trait[ TRAIT_SKILLED ] != 0 ? 0.5 : 1 );
			if( cr.Trait[ TRAIT_SEX_APPEAL ] != 0 )
			{
				bonus_mul += 0.5;
			}
			
			if( cr.Param[CR_EXP_LOCK] == 0 )
			{
				exp *= bonus_mul * luckMultiplier * debuff_skilled;
				testInfo( cr, "Gained exp: " + exp + " * " + bonus_mul + " * " + luckMultiplier );
			}
			else
			{
				cr.ParamBase[CR_EXP_LOCK] = 0;
			}
			
			cr.StatBase[ ST_EXPERIENCE ] = oldValue + exp;

			if( level >= __LevelCap )
			{
				return;
			}
			
			int perkUp = ( cr.Trait[ TRAIT_SKILLED ] != 0 ? 4 : 3 );
			while( true )
			{
				if( cr.StatBase[ ST_EXPERIENCE ] >= NextLevelNeedExp( cr ) && level < __LevelCap )
				{
					level++;
					
					cr.StatBase[ ST_LEVEL ]++;

					cr.StatBase[ ST_UNSPENT_SKILL_POINTS ] += 5 + cr.StatBase[ ST_LEVEL ] * cr.StatBase[ ST_INTELLECT ]; // Skill points
				}
				else
				{
					break;
				}
			}
		}
	}

	void changedParam_Perks( Critter& cr, uint perk, int oldValue )
	{
		int curValue = cr.Param[ perk ];
		if( curValue > oldValue )
		{
			for( uint i = 0, j = curValue - oldValue; i < j; i++ )
			{
				PerkUp( cr, perk );
			}
		}
		else if( curValue < oldValue )
		{
			for( uint i = 0, j = oldValue - curValue; i < j; i++ )
			{
				PerkDown( cr, perk );
			}
		}
	}

	void changedParam_Hide( Critter& cr, uint, int oldValue )
	{
		cr.RefreshVisible();
	}

	void not_implemented_exception_bummer( Critter& cr, int old_value, string name, uint stat_id )
	{
		cr.Say( SAY_NETMSG, name + " was " + old_value + ", now " + cr.Trait[ stat_id ] + "." );
	}

	void changedParam_FastShot( Critter& cr, uint, int oldValue )
	{
		not_implemented_exception_bummer( cr, oldValue, "Fastshot trait", TRAIT_FAST_SHOT );
	}

	bool changed_trait( Critter& cr, uint trait, int oldValue, int& sign ) 
	{
		if( trait < TRAIT_BEGIN || trait > TRAIT_END )
			return false;
		
		int newValue = cr.Trait[trait];
		if( oldValue == newValue || newValue < 0 || newValue > 1 )
		{
			return false;
		}

		sign = newValue == 0 ? -1 : 1;

		return true;
	}

	void changedParam_GoodNatured( Critter& cr, uint, int oldValue )
	{
		int sign = 0;
		if( !changed_trait( cr, TRAIT_GOOD_NATURED, oldValue, sign ) )
			return;
		
		cr.SkillBase[ SK_FIRST_AID ] 		+= 25 * sign;
		cr.SkillBase[ SK_DOCTOR ] 			+= 25 * sign;
		cr.SkillBase[ SK_BARTER ] 			+= 25 * sign;
		
		cr.SkillBase[ SK_SMALL_GUNS ]		-= 20 * sign;
		cr.SkillBase[ SK_BIG_GUNS ] 		-= 20 * sign;
		cr.SkillBase[ SK_ENERGY_WEAPONS ]	-= 20 * sign;
		cr.SkillBase[ SK_UNARMED ] 			-= 20 * sign;
		cr.SkillBase[ SK_MELEE_WEAPONS ] 	-= 20 * sign;
		cr.SkillBase[ SK_THROWING ] 		-= 20 * sign;
	}

	void changedParam_FastMetabolism( Critter& cr, uint, int oldValue )
	{
		int sign = 0;
		if( !changed_trait( cr, TRAIT_FAST_METABOLISM, oldValue, sign ) )
			return;		
		
		cr.StatBase[ ST_HEALING_RATE ] += int( cr.StatBase[ ST_ENDURANCE ] * HEALINGRATE_PER_END ) * sign;
		cr.StatBase[ ST_POISON_RESISTANCE ] -= int( cr.StatBase[ ST_ENDURANCE ] * POISON_RESIST_PER_END ) * sign;
		cr.StatBase[ ST_RADIATION_RESISTANCE ] -= int( cr.StatBase[ ST_ENDURANCE ] * RADIATION_RESIST_PER_END ) * sign;
	}

	void changedParam_Bruiser( Critter& cr, uint, int oldValue )
	{
		int sign = 0;
		if( !changed_trait( cr, TRAIT_BRUISER, oldValue, sign ) )
			return;		

		cr.StatBase[ ST_STRENGTH ] += int( BRUISER_STRENGTH_BONUS ) * sign;
		cr.StatBase[ ST_ACTION_POINTS ] -= int( BRUISER_MAX_AP_MALUS )   * sign;
	}

	void changedParam_SmallFrame( Critter& cr, uint, int oldValue )
	{
		int sign = 0;
		if( !changed_trait( cr, TRAIT_SMALL_FRAME, oldValue, sign ) )
			return;		

		cr.StatBase[ ST_AGILITY ] += int( SMALL_FRAME_AGI_BONUS ) * sign;
		cr.StatBase[ ST_CARRY_WEIGHT ] += int( SMALL_FRAME_CW_BONUS ) * sign;
	}

	void changedParam_Finesse( Critter& cr, uint, int oldValue )
	{
		int sign = 0;
		if( !changed_trait( cr, TRAIT_FINESSE, oldValue, sign ) )
			return;		

		cr.StatBase[ ST_CRITICAL_CHANCE ] += int( FINESSE_CRITCHANCE_BONUS ) * sign;
	}

	void changedParam_Kamikaze( Critter& cr, uint, int oldValue )
	{
		int sign = 0;
		if( !changed_trait( cr, TRAIT_KAMIKAZE, oldValue, sign ) )
			return;		

		cr.StatBase[ ST_ARMOR_CLASS ] -= int( cr.StatBase[ ST_AGILITY ] * 5 ) * sign;
		cr.StatBase[ ST_APREGEN ] += int( cr.StatBase[ ST_AGILITY ] * KAMIKAZE_AP_REGEN_BONUS ) * sign;
	}

	void changedParam_HeavyHanded( Critter& cr, uint, int oldValue )
	{
		int sign = 0;
		if( !changed_trait( cr, TRAIT_HEAVY_HANDED, oldValue, sign ) )
			return;		

		cr.StatBase[ ST_MELEE_DAMAGE ] += int( cr.StatBase[ ST_STRENGTH ] * HEAVY_HANDED_MELEE_DAMAGE_BONUS ) * sign;
		cr.StatBase[ ST_APREGEN ] -= int( cr.StatBase[ ST_STRENGTH ] * HEAVY_HANDED_AP_REGEN_MALUS ) * sign;
		cr.StatBase[ ST_MAX_CRITICAL ] -= int( HEAVY_HANDED_CRIT_MALUS ) * sign;
	}

	void changedParam_CR_TYPING_TIME(Critter& cr, uint, int oldValue)
	{
		if( oldValue > 0 && cr.ParamBase[ CR_TYPING_TIME ] > 0 ) 
		{
			return; 
		}

		if( oldValue == 0 && cr.ParamBase[ CR_TYPING_TIME ] > 0 )
		{
			return;
		}

		if( oldValue > 0 && cr.ParamBase[ CR_TYPING_TIME ] == 0 )
		{
			return;
		}
	}

	int NextLevelNeedExp( Critter& cr )
	{
		int level = cr.Stat[ ST_LEVEL ];
		return NUMERICAL_NUMBER( level ) * 1000;
	}

	int getParamDialog_Intellect( Critter@ master, Critter@ slave, uint index )
	{
		if( valid( master ) )
		{
			return master.Stat[ ST_INTELLECT ] + 2 * master.Perk[ PE_SMOOTH_TALKER ];
		}
		return 0;
	}

	int getParamDialog_Reputation( Critter@ master, Critter@ slave, uint index )
	{
		if( valid( master ) )
		{
			if( master.ReputationBase[ index ] == int(0x80000000) )
			{
				master.ReputationBase[ index ] = 0;
			}
			return master.ReputationBase[ index ];
		}
		return 0;
	}
#endif

#ifdef __CLIENT
	void changedParam_Level( CritterCl& cr, uint, int oldValue )
	{
		if( cr.ParamBase[ ST_LEVEL ] > oldValue )
		{
			PlaySound( "LEVELUP.ACM" );
			Message( TEXTMSG_GAME, STR_GAIN_LEVELUP, FOMB_GAME );
			SetChosenTabLevelUp( true );
		}
	}

	void changedParam_Experience( CritterCl& cr, uint, int oldValue )
	{
		int curValue = cr.ParamBase[ ST_EXPERIENCE ];
		if( curValue > oldValue + 99 )
		{
			Message( ReplaceText( GetMsgStr( TEXTMSG_GAME, STR_GAIN_EXPERIENCE ), "VALUE", curValue - oldValue ), FOMB_GAME );
		}
	}

	void changedParam_UnspentPerks( CritterCl& cr, uint, int oldValue )
	{
		if( cr.ParamBase[ ST_UNSPENT_PERKS ] > 0 && GUI_GetActiveScreen() == CLIENT_SCREEN_CHARACTER )
		{
			ShowScreen( CLIENT_SCREEN_PERK, 0, 0, 0 );
		}
	}

#endif

#ifdef __SERVER

	void changedParam_Hunger( Critter& cr, uint, int oldValue )
	{
		if( cr.Stat[ ST_BODY_TYPE ] == BT_ROBOT || !cr.IsPlayer() )
		{
			cr.StatBase[ ST_HUNGER ] = 100;
			return;
		}

		cr.StatBase[ ST_HUNGER ] = CLAMP( cr.StatBase[ ST_HUNGER ], 0, 100 );

		if( cr.StatBase[ ST_HUNGER ] <= 0 && !cr.IsDead() && !cr.IsKnockout() )
		{
			cr.StatBase[ ST_CURRENT_HP ] -= ( cr.Stat[ ST_ENDURANCE ] + cr.Stat[ ST_STRENGTH ] ) * 0.5;
			cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_SUFFER_HUNGER );
		}
	}

	void changedParam_Thrist( Critter& cr, uint, int oldValue )
	{
		if( cr.Stat[ ST_BODY_TYPE ] == BT_ROBOT || !cr.IsPlayer() )
		{
			cr.StatBase[ ST_THIRST ] = 100;
			return;
		}

		cr.StatBase[ ST_THIRST ] = CLAMP( cr.StatBase[ ST_THIRST ], 0, 100 );

		if( cr.StatBase[ ST_THIRST ] <= 0 && !cr.IsDead() && !cr.IsKnockout() )
		{
			cr.StatBase[ ST_CURRENT_HP ] -= ( cr.Stat[ ST_ENDURANCE ] + cr.Stat[ ST_STRENGTH ] ) * 0.5;
			cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_SUFFER_THIRST );
		}
	}

	void changedParam_Dyspnea( Critter& cr, uint, int oldValue )
	{
		if( cr.Stat[ ST_BODY_TYPE ] == BT_ROBOT || !cr.IsPlayer() )
		{
			cr.StatBase[ ST_DYSPNEA ] = 100;
			return;
		}
		
		cr.StatBase[ ST_DYSPNEA ] = CLAMP( cr.StatBase[ ST_DYSPNEA ], 0, 100 );

		if( cr.StatBase[ ST_DYSPNEA ] <= 25 && !cr.IsDead() )
		{
			cr.StatBase[ ST_DYS ] += 1;
			if( cr.StatBase[ ST_DYS ] >= 30 && cr.StatBase[ ST_DYSPNEA ] <= 0 )
			{
				cr.StatBase[ ST_CURRENT_HP ] -= 10;
				cr.Say( SAY_EMOTE_ON_HEAD, "Обессиленно падает" );
				cr.Say( SAY_NETMSG, "|0xFFFF00 В организм не поступает кислород, вам нужно срочно провентилироваться!" );
			}
			else
			{
				cr.StatBase[ ST_CURRENT_HP ] -= 5;
				cr.Say( SAY_EMOTE_ON_HEAD, "Натужно кашляет" );
				cr.Say( SAY_NETMSG, "|0xFFFF00 Вам нужно отдышаться." );
			}
			cr.ToKnockout( KNOCKOUT_ANIM2_DEFAULT( ( Random( 0, 1 ) == 1 ? true : false ) ), 200, cr.HexX, cr.HexY );
		}
		else if( cr.StatBase[ ST_DYSPNEA ] >= 26 && cr.StatBase[ ST_DYSPNEA ] <= 70 )
		{
			cr.StatBase[ ST_DYS ] = 0;
			cr.Say( SAY_EMOTE_ON_HEAD, ( Random( 0, 4 ) == 0 ? "Сиплое дыхание" : "Тяжело дышит" ) );
			cr.StatBase[ ST_CURRENT_HP ] -= 1;
		}
		else if( cr.StatBase[ ST_DYSPNEA ] >= 71 && cr.StatBase[ ST_DYSPNEA ] <= 99 )
			cr.StatBase[ ST_DYS ] = 0;
	}

	void changedParam_Drunk( Critter& cr, uint, int oldValue )
	{
		cr.StatBase[ ST_DRUNK ] = CLAMP( cr.StatBase[ ST_DRUNK ], 0, 100 );

		if( cr.StatBase[ ST_DRUNK ] == 100 && !cr.IsDead() )
		{
			cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_TOO_DRUNK );
		}
	}

	void changedParam_Overdose( Critter& cr, uint, int oldValue )
	{
		cr.StatBase[ ST_GLOBAL_OVERDOSE] = CLAMP( cr.StatBase[ ST_GLOBAL_OVERDOSE ], 0, 1000 );
	}

	void changedParam_SpeedMod( Critter& cr, uint, int oldValue )
	{
		ChangeCritterSpeed( cr );
	}
#endif // __SERVER

#ifndef __CLIENT
# define _param_    cr.ParamBase
	void CritterGenerate( Critter& cr ) // Export to main@critter_init
#endif

#ifdef __CLIENT
# define _param_    data
	void CritterGenerate( int[]& data ) // Export to client_main@player_data_generate
#endif
{
    if( _param_[ ST_LEVEL ] <= 0 )
	{
        _param_[ ST_LEVEL ] = 1;
	}
	
    if( _param_[ TRAIT_SMALL_FRAME ] != 0 )
	{
        _param_[ ST_AGILITY ] += SMALL_FRAME_AGI_BONUS;
		_param_[ ST_CARRY_WEIGHT ] += SMALL_FRAME_CW_BONUS;
	}
	
    if( _param_[ TRAIT_BRUISER ] != 0 )
	{
        _param_[ ST_STRENGTH ] += BRUISER_STRENGTH_BONUS;
	    _param_[ ST_ACTION_POINTS ] -= BRUISER_MAX_AP_MALUS;
	} 
	
    if( _param_[ TRAIT_GOOD_NATURED ] != 0 )
    {
        _param_[ SK_FIRST_AID ]			+= 25;
        _param_[ SK_DOCTOR ]			+= 25;
        _param_[ SK_BARTER ]			+= 25;
        _param_[ SK_SMALL_GUNS ] 		-= 20;
        _param_[ SK_BIG_GUNS ]			-= 20;
        _param_[ SK_ENERGY_WEAPONS ]	-= 20;
        _param_[ SK_UNARMED ]			-= 20;
        _param_[ SK_MELEE_WEAPONS ]		-= 20;
        _param_[ SK_THROWING ]			-= 20;
    }
    if( _param_[ TRAIT_SKILLED ] != 0 )
    {
		for( uint i = SK_SMALL_GUNS; i <= SK_OUTDOORSMAN; i++ )
		{
			_param_[ i ] += 10;
		}
	}

    _param_[ SK_SMALL_GUNS ] += 40 + 6 * _param_[ ST_AGILITY ];
    _param_[ SK_BIG_GUNS ] += 20 + 3 * _param_[ ST_AGILITY ];
    _param_[ SK_ENERGY_WEAPONS ] += 20 + 3 * _param_[ ST_AGILITY ];
    _param_[ SK_UNARMED ] += 40 + 4 * ( _param_[ ST_AGILITY ] + _param_[ ST_STRENGTH ] );
    _param_[ SK_MELEE_WEAPONS ] += 20 + 4 * ( _param_[ ST_AGILITY ] + _param_[ ST_STRENGTH ] );
    _param_[ SK_THROWING ] += 20 + 6 * _param_[ ST_AGILITY ];
    _param_[ SK_FIRST_AID ] += 20 + 5 * ( _param_[ ST_PERCEPTION ] + _param_[ ST_INTELLECT ] );
    _param_[ SK_DOCTOR ] += 20 + 4 * ( _param_[ ST_PERCEPTION ] + _param_[ ST_INTELLECT ] );
    //_param_[ SK_SNEAK ] += 20 + 5 * _param_[ ST_AGILITY ];
    _param_[ SK_LOCKPICK ] += 10 + 4 * ( _param_[ ST_PERCEPTION ] + _param_[ ST_AGILITY ] );
    _param_[ SK_STEAL ] += 0 + 10 * _param_[ ST_AGILITY ];
    _param_[ SK_TRAPS ] += 10 + 4 * ( _param_[ ST_PERCEPTION ] + _param_[ ST_AGILITY ] );
    _param_[ SK_SCIENCE ] += 20 + 8 * _param_[ ST_INTELLECT ];
    _param_[ SK_REPAIR ] += 20 + 6 * _param_[ ST_INTELLECT ];
    //_param_[ SK_SPEECH ] += 40 + 6 * _param_[ ST_CHARISMA ];
    _param_[ SK_BARTER ] += 40 + 8 * _param_[ ST_CHARISMA ];
    //_param_[ SK_GAMBLING ] += 20 + 8 * _param_[ ST_LUCK ];
    _param_[ SK_OUTDOORSMAN ] += 40 + 5 * ( _param_[ ST_ENDURANCE ] + _param_[ ST_INTELLECT ] );
	_param_[ SK_MINING ] += 0 + 5 * _param_[ ST_STRENGTH ] + 4 * _param_[ ST_AGILITY ] + 3 * _param_[ ST_PERCEPTION ] + 2 * _param_[ ST_INTELLECT ];
	_param_[ SK_CHOPPING ] += 0 + 5 * _param_[ ST_STRENGTH ] + 4 * _param_[ ST_AGILITY ] + 3 * _param_[ ST_PERCEPTION ] + 2 * _param_[ ST_INTELLECT ];
	_param_[ SK_SCAVENGING ] += 0 + 6 *_param_[ ST_LUCK ] + 5 * _param_[ ST_INTELLECT ] + 4 * _param_[ ST_PERCEPTION ] + 3 * _param_[ ST_AGILITY ] + 2 * _param_[ ST_STRENGTH ];
	_param_[ SK_HUNTING ] += 0 + 5 * _param_[ ST_AGILITY ] + 4 * _param_[ ST_INTELLECT ] + 3 * _param_[ ST_PERCEPTION ] + 2 * _param_[ ST_STRENGTH ];
	_param_[ SK_FISHING ] += 0 + 6 *_param_[ ST_LUCK ] + 5 * _param_[ ST_PERCEPTION ] + 4 * _param_[ ST_AGILITY ] + 3 * _param_[ ST_INTELLECT ] + 2 * _param_[ ST_STRENGTH ];
	_param_[ SK_FARMING ] += 0 + 5 * _param_[ ST_INTELLECT ] + 4 * _param_[ ST_PERCEPTION ] + 3 * _param_[ ST_STRENGTH ] + 2 * _param_[ ST_AGILITY ];
	_param_[ SK_COOKING ] += 0 + 5 * _param_[ ST_INTELLECT ] + 4 * _param_[ ST_PERCEPTION ] + 3 * _param_[ ST_AGILITY ];
	_param_[ SK_SEX ] += 0 + 5 * _param_[ ST_STRENGTH ] + 4 * _param_[ ST_AGILITY ] + 3 * _param_[ ST_INTELLECT ];
	
    if( _param_[ TAG_SKILL1 ] != 0 && ( !isDisabledSkill( _param_[ TAG_SKILL1 ] ) && !isFarmingSkill( _param_[ TAG_SKILL1 ] ) ) )
	{
        _param_[ _param_[ TAG_SKILL1 ] ] += 50;
	}
	
	if( _param_[ TAG_SKILL2 ] != 0 && ( !isDisabledSkill( _param_[ TAG_SKILL2 ] ) && !isFarmingSkill( _param_[ TAG_SKILL2 ] ) ) )
	{
        _param_[ _param_[ TAG_SKILL2 ] ] += 40;
	}
	
	if( _param_[ TAG_SKILL3 ] != 0 && ( !isDisabledSkill( _param_[ TAG_SKILL3 ] ) && !isFarmingSkill( _param_[ TAG_SKILL3 ] ) ) )
	{
        _param_[ _param_[ TAG_SKILL3 ] ] += 30;
	}
	
    if( _param_[ TRAIT_FAST_METABOLISM ] != 0 )
    {
        _param_[ ST_RADIATION_RESISTANCE ] -= _param_[ ST_ENDURANCE ] * RADIATION_RESIST_PER_END;
        _param_[ ST_POISON_RESISTANCE ] -= _param_[ ST_ENDURANCE ] * POISON_RESIST_PER_END;
        _param_[ ST_HEALING_RATE ] += _param_[ ST_ENDURANCE ];
    }
	
    if( _param_[ TRAIT_KAMIKAZE ] != 0 )
    {
        _param_[ ST_ARMOR_CLASS ] -= _param_[ ST_AGILITY ] * 5;
		_param_[ ST_APREGEN ] += (  _param_[ ST_AGILITY ] * KAMIKAZE_AP_REGEN_BONUS );
    }
	
    if( _param_[ TRAIT_HEAVY_HANDED ] != 0 )
	{
        _param_[ ST_MELEE_DAMAGE ] += (_param_[ ST_STRENGTH ] * HEAVY_HANDED_MELEE_DAMAGE_BONUS );
		_param_[ ST_APREGEN ] -= ( _param_[ ST_STRENGTH] * HEAVY_HANDED_AP_REGEN_MALUS );
	    _param_[ ST_MAX_CRITICAL ] -= HEAVY_HANDED_CRIT_MALUS;
	}
		
    if( _param_[ TRAIT_FINESSE ] != 0 )
	{
        _param_[ ST_CRITICAL_CHANCE ] += FINESSE_CRITCHANCE_BONUS;
	}

    #ifdef __CLIENT
		// Runtime calculations, only for client registration
		// Check _defines.fos for stat defines, ctrl+f "Critter Stats Constants"
		_param_[ ST_ARMOR_CLASS ] += ARMOR_CLASS_BASE + _param_[ ST_AGILITY ] * ARMORCLASS_PER_AGI;
		_param_[ ST_MAX_LIFE ] = HITPOINTS_BASE + ( _param_[ ST_ENDURANCE ] * HITPOINTS_PER_END ) + ( _param_[ ST_STRENGTH ] * HITPOINTS_PER_STR );
		_param_[ ST_ACTION_POINTS ] += APPOINTS_BASE;
		_param_[ ST_CARRY_WEIGHT ] += 1000 * ( CW_BASE + (_param_[ ST_STRENGTH ] * ( CW_PER_STR - _param_[ TRAIT_SMALL_FRAME ] * SMALL_FRAME_CW_MALUS_DIV ) ) );
		_param_[ ST_MELEE_DAMAGE ] += MELEE_DAMAGE_BASE + ( _param_[ ST_STRENGTH ] * MELEE_DAMAGE_PER_STR );
		_param_[ ST_POISON_RESISTANCE ] += _param_[ ST_ENDURANCE ] 	* POISON_RESIST_PER_END;
		_param_[ ST_RADIATION_RESISTANCE ] += _param_[ ST_ENDURANCE ] 	* RADIATION_RESIST_PER_END;
		_param_[ ST_SEQUENCE ] += _param_[ ST_PERCEPTION ] * SEQUENCE_PER_PE;
		_param_[ ST_APREGEN ] = APREGEN_BASE;
		_param_[ ST_HEALING_RATE ] += HEALINGRATE_BASE + _param_[ ST_ENDURANCE ] * HEALINGRATE_PER_END;
		_param_[ ST_CRITICAL_CHANCE ] += _param_[ ST_LUCK ] * CRITCHANCE_PER_LUCK;
    #endif

    _param_[ ST_CURRENT_HP ] = _param_[ ST_MAX_LIFE ];
    _param_[ ST_EXPERIENCE_MULTIPLIER ] = 1;

    _param_[ ST_HUNGER ] = 100;
    _param_[ ST_THIRST ] = 100;
    _param_[ ST_DYSPNEA ] = 100;
    _param_[ ST_SPEED_MOD ] = 100;
}

#ifdef __CLIENT
	# include "_msgstr.fos"

	# define STR_WRONG_GENDER    ( 324 )
	// Check valid of input data
	bool CritterGenerateCheck( int[]& data ) // Export to client_main@player_data_check
	{
		// Check special
		int special = 0;
		for( uint i = ST_STRENGTH; i <= ST_LUCK; i++ )
		{
			if( data[ i ] < 1 || data[ i ] > 10 )
			{
				Message( GetMsgStr( TEXTMSG_GAME, STR_NET_WRONG_SPECIAL ) );
				return false;
			}
			special += data[ i ];
		}
		if( special != __StartSpecialPoints )
		{
			Message( GetMsgStr( TEXTMSG_GAME, STR_NET_WRONG_SPECIAL ) );
			return false;
		}

		// Check choosed tag skills
		if( ( data[ TAG_SKILL1 ] < int(SKILL_BEGIN) || data[ TAG_SKILL1 ] > int(SKILL_END) ) ||
			( data[ TAG_SKILL2 ] < int(SKILL_BEGIN) || data[ TAG_SKILL2 ] > int(SKILL_END) ) ||
			( data[ TAG_SKILL3 ] < int(SKILL_BEGIN) || data[ TAG_SKILL3 ] > int(SKILL_END) ) ||
			isDisabledSkill( data[ TAG_SKILL1 ] ) || isDisabledSkill( data[ TAG_SKILL2 ] ) || isDisabledSkill( data[ TAG_SKILL3 ] ) ||
			isFarmingSkill( data[ TAG_SKILL1 ] ) || isFarmingSkill( data[ TAG_SKILL2 ] ) || isFarmingSkill( data[ TAG_SKILL3 ] ) )
		{
			Message( GetMsgStr( TEXTMSG_GAME, STR_NET_WRONG_TAGSKILL ) );
			return false;
		}

		// Check trait combination
		if( ( data[ TRAIT_BLOODY_MESS ] != 0 && data[ TRAIT_GOOD_NATURED ] != 0 ) || ( data[ TRAIT_CHEM_RELIANT ] != 0 && data[ TRAIT_CHEM_RESISTANT ] != 0 ) )
		{
			Message( GetMsgStr( TEXTMSG_GAME, STR_WRONG_TRAIT_COMBO ) );
			return false;
		}

		if( data[ ST_GENDER ] == 0 )
		{
			if( ( ( data[ ST_BODY_TYPE ] >= 33 && data[ ST_BODY_TYPE ] <= 38 ) || data[ ST_BODY_TYPE ] == 61 || data[ ST_BODY_TYPE ] == 63 || data[ ST_BODY_TYPE ] == 73 || data[ ST_BODY_TYPE ] == 74 || data[ ST_BODY_TYPE ] == 83 || data[ ST_BODY_TYPE ] == 94 ) )
			{
				Message( GetMsgStr( TEXTMSG_GAME, STR_WRONG_GENDER ) );
				return false;
			}
		}
		else
		{
			if( data[ ST_BODY_TYPE ] == 31 || ( data[ ST_BODY_TYPE ] >= 39 && data[ ST_BODY_TYPE ] <= 45 ) || data[ ST_BODY_TYPE ] == 48 || data[ ST_BODY_TYPE ] == 56 || data[ ST_BODY_TYPE ] == 57 || data[ ST_BODY_TYPE ] == 62 || data[ ST_BODY_TYPE ] == 64 || data[ ST_BODY_TYPE ] == 72  || data[ ST_BODY_TYPE ] == 77 ||
				data[ ST_BODY_TYPE ] == 78 || data[ ST_BODY_TYPE ] == 82 || data[ ST_BODY_TYPE ] == 84 || data[ ST_BODY_TYPE ] == 87 || data[ ST_BODY_TYPE ] == 88 || data[ ST_BODY_TYPE ] == 89 || data[ ST_BODY_TYPE ] == 91 || data[ ST_BODY_TYPE ] == 92 || data[ ST_BODY_TYPE ] == 93 || data[ ST_BODY_TYPE ] == 96 || data[ ST_BODY_TYPE ] == 98 )
			{
				Message( GetMsgStr( TEXTMSG_GAME, STR_WRONG_GENDER ) );
				return false;
			}
		}

		if( data[ ST_BODY_TYPE ] == 0 )
		{
			data[ ST_BODY_TYPE ] = ( data[ ST_GENDER ] == 0 ? 62 : 61 );
		}

		return true;
	}
#endif

#ifndef __CLIENT
	void NpcProcessLevel( Critter& npc ) // Export
	{
	}
#endif

#ifdef __CLIENT
	# define Critter    CritterCl
#endif

// Check _defines.fos for stat defines, Critter Stats Constants
int getParam_MaxLife( Critter& cr, uint )
{
    int val = cr.StatBase[ ST_MAX_LIFE ] + cr.StatBase[ ST_MAX_LIFE_EXT ] + HITPOINTS_BASE + (cr.Stat[ ST_STRENGTH ] * HITPOINTS_PER_STR) + (cr.Stat[ ST_ENDURANCE ] * HITPOINTS_PER_END); // Roleplay */
    return CLAMP( val, 1, 9999 );
}

int getParam_MaxAp( Critter& cr, uint )
{
    int val = cr.StatBase[ ST_ACTION_POINTS ] + cr.StatBase[ ST_ACTION_POINTS_EXT ] + APPOINTS_BASE;
    return CLAMP( val, 1, 9999 );
}

int getParam_CR_HUNGER_SPEED( Critter& cr, uint )
{
    int val = cr.ParamBase[ CR_HUNGER_SPEED ];
	if( val == 0 )
	{
		return 60 * CLAMP( ( cr.Trait[ TRAIT_FAST_METABOLISM ] != 0 ? 0.5 : 1 ) * ( 25 - cr.Stat[ ST_ENDURANCE ] - cr.Stat[ ST_STRENGTH ] ), 1, 25 );
	}
	if( val == -1 )
	{
		return 0;
	}
	return val;
}

int getParam_CR_THIRST_SPEED( Critter& cr, uint )
{
    int val = cr.ParamBase[ CR_THIRST_SPEED ];
	if( val == 0 )
	{
		return 60 * CLAMP( ( cr.Trait[ TRAIT_FAST_METABOLISM ] != 0 ? 0.5 : 1 ) * ( 25 - cr.Stat[ ST_ENDURANCE ] - cr.Stat[ ST_STRENGTH ] ), 1, 25 );
	}
	if( val == -1 )
	{
		return 0;
	}
	return val;
}

int getParam_CR_DRUNK_SPEED( Critter& cr, uint )
{
    int val = cr.ParamBase[ CR_DRUNK_SPEED ];
	if( val == 0 )
	{	
		return 60 * CLAMP( ( cr.Trait[ TRAIT_FAST_METABOLISM ] != 0 ? 0.5 : 1 ) * ( 25 - cr.Stat[ ST_ENDURANCE ] - cr.Stat[ ST_STRENGTH ] ), 1, 25 );
	}
	return val;
}

int getParam_CR_GLOBAL_OVERDOSE_SPEED( Critter& cr, uint)
{
    int val = cr.ParamBase [ CR_GLOBAL_OVERDOSE_SPEED ];
    if( val == 0 )
	{
        int mod = cr.Trait[ TRAIT_FAST_METABOLISM ] != 0 ? 7 : 10;
		return CLAMP( ( 4000 - ( cr.Stat[ ST_ENDURANCE ] * 100 ) - ( cr.Stat[ ST_STRENGTH ] * 100 ) ) * mod / 10, 1000, 10000 );
	}
    return 1000;
}

int getParam_Sequence( Critter& cr, uint )
{
    int val = cr.StatBase[ ST_SEQUENCE ] + cr.StatBase[ ST_SEQUENCE_EXT ] + cr.Stat[ ST_PERCEPTION ] * SEQUENCE_PER_PE;
    return CLAMP( val, 0, 9999 );
}

int getParam_MeleeDmg( Critter& cr, uint )
{
    int val = cr.StatBase[ ST_MELEE_DAMAGE ] + cr.StatBase[ ST_MELEE_DAMAGE_EXT ] + MELEE_DAMAGE_BASE; 
    return CLAMP( val, 1, 9999 );
}

int getParam_MaxWeight( Critter& cr, uint )
{
    int val = MAX( cr.StatBase[ ST_CARRY_WEIGHT ] + cr.ParamBase[ ST_CARRY_WEIGHT_EXT ], 0 );
    val += 1000 * ( CW_BASE + ( cr.Stat[ ST_STRENGTH ] * ( CW_PER_STR - cr.Trait[ TRAIT_SMALL_FRAME ] * SMALL_FRAME_CW_MALUS_DIV ) ) ); //40% carryweight loss from each Strength point if you have SMALL_FRAME
    return CLAMP( val, 0, 2000000000 );
}

int getParam_HealingRate( Critter& cr, uint )
{
    int val = cr.StatBase[ ST_HEALING_RATE ] + cr.StatBase[ ST_HEALING_RATE_EXT ] + HEALINGRATE_BASE + cr.Stat[ ST_ENDURANCE ] * HEALINGRATE_PER_END;
    return CLAMP( val, 0, 9999 );
}

int getParam_CriticalChance( Critter& cr, uint )
{
    int val = cr.StatBase[ ST_CRITICAL_CHANCE ] + cr.StatBase[ ST_CRITICAL_CHANCE_EXT ] + cr.Stat[ ST_LUCK ] * CRITCHANCE_PER_LUCK;
    return CLAMP( val, 0, 100 );
}

#endif //PARAMETERS