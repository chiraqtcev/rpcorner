#include "_utils.fos"
#include "qmap_defines.fos"

// Export:
// import uint8 checkGrass(Map& map, uint16 tx, uint16 ty) from "qmap_grass";
// import bool checkGrass(Map& map, uint16 from_tx, uint16 from_ty, uint16 to_tx, uint16 to_ty) from "qmap_grass";
// import bool checkGrass(Map& map, uint16 from_tx, uint16 from_ty, uint16 to_tx, uint16 to_ty, bool fromNtoE) from "qmap_grass";

// import uint[][]@ GetgrassHashes() from "qmap_grass";
// import uint RandomgrassHash() from "qmap_grass";

bool hashes_inited = false;

uint[][] hashes_grass( HASHES_GRASS_MAX );

void init_hashes()
{
    string dir = "art/tiles/",
           gscon0 = "gscon0",
           frm = ".frm";

    for( uint type = 0; type < HASHES_GRASS_MAX; type++ )
    {
        uint[] @ data = hashes_grass[ type ];
        data.resize( 0 );

        switch( type )
        {
			case( HASHES_GRASS ):
			{
				for( uint i = 1; i <= 24; i++ )
					data.insertLast( GetStrHash( dir + gscon0 + i + frm ) );
			} break;
        }
    }

    hashes_inited = true;
}

uint[][] @ GetgrassHashes() // Export
{
    if( !hashes_inited )
        init_hashes();

    return hashes_grass;
}

uint RandomgrassHash() //Export
{
    if( !hashes_inited )
        init_hashes();

	uint[] @ source = hashes_grass[ Random( 0, HASHES_GRASS_MAX - 1 ) ];
	return source[ Random( 0, source.length() - 1 ) ];
}

#ifdef __SERVER
void test_hashes( Critter& player, int var, int con, int param2 )
{
    bool ck = true;

    uint[] @ data = null;

    for( uint i = 0; i < HASHES_GRASS_MAX; i++ )
    {
        @data = hashes_grass[ i ];
        for( uint k = 0, len = data.length(); k < len; k++ )
        {
            if( data[ k ] != 0 )
                continue;
            ck = false;
            player.Say( SAY_NETMSG, "В массиве #" + i + " хэш #" + k + " нулевой" );
        }
    }
    if( ck )
        player.Say( SAY_NETMSG, "Все ок." );
}

uint8 checkGrass( Map& map, uint16 tx, uint16 ty ) // Export
{
    if( !hashes_inited )
        init_hashes();

    uint hash = map.GetTile( tx, ty );
    if( hash == 0 )
        return 0;

    uint[] @ data = null;
    uint8 answer = 0;

    for( uint i = 0; i < HASHES_GRASS_MAX; i++ )
    {
        @data = hashes_grass[ i ];
        for( uint k = 0, len = data.length(); k < len; k++ )
        {
            if( hash != data[ k ] )
                continue;
            answer |= ( ( 0x01 ) << i );
            return answer;
        }
    }
    return 0;
}

bool checkGrass( Map& map, uint16 from_tx, uint16 from_ty, uint16 to_tx, uint16 to_ty )    // Export
{
    return checkGrass( map, from_tx, from_ty, to_tx, to_ty, true );
}

bool checkGrass( Map& map, uint16 from_tx, uint16 from_ty, uint16 to_tx, uint16 to_ty, bool fromNtoE ) // Export
{
    if( !hashes_inited )
        init_hashes();

    int lenY = ( to_ty - from_ty ),
        lenX = ( to_tx - from_tx );

    if( lenX == 0 && lenY == 0 )
        return false;

    int signX, signY;
	if( lenX >= 0 ) signX = 1; else signX = -1;
	if( lenY >= 0 ) signY = 1; else signY = -1;

	uint hash = 0;
	
    uint lenA = 0, lenB = 0;

    if( fromNtoE )
    {
        lenA = abs( lenX ) + 1;
        lenB = abs( lenY ) + 1;
    }
    else
    {
        lenB = abs( lenX ) + 1;
        lenA = abs( lenY ) + 1;
    }

    bool ck = true;

    for( int y = 0; y < int( lenA ); y++ )
    {
        for( int x = 0; x < int( lenB ); x++ )
        {
            if( fromNtoE )
                hash = map.GetTile( from_tx + ( signX * y ), from_ty + ( signY * x ) );
            else
                hash = map.GetTile( from_tx + ( signX * x ), from_ty + ( signY * y ) );
            if( hash == 0 )
                return false;
            ck = true;
            for( uint i = 0; ck && i < HASHES_GRASS_MAX; i++ )
            {
                for( uint k = 0, len = hashes_grass[ i ].length(); ck && k < len; k++ )
                {
                    if( hash != hashes_grass[ i ][ k ] )
                        continue;
                    ck = false;
                }
            }
            if( ck )
                return false;
        }
    }

    return true;
}
#endif // __SERVER
