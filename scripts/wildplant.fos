// Author: Anuri
#ifndef WILDPLANT
#define WILDPLANT

#include "_utils.fos"
#include "wildplant_h.fos"
#include "entire_h.fos"

import uint8 checkSand( Map& map, uint16 tx, uint16 ty ) from "qmap_sand";
import uint8 checkCave( Map& map, uint16 tx, uint16 ty ) from "qmap_cave";
import uint8 checkGrass( Map& map, uint16 tx, uint16 ty ) from "qmap_grass";

class WildPlant
{
	uint16 pid;
	int stages;
	uint8 lifetime;
	uint8 min_resource;
	uint8 max_resource;
	uint8 biome;
	int[] loot;
	
	WildPlant( uint16 pid, int stages, uint8 lifetime, uint8 min_resource, uint8 max_resource, uint8 biome )
	{
        this.pid = pid;
		this.stages = stages;
		this.lifetime = lifetime;
		this.min_resource = min_resource;
		this.max_resource = max_resource;
		this.biome = biome;
	}
}

class WildPlantCollection
{
	WildPlant@[] wildPlants;
	WildPlantCollection()
	{
	}
	
	WildPlantCollection@ plant( uint16 pid, int stages, uint8 lifetime, uint8 min_resource, uint8 max_resource, uint8 biome) 
	{
		this.wildPlants.insertLast( WildPlant( pid, stages, lifetime, min_resource, max_resource, biome ) );
		return this;
	}
	
	WildPlantCollection@ loot( int loot ) 
	{
		this.wildPlants[ this.wildPlants.length() - 1 ].loot.insertLast( loot );
		return this;
	}
  
	WildPlantCollection@ get_by_biome( uint8 biome ) 
	{
		WildPlantCollection result;
		for( uint i = 0, len = this.wildPlants.length(); i < len; i++ )
		{
			if( this.wildPlants[i].biome == biome )
			{
				result.wildPlants.insertLast( this.wildPlants[i] );
			}
		}
		return result;
	}
	
	WildPlant@ get_by_pid( uint16 pid ) 
	{
		for( uint i = 0, len = this.wildPlants.length(); i < len; i++ )
		{
			if( this.wildPlants[i].pid == pid )
			{
				return this.wildPlants[i];
			}
		}
		return null;
	}
	
	
	WildPlant@ get_random()
	{
		uint len = this.wildPlants.length();
		if( len > 0 )
		{
			return this.wildPlants[ Random( 0, len-1 ) ];
		} 
		else 
		{
			return null; 
		}
	}
}

WildPlantCollection@ wildPlants = WildPlantCollection()
//					pid, 					 stages, lifetime, min_resource, max_resource, 	  biome
    .plant( PID_PLANT_BROC,						6, 		1, 			1,	 		 2,		 	BIOME_SAND )
		.loot( PID_BROC_FLOWER )
	.plant( PID_PLANT_XANDER, 					4,		1, 			1, 			 4,			BIOME_SAND )
		.loot( PID_XANDER_ROOT )
	.plant( PID_MUSH_LOW,						1, 		3, 			1, 			 1,			BIOME_SAND )
		.loot( PID_MUSH_LOW )
	.plant( PID_PLANT_TONGUE_GECKO, 			3, 		1, 			1, 			 1,			BIOME_CAVE )
		.loot( PID_SEEDLING_TONGUE_GECKO )
		.loot( PID_RISING_TONGUE_GECKO )
		.loot( PID_TONGUE_GECKO )
	.plant( PID_PLANT_MURAVNIKTAR, 				3, 		2, 			1,			 2, 		BIOME_CAVE )
		.loot( PID_SEEDLING_MURAVNIKTAR )
		.loot( PID_RISING_MURAVNIKTAR )
		.loot( PID_MURAVNIKTAR )
	.plant( PID_PLANT_BLACK_MUSHROOMS,			3, 		2, 			1, 			 3, 		BIOME_CAVE )
		.loot( PID_SEEDLING_BLACK_MUSHROOMS )
		.loot( PID_RISING_BLACK_MUSHROOMS )
		.loot( PID_BLACK_MUSHROOMS )
	.plant( PID_PLANT_PALE_MUSHROOM,			3, 		3, 			2, 			 4,		 	BIOME_CAVE )
		.loot( PID_SEEDLING_PALE_MUSHROOM )
		.loot( PID_RISING_PALE_MUSHROOM )
		.loot( PID_PALE_MUSHROOM )
	.plant( PID_PLANT_MUTMUSH, 					3,		1, 			1, 			 1,			BIOME_CAVE )
		.loot( PID_SEEDLING_MUTMUSH )
		.loot( PID_PID_RISING_MUTMUSH )
		.loot( PID_MUTMUSH )
	.plant( PID_PLANT_PEYOTE,					4,		1, 			1, 			 1,			BIOME_SAND )
		.loot( PID_PEYOTE )
	;
WildPlant@ getWildplant( Item@ item ) 
{
    uint16 Pid = item.GetProtoId();
    return wildPlants.get_by_pid( Pid );
}	

WildPlant@ getRandomWildplant( uint8 biome ) 
{
    return wildPlants.get_by_biome( biome ).get_random();
}	

void WildplantAutoInit() //export to gameplay.fos
{    
    Map@[] maps;
    for( int i = 0, iend = GetAllMaps( 0, maps ); i < iend; i++ )
	{   
		CheckMapEvent( maps[i] );
	}
}

uint e_SpawnPlants( int[] @ values )
{
	Map @ map = GetMap( values[ 0 ] );
	if( !valid( map ) ) { return 0; }
	
	SpawnPlants( map );

	EraseTimeEvent( map.GetData( MAP_TIME_DATA_WILDPLANTS ) );
	map.SetData( MAP_TIME_DATA_WILDPLANTS, CreateTimeEvent( AFTER( REAL_MINUTE( 5 ) ), "e_SpawnPlants", values, true ) );
	return 0;
}
 
bool SpawnPlants( Map& map )
{
    if( map.CountEntire( MAP_EDGE_ENTIRE ) != 1 )
	{
		//Log( "No entire at map PID #" + map.GetProtoId() + "." );
		return false;
	}

    Item@[] wildplants;
    for( uint i = 0; i < Wildplants.length(); i++ )
	{
        map.GetItems( Wildplants[i], wildplants );
    }
    
    uint amount = wildplants.length();
    uint index = map_pids.find( map.GetProtoId() );
    
    int failed = 0;
    
    if( amount >= plant_amount )
	{ 
		//Log( "Got enough at map PID #" + map.GetProtoId() + "." );
        return false; 
    }
	
    int extraPlants = plant_amount - amount;

	uint16 hexX = 0, hexY = 0;
	map.GetEntireCoords( MAP_EDGE_ENTIRE, 0, hexX, hexY );
	
	bool cave = mapIs( map.GetProtoId(), mPIDs( ALL_CAVES ) ); //checkCave( map, H2T( x ), H2T( y ) ) != 0;
	bool sand = !cave; //checkSand( map, H2T( x ), H2T( y ) ) != 0;

	for( int k = 0; k < extraPlants; k++ )
	{
		
        uint16 x = Random( ( hexX + 1 ), ( hexX + REGULAR_MAP_SIZE - 1  ) );
        uint16 y = Random( ( hexY + 1 ), ( hexY + REGULAR_MAP_SIZE - 1  ) );

		bool passed = map.IsHexPassed( x, y );
		
		if( sand && passed )
		{
			WildPlant@ toBeSpawned = getRandomWildplant( BIOME_SAND );
			Item@ wildplant = map.AddItem( x, y, toBeSpawned.pid, 1 );
			
            if( !valid( wildplant ) )
			{
				//Log( "PLANT IS NULL" );
			}
			else
			{
				uint[] values = { wildplant.Id };
				wildplant.EVENT = CreateTimeEvent( AFTER( REAL_MINUTE( 1 ) ), "e_PlantGrowth", values, true );
			}
		
		}
		else if( cave && passed )
		{
			WildPlant@ toBeSpawned = getRandomWildplant( BIOME_CAVE );
			Item@ wildplant = map.AddItem( x, y, toBeSpawned.pid, 1 );
			
			//Log( "Spawned " + toBeSpawned.pid + " at " + x + " " + y + " #" + map.Id + " " + map.GetProtoId() );
			
            if( !valid( wildplant ) )
			{
				//Log( "PLANT IS NULL" );
			}
			else
			{
				uint[] values = { wildplant.Id };
				wildplant.EVENT = CreateTimeEvent( AFTER( REAL_MINUTE( 1 ) ), "e_PlantGrowth", values, true );
			}
		
		} else {
			k--;            
			failed++;
			if( failed > plant_amount )
			{
				break;
			}
		}
    }
    
    wildplants.resize(0);
    for( uint i = 0; i < Wildplants.length(); i++ )
	{
        map.GetItems( Wildplants[i], wildplants );
    }
    return true;
}

uint e_PlantGrowth( uint[]@ values )
{
	uint itemId = values[0];
	Item@ wildplant = GetItem( itemId );
	if( valid( wildplant ) )
	{
		WildPlant@ plant = getWildplant( wildplant );
		
		uint8 lifetime = plant.lifetime;
		
		if( wildplant.GROWTH_STAGE < plant.stages )
		{
			wildplant.GROWTH_STAGE ++;
			uint8 i = wildplant.GROWTH_STAGE;
			ChangeFrame( wildplant, i );
			int time = wildplant.GROWTH_STAGE == ( plant.stages - 1 ) ? Random( 2, 5 ) : 1; //плодоносная стадия длится от 2 до 5 раз дольше
			return REAL_MINUTE( lifetime * time );
		}
		
		EraseTimeEvent( wildplant.EVENT );
		wildplant.EVENT = 0;
		DeleteItem( wildplant );
	}
	return 0;
}

//~run wildplant _PlantsInit 0 0 0
void _PlantsInit( Critter& player, int param0, int param1, int param2 )
{
    Map@[] maps;
    Item@[] wildplants;
    for( int i = 0, iend = GetAllMaps( 0, maps ); i < iend; i++ )
	{   
		if( map_pids.find( maps[i].GetProtoId() ) != -1 ) 
		{
			for( uint i = 0; i < Wildplants.length(); i++ ) 
			{
				maps[i].GetItems( Wildplants[i], wildplants );
			}
			for( int i = 0, l = wildplants.length(); i < l; i++ ) 
			{
				DeleteItem( wildplants[i] );
			}
		}
	}
    FoceSpawnPlants();
}

void FoceSpawnPlants()
{
    Map@[] maps;
    for( int i = 0, iend = GetAllMaps( 0, maps ); i < iend; i++ ) 
	{   
		CheckMapEvent( maps[i] );
	}
}

bool CheckMapEvent( Map& map )
{
	if( map_pids.find( map.GetProtoId() ) != -1 ) 
	{
		int[] values = { map.Id };
		map.SetData( MAP_TIME_DATA_WILDPLANTS, CreateTimeEvent( AFTER( REAL_SECOND( 1 ) ), "e_SpawnPlants", values, true ) );
		return true;
	}
	return false;
}

bool PickPlant( Critter& cr, Item& wildplant )
{
	if( !valid( wildplant) ) 
	{ 
		return false; 
	}
	
	uint16 wildplantPid = wildplant.GetProtoId();
	cr.SayMsg( SAY_EMOTE_ON_HEAD, TEXTMSG_TEXT, STR_EMOTE_PICK_PLANT );
	WildPlant@ plant = getWildplant( wildplant );
	
	bool isAlive = ( wildplant.GROWTH_STAGE < plant.stages ) || ( plant.stages == 1 );
	
	if( isAlive	&& checkPlantStage( wildplant, plant ) ) 
	{

		int amount = Random( plant.min_resource, plant.max_resource );
		
		if( amount == 0 ) 
		{
			cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_NOTHING_USEFULL );
			return true;
		}
		
		uint16 pickedPlantPid = 0;
		
		if( plant.loot.length() > 1 ) 
		{
			pickedPlantPid = plant.loot[ wildplant.GROWTH_STAGE ];
		} 
		else 
		{
			pickedPlantPid = plant.loot[0];
		}
		
		cr.AddItem( pickedPlantPid, amount );
		
		cr.RunClientScript( "client_main@__message_result", pickedPlantPid, amount, 0, null, null );
		
		EraseTimeEvent( wildplant.EVENT );
		wildplant.EVENT = 0;
		DeleteItem( wildplant );
	} 
	else 
	{
		cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_WRONG_PLANT_STAGE );
		EraseTimeEvent( wildplant.EVENT );
		wildplant.EVENT = 0;
		DeleteItem( wildplant );
	}
	return true;
}

bool checkPlantStage( Item@ wildplant, WildPlant@ plant )
{
	if( plant.stages == 1 || ( plant.stages > 1 && wildplant.GROWTH_STAGE == plant.stages -1 ) || ( plant.loot.length() > 1 && wildplant.GROWTH_STAGE != plant.stages ) ) 
	{
		return true;
	}
	return false;
}
#endif //WILDPLANT