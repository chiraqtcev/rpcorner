// Author: Anuri
#ifndef GATHERING_H
#define GATHERING_H

//=========GATHERING_MODIFIERS==========//
#define ACTION_PAUSE_MIN		 	( 800 )
#define ACTION_PAUSE_MAX		 	( 1700 )
#define ACTION_PAUSE_BASE		 	( 1800 )
#define ACTION_PAUSE_BONUS_RATE	 	( 100 )

#define ACTION_FATIGUE_MIN        	( 5 )
#define ACTION_FATIGUE_MAX       	( 25 )
#define ACTION_FATIGUE_BASE			( 40 )
#define ACTION_F_RATE_STR			( 2 )
#define ACTION_F_RATE_END			( 3 )

#define OBJECT_DPA_MIN				( 70 ) 		// DPA = Damage Per Action
#define OBJECT_DPA_MAX				( 1000 )
#define OBJECT_DPA_BASE				( 50 )
#define OBJECT_HP_BASE				( 1000 )

#define PHASE_TIMEOUT_MUL		 	( 2 )
#define PHASE_TIMEOUT_MIN		 	( 75 * PHASE_TIMEOUT_MUL )
#define PHASE_TIMEOUT_MAX		 	( 120 * PHASE_TIMEOUT_MUL )
#define PHASE_TIMEOUT_BASE		 	( 70 * PHASE_TIMEOUT_MUL )
#define PHASE_TIMEOUT_RATE 			( 5 )

#define SKILL_ROLL_SIMPLIFIER		( 5 ) 		//Упрощатель роллов на навык, используемый для быстрой подкрутки шансов получения травм.
#define CRITICAL_FAILURE_BASE		( 11 ) 		//Базовый шанс провала ролла на навык, используется в добыче ресурсов.

#define ORE_TYPE					Val0		// тип руды, 0 - камень, 1 - медь, 2 - свинец, 3 - минералы, 4 - уголь, 5 - золото, 6 - железо, 7 - уран
#define	RESOURCE_CAPACITY			Val1 		// тут записано макс кол-во подходов. ИспользуетсЯ как текущее.
#define RESOURCE_DNA				Val2		// сюда записываетсЯ ПИД породы для руды или дерева для пенька
#define EVENT 						Val3 		// валка длЯ записи тайм-ивента 
#define ORIGINAL_TREE_PID			Val4		// запись прото оригинального дерева, чтобы при росте дерева вернуться к нему
#define TREE_REGROW_TIME			Val9 		// валка для записи количества дней до перерождения пня

#define MAP_TIME_DATA_MOB_SPAWN		( 10 )
#define MAP_TIME_DATA_LOW_SPAWN		( 11 )
#define MAP_TIME_DATA_MINING		( 12 )
#define MAP_TIME_DATA_SCAVENGING	( 13 )
#define MAP_TIME_DATA_WILDPLANTS	( 14 )

#define SKINNING_STR_MOD			( 1 )		// бонус силы к шансу добычи шкуры
#define SKINNING_AGI_MOD			( 2 ) 		// бонус ловктости к шансу добычи шкуры
#define SKINNING_BASE_DIFFICULTY	( 10 ) 		// Базовая глобальная сложность разделки
#define SKINNING_DIFFICULTY_MOD		( 10 )		// Модификатор формулы до сложения скилов

const uint16[] ChoppingTools =		{ PID_AXE, PID_AXE2, PID_REVKNIFE2, PID_MACHETE, PID_SHOVEL, PID_SM_KNIFE };
const uint16[] ScavengingTools =	{ PID_CROWBAR, PID_SHOVEL, PID_IRON_PROD, PID_MULTI_TOOL };
const uint16[] MiningTools =		{ PID_PRIMITIVE_SLEDGE, PID_SHOVEL, PID_SLEDGEHAMMER, PID_SUPER_SLEDGE, PID_PICKAXE, PID_DRILL, PID_SLEDGEHAMMER2, PID_SM_HAMMER, PID_SM_CLUB };
const uint16[] SkinningTools = 		{ PID_KNIFE, PID_COMBAT_KNIFE, PID_THROWING_KNIFE, PID_SWITCHBLADE, PID_LIL_JESUS_WEAPON, PID_SCISSORS, PID_CUTTHROAT, PID_REVFIST1, PID_REVKNIFE1, PID_REVKNIFE2, PID_MACHETE, PID_AXE, PID_AXE2, PID_WAKIZASHI_BLADE, PID_HUNTING_KNIFE, PID_SM_KNIFE, PID_RUST_KATANA, PID_KATANA};
const int[] SkinToolMods = 			{ 	 10, 			20, 				5, 				-10, 				20, 			  -15, 			-20, 			0, 			   5, 			 10, 			30,		  25,		25, 			15,				30,					20,         20,            25      };

const uint16[] JunkPileArtList = 	{ 2116, 2117, 2118, 2252, 2253, 2254, 2255, 2256, 2275, 2276, 2311, 2314, 2315, 8095, 8096, 8098, 8099, 16584, 16585, 16586, 16687, 16590, 16591 };
const uint16[] JunkLootList = 		{ PID_CRAFT_L_LINT, PID_CRAFT_M_JUNK, PID_HLAM_MEH, PID_HLAM2_MEH, PID_BANKA_MEH, PID_METAL_LIST_MEH, PID_WATER_TUBE, PID_IRON_ROD, PID_BOTTLE_GLASS, 
									  PID_EMPTY_JET, PID_MPARTS, PID_NAILS, PID_PART_OF_ROPE, PID_SPIKE_MEH, PID_BOLT, PID_CRAFT_L_RAGS, PID_TUBE, PID_CRAFT_M_BARS };

const uint16[][] OreList = 
{ 
	{ PID_ORE_DEPOSIT_S, PID_ORE_DEPOSIT_S2, PID_BOULDER, PID_ORE_DEPOSIT_M, PID_ORE_DEPOSIT_L }, 	//Entire #1000 
	{ PID_CUPPER_ORE_S, PID_CUPPER_ORE_M, PID_CUPPER_ORE_L },										//Entire #1001
	{ PID_LED_ORE_S, PID_LED_ORE_M, PID_LED_ORE_L },												//Entire #1002
	{ PID_MINERALS_S, PID_MINERALS_M, PID_MINERALS_M },												//Entire #1003
	{ PID_COAL_S, PID_COAL_M, PID_COAL_M },															//Entire #1004
	{ PID_GOLD_ORE_S, PID_GOLD_ORE_M, PID_GOLD_ORE_M },												//Entire #1005
	{ PID_IRON_ORE_S, PID_IRON_ORE_M, PID_IRON_ORE_L },												//Entire #1006
	{ PID_URANIUM_ORE_S, PID_URANIUM_ORE_M, PID_URANIUM_ORE_L }										//Entire #1007
};

const uint16[][] TreeList =
{
	{ 
		PID_TREE_GXS1, PID_TREE_GXS2, PID_TREE_GXS3,
		// trees_xs
		PID_TREE_DS1, PID_TREE_DS2, PID_TREE_DS3, PID_TREE_DS4, PID_TREE_DS5, PID_TREE_DS6, PID_TREE_DS7, PID_TREE_DS8, PID_TREE_DS9, PID_TREE_DS10, PID_TREE_DS11,
		PID_TREE_BS1, PID_TREE_BS2, PID_TREE_BS3, PID_TREE_GS1, PID_TREE_GS2, PID_TREE_GS3, PID_TREE_GS4, PID_TREE_GS5, PID_TREE_GS6, PID_TREE_GS7, PID_TREE_GS8, PID_TREE_GS9,
		PID_TREE_GS10, PID_TREE_GS11, PID_TREE_GS12, PID_TREE_GS13, PID_TREE_GS14, PID_TREE_GS15, PID_TREE_GS16, PID_TREE_GS17, PID_TREE_GS18, PID_TREE_GS19,
		// trees_s
		PID_TREE_DM1, PID_TREE_DM2, PID_TREE_GM1, PID_TREE_GM2, PID_TREE_GM3, PID_TREE_GM4, PID_TREE_GM5, PID_TREE_GM6, PID_TREE_GM7, PID_TREE_GM8, PID_TREE_GM9,
		PID_TREE_GM10, PID_TREE_GM11, PID_TREE_GM12, PID_TREE_GM13, PID_TREE_GM14, PID_TREE_GM15,
		// trees_m
		PID_TREE_DL1, PID_TREE_DL2, PID_TREE_DL3, PID_TREE_DL4, PID_TREE_DL5, PID_TREE_DL6, PID_TREE_DL7, PID_TREE_DL8, PID_TREE_DL9, PID_TREE_BL1, PID_TREE_BL2,
		PID_TREE_GL1, PID_TREE_GL2, PID_TREE_GL3, PID_TREE_GL4, PID_TREE_GL5, PID_TREE_GL6, PID_TREE_GL7, PID_TREE_GL8,
		// trees_l
		PID_TREE_GXXL1, PID_TREE_GXXL2
		// trees_xl
	}, 
	{ 
		PID_TREE_CS1, PID_TREE_CS2, PID_TREE_CS3, PID_TREE_CL1, PID_TREE_CL2, PID_TREE_CL3, PID_TREE_CL4, PID_TREE_CL5, PID_TREE_GL2S
	} // trees_chopped
};

const string[] SkavengingSounds =	{ "junk1.ogg", "junk2.ogg", "junk3.ogg", "junk4.ogg", "junk5.ogg", "junk6.ogg", "junk7.ogg", "junk8.ogg" };
const string[] HammerSounds =		{ "hammer_mine1.ogg", "hammer_mine2.ogg", "hammer_mine3.ogg", "hammer_mine4.ogg" };
const string[] PickaxeSounds =		{ "pickaxe_mine1.ogg", "pickaxe_mine2.ogg", "pickaxe_mine3.ogg", "pickaxe_mine4.ogg", "pickaxe_mine5.ogg", "pickaxe_mine6.ogg", "pickaxe_mine7.ogg", "pickaxe_mine8.ogg" };
const string[] ChoppingSounds = 	{ "Tree1.ogg", "Tree2.ogg", "Tree3.ogg", "Tree4.ogg" };
const string[] SkinningSounds =     { "Skinning1.ogg", "Skinning2.ogg", "Skinning3.ogg", "Skinning4.ogg", "Skinning5.ogg", "Skinning6.ogg", "Skinning7.ogg", "Skinning8.ogg", "Skinning9.ogg", "Skinning10.ogg", "Skinning11.ogg", "Skinning12.ogg" };

uint timeNumb = 0;
	
	#ifndef GATHERING
	
		#ifdef __SERVER
			import uint e_TiredenessTimeout( uint[]@ values ) from "gathering";
			import bool Accident( Critter& cr, int skillNum ) from "gathering";
			import bool IsTired( Critter& cr ) from "gathering";
			import void PlayGatheringSound( Critter& cr, Map& map, string& sound, int distance ) from "gathering";
			import bool act( Critter& cr ) from "gathering";
		#endif // __SERVER

		#ifdef __MAIN_MODULE__
			import bool PrepareChopping( Critter& cr, Item@ tool, Item@ target ) from "chopping";
			import bool PrepareMining( Critter& cr, Item@ tool, Item@ target ) from "mining";
			import bool PrepareScavenging( Critter& cr, Item@ tool, Item@ target ) from "scavenging";
			import bool PrepareSkinning( Critter& cr, Item@ tool, Critter@ target ) from "skinning";
		#endif // __MAIN_MODULE__

		#ifdef GAMEPLAY
			import void OreAutoInit() from "mining";
			import void ForceSpawnOres() from "mining";
			import void JunkAutoInit() from "scavenging";
			import void FoceSpawnJunk() from "scavenging";
			import void CutTreeManager() from "chopping";
		#endif //GAMEPLAY
		
	#endif // GATHERING
	
#endif	// GATHERING_H