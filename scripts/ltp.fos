#define __LTP_MAIN__

#include "_macros.fos"
#include "_ltp.fos"

LTProc[] procs;

class LTProc
{
    PROCESS@ pointer;
    LTProc()
    {
        @pointer = null;
    }
}

bool RegisterProcess( uint8 type, any func ) // Export
{
    PROCESS@ temp_func = null;

    func.retrieve( @temp_func );

    int param0 = -1,
        param1 = -1,
        param2 = -1;

    if( valid( temp_func ) && ( temp_func( null, param0, param1, param2 ) == BINDCHECK ) && ( uint8( param0 ) == type ) )
    {
        uint len = procs.length();

        if( len <= type )
            procs.resize( type + 1 );

        @procs[ type ].pointer = temp_func;

        Log( "Process #" + type + " binded." );
        return true;
    }

    Log( "Can't bind process! Type: " + type );

    return false;
}

uint makeTDH( uint8 type, uint16 hexX, uint16 hexY, uint8 dir )
{
    uint tck = 0;
    tck |= ( type & 0xFF );
    tck |= ( ( hexX & 0x3FF ) << 8 );
    tck |= ( ( hexY & 0x3FF ) << 18 );
    tck |= ( ( dir & 0x7 ) << 28 );

    return tck;
}

void setTDH( Critter& cr, uint8 type )
{
    cr.ParamBase[ ST_LTP_TYPE_DIR_HEX ] = int( makeTDH( type, cr.HexX, cr.HexY, cr.Dir ) );
}

bool checkTDH( Critter& cr )
{
    return ( ( uint( cr.ParamBase[ ST_LTP_TYPE_DIR_HEX ] ) & 0xFFFFFF00 ) == ( makeTDH( 0, cr.HexX, cr.HexY, cr.Dir ) ) );
}

bool checkTDH( Critter& cr, uint8 type )
{
    return ( cr.ParamBase[ ST_LTP_TYPE_DIR_HEX ] == int( makeTDH( type, cr.HexX, cr.HexY, cr.Dir ) ) );
}

bool StartProcess( Critter& cr, uint8 type, uint time )
{
    if( !StartProcess( cr, type, 0, 0, 0, time, false ) )
        return false;
    return true;
}

bool StartProcess( Critter& cr, uint8 type, int param0, uint time )
{
    if( !StartProcess( cr, type, param0, 0, 0, time, true ) )
        return false;
    return true;
}

bool StartProcess( Critter& cr, uint8 type, int param0, int param1, int param2, uint time )
{
    if( !StartProcess( cr, type, param0, param1, param2, time, true ) )
        return false;
    return true;
}


bool StartProcess( Critter& cr, uint8 type, int param0, int param1, int param2, uint time, bool paramWrite )
{
    if( procs.length() <= type || ( @procs[ type ].pointer == null ) )
    {
        Log( "fail " + type );
        return false;
    }

    PROCESS@ temp_func = @procs[ type ].pointer;

    Map@     map = cr.GetMap();
    uint     mapId = 0;

    if( paramWrite )
    {
        cr.ParamBase[ ST_LTP_PARAM0 ] = param0;
        cr.ParamBase[ ST_LTP_PARAM1 ] = param1;
        cr.ParamBase[ ST_LTP_PARAM2 ] = param2;
    }
    else if( uint( cr.ParamBase[ ST_LTP_TYPE_DIR_HEX ] ) & 0xFF != type )
    {
        cr.ParamBase[ ST_LTP_PARAM0 ] = 0;
        cr.ParamBase[ ST_LTP_PARAM1 ] = 0;
        cr.ParamBase[ ST_LTP_PARAM2 ] = 0;
    }

    if( valid( map ) )
    {
        mapId = map.Id;
        setTDH( cr, type );
    }
    else
        cr.ParamBase[ ST_LTP_TYPE_DIR_HEX ] = int(type);

    cr.SetEvent( CRITTER_EVENT_IDLE, "_Process" );
    cr.ParamBase[ ST_LTP_MAP ] = int(mapId);
    cr.ParamBase[ ST_LTP_TIME ] = int(__FullSecond);
    cr.RunClientScript( "client_main@_waiting", 1, 0, 0, null, null );
    cr.Wait( time );

    return true;
}

bool StopProcess( Critter& cr )
{
    cr.SetEvent( CRITTER_EVENT_IDLE, null );
    cr.ParamBase[ ST_LTP_TIME ] = -1;
    cr.RunClientScript( "client_main@_waiting", 0, 0, 0, null, null );
	cr.SetAnims( COND_LIFE, 0, ANIM2_IDLE );
    cr.Wait( 0 );

    return true;
}

bool StopAndStayPut( Critter& cr ) {
    cr.SetEvent( CRITTER_EVENT_IDLE, null );
    cr.ParamBase[ ST_LTP_TIME ] = -1;
    cr.RunClientScript( "client_main@_waitingForAction", 0, 0, 0, null, null );
	cr.SetAnims( COND_LIFE, 0, ANIM2_IDLE );
    cr.Wait( 0 );

    return true;
}

void _Process( Critter& cr )
{
    uint tdr = uint( cr.Param[ ST_LTP_TYPE_DIR_HEX ] ),
         pmap = uint( cr.Param[ ST_LTP_MAP ] );

    int param0 = cr.Param[ ST_LTP_PARAM0 ],
        param1 = cr.Param[ ST_LTP_PARAM1 ],
        param2 = cr.Param[ ST_LTP_PARAM2 ];

    uint8 type = tdr & 0xFF;

    if( uint( cr.ParamBase[ ST_LTP_TIME ] ) <= __FullSecond )
    {
        Map@ map = cr.GetMap();
        if( ( ( pmap == 0 ) && ( tdr == type ) ) || ( valid( map ) && ( map.Id == pmap ) && checkTDH( cr ) ) )
        {
            if( procs.length() > type && valid( procs[ type ] ) )
            {
                PROCESS@ temp_func = @procs[ type ].pointer;

                uint     time = temp_func( cr, param0, param1, param2 );

                cr.ParamBase[ ST_LTP_PARAM0 ] = param0;
                cr.ParamBase[ ST_LTP_PARAM1 ] = param1;
                cr.ParamBase[ ST_LTP_PARAM2 ] = param2;

                if( time != 0 )
                {
                    cr.Wait( time );
                    return;
                }
            }
            else
            {
                Log( "_Process error #" + type );
            }
        }

    }
    StopProcess( cr );
}

void unsafe_StopProcess( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ param4 )
{
    StopProcess( player );
}

void unsafe_StopAndStayPut( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ param4 )
{
    StopAndStayPut( player );
}