
#ifdef __CLIENT

#ifndef __CLIENT_DRAWING_H__
#define __CLIENT_DRAWING_H__

#ifndef ItemMutual
	#define ItemMutual ItemCl
#endif


shared interface DrawableEventHandler // funcdefs no work with shared interfaces !
{
	void Callback(IDrawable&);
}

// rework
shared interface IDrawable
{
	void GetScreenPosition(int& x, int& y, bool source = true);
	void GetHexPosition(uint16& x, uint16& y, bool source = true); // engine bug, fixed in r420
	void SetDrawType(uint8 type);
	void SetTrajectory(uint8 type);
	void SetColors(uint color1In, uint color2In);
	void SetOpacity(uint opacity);
	void SetId(uint id);
	void SetTime(uint timeNew);
	void SetOffsets(int offx, int offy);
	void Draw();
	
	void SetEvent(uint eventId, DrawableEventHandler& handler);
	void OnCreate();
	void OnDestroy();
	
	uint TimePass();
}

// finish the interfaces later
shared interface IWMZoneRender
{
	void SetX(int xin);
	void SetY(int yin);
	void SetColor(uint colorin);
	void SetDrawType(uint8 type);
	void SetZoneLength(int len);
	void SetLayer(uint layer);
	void Draw(uint layer);
}

//to rework
shared interface IDelayedText
{
	void SetId(uint id);
	void Draw();
}

shared interface IWeaponRadiusChosen
{
	void Draw();
	void SetDrawType(uint8 type);
//	void SetDistFunc(distCalcFunc@); // try uncomment it
}


#define DRAWABLE_EVENTS_BEGIN (0)
#define DRAWABLE_EVENTS_END   (2)

#define DRAWABLE_EVENT_ON_CREATE	(0)
#define DRAWABLE_EVENT_ON_DESTROY	(1)

#define RAYDATA_MAPX1 	  (0)
#define RAYDATA_MAPY1	  (1)
#define RAYDATA_MAPX2     (3)
#define RAYDATA_MAPY2	  (4)
#define RAYDATA_TIME	  (7) // used only for bursts
#define RAYDATA_AMOUNT	  (6) // used only for bursts

#define MUZZLEDATA_MAPX1  (0)
#define MUZZLEDATA_MAPY1  (1)
#define MUZZLEDATA_MAPX2  (3)
#define MUZZLEDATA_MAPY2  (4)
#define MUZZLEDATA_SPEED  (6)
#define MUZZLEDATA_DELAY  (7) // used only for bursts
#define MUZZLEDATA_AMOUNT (8) // used only for bursts

#define FLY_EFFECT_TRAJECTORY_LINE 	   (0)
#define FLY_EFFECT_TRAJECTORY_ARC	   (1)

#include "sprite.fos" // strict dependancy

#ifdef __CLIENT_DRAWING_MODULE__
#include "_macros.fos"  // strict dependancy
#include "_defines.fos" // strict dependancy
#include "_client_defines.fos"
#include "_colors.fos"
#include "_time.fos"
#include "geometry_h.fos"



#ifdef _2238
import bool IsGrenade(ItemMutual& item) from "hexThrow";
#include "item_bonus_h.fos"
//import int checkBonus(ItemCl@ it, int bonusType) from "client_combat"; // 2238 modding system specific
#endif
#endif

#ifndef __CLIENT_DRAWING_MODULE__

import IDrawable@ CreateRay( int[] drawData)	from "client_drawing";
import IDrawable@ CreateBurstRay(int [] drawData) from "client_drawing";
import IDrawable@ CreateMuzzle( int[] drawData) from "client_drawing";
import IDrawable@ CreateBurstMuzzle( int[] drawData) from "client_drawing";
import void _CreateDelayedText(int posX, int posY, int color, string@ text, int[]@ parameteres) from "client_drawing"; // gotta make it return, wrap it someday
import void CreateCustomRadius(uint color, uint radius) from "client_drawing";
import IWeaponRadiusChosen@ CreateWeaponRadius(uint color) from "client_drawing";
import IDrawable@ CreateFlyEffect(int[] data) from "client_drawing";
import IDrawable@ CreateTimedMapSprite(int[] data) from "client_drawing";

import void DrawDrawables() from "client_drawing";

import void DrawRays() from "client_drawing";
import void DrawBurstRays() from "client_drawing";
import void DrawTexts() from "client_drawing";
import void DrawMuzzleFlashes() from "client_drawing";
import void DrawBurstMuzzles() from "client_drawing";
import void DrawWepRadius(CritterCl@ chosen) from "client_drawing";
import void DrawCustomRadiuses() from "client_drawing";
import void DrawFlyEffects() from "client_drawing";

import void DrawWMZones() from "client_drawing"; // void implementation

import Sprite@ GetCachedSprite(int spriteDef) from "client_drawing";
import void InitSprites() from "client_drawing";

#endif

#endif

#endif

