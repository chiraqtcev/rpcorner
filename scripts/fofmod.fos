#ifndef FOFMOD_MODULE
#define FOFMOD_MODULE

#include "_utils.fos"
#include "fofmod_h.fos"
#include "weapon_sounds.fos"

// Read fofmod.cpp in scripts/fmod/src directory for documentation AS interface registering section
// API exposes fmod features as directly as possible, fmod documentation should explain on how fofmod API supposed to work.
// https://fmod.com/resources/documentation-api?version=2.0&page=core-api.html

#define FOFMOD_CHANNEL_COUNT ( 32 ) // 32 is okay, Range: [0, 4095]

//Translate hex coordinates into more human coordinates: X is right and Y is down
void CoordinatesHexToGrid(int x, int y, float &out ox, float &out oy)
{
	const float sqrt3 = 1.732050807;
	int div = x / 2;
	y += div;

	ox = sqrt3 * (x - y / 2.0);
	oy = y * 3.0 / 2.0;
}


#ifdef __CLIENT

#pragma bindfunc "void dummy_fmod() -> fofmod_client.dll CLIENT"	// to trigger entry point from engine

#define FOFMOD_DEBUG


uint16 Hx, Hy;
float FHx, FHy;

dictionary PlayingSounds;
uint PlayingSoundCount = 0;
dictionary PlayingMusic;
uint PlayingMusicCount = 0;

bool FOFMOD_Initialize()
{
	bool result = FMOD_Initialize( FOFMOD_CHANNEL_COUNT );
	if( result )
	{
		FMOD_Set3DListenerUp( 0.0f, 0.0f, 1.0f ); // UP is towards Camera, right handedness
		FMOD_Set3DListenerForward( 0.0f, -1.0f, 0.0f ); // Negative Y is forward
		FMOD_TouchArchive("./data/forp_content.zip");
		FMOD_TouchArchive("./data/patch005_NNM_music.zip");
		FMOD_TouchArchive("./data/patch007_music.zip");
		FMOD_TouchArchive("./data/patch017_SF_music.zip");
		FMOD_TouchArchive("./data/patch057_SFX.zip");
		FMOD_TouchArchive("./data/patch059_homm_music.zip");
		FMOD_TouchArchive("./data/patch061_battlemusic.zip");
		FMOD_TouchArchive("./data/patch064_mio_soundpack.zip");
		FMOD_TouchArchive("./data/patch065_vvish_soundpack.zip");
		FMOD_TouchArchive("./data/patch076_Edd_music.zip");
		#ifdef FOFMOD_DEBUG
		//FOFMOD_Test();
		#endif
	}
	
	return result;
}


void FOFMOD_Update()
{
	CritterCl@ chosen = GetChosen();
	if( valid ( chosen ) )	
	{
		if( ( Hx != chosen.HexX ) || ( Hy != chosen.HexY) )
		{
			// position changed
			Hx = chosen.HexX;
			Hy = chosen.HexY;
			CoordinatesHexToGrid( Hx, Hy, FHx, FHy );
			FMOD_Set3DListenerPosition( FHx, FHy, 0.0f );
			//Message(" Position update " + FHx + ":"  + FHy );
		}
		
	}
	else
	{
		FMOD_Set3DListenerPosition( 0.0f, 0.0f, 0.0f );
	}
	
	FOFMOD_ProcessGarbage();
	//FOFMOD_PersistentTest();
	FMOD_Update();
}


uint LastGarbageTick;
const uint GARBAGE_TIME = 5000;// in MS

void FOFMOD_PersistentTest()
{

	//Log("Playing Sounds count " + PlayingSoundCount );
	if( PlayingSoundCount < 1000 )
	{
		FMODChannel@ testSound3 = FMOD_PlaySound("c.ogg", false); // automatic path
		if( valid(testSound3) )
		{
			//testSound3.SetPitch( float( Random( 500, 2000 ) / 1000 ) );
			PlayingSoundCount++;
			PlayingSounds.set( ""+uint(-PlayingSoundCount), @testSound3 );
		}
	}
}

void FOFMOD_ProcessGarbage()
{
	uint currentTick = GetTick();
	if( ( currentTick - LastGarbageTick ) >= GARBAGE_TIME )
	{
		// garbage loose objects
		array<string@> keys = array<string@>();
		uint count = PlayingSounds.keys( keys );
		for( uint i = 0; i < count; i++ )
		{
			FMODChannel@ ptr = null;
			PlayingSounds.get( keys[i], @ptr );
			if( valid( ptr ) )
			{
				if( !ptr.IsValid() )
				{
		//			Log("Playing sound is not valid, removing.");
					PlayingSounds.delete( keys[i] );
					PlayingSoundCount--;
				}
			}
		}

		keys.resize(0);
		count = PlayingMusic.keys( keys );
		for( uint i = 0; i < count; i++ )
		{
			FMODChannel@ ptr = null;
			PlayingMusic.get( keys[i], @ptr );
			if( valid( ptr ) )
			{
				if( !ptr.IsValid() )
				{
					PlayingMusic.delete( keys[i] );
					PlayingMusicCount--;
				}
			}
		}

		LastGarbageTick = currentTick;
	}
}


void FOFMOD_Test()
{
	Log("Preloading sounds directory at test");
	//FMOD_PreloadSounds( ".\\test" );
	//FMOD_TouchArchive("./data/forp_content.zip");
	//FMOD_TouchArchive("./data/forp_content.zip");
	//FMOD_TouchArchive("./data/forp_content.zip");
	//FMOD_TouchArchive("./data/forp_content.zip");
	//FMOD_TouchArchive("./data/forp_content.zip");
	FOFMOD_TestSounds();
}

void FOFMOD_TestSounds()
{	

	FMODChannel@ testSound2 = FMOD_PlaySound("./test/c.ogg", false); // manual path
	FMODChannel@ testSound3 = FMOD_PlaySound("c.ogg", false); // automatic path
	if( valid(testSound3) )
	{
		testSound3.SetPitch( 0.7f );
	}

	FMODChannel@ testSoundPathArchive = FMOD_PlaySound( "sound/sfx/chewy.ogg", false ); // manual path
	FMODChannel@ testSoundArchive = FMOD_PlaySound("chewy.ogg", false); // automatic path
	if( valid( testSoundArchive ) )
	{
		testSoundArchive.SetPitch( 0.5f );
	}
	
	FMOD_PlaySound("chewy.ogg", false); 
	FMOD_PlaySound("chewy.ogg", false); 
	FMOD_PlaySound("chewy.ogg", false); 
	FMOD_PlaySound("chewy.ogg", false); 
	FMOD_PlaySound("chewy.ogg", false);
	
	FMODSound@ prototypeSound = FMOD_GetSound("chewy.ogg", FOFMOD_SOUND_TYPE_SOUND );
	if( valid ( prototypeSound ) )
	{
		Log( "chewy.ogg length is " + prototypeSound.GetLength() + " miliseconds " );
	}
	@prototypeSound = FMOD_GetSound("c.ogg", FOFMOD_SOUND_TYPE_SOUND );
	if( valid ( prototypeSound ) )
	{
		Log( "c.ogg length is " + prototypeSound.GetLength() + " miliseconds " );
	}
}
 
// global sound, no position or distance specified
FMODChannel@ FOFMOD_PlaySound( string& filename )
{
	FMODChannel@ result = null;

	@result = FMOD_PlaySound( filename, true );

	if( valid( result ) )
	{
		result.Set3DLevel( 0.0f ); // do not attenuate with distance from listener
		result.Set3DMinMaxDistance( 100000.0f, 100000.0f ); // its actually documented to be legit
	//	result.SetPaused(false);
	}
	else
		Message( "Sound file '" + filename + "' not found." );

	return result;
}


FMODChannel@ FOFMOD_PlaySound( string& filename, uint16 hexX, uint16 hexY, uint minDistance, uint maxDistance )
{

	FMODChannel@ result = FMOD_PlaySound( filename, true );

	if( valid( result ) )
	{
		float x = 0.0f, y = 0.0f;
		CoordinatesHexToGrid( hexX, hexY, x, y );
		result.Set3DPosition( x, y, 0.0f );
		CoordinatesHexToGrid( minDistance, maxDistance, x, y );
		result.Set3DMinMaxDistance( x, y ); 
		//	result.SetPaused(false);
	}
	else
		Message( "Sound file '" + filename + "' not found." );
	
	return result;
}

//For using weapons
void __PlayWeaponSound( int soundId, int hexX, int hexY, string@ path, int[]@ param4 )
{
	if( !valid( path ) )
	{
		Message("Некорректный путь до файла, обратитесь к разработчику.");
		Message("fofmod: soundid + " + soundId);
		return;
	}

	ProtoItem@ weapon = GetProtoItem( param4[0] );
	if( !valid( weapon ) ) return;
	
	uint8 use = param4[1];
	WeaponSound@ weaponSound = GetWeaponSound( weapon );
	
	switch( use )
	{
		case( 0 ):
			path = string( weaponSound.single );
			break;
		case( 1 ):
			path = string( weaponSound.burst );
			break;
		case( 2 ):
			path = string( weaponSound.reload );
			break;
		case( 3 ):
			path = string( weaponSound.extra );
			break;
		case( 4 ):
			path = string( weaponSound.blank );
			break;
		case( 5 ):
			path = string( weaponSound.windup );
			break;
		default:
			path = "ошибка";
			break;
	}
	FMODChannel@ sound = FMOD_PlaySound( path, true );
	if( !valid( sound ) ) {
		Message( "Sound file '" + path + "' not found. Weapon PID#" + weapon.ProtoId + ", use: " + use );
		return;
	}
	
	float ox = 0.0f, oy = 0.0f;
	CoordinatesHexToGrid( hexX, hexY, ox, oy );
	float maxDist = param4[2];
	float minDist = maxDist / 2; 
	sound.Set3DPosition( ox, oy, 0.0f );
	sound.Set3DLevel( 0.9f );
	sound.Set3DMinMaxDistance( minDist, maxDist );
	float mod = Random( -99, 99 ) / 1000.0f;
	float val = 1.0f - mod;
	sound.SetPitch( val );
	sound.SetPaused ( false );
	PlayingSounds.set( "" + soundId, @sound );
	PlayingSoundCount++;
}

//For using general sound sources
void __PlaySound( int soundId, int hexX, int hexY, string@ path, int[]@ param4 )
{
	if( !valid( path ) )
	{
		Message("Некорректный путь до файла, обратитесь к разработчику.");
		Message("fofmod: soundid + " + soundId);
		return;
	}

	FMODChannel@ sound = FMOD_PlaySound( path, true );
	if( !valid( sound ) ) 
	{
		Message( "Sound '" + path + "' not found." );
		return;
	}

	float ox = 0.0f, oy = 0.0f;
	CoordinatesHexToGrid( hexX, hexY, ox, oy );
	float maxDist = param4[0];
	float minDist = maxDist / 2; 
	sound.Set3DPosition( ox, oy, 0.0f );
	sound.Set3DLevel( 0.7f );
	sound.Set3DMinMaxDistance( minDist, maxDist );
	float mod = Random( -99, 99 ) / 1000.0f;
	float val = 1.0f - mod;
	sound.SetPaused ( false );
	PlayingSounds.set( ""+soundId, @sound );
	PlayingSoundCount++;
}

//For using Jukebox and other melody playing items
void __PlayJukeboxTune( int soundId, int hexX, int hexY, string@ path, int[]@ param4 )
{
	if( !valid( path ) )
	{
		Message("Некорректный путь до файла, обратитесь к разработчику.");
		Message("fofmod: soundid + " + soundId);
		return;
	}
	
	FMODChannel@ sound = FMOD_PlaySound( path, true );
	if( !valid( sound ) ) 
	{
		Message( "Sound '" + path + "' not found." );
		return;
	}

	float ox = 0.0f, oy = 0.0f;
	CoordinatesHexToGrid( hexX, hexY, ox, oy );
	float maxDist = param4[0];
	float minDist = maxDist / 3; 
	sound.Set3DPosition( ox, oy, 0.0f );
	sound.Set3DLevel( 0.7f );
	sound.Set3DMinMaxDistance( minDist, maxDist ); 
	sound.SetPaused ( false );
	PlayingSounds.set( ""+soundId, @sound );
	PlayingSoundCount++;
}

// Map-wide sound init
void __PlayMapMusic( int soundId, int timeStamp, int param2, string@ path, int[]@ param4 )
{
	if( !valid( path ) )
	{
		Message("Некорректный путь до файла, обратитесь к разработчику.");
		Message("fofmod: soundid + " + soundId);
		return;
	}

	//Log("Playing from remote sound id " + soundId + " " + path );
	FMODChannel@ sound = FMOD_PlaySound( path, true );
	if( !valid( sound ) ) 
	{
		Message( "Sound '" + path + "' not found." );
		return;
	}

	sound.Set3DLevel( 0.0f );
	sound.Set3DMinMaxDistance( 100000.0f, 100000.0f );
	sound.SetPaused ( false );
	PlayingSounds.set( ""+soundId, @sound );
	PlayingSoundCount++;
}

void __StopAll( int param0, int param1, int param2, string@ param3, int[]@ param4 )
{
	FMOD_StopAll();
}

void __StopAllSounds( int param0, int param1, int param2, string@ param3, int[]@ param4 )
{
	FMOD_StopAllSounds();
}

void __StopAllMusic( int param0, int param1, int param2, string@ param3, int[]@ param4 )
{
	FMOD_StopAllMusic();
}

void __PauseAllSounds( int state, int param1, int param2, string@ param3, int[]@ param4 )
{
	FMOD_PauseAllSounds( state > 0 ? true : false );
}

void __PauseAllMusic( int state, int param1, int param2, string@ param3, int[]@ param4 )
{
	FMOD_PauseAllMusic( state > 0 ? true : false );
}

#endif // __CLIENT



#ifdef __SERVER
/* WIP
dictionary MapMusicDict;
class MapMusic {
	
    MusicFile musicFile;
    uint startTime;
    uint mapId;
	
	 MapMusic( MusicFile& musicFile, uint startTime, uint mapId ) {
        this.musicFile = musicFile;
        this.startTime = startTime;
        this.mapId     = mapId;
	}
}

MapMusic@ StoreTune( string tuneName, uint mapId ) {
	MusicFile@ stored = getMusicFile( tuneName );
	MapMusicDict.set( "" + mapId, MapMusic( stored, GetTick(), mapId ) ); 
	return null;
}

MapMusic@ PlayMapMusic( string tuneName, Map& map ) {
	Critter@[] players;
    map.GetCritters( 0, FIND_ALL, players );
	for( uint i = 0; i < players.length(); i ++ ) {
		Critter@ player = players[i];
		if( valid( player ) && !player.IsNpc() ) {
			int tuneId = 0;
			string mapId = map.Id + tuneName;
			StrToInt( mapId, tuneId );
			player.RunClientScript( "fofmod@__PlayMapMusic", 0, 0, tuneId, tuneName, null );
		}
	}
	return null;
}

MapMusic@ GetAndPlay( Critter& cr, uint mapId ) {
	MapMusic@[] mapMusic;
	MapMusicDict.get( "" + mapId, mapMusic );
	uint len = mapMusic.length();
	for( uint i = 0; i < len; i ++ ) {
		MapMusic@ tune = mapMusic[i];
		uint elapsed_time = tune.startTime + ( tune.musicFile.length * 1000 );
		if( elapsed_time > GetTick() ) {
			MapMusicDict.delete( tune.musicFile.tuneName );
			continue;
		}
		//Play the melody from a timestamp
	}
	return null;
}

class MusicFile {
	
	string tuneName;
	uint length;
	
	MusicFile( string tuneName, uint length ) {
		this.tuneName = tuneName;
		this.length = length;
	}
}

class MusicFileCollection
{
	MusicFile@[] musicFiles;
	MusicFileCollection()
	{
	}
	
	MusicFileCollection@ tune( string tuneName, uint length ) 
	{
		this.musicFiles.insertLast( MusicFile( tuneName, length ) );
		return this;
	}
	
	MusicFile@ get_by_name( string tuneName ) 
	{
		MusicFileCollection result;
		for( uint i = 0, len = this.musicFiles.length(); i < len; i++ ) {
			if( this.musicFiles[i].tuneName == tuneName ) {
				return this.musicFiles[i];
			}
		}
		return null;
	}
}

MusicFileCollection@ musicFiles = MusicFileCollection()
	.tune( "xfiles.ogg", 260 )
	.tune( "afterdark.ogg", 260 )
	.tune( "terminator2.ogg", 121 )
	.tune( "sixteentons.ogg", 166 )
	.tune( "maybe.ogg", 180 )
	.tune( "worldonfire.ogg", 180 )
	.tune( "rockies.ogg", 114 )
	.tune( "zerg.ogg", 204 )
	.tune( "fiftymegatons.ogg",136 )
	.tune( "darkeyes.ogg", 164 )
	.tune( "radioactivemama.ogg", 109 )
	.tune( "summertime.ogg", 181 )
	.tune( "imperialmarch.ogg", 139 )
	.tune( "soldtheworld.ogg", 220 )
	.tune( "loveshair.ogg", 205 )
	.tune( "roundtable.ogg", 350 )
	.tune( "holygrail.ogg", 116 )
	.tune( "falloutshelter.ogg", 159 )
	.tune( "lovedbyyou.ogg", 170 )
	.tune( "Dreamon.ogg", 266 )
	.tune( "wonderfulworld.ogg", 135 )
	.tune( "imperialmarch0.ogg", 181 )
	.tune( "laika.ogg", 129 )
	.tune( "darksideblues.ogg", 175 )
	.tune( "tampico.ogg", 156 )
	.tune( "stillalive.ogg", 175 )
	.tune( "cantinaband.ogg", 169 )
	.tune( "askmenice.ogg", 297 )
	.tune( "somebodytolove.ogg", 170 )	
	.tune( "ritz.ogg", 236 )
	.tune( "hbombrock.ogg", 134 )
	.tune( "atombomb.ogg", 186 )
	.tune( "ghostbusters.ogg", 243 )
	.tune( "atomiccocktail.ogg", 165 )
	.tune( "moonwasyellow.ogg", 192 )
	.tune( "coldwarwithyou.ogg", 166 )
	.tune( "AtomBombBaby.ogg", 144 )
	.tune( "rockininrhythm.ogg", 310 )
	.tune( "bluelou.ogg", 157 )
	.tune( "newjunkcity.ogg", 146 )
	.tune( "uranium.ogg", 136 )
	.tune( "twistagain.ogg", 140 )
	.tune( "vodka.ogg", 217 )
	.tune( "nocommunist.ogg", 167 )
	.tune( "atomicpower.ogg", 158 )
	.tune( "waytovegas.ogg", 247 )
	.tune( "onemore.ogg", 118 )
	.tune( "paranoid.ogg", 172 )
	.tune( "falloutshelter0.ogg", 165 )
	.tune( "atomicbaby.ogg", 154 )
	.tune( "tnt.ogg", 221 )
	.tune( "javabar.ogg", 169 )
	.tune( "greatballsoffire.ogg", 152 )
	.tune( "ohlonesomeme.ogg", 148 )
	.tune( "thebattleofneworleans.ogg", 149 )
	.tune( "waterloo.ogg", 146 )
	.tune( "wouldntitbenice.ogg", 140 )
	.tune( "billiejean.ogg", 293 )
	.tune( "daddycool.ogg", 208 )
	.tune( "nevergonnagiveyouup.ogg", 212 )
	.tune( "smoothcriminal.ogg", 255 )
	.tune( "takeonme.ogg", 226 )
	.tune( "FlashRockinMan.ogg", 268 )
	.tune( "JourneyOblivion.ogg", 259 )
	.tune( "TheDuellists.ogg", 366 )
	.tune( "MedievalSteel.ogg", 336 )
	.tune( "FourHorsemen.ogg", 433 )
	.tune( "LightningWar.ogg", 416 )
	.tune( "ElectroViolence.ogg", 225 )
	.tune( "KeeperFlame.ogg", 251 )
	.tune( "MakeMyDay.ogg", 218 )
	.tune( "CageRagers.ogg", 208 )
	.tune( "Lonewolf.ogg", 288 )
	.tune( "Gypsy.ogg", 255 )
	.tune( "ChemicalWarfare.ogg", 326 )
	.tune( "LoveSuckers.ogg", 207 )
	.tune( "Shockwaves.ogg", 243 )
	.tune( "WorldWar.ogg", 271 )
	.tune( "BabaORiley.ogg", 302 )
	.tune( "Gimme.ogg", 295 )
	.tune( "HonkyTonkWomen.ogg", 180 )
	.tune( "LaCucaracha.ogg", 271 )
	.tune( "NothingElseMatters.ogg", 389 )
	.tune( "ShesJustKillingMe.ogg", 298 )
	.tune( "Molotov.ogg", 199 )
	.tune( "City_Of_Angels.ogg", 211 )
	.tune( "Drain_the_Blood.ogg", 190  )
	.tune( "Gypsy_Rose_Lee.ogg", 235 )
	.tune( "The_Lord.ogg", 221 )
	.tune( "SAMU.ogg", 270 )
	;
	
MusicFile@ getMusicFile( string tuneName ) 
{
	return musicFiles.get_by_name( tuneName );
}
*/


// void FOFMOD_Client_PlaySound( Critter& client, Sound& sound )
// {

// }

// void FOFMOD_Client_UpdateSound( Critter& client, Sound& sound )
// {

// }

// void FOFMOD_Client_PauseSounds( Critter& client )
// {

// }

// void FOFMOD_Client_StopSounds( Critter& client )
// {

// }

// void FOFMOD_Client_PauseMusic( Critter& client )
// {

// }

// void FOFMOD_Client_StopMusic( Critter& client )
// {

// }



#endif // __SERVER


#endif // FOFMOD_MODULE