#include "_utils.fos"
#include "farming_h.fos"
#include "critter_skills_h.fos"

void _Init( Item& item, bool firstTime )
{
	item.SetEvent( ITEM_EVENT_USE, "_Use" );
	item.SetEvent( ITEM_EVENT_SKILL, "_Skill" );
	item.SetEvent( ITEM_EVENT_USE_ON_ME, "_OnMe" );
}

bool _Use(Item& item, Critter& cr, Critter@ onCritter, Item@ onItem, Scenery@ onScenery)
{
	cr.Say( SAY_NETMSG, "|0xFFFF00 Просто поставьте кадку где-нибудь, и используйте гриб как донорский мицелий." );
	return true;
}

bool _OnMe( Item& item, Critter& cr, Item@ usedItem )
{
	if( !valid( item ) ) return true;
	
	if( fertilize( item, cr, usedItem, false ) )
		return true;

	if( watering( item, cr, usedItem, false ) )
		return true;
	
	if( isClean( item ) )
		mushrooms.check( cr, item, usedItem );
	else
		cr.Say( SAY_NETMSG, "|0xFFFF00 На кадке уже что-то растёт." );
	
	return true;
}

bool isClean( Item& item )
{
	return( item.PLANT_TYPE == 0 ); //TODO: Проверки на прототипы и т.п. - автовызывающие cleaning для забаговавшихся или иных стрёмных случаев.
}

MushroomList mushrooms;

class MushroomList
{
	Mushroom[] list;
	
	int size()
	{
		return list.length();
	}
	
	MushroomList()
	{
		this.add( Mushroom( PID_SEEDLING_TONGUE_GECKO, "Геккогриб" )
				.stage( PID_MUSHBED_GG1, PID_SEEDLING_TONGUE_GECKO )
				.stage( PID_MUSHBED_GG2, PID_RISING_TONGUE_GECKO )
				.stage( PID_MUSHBED_GG3, PID_TONGUE_GECKO ) )
			.add( Mushroom( PID_RISING_TONGUE_GECKO, "Геккогриб" )
				.stage( PID_MUSHBED_GG1, PID_SEEDLING_TONGUE_GECKO )
				.stage( PID_MUSHBED_GG2, PID_RISING_TONGUE_GECKO )
				.stage( PID_MUSHBED_GG3, PID_TONGUE_GECKO ) )
			.add( Mushroom( PID_TONGUE_GECKO, "Геккогриб" )
				.stage( PID_MUSHBED_GG1, PID_SEEDLING_TONGUE_GECKO )
				.stage( PID_MUSHBED_GG2, PID_RISING_TONGUE_GECKO )
				.stage( PID_MUSHBED_GG3, PID_TONGUE_GECKO ) )	
				
			.add( Mushroom( PID_SEEDLING_MURAVNIKTAR, "Муравьиный нектар" )
				.stage( PID_MUSHBED_MOCH1, PID_SEEDLING_MURAVNIKTAR )
				.stage( PID_MUSHBED_MOCH2, PID_RISING_MURAVNIKTAR )
				.stage( PID_MUSHBED_MOCH3, PID_MURAVNIKTAR ) )
			.add( Mushroom( PID_RISING_MURAVNIKTAR, "Муравьиный нектар" )
				.stage( PID_MUSHBED_MOCH1, PID_SEEDLING_MURAVNIKTAR )
				.stage( PID_MUSHBED_MOCH2, PID_RISING_MURAVNIKTAR )
				.stage( PID_MUSHBED_MOCH3, PID_MURAVNIKTAR ) )			
			.add( Mushroom( PID_MURAVNIKTAR, "Муравьиный нектар" )
				.stage( PID_MUSHBED_MOCH1, PID_SEEDLING_MURAVNIKTAR )
				.stage( PID_MUSHBED_MOCH2, PID_RISING_MURAVNIKTAR )
				.stage( PID_MUSHBED_MOCH3, PID_MURAVNIKTAR ) )
				
			.add( Mushroom( PID_SEEDLING_BLACK_MUSHROOMS, "Черногриб" )
				.stage( PID_MUSHBED_CG1, PID_SEEDLING_BLACK_MUSHROOMS )
				.stage( PID_MUSHBED_CG2, PID_RISING_BLACK_MUSHROOMS )
				.stage( PID_MUSHBED_CG3, PID_BLACK_MUSHROOMS ) )
			.add( Mushroom( PID_RISING_BLACK_MUSHROOMS, "Черногриб" )
				.stage( PID_MUSHBED_CG1, PID_SEEDLING_BLACK_MUSHROOMS )
				.stage( PID_MUSHBED_CG2, PID_RISING_BLACK_MUSHROOMS )
				.stage( PID_MUSHBED_CG3, PID_BLACK_MUSHROOMS ) )			
			.add( Mushroom( PID_BLACK_MUSHROOMS, "Черногриб" )
				.stage( PID_MUSHBED_CG1, PID_SEEDLING_BLACK_MUSHROOMS )
				.stage( PID_MUSHBED_CG2, PID_RISING_BLACK_MUSHROOMS )
				.stage( PID_MUSHBED_CG3, PID_BLACK_MUSHROOMS ) )
				
			.add( Mushroom( PID_SEEDLING_PALE_MUSHROOM, "Бледногриб" )
				.stage( PID_MUSHBED_BG1, PID_SEEDLING_PALE_MUSHROOM )
				.stage( PID_MUSHBED_BG2, PID_RISING_PALE_MUSHROOM )
				.stage( PID_MUSHBED_BG3, PID_PALE_MUSHROOM ) )
			.add( Mushroom( PID_RISING_PALE_MUSHROOM, "Бледногриб" )
				.stage( PID_MUSHBED_BG1, PID_SEEDLING_PALE_MUSHROOM )
				.stage( PID_MUSHBED_BG2, PID_RISING_PALE_MUSHROOM )
				.stage( PID_MUSHBED_BG3, PID_PALE_MUSHROOM ) )			
			.add( Mushroom( PID_PALE_MUSHROOM, "Бледногриб" )
				.stage( PID_MUSHBED_BG1, PID_SEEDLING_PALE_MUSHROOM )
				.stage( PID_MUSHBED_BG2, PID_RISING_PALE_MUSHROOM )
				.stage( PID_MUSHBED_BG3, PID_PALE_MUSHROOM ) )
				
			.add( Mushroom( PID_SEEDLING_MUTMUSH, "Мутогриб" )
				.stage( PID_MUSHBED_MUTM1, PID_SEEDLING_MUTMUSH )
				.stage( PID_MUSHBED_MUTM2, PID_PID_RISING_MUTMUSH )
				.stage( PID_MUSHBED_MUTM3, PID_MUTMUSH ) )
			.add( Mushroom( PID_PID_RISING_MUTMUSH, "Мутогриб" )
				.stage( PID_MUSHBED_MUTM1, PID_SEEDLING_MUTMUSH )
				.stage( PID_MUSHBED_MUTM2, PID_PID_RISING_MUTMUSH )
				.stage( PID_MUSHBED_MUTM3, PID_MUTMUSH ) )
			.add( Mushroom( PID_MUTMUSH, "Мутогриб" )
				.stage( PID_MUSHBED_MUTM1, PID_SEEDLING_MUTMUSH )
				.stage( PID_MUSHBED_MUTM2, PID_PID_RISING_MUTMUSH )
				.stage( PID_MUSHBED_MUTM3, PID_MUTMUSH ) )
			;
	}

	bool AddTo( Critter& cr, int index = -1, int amount = 1 )
	{
		if( has( index ) )
			cr.AddItem( pid( index ), amount );

		return true;
	}
	
	bool has( int index )
	{
		return BETWEEN( index, 0, int( list.length() - 1 ) );
	}
	
	string name( int index )
	{
		if( !has( index ) ) return "[ " + index + " out of range " + list.length() + " ]";
		
		return list[index].name;
	}
	
	uint pid( int index )
	{
		if( !has( index ) ) 
		{
			Log( "index " + index + " is out of range " + list.length() );
			return 0;
		}
		
		return list[index].pid_source;
	}
	
	MushroomList@ add( uint source, string name ) { return add( Mushroom( source, name ) ); }
	MushroomList@ add( Mushroom@ item )
	{
		list.insertLast( item );
		
		return this;
	}
	
	bool check( Critter& cr, Item& item, Item& usedItem )
	{
		uint pid = usedItem.GetProtoId();
		
		for( uint i = 0, len = list.length(); i < len; i++ )
			if( list[i].check( pid ) )
			{
				string info = "Вы посадили: ";
				info += "|0xFFFF00 " + list[i].name;
				info += "|0x3CF800 .";
				_SubItem( usedItem, 1 );
				item.PLANT_TYPE = i + 1;
				inform( cr, info );
				cr.Say( SAY_EMOTE_ON_HEAD, "высаживает грибы" );
				return list[i].start( item );
			}
		
		inform( cr, "|0xFFFF00 Это не подходит для грибницы. Попробуйте найти взрослые здоровые грибы.");
		return false;
	}

	bool grow( Item& item )
	{
		int index = item.PLANT_TYPE - 1;
		if( !has( index ) ) return true;
		
		return list[index].grow( item );
	}
	
	bool harvest( Critter& cr, Item& item )
	{
		int index = item.PLANT_TYPE - 1;
		if( !has( index ) ) return true;
		
		return list[index].harvest( cr, item );
	}
}

void cleanBed( Item& item )
{
	imitateObject( item, PID_MUSHBED_EMPTY );

	item.GROW_STAGE = 0;
	item.FERTILITY = 0;
	item.WATERING = 0;
	item.RESOURCE_CAPACITY = 0;
	item.PLANT_TYPE = 0;
	
	if( item.TIME_EVENT != 0 )
	{
		EraseTimeEvent( item.TIME_EVENT );
		item.TIME_EVENT = 0;
	}
}

class MushroomStage
{
	uint pid_bed;
	uint pid_self;
	
	MushroomStage( uint bed, uint self )
	{
		pid_bed = bed;
		pid_self = self;
	}
	
	bool setBed( Item& item )
	{
		imitateObject( item, pid_bed );
		
		return true;
	}
}

class Mushroom
{
	string name;
	uint pid_source;
	MushroomStage@[] stages;
	
	Mushroom( uint source, string name ) 
	{
		pid_source = source;
		this.name = name;
	}
	
	Mushroom@ stage( uint bed, uint self ) { return stage( MushroomStage( bed, self ) ); }	
	Mushroom@ stage( MushroomStage@ stage )
	{
		stages.insertLast( stage );
		
		return this;
	}
	
	bool check( uint pid )
	{
		return pid == pid_source;
	}

	bool start( Item& item )
	{
		if( !valid( stages ) || stages.length() != 3 ) return testInfo( "!valid stage for " + pid_source );

		uint[] values = { item.Id };
		item.TIME_EVENT = CreateTimeEvent( __FullSecond + getStageTime( item ), "e_grow", values, true );		
		
		item.GROW_STAGE = 0;
		item.RESOURCE_CAPACITY ++;
		return true;
	}
	
	bool grow( Item& item )
	{
		if( !valid( stages ) || stages.length() != 3 ) return testInfo( "!valid stage for " + pid_source );
		
		item.GROW_STAGE++;
		int stage = item.GROW_STAGE - 1;
		
		if( stage == 0 && ( item.WATERING == 0 || item.FERTILITY == 0 ) )
		{
			cleanBed( item );
			return false;
		}
		
		if( item.WATERING > 0 )
			item.WATERING--;
		
		if( item.FERTILITY > 0 )
			item.FERTILITY--;
		
		stages[stage].setBed( item );
		
		if( item.GROW_STAGE >= 3 )
			return false;
		
		return true;		
	}
	
	bool harvest( Critter& cr, Item& item )
	{
		if( !valid( stages ) || stages.length() != 3 ) return testInfo( "!valid stage for " + pid_source );
		
		if( item.GROW_STAGE == 0 || item.RESOURCE_CAPACITY == 0 ) return true;

		cr.AddItem( stages[item.GROW_STAGE - 1].pid_self, item.RESOURCE_CAPACITY );
		
		if( Random( 1, 2 ) == 1 ) {
			int skillNum = SK_FARMING;
			raiseSkill( cr, skillNum );
		}
		
		return true;
	}
}

uint e_grow( uint[] @ values )
{
	if( !valid( values ) || values.length() != 1 )
		return 0;

	Item@ item = GetItem( values[ 0 ] );
	if( !valid( item ) ) return 0;

	int stage = item.GROW_STAGE - 1;
	
	if( !mushrooms.grow( item ) ) return 0;
		
	if( stage == 0 || item.WATERING == 0 ) {
		return getStageTime( item );
	} else {
		return getStageTime( item ) / 2;
	}
}

bool _Skill( Item& item, Critter& cr, int skill )
{
	switch( skill )
	{
		case( SKILL_PICK_ON_GROUND ): return menu( item, cr );
		case( SK_SCIENCE ): watering( item, cr );  return true; 
		case( SK_REPAIR ):  fertilize( item, cr ); return true;
		case( SK_TRAPS ):   
			if( isClean( item ) ) 
			{
				cleanBed( item ); 
				MoveItem( item, item.GetCount(), cr );
			}
			else
				cleanup( item, cr );
			
			return true;
	}
	
	cr.Say( SAY_NETMSG, "|0xFFFF00 У вас ничего не вышло." );
	
	return true;
}

uint[][] waters = {
	{ PID_GLASS_BOTTLE_FULL, PID_BOTTLE_GLASS },
	{ PID_GLASS_BOTTLE_DIRTY_FULL, PID_BOTTLE_GLASS }
};

bool watering( Item& item, Critter& cr, bool TMI = true )
{
	for( uint i = 0, len = waters.length(); i < len; i++ )
		if( waters[i].length() == 2 && cr.CountItem( waters[i][0] ) > 0 )
			return watering( item, cr, cr.GetItem( waters[i][0], -1 ), TMI );
		
	return inform( cr, "|0xFFFF00 У вас нет воды.", false, TMI );
}

bool watering( Item& item, Critter& cr, Item@ water, bool TMI = true )
{
	if( !valid( water ) )
		return inform( cr, "|0xFFFF00 У вас нет подходящей воды.", false, TMI );
	
	uint pid = water.GetProtoId();
	
	bool found = false;
	
	for( uint i = 0, len = waters.length(); i < len; i++ )
		if( waters[i].length() == 2 && waters[i][0] == pid )
		{
			found = true;
			cr.AddItem( waters[i][1], 1 );
			break;
		}
	
	if( !found )
		return false;
	
	_SubItem( water, 1 );	
	
	if( item.WATERING == 0 ) {
		if( Random( 1, 2 ) == 1 ) {
			int skillNum = SK_FARMING;
			raiseSkill( cr, skillNum );
		}
	}
	
	item.WATERING++;
	return action( cr, "поливает" );
}

bool fertilize( Item& item, Critter& cr )
{
	if( cr.CountItem( PID_SHIT_SMALL ) > 0 ) {
		return fertilize( item, cr, cr.GetItem( PID_SHIT_SMALL, -1 ) );
	}
	
	if( cr.CountItem( PID_SHIT_BIG ) > 0 ) {
		return fertilize( item, cr, cr.GetItem( PID_SHIT_BIG, -1 ) );
	}
	
	if( cr.CountItem( PID_SHIT_HUGE ) > 0 ) {
		return fertilize( item, cr, cr.GetItem( PID_SHIT_HUGE, -1 ) );
	}
	
	return inform( cr, "|0xFFFF00 У вас нет удобрений.", false );
}

bool fertilize( Item& item, Critter& cr, Item@ usedItem, bool TMI = true )
{
	if( !valid( usedItem ) ) {
		return inform( cr, "|0xFFFF00 Ваши удобрения не подходят.", false, TMI );
	}
	
	uint pid = usedItem.GetProtoId();
	
	if( pid != PID_SHIT_SMALL && pid != PID_SHIT_BIG && pid != PID_SHIT_HUGE ) {
		return inform( cr, "|0xFFFF00 Вы не смогли удобрить растение.", false, TMI );
	}
	
	cr.ParamBase[ CR_DIRTINESS ] += Random( 0, 3 );
	_SubItem( usedItem, 1 );
	
	if( item.FERTILITY == 0 ) {
		int amount = 0;
		amount += ( cr.ParamBase[ SK_FARMING ] / 50 );
		IncreaseCrop( item, amount );

		if( Random( 1, 2 ) == 1 ) {
			int skillNum = SK_FARMING;
			raiseSkill( cr, skillNum );
		}
	}
	
	Map@ map = cr.GetMap();	
	map.PlaySound( "ROBE.ACM", cr.HexX, cr.HexY, 2 );	
	
	item.FERTILITY += 1;
		
	return action( cr, "удобряет растение" );
}

bool cleanup( Item& item, Critter& cr )
{
	mushrooms.harvest( cr, item );

	cleanBed( item );

	return true;
}

bool menu( Item& item, Critter& cr )
{
	string stage = "Мутант";

	if( isClean( item ) ) {
		stage = "Грядка пуста.";
	} else {

		string[] stage_names = { "Мицеллярный", "Проросший", "Растущий", "Выросший" };
		if( BETWEEN( item.GROW_STAGE, 0, int( stage_names.length() - 1 ) ) )
			stage = stage_names[item.GROW_STAGE];		
		
		if( mushrooms.has( item.PLANT_TYPE - 1 ) )
			stage += " " + mushrooms.name( item.PLANT_TYPE - 1 ) + ".";
	}
	
	cr.ParamBase[CR_VAL0] = int( item.Id );
	
	string[] data = { 
		"mushroom@answer_CHECKOUT", 
		"Информация о грядке:\n" 
		+ "\nСтадия роста: " + stage
		+ "\nУрожайность: " + item.RESOURCE_CAPACITY
		+ "\nПолито: " + ( item.WATERING < 1 ? "нет" : "да" )
		+ "\nУдобрено: " + ( item.FERTILITY < 1 ? "нет" : "да" ), 
			"Поли" + ( item.WATERING < 1 ? "ть" : "то" ),
			"Удобр" + ( item.FERTILITY < 1 ? "ить" : "ено" ),
			isClean( item ) ? "Поднять грядку" : "Собрать грибы" };
	DIALOG_MENU( cr, data );
	
	return true;
}

void answer_CHECKOUT( Critter& cr, uint answerI, string& answerS )
{
	Item@ item = GetItem( cr.ParamBase[CR_VAL0] );
	if( !valid( item ) ) 
	{
		inform( cr, "Киньте скриншот в канал дискорда #баги, указав что конкретно вы сделали перед появлением этого сообщения." );
		return;
	}

	switch( answerI )
	{
		case( 0 ): watering( item, cr ); 	    break;
		case( 1 ): fertilize( item, cr );		break;
		case( 2 ): 
			if( isClean( item ) ) 
			{
				cleanBed( item ); 
				MoveItem( item, item.GetCount(), cr );
			}
			else
				AskRemove( cr, item.Id );
			
			return;
		default: break;
	}
	
	menu( item, cr );
}

bool AskRemove( Critter& cr, uint targetId )
{
	cr.ParamBase[CR_VAL0] = targetId;
	
	cr.ShowScreen( SCREEN_DIALOGBOX, 1, "mushroom@answer_REMOVE" );
	cr.Say( SAY_DIALOGBOX_TEXT, "Вы уверены?" );
	cr.Say( SAY_DIALOGBOX_BUTTON( 0 ), "да" );
	return true;
}

void answer_REMOVE( Critter& cr, uint answerI, string& answerS )
{
	cleanup( GetItem( cr.ParamBase[CR_VAL0] ), cr );
}

void imitateObject( Item& item, uint pid )
{
	item.Info = 1;
	item.Val9 = pid;
	
	uint mapHash = 0, invHash = 0;
	ProtoItem@ proto = GetProtoItem( pid );
	if( @proto !is null ) {
        mapHash = proto.PicMap;
        invHash = proto.PicInv;
    }		
	
	if( mapHash != 0 )
	{
		item.PicMap = mapHash;
        item.PicInv = ( 0 == invHash || 1130487561 == invHash ) ? mapHash : invHash; 
		//Это ещё че за хэши такие злые? Ладно там ноль, а второй - это [error] что-ли? Да, КЭП.
	}
	
	item.Update();
}