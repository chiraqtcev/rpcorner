// context menu callbacks
// pm

#include "_macros.fos"
#include "_client_defines.fos"

// import bool critter_use_item(Critter& cr, Item& item, Critter@ targetCr, Item@ targetItem, Scenery@ targetScen, uint param) from "main";
/*
   CHOSEN_USE_ITEM
   [3] - object type (2 - critter, 3 - item, 4 - scen)
 */
void ScreenBag( Critter& cr, uint answerI, string& answerS )
{
    SetActionsArray( cr, CHOSEN_USE_ITEM, answerI, 0, cr.StatBase[ ST_OBJECT_TYPE ], cr.StatBase[ ST_LAST_CRIT_ID ], 4, 0 );
}

void ScreenSkillbox( Critter& cr, uint answerI, string& answerS )
{
    switch( cr.StatBase[ ST_OBJECT_TYPE ] )
    {
    case OBJECT_CRITTER:
        SetActionsArray( cr, CHOSEN_USE_SKL_ON_CRITTER, answerI, cr.StatBase[ ST_LAST_CRIT_ID ], 0, 0, 0, 0 );
        break;
    case OBJECT_ITEM:
        SetActionsArray( cr, CHOSEN_USE_SKL_ON_ITEM, 0, answerI, cr.StatBase[ ST_LAST_CRIT_ID ], 0, 0, 0 );
        break;
    case OBJECT_SCENERY:
        SetActionsArray( cr, CHOSEN_USE_SKL_ON_ITEM, 0, answerI, cr.StatBase[ ST_LAST_CRIT_ID ], 0, 0, 0 );
        break;
    // case OBJECT_SCENERY : SetActionsArray(cr, CHOSEN_USE_SKL_ON_SCEN, 0, answerI, cr.StatBase[ST_LAST_CRIT_ID], 0, 0, 0); break;
    default:
        cr.Say( SAY_NETMSG, "same error here" );
        break;
    }
}

void Actions( Critter& cr, uint8 actionType, uint16 pickType )
{
    Critter @ target = GetCritter( cr.StatBase[ ST_LAST_CRIT_ID ] );

    switch( actionType )
    {
    case ACTION_PICK_ITEM:
        if( cr.StatBase[ ST_ITEM_PID ] == 0 || cr.StatBase[ ST_ITEM_HEXX ] == 0 || cr.StatBase[ ST_ITEM_HEXY ] == 0 )
        {
            cr.Say( SAY_NETMSG, "oops, i did it again" );
            return;
        }
        SetActionsArray( cr, CHOSEN_PICK_ITEM, cr.StatBase[ ST_ITEM_PID ], cr.StatBase[ ST_ITEM_HEXX ], cr.StatBase[ ST_ITEM_HEXY ], 0, 0, 0 );
        break;

    case ACTION_DIR:
        SetActionsArray( cr, CHOSEN_DIR, 1, 0, 0, 0, 0, 0 );
        break;

    case ACTION_PICK_CRITTER:
        if( @target == null )
        {
            cr.Say( SAY_NETMSG, "oops, i did it again" );
            return;
        }
        SetActionsArray( cr, CHOSEN_PICK_CRIT, target.Id, pickType, 0, 0, 0, 0 );
        break;

    case ACTION_TALK:
        SetActionsArray( cr, CHOSEN_TALK_NPC, cr.StatBase[ ST_LAST_CRIT_ID ], 0, 0, 0, 0, 0 );
        break;

    case ACTION_FAST:
        switch( cr.StatBase[ ST_OBJECT_TYPE ] )
        {
        case OBJECT_CRITTER:
            SetActionsArray( cr, CHOSEN_USE_SKL_ON_CRITTER, pickType, cr.StatBase[ ST_LAST_CRIT_ID ], 0, 0, 0, 0 );
            break;
        case OBJECT_ITEM:
            SetActionsArray( cr, CHOSEN_USE_SKL_ON_ITEM, 0, pickType, cr.StatBase[ ST_LAST_CRIT_ID ], 0, 0, 0 );
            break;
        case OBJECT_SCENERY:
            SetActionsArray( cr, CHOSEN_USE_SKL_ON_ITEM, 0, pickType, cr.StatBase[ ST_LAST_CRIT_ID ], 0, 0, 0 );
            break;
        // case OBJECT_SCENERY : SetActionsArray(cr, CHOSEN_USE_SKL_ON_SCEN, 0, answerI, cr.StatBase[ST_LAST_CRIT_ID], 0, 0, 0); break;
        default:
            cr.Say( SAY_NETMSG, "same error here" );
            break;
        }
    }
}
/*
   void ActionRotate(Critter& cr)
   {
        SetActionsArray(cr, CHOSEN_DIR, 1, 0, 0, 0, 0, 0);
   }

   void ActionPickCrit(Critter& cr, uint8 type)
   {
        Critter @ target = GetCritter(cr.StatBase[ST_LAST_CRIT_ID]);
        if(@target == null) {cr.Say(SAY_NETMSG, "oops, i did it again"); return;}
        SetActionsArray(cr, CHOSEN_PICK_CRIT, target.Id, type, 0, 0, 0, 0);
   }

   void ActionPickItem(Critter& cr)
   {
        //Item @ item = GetItem(cr.StatBase[ST_LAST_CRIT_ID]);
        if(cr.StatBase[ST_ITEM_PID] == 0 || cr.StatBase[ST_ITEM_HEXX] == 0 || cr.StatBase[ST_ITEM_HEXY] == 0) {cr.Say(SAY_NETMSG, "oops, i did it again"); return;}
        SetActionsArray(cr, CHOSEN_PICK_ITEM, cr.StatBase[ST_ITEM_PID], cr.StatBase[ST_ITEM_HEXX], cr.StatBase[ST_ITEM_HEXY], 0, 0, 0);

   }

   void ActionTalk(Critter& cr)
   {
   }
 */
void SetActionsArray( Critter& cr, uint p0, uint p1, uint p2, uint p3, uint p4, uint p5, uint p6 )
{
    int[] actions = { p0, p1, p2, p3, p4, p5, p6 };
    cr.RunClientScript( "client_screen_contmenu@SetActions", 0, 0, 0, "", actions );
    // cr.Say(SAY_NETMSG, "bag lauched");
}
