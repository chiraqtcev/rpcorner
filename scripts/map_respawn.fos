// Dungeon-type map respawn by Kriegwolf
// Please note that it may conflict with other scripts that use a data index of 2
// If you want it to work with other scripts that might use the data index of 2,
// Change the MAP_RESPAWN_INITED_INDEX to any free index (from 0 to 63)

#include "_macros.fos"

#define MAP_RESPAWN_TIME (1000) //(6*3600*1000)
#define MAP_RESPAWN_INITED_INDEX (2)

import void DropBleed (Critter& cr) from "critter_status";

void initRespawnLoop (Map& map, bool firstTime) {
	map.SetData (MAP_RESPAWN_INITED_INDEX, 0);
	map.SetEvent (MAP_EVENT_IN_CRITTER, "startLoop");
}

uint mapRespawn (uint[]@ values) {
	Map@ map = GetMap (values [0]);
	bool noPlayers = (map.GetCritters (0, FIND_LIFE | FIND_ONLY_PLAYERS, null) == 0);
	if (noPlayers && map.GetData (MAP_RESPAWN_INITED_INDEX) == 1) {
		Critter@ [] npcs;
		map.GetCritters (0, FIND_ALL | FIND_ONLY_NPC, npcs);
		bool allClear = false;
		uint npcLength = npcs.length ();
		while (!allClear) {
			uint i = 0;
			allClear = true;
			while (i < npcLength) {
				if (!respawnNpc (npcs [i])) allClear = false;
				i ++;
			}
		}
		map.SetData (MAP_RESPAWN_INITED_INDEX, 0);
		return 0;
	} else {
		return 2;
	}
}

void startLoop (Map& map, Critter& cr) {
	if (map.GetData (MAP_RESPAWN_INITED_INDEX) == 0) {
		map.SetData (MAP_RESPAWN_INITED_INDEX, 1);
		//cr.Say (SAY_NETMSG, "Вы инициировали данж");	
	}
	CreateTimeEvent (__FullSecond + MAP_RESPAWN_TIME, "mapRespawn", map.Id, false);
}

bool respawnNpc (Critter& cr) {
	uint mapId = 0;
	uint16 hexX = 0, hexY = 0;
	uint8 dir = 0;
	cr.GetHomePos (mapId, hexX, hexY, dir);
	cr.TransitToHex (hexX, hexY, dir);
	bool success = cr.ToLife ();
	//Log ("Respawning critter " + cr.Id + ", result: " + success);
	cr.StatBase [ST_CURRENT_HP] = cr.Stat [ST_MAX_LIFE];
	/*
	int i = BP_LIMBS_BEGIN;
	while (i <= BP_LIMBS_END) {
		cr.ParamBase [i] = 0;
		i ++;
	}
	*/
	cr.ParamBase [BP_BLOOD_LOSS] = 0;
	DropBleed (cr);
	uint i = DAMAGE_BEGIN;
	while (i <= DAMAGE_END) {
		cr.DamageBase [i] = 0;
		i ++;
	}
	return success;
}
