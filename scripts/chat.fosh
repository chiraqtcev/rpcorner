#include "_defines.fos"
#include "_colors.fos"
#include "_macros.fos"
/*
imports:
    COLOR_CHAT_SYSTEM
    COLOR_CHAT_WHISPER
    COLOR_CHAT_NORMAL
    COLOR_CHAT_LOUD
    COLOR_CHAT_SHOUT
    COLOR_CHAT_RADIO
    COLOR_CHAT_EMOTE
    FLAG
*/
/*
    @TODO:
    - в некоторые автоэмоуты вшиты коды цветов из-за чего при деградации по громкости и удаления "|" они становятся видимыми, добавить все автоэмоуты в игнор либо переписать их
    - рации палят коды громкости обычной речи, добавить форматирование для раций
    - добавить возможность отключить либо настроить цветовую схему чата

*/

#define VOLUME_WHISPER (3)
#define VOLUME_NORMAL (10)
#define VOLUME_LOUD   (50)
#define VOLUME_SHOUT  (70)

shared class MessageHandler
{
    bool resolve(uint& critterID, string& text, uint8& volume, int& sayType)
    {
        ::Message("Text: " + text + "|0xFF00FF00 ;\n Volume: " + volume + ";\n CritterID: " + critterID + ";\n SayType: " + sayType);
        return false; // do not fire more event handlers if true
    }
}

shared class ChatExpression
{
    string   Text;
    uint8    Volume;
    SayType@ SayType;
    bool     IsRadio;

    bool MatchesWith(ChatExpression@ right) {
        return this.Volume == right.Volume && this.SayType.SayType == right.SayType.SayType && this.IsRadio == right.IsRadio;
    }

    ChatExpression(string text, uint8 volume, SayType@ sayType)
    {
        this.IsRadio = false;
        this.Text = text;
        this.Volume = volume;
        @this.SayType = sayType;
    }

    ChatExpression@ SetRadio(bool value) 
    {
        this.IsRadio = value;
        return this;
    }
    
    ChatExpression@ SetText(string text)
    {
        this.Text = text;
        return this;
    }

    ChatExpression@ SetVolume(uint8 volume)
    {
        this.Volume = volume;
        return this;
    }

    ChatExpression@ SetSayType(int sayType)
    {
        return this.SetSayType(SayType(sayType));
    }

    ChatExpression@ SetSayType(SayType@ sayType)
    {
        @this.SayType = sayType;
        return this;
    }

    string getColorTag()
    {
        if (this.IsRadio || this.SayType.IsRadio()) {
            if (this.SayType.IsEmote()) {
                return "|" + 0xFFAAAAAA + " ";
            } 
            float position = sqrt( float(this.Volume - VOLUME_WHISPER) / (VOLUME_SHOUT - VOLUME_WHISPER) );
            return "|" + COLOR_CHAT_RADIO + " ";
        }
        else if (this.SayType.IsSpeech()) {
            // whisper
            if (this.Volume <= VOLUME_WHISPER) {
                return "|" + COLOR_CHAT_WHISPER + " ";
            }
            // whisper to normal
            else if (this.Volume <= VOLUME_NORMAL) {
                float position = sqrt( float(this.Volume - VOLUME_WHISPER) / (VOLUME_NORMAL - VOLUME_WHISPER) );
                return "|" + this.getGradientColor(position, COLOR_CHAT_WHISPER, COLOR_CHAT_NORMAL) + " ";
            }
            // normal to loud
            else if (this.Volume <= VOLUME_LOUD) {
                float position = float(this.Volume - VOLUME_NORMAL) / (VOLUME_LOUD - VOLUME_NORMAL);
                return "|" + this.getGradientColor(position, COLOR_CHAT_NORMAL, COLOR_CHAT_LOUD) + " ";
            }
            // loud to shout
            else if (this.Volume <= VOLUME_SHOUT) {
                float position = float(this.Volume - VOLUME_LOUD) / (VOLUME_SHOUT - VOLUME_LOUD);
                return "|" + this.getGradientColor(position, COLOR_CHAT_LOUD, COLOR_CHAT_SHOUT) + " ";
            }
            // shout
            return "|" + COLOR_CHAT_SHOUT + " ";
        } 
        else if (this.SayType.IsEmote()) {
            return "|" + COLOR_CHAT_EMOTE + " ";
        }
        return "";
    }

    // cant use colors.fos __GetGradient since it is not a shared function
    uint getGradientColor(float position, uint fromColor, uint toColor)
    {
        array<uint> channels = {
            // from
            uint((fromColor & 0xFF000000) >> 24),
            uint((fromColor & 0x00FF0000) >> 16),
            uint((fromColor & 0x0000FF00) >> 8),
            uint(fromColor & 0x000000FF),
            // to
            uint((toColor & 0xFF000000) >> 24),
            uint((toColor & 0x00FF0000) >> 16),
            uint((toColor & 0x0000FF00) >> 8),
            uint(toColor & 0x000000FF),
            // position
            uint(0),
            uint(0),
            uint(0),
            uint(0)
        };
        for (uint i = 0; i < 4; i++) {
            if (channels[i] <= channels[i+4]) {
                channels[i+8] = CLAMP(channels[i] + uint(float(channels[i+4] - channels[i]) * position), channels[i], channels[i+4]);
            } else {
                channels[i+8] = CLAMP(channels[i+4] + uint(float(channels[i] - channels[i+4]) * (1 - position)), channels[i+4], channels[i]);
            }
        }
        return (channels[8] << 24) | (channels[9] << 16) | (channels[10] << 8) | channels[11];
    }

    string InMessage()
    {
        return this.FormatInMessage(this.Text);
    }

    string FormatInMessage(string message)
    {
        if (this.SayType.IsSpeech()) {
            if (this.Volume <= VOLUME_WHISPER) {
                return this.getColorTag() + /*".." +*/ message /*+ ".."*/;
            } 
            else if (this.Volume >= VOLUME_SHOUT) {
                return this.getColorTag() + message /*+ "!"*/;
            }
            else if (this.IsRadio || this.SayType.IsRadio()) {
                return this.getColorTag() + message + "|" + COLOR_CHAT_RADIO + " ";
            }
            return this.getColorTag() + message;
        }
        else if (this.SayType.IsEmote()) {
             if (this.IsRadio || this.SayType.IsRadio()) {
                return this.getColorTag() + "**" + message + "**|" + COLOR_CHAT_RADIO + " ";
             } else {
                return this.getColorTag() + "**" + message + "**";
             }
        }
        return message;
    }

    string OutMessage()
    {
        return this.FormatOutMessage(this.Text);
    }

    string FormatOutMessage(string message)
    {
        if (this.SayType.IsSpeech()) {
            if (this.Volume <= VOLUME_WHISPER) {
                return "--" + message + "--";
            } 
            else if (this.Volume >= VOLUME_LOUD) {
                return "++" + message + "++";
            }
            return "//" + this.Volume + " " + message;
        } 
        else if (this.SayType.IsEmote()) {
            return "*" + message + "*";
        }
        return message;
    }
}

shared class SayType
{
    int SayType;

    SayType(int sayType) 
    {
        this.SayType = sayType;
    }

    int opImplConv()
    {
        return this.SayType;
    }

    bool IsShout()
    {
        switch (this.SayType) {
            case SAY_SHOUT:
            case SAY_SHOUT_ON_HEAD:
                return true;
        }
        return false;
    }

    bool IsWhisp()
    {
        switch (this.SayType) {
            case SAY_WHISP:
            case SAY_WHISP_ON_HEAD:
                return true;
        }
        return false;
    }

    bool IsSpeech()
    {
        switch (this.SayType) {
            case SAY_WHISP:
            case SAY_WHISP_ON_HEAD:
            case SAY_NORM:
            case SAY_NORM_ON_HEAD:
            case SAY_SHOUT:
            case SAY_SHOUT_ON_HEAD:
                return true;
        }
        return false;
    }

    int ToOnHead()
    {
        switch(this.SayType) {
            case SAY_WHISP: return SAY_WHISP_ON_HEAD;
            case SAY_NORM: return SAY_NORM_ON_HEAD;
            case SAY_SHOUT: return SAY_SHOUT_ON_HEAD;
            case SAY_EMOTE: return SAY_EMOTE_ON_HEAD;
        }
        return this.SayType;
    }

    bool IsEmote()
    {
        switch (this.SayType) {
            case SAY_EMOTE:
            case SAY_EMOTE_ON_HEAD:
                return true;
        }
        return false;
    }

    int Normalized()
    {
        switch (this.SayType) {
            case SAY_SHOUT:
            case SAY_NORM:
            case SAY_WHISP:
            case SAY_SHOUT_ON_HEAD:
            case SAY_NORM_ON_HEAD:
            case SAY_WHISP_ON_HEAD:
                return SAY_NORM;
            case SAY_EMOTE:
            case SAY_EMOTE_ON_HEAD:
                return SAY_EMOTE;
        }
        return this.SayType;
    }

    int Unformatted()
    {
        switch (this.SayType) {
            case SAY_SHOUT:
            case SAY_NORM:
            case SAY_WHISP:
                return SAY_NORM;
            case SAY_SHOUT_ON_HEAD:
            case SAY_NORM_ON_HEAD:
            case SAY_WHISP_ON_HEAD:
                return SAY_NORM_ON_HEAD;
            case SAY_EMOTE:
                return SAY_EMOTE;
            case SAY_EMOTE_ON_HEAD:
                return SAY_EMOTE_ON_HEAD;
        }
        return this.SayType;
    }

    bool IsOnHead()
    {        
        switch (this.SayType) {
            case SAY_EMOTE_ON_HEAD:
            case SAY_WHISP_ON_HEAD:
            case SAY_SHOUT_ON_HEAD:
                return true;
        }
        return false;
    }

    string Tag()
    {        
        switch (this.SayType) {
            case SAY_EMOTE_ON_HEAD:
            case SAY_EMOTE: 
                return "*";
            case SAY_WHISP_ON_HEAD:
            case SAY_WHISP: 
                return "--";
            case SAY_SHOUT_ON_HEAD:
            case SAY_SHOUT: 
                return "++";
        }
        return "";
    }

    bool IsSystem()
    {
        switch (this.SayType) {
            case SAY_NORM:
            case SAY_NORM_ON_HEAD:
            case SAY_SHOUT:
            case SAY_SHOUT_ON_HEAD:
            case SAY_EMOTE:
            case SAY_EMOTE_ON_HEAD:
            case SAY_WHISP:
            case SAY_WHISP_ON_HEAD:
            case SAY_RADIO:
                return false;
        }
        return true;
    }

    bool IsRadio()
    {
        return this.SayType == SAY_RADIO;
    }

    int Raw()
    {
        return this.SayType;
    }
}

shared class ChatMessage
{
    uint CritterID;
    SayType@ SayType;
    string Message;
    private array<ChatExpression@> Expressions;
    private array<MessageHandler@> InMessageHandlers;
    private array<MessageHandler@> OutMessageHandlers;

    ChatMessage(string message, int sayType, int senderCritterID)
    {
        this.Load(message, sayType, senderCritterID);
    }

    ChatMessage@ OnInMessage(MessageHandler@ handler)
    {
        this.InMessageHandlers.insertLast(handler);
        return this;
    }

    ChatMessage@ OnOutMessage(MessageHandler@ handler)
    {
        this.OutMessageHandlers.insertLast(handler);
        return this;
    }

    uint8 getCritterDefaultVolume(int critterID)
    {
        if (this.SayType.IsEmote()) {
            return 0;
        }
        else if (this.SayType.IsWhisp()) {
            return VOLUME_WHISPER;
        }
        else if (this.SayType.IsShout()) {
            return VOLUME_SHOUT;
        }

        uint8 volume = 50;
        CritterCl@ sender = GetCritter( critterID );
        if (null is sender) {
            return 15;
        }

        volume = CLAMP( sender.StatBase[ ST_TALK_DISTANCE ], 1, 50 );
        return volume;
    }

    uint Trim(string& text, uint trimmed) {
        if ("" == text) return 0;

        uint max = text.length(), min = 0;
        while (min < max && trimmed == text[min]) min++;
        while (max > min && trimmed == text[max - 1]) max--;
        text = substring(text, min, max - min);
        return text.length();
    }

    void Load(string message, int sayType, int senderCritterID)
    {
        if ("" == message) return;

        @this.SayType = SayType(sayType);
        bool isRadio = this.SayType.IsRadio();

        // Do not attempt to parse or modify system messages
        if (this.SayType.IsSystem()) {
            this.Expressions.insertLast(ChatExpression(message, 0, this.SayType));
            return;
        }

        this.CritterID = senderCritterID;
        this.Message = message;
        uint8 defaultVolume = this.getCritterDefaultVolume(senderCritterID);
        int normalizedSayType = this.SayType.Normalized();

        array<string> messageContext = {""};
        array<string> tagContext = {this.SayType.Tag()};
        array<int> typeContext = {normalizedSayType};
        array<uint8> volumeContext = {defaultVolume};
        uint i = 0, length = message.length(), position = 0;

        if (length >= 2 && (message[0] == '/' || message[0] == '.')) {
            uint8 ch = message[1];
            int sayTypeOverride = 0;
            if(ch == 234 || ch == 202 || ch == 's' || ch == 'S' ) { // к
                sayTypeOverride = SAY_SHOUT;
                volumeContext[0] = defaultVolume = VOLUME_SHOUT;
            }
            else if( ch == 253 || ch == 221 || ch == 'e' || ch == 'E' ) { // э
                 sayTypeOverride = SAY_EMOTE;
                 volumeContext[0] = defaultVolume = 0;
            }
            else if( ch == 248 || ch == 216 || ch == 'w' || ch == 'W' ) {// ш
                sayTypeOverride = SAY_WHISP; 
                volumeContext[0] = defaultVolume = VOLUME_WHISPER;
            }
            /*
            else if( ch == 241 || ch == 209 || ch == '$') { // с
                sayTypeOverride = SAY_SOCIAL; 
            }
            */
            else if( ch == 240 || ch == 208	|| ch == 'r' || ch == 'R' ) { // р
                sayTypeOverride = SAY_RADIO; 
                isRadio = true;
            }
            if (0 != sayTypeOverride) {
                typeContext[0] = this.SayType.SayType = normalizedSayType = sayTypeOverride;
                message = substring(message, 2, length - 2);
                length -= 2;
            }
        }

        bool volumeChanged = false;

        do {
            bool isClosingTag = false;

            // Detect inline " *emote* "
            if (message[i] == '*') {
                if (i + 1 < length && message[i+1] == '*') {
                    i += 1; // process **moo** like *moo*
                }
                // is closing tag
                if (tagContext[position] == "*") { 
                    isClosingTag = true;
                } 
                // is opening tag
                else { 
                    // record emote
                    tagContext.insertLast("*");
                    messageContext.insertLast("");
                    typeContext.insertLast(SAY_EMOTE);
                    volumeContext.insertLast(0);
                    position += 1;
                    volumeChanged = true;
                    continue;
                }
            }

            // Detect inline " --whisper-- "
            if (
                message[i] == '-' && i + 1 < length && message[i + 1] == '-' // has --
                && (
                    i == 0
                    || (message[i-1] != '-')
                )
                && (
                    i + 2 >= length // is end of message
                    || (message[i + 2] != '-') // or has no - as next symbol
                )
            ) {
                i += 1;

                // is closing tag
                if (tagContext[position] == "--") {
                    isClosingTag = true;
                }
                // is opening tag
                else {
                    // record whisper
                    tagContext.insertLast("--");
                    messageContext.insertLast("");
                    typeContext.insertLast(SAY_WHISP);
                    volumeContext.insertLast(VOLUME_WHISPER);
                    position += 1;
                    volumeChanged = true;
                    continue;
                }
            }

            // Detect inline " ++shout++ "
            if (
                message[i] == '+' && i + 1 < length && message[i + 1] == '+' // has ++
                && (
                    i == 0
                    || (message[i-1] != '+')
                )
                && (
                    i + 2 >= length // is end of message
                    || (message[i + 2] != '+') // or has no + as next symbol
                )
            ) {
                i += 1;

                // is closing tag
                if (tagContext[position] == "++") {
                    isClosingTag = true;
                }
                // is opening tag
                else {
                    // record shout
                    tagContext.insertLast("++");
                    messageContext.insertLast("");
                    typeContext.insertLast(SAY_NORM);
                    volumeContext.insertLast(VOLUME_LOUD);
                    position += 1;
                    volumeChanged = true;
                    continue;
                }
            }

            // Detect current tag of any type being closed
            if (isClosingTag) {
                messageContext.insertLast("");
                // recover previous context parameters if present
                if (position > 0) {
                    typeContext.insertLast(typeContext[position - 1]);
                    volumeContext.insertLast(volumeContext[position - 1]);
                    tagContext.insertLast(tagContext[position - 1]);
                } 
                // otherwise generate a new context
                else {
                    if (this.SayType.IsEmote()) {
                        typeContext.insertLast(this.SayType.Raw());
                        tagContext.insertLast("*");
                    } else {
                        typeContext.insertLast(this.SayType.Raw());
                        tagContext.insertLast("");
                    }
                    volumeContext.insertLast(defaultVolume);
                }
                position += 1;
                volumeChanged = false;
                continue;
            }

            // Detect inline volume modifier " //256 "
            if (
                message[i] == '/' && i + 2 < length && message[i + 1] == '/'
                && (message[i + 2] >= '0' && message[i + 2] <= '9')
            ) {
                // start a new sentence if volume change occured and another one is coming
                if (volumeChanged) {
                    messageContext.insertLast("");
                    typeContext.insertLast(typeContext[position]);
                    volumeContext.insertLast(volumeContext[position]);
                    tagContext.insertLast(tagContext[position]);
                    position += 1;
                }

                uint8 volume = 0;
                if (i + 3 < length && (message[i + 3] >= '0' && message[i + 3] <= '9')) {
                    if (i + 4 < length && (message[i + 4] >= '0' && message[i + 4] <= '9')) {
                        volume = (message[i+2]-'0')*100 + (message[i+3]-'0')*10 + (message[i+4]-'0');
                        i += 4;
                    } else {
                        volume = (message[i+2]-'0')*10 + (message[i+3]-'0');
                        i += 3;
                    }
                } else {
                    volume = (message[i+2]-'0');
                    i += 2;
                }
                if (i + 1 < length && message[i+1] == ' ') {
                    i += 1;
                }
                volumeContext[position] = CLAMP(volume, VOLUME_WHISPER, VOLUME_SHOUT);
                volumeChanged = true;
                continue;
            }

            // Split on separate expressions by . ! ? ; and their combinations
            if (
                (message[i] == '.' || message[i] == '!' || message[i] == '?' || message[i] == ';')
                && ( typeContext[position] != SAY_EMOTE && typeContext[position] != SAY_EMOTE_ON_HEAD )
            ) {
                uint offset = 0;
                while (
                    (i + offset < length)
                    && (message[i + offset] == '.' || message[i + offset] == '!' || message[i + offset] == '?' || message[i + offset] == ';')
                ) {
                    offset += 1;
                }
                messageContext[position] += substring(message, i, offset);
                typeContext.insertLast(typeContext[position]);
                volumeContext.insertLast(volumeContext[position]);
                tagContext.insertLast(tagContext[position]);
                messageContext.insertLast("");
                position += 1;
                i += offset - 1;
                volumeChanged = false;
                continue;
            }

            messageContext[position] += substring(message, i, 1);
        } while (++i < length);

        for (uint i = 0, length = messageContext.length; i < length; i++) {
            // do not create empty expressions
            if (0 == this.Trim(messageContext[i], ' ') && !isRadio) continue;
            this.Expressions.insertLast(
                ChatExpression(
                    messageContext[i], 
                    volumeContext[i], 
                    SayType(typeContext[i])
                ).SetRadio(isRadio)
            );
        }
    }

    bool InMessage(string& message, int& sayType)
    {
        //::Message("<<"+message);
        if (0 == this.Expressions.length) return false;

        array<string@> messages;
        uint critterID = this.CritterID;
        
        bool isDummy = true;
        for (uint i = 0; i < this.Expressions.length; i++) {
            ChatExpression@ chatExpression = this.Expressions[i];
            string text = chatExpression.Text;
            if (text == "") continue;
            int sayType = chatExpression.SayType.Raw();
            uint8 volume = chatExpression.Volume;
            for (uint y = 0; y < this.InMessageHandlers.length; y++) {
                if (
                    this.InMessageHandlers[y].resolve(
                        critterID, 
                        text, 
                        volume, 
                        sayType
                    ) 
                    || text == ""
                ) break;
            }
            if (text == "") continue;

            for (uint i = 0, length = text.length(); i < length; i++) {
                if (' ' != text[i] && '.' != text[i]) {
                    isDummy = false;
                }
            }
            chatExpression.SayType.SayType = sayType;
            text = chatExpression.FormatInMessage(text);
            messages.insertLast(text);
        }

        if (messages.length == 0) return false;
        message = join(messages, " ");

        if (sayType == SAY_EMOTE) sayType = SAY_NORM;
        else if (sayType == SAY_EMOTE_ON_HEAD) sayType = SAY_NORM_ON_HEAD;

        if (isDummy) {
            sayType = SayType(sayType).ToOnHead();
        }

        return true;
    }

    bool OutMessage(string& message, int& sayType)
    {
        //::Message(">>"+message);
        if (0 == this.Expressions.length) return false;

        array<string@> messages;
        uint critterID = this.CritterID;
        uint8 maxVolume = 0;
        bool isRadio = sayType == SAY_RADIO;

        for (uint i = 0; i < this.Expressions.length; i++) {
            ChatExpression@ chatExpression = this.Expressions[i];
            string text = chatExpression.Text;
            int sayType = chatExpression.SayType.Raw();
            if (text == "" && sayType != SAY_RADIO) continue;
            uint8 volume = chatExpression.Volume;
            if (sayType == SAY_RADIO) isRadio = true;

            for (uint y = i + 1; y < this.Expressions.length && chatExpression.MatchesWith(this.Expressions[y]); y++) {
                text += (chatExpression.SayType.IsSpeech() || chatExpression.SayType.IsRadio() ? " " : "; ") + this.Expressions[y].Text;
                i++;
            }

            for (uint y = 0; y < this.OutMessageHandlers.length; y++) {
                if (
                    this.OutMessageHandlers[y].resolve(
                        critterID, 
                        text, 
                        volume, 
                        sayType
                    ) 
                    || text == ""
                ) break;
            }

            // todo: gluing similar messages after filtering
            
            if (text == "") continue;
            chatExpression.SayType.SayType = sayType;
            text = chatExpression.FormatOutMessage(text);
            messages.insertLast(text);
            if (volume > maxVolume) maxVolume = volume;
            if (sayType == SAY_RADIO) isRadio = true;
        }

        if (messages.length == 0) return false;
        message = join(messages, " ");
        for (uint i = 0; i < 30; i++) message = ReplaceText(message, "* *", "; "); // todo find a better way of doing this

        if (isRadio) {
            sayType = SAY_RADIO;
        }

        else if (maxVolume >= VOLUME_SHOUT && SayType(sayType).IsSpeech()) {
            sayType = SAY_SHOUT;
        }

        return true;
    }
}