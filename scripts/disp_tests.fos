Line@[] test_lines;

bool line_generated = false;
bool generateLine( int min, int max )
{
	if( line_generated ) return true;
	
	if( !valid( test_lines ) || test_lines.length() != 3 )
	{
		test_lines.insertLast( NewLine( "—ÛÏÏ‡:", NewColor( 0, 255, 0 ) ) );
		test_lines.insertLast( NewLine( "AGI", NewColor( 255, 0, 0 ) ) );
		test_lines.insertLast( NewLine( "END", NewColor( 125, 125, 255 ) ) );
	}
	
	Disp AGI = Disp( 5.0, 3.0 ).set( 10.0, 57.0 );
	Disp END = Disp( 5.0, 3.0 ).set( 10.0, 28.0 );
	
	float summ = 15.0;
	float sAGI = 0.0;
	float sEND = 0.0;
	
	for( int x = min; x <= max; x++ )
	{
		float dAGI = AGI.get(x*0.1) * 0.1;
		float dEND = END.get(x*0.1) * 0.1;
		
		summ += dAGI + dEND;
		sAGI += dAGI;
		sEND += dEND;
		
		test_lines[0].add( x, -summ );
		test_lines[1].add( x, -sAGI );
		test_lines[2].add( x, -sEND );

		if( x % 10 == 0 )
		{
			for( uint i = 0, l = test_lines.length(); i < l; i++ )
			{
				Dot@ spot = test_lines[i].last();
				string info = floor(x/10) + " : " + (-spot.y);
				
				@spot = spot.scale( _x0, _y0, __scale );
				triangle( spot );
				
				DrawText( info, spot, 5, 5 );
			}
		}
	}
	
	line_generated = true;
	return true;
}

const int _x0 = 100;
const int _y0 = 800;
float __scale = 7.0;

void Info_About_Line( int x0, int y0 )
{
	if( !valid( test_lines ) )
		return;

	float x = ( x0 - _x0 ) / __scale;
	float y = ( y0 - _y0 ) / __scale;
	
	Dot@ closest = null;
	
	float dist;
	float mindist = 10.0;
	for( uint i = 0, l = test_lines.length(); i < l; i++ )
	{
		Dot@ variant = test_lines[i].closest( x, y );
		if( !valid( variant ) ) continue;
		
		dist = variant.dist( x, y );
		if( dist < mindist )
		{
			mindist = dist;
			@closest = @variant;
		}
	}
	
	if( !valid( closest ) ) return;
	
	string subInfo = "[" + cutLesserDigits(x) + ", " + cutLesserDigits(y) + "] <" + cutLesserDigits( mindist ) + "> ";
	string info = closest.x*0.1 + " : " + (-closest.y);
	if( valid( closest.owner ) )
		info = closest.owner.name + " [" + info + "]";
	
	DrawText( info, x0 + 31, y0 + 24, 200, 20, closest.color.rgb(), FONT_FALLOUT, 0 );

	@closest = closest.scale( _x0, _y0, __scale );
	Dot@ cursor = NewDot( x, y, NewColor( 255, 255, 255 ) ).remap( _x0, _y0, __scale );
		
	triangle( cursor );
	triangle( closest );
	
	line( cursor, closest, NewColor( 125, 125, 125 ) );
}

void Draw_Test_Line()
{
	if( !valid( test_lines ) )
		return;

	for( uint i = 0, l = test_lines.length(); i < l; i++ )
		test_lines[i].draw( _x0, _y0, false, __scale );
}

void clearLine()
{
	if( !valid( test_lines ) )
		return;

	for( uint i = 0, l = test_lines.length(); i < l; i++ )
		test_lines[i].dots.clear();

	line_generated = false;
}