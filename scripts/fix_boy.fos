#define FIX_SUCCESS    ( FIXBOY_DEFAULT )
#define FIX_TIMEOUT    ( FIXBOY_DEFAULT ^ FIXBOY_SET_TIMEOUT )
#define FIX_FAIL       ( FIXBOY_DEFAULT ^ FIXBOY_ALLOW_CRAFT )

#include "_utils.fos"
#include "gathering_h.fos"
#include "critter_skills_h.fos"

string isTrue( bool value, string yes = "+", string no = "-" )
{
	return ( value ? yes : no );
}

#ifndef __FIXBOY_gm_craft_menu
#define __FIXBOY_gm_craft_menu

class CraftData
{
	uint owner;
	CraftItem@ data;
	
	CraftData( uint _owner, CraftItem@ _data )
	{
		owner = _owner;
		@data = _data;
	}
	
	void set( CraftData@ source )
	{
		if( !valid( source ) ) return;
		owner = source.owner;
		@data = source.data;
	}
	
	string toString()
	{
		string result = "[" + owner + "]";
		if( !valid( data ) ) {
			return result + " is null;";
		}
		
		uint16[] pids;
		uint[] values;
		uint count = data.GetOutItems( pids, values );
		
		for( uint i = 0; i < count; i++ ) {
			result += " #" + pids[i] + "x" + values[i];
		}
		return result;
	}
}

class DataHolder
{
	CraftData[] list;
	
	DataHolder()
	{
	}
	
	CraftItem@ item( uint owner )
	{
		CraftData@ craft = get( owner );
		return( valid( craft ) ? craft.data : null );
	}
	
	CraftData@ get( uint owner )
	{
		int index = get_index( owner );
		return( index == -1 ? null : list[index] );
	}
	
	int get_index( uint owner )
	{
		if( valid( list ) && list.length() > 0 )
			for( uint i = 0; i < list.length(); i++ )
				if( valid( list[i] ) && list[i].owner == owner )
					return i;
		return -1;
	}
	
	CraftData@ set( uint index, CraftData@ data )
	{
		if( index >= list.length() ) return null;
		
		list[index].set( data );
		return list[index];
	}
	
	int add( CraftData@ data )
	{
		if( !valid( data ) ) return -1;
		int index = get_index( data.owner );
		if( index == -1 ) 
		{
			list.insertLast( data );
			return list.length() - 1;
		}
		list[index].set( data );
		return index;
	}
	
	string toString()
	{
		string result = "Data holder contains " + list.length() + " items:";
		for( uint i = 0; i < list.length(); i++ )
			result += "\n" + i + ") " +  list[i].toString() + ";";
		return result;
	}
}
DataHolder crafts;

void assignCraft( Critter& cr, CraftItem& craft )
{
	crafts.add( CraftData( cr.Id, craft ) );
}

CraftItem@ GetCraftItem( Critter& cr )
{
	if( !valid( crafts ) )
		return null;
	
	return crafts.item( cr.Id );
}

void GetCraftItems( Critter& cr, int state, CraftItem& craft )
{
	if( state != FIXBOY_BUTTON || !isGM( cr ) )
		return;

	assignCraft( cr, craft );
	ask_GetCraftItems( cr );
}

void showCraftInfo( Critter& cr, CraftItem@ craft )
{
	if( !valid( craft ) )
	{
		SEM( cr, "Из этого ничего не вышло." );
		return;
	}
	uint16[] pids;
	uint[] values;
	uint count = craft.GetOutItems( pids, values );
	for( uint i = 0; i < count; i++ )
	{
		cr.SayMsg( SAY_NETMSG, TEXTMSG_ITEM, 100 * pids[i] );
		cr.Say( SAY_NETMSG, values[i] + " шт." );
		cr.AddItem( pids[i], values[i] );
	}
	
	SSM( cr, "Вы заспаунили результат крафта: " + count + " предметов." );
}

void ask_GetCraftItems( Critter& cr )
{
	cr.ShowScreen( SCREEN_DIALOGBOX, 8, "answer_GetCraftItems" );
	cr.Say( SAY_DIALOGBOX_TEXT, "Выберите, что вы хотите получить:" );
	cr.Say( SAY_DIALOGBOX_BUTTON( 0 ), "Инструменты" );
	cr.Say( SAY_DIALOGBOX_BUTTON( 1 ), "Инструменты х5" );
	cr.Say( SAY_DIALOGBOX_BUTTON( 2 ), "Расходники" );
	cr.Say( SAY_DIALOGBOX_BUTTON( 3 ), "Расходники х5" );
	cr.Say( SAY_DIALOGBOX_BUTTON( 4 ), "Расходники х25" );
	cr.Say( SAY_DIALOGBOX_BUTTON( 5 ), "Результат" );
	cr.Say( SAY_DIALOGBOX_BUTTON( 6 ), "Результат х5" );
	cr.Say( SAY_DIALOGBOX_BUTTON( 7 ), "Результат х25" );
}

void answer_GetCraftItems( Critter& cr, uint answerI, string& answerS )
{
	CraftItem@ craft = GetCraftItem( cr );
	if( !valid( craft ) ) {
		SEM( cr, "Что-то пошло не так." );
		return;
	}
	
	uint16[] pids;
	uint[] amount;
	bool[] ores;
	uint mult;

	switch( answerI )
	{
		case(0): if( craft.GetNeedTools( pids, amount, ores ) == 0 ) return;
			mult = 1; break;
		case(1): if( craft.GetNeedTools( pids, amount, ores ) == 0 ) return;
			mult = 5; break;
		case(2): if( craft.GetNeedItems( pids, amount, ores ) == 0 ) return;
			mult = 1; break;
		case(3): if( craft.GetNeedItems( pids, amount, ores ) == 0 ) return;
			mult = 5; break;
		case(4): if( craft.GetNeedItems( pids, amount, ores ) == 0 ) return;
			mult = 25; break;
		case(5): if( craft.GetOutItems( pids, amount ) == 0 ) return;
			mult = 1; break;
		case(6): if( craft.GetOutItems( pids, amount ) == 0 ) return;
			mult = 5; break;
		case(7): if( craft.GetOutItems( pids, amount ) == 0 ) return;
			mult = 25; break;
		default: return;
	}
	spawnItems( cr, mult, pids, amount );
}

void spawnItems( Critter& cr, uint mult, uint16[] pids, uint[] amount )
{
	if( mult == 0 ) { return; }	
	
	string inform = "Вы получили: \n";
	for( uint i = 0, count = pids.length(); i < count; i++ ) {
		cr.AddItem( pids[i], amount[i] * mult );
	
		inform += " - ";
		inform += "|0xFFFF00 " + _GetProtoName( pids[i] );
		inform += "|0x3CF800  - ";
		inform += "|0xFFFF00 " + amount[i] * mult;
		inform += "|0x3CF800  шт.,\n";
	}
	inform[ inform.length() - 2 ] = ' ';
	inform[ inform.length() - 1 ] = ' ';
	cr.Say( SAY_NETMSG, inform );
}
#endif

int fix_Delayed( Critter& cr, int state, CraftItem& craft )
{
    if( state == FIXBOY_CRAFT ) 
	{
	    if( !Activated( cr ) )
			return FIX_FAIL;

		cr.TimeoutBase[ TO_SK_REPAIR ] = __FullSecond + REAL_SECOND( 60 );
		cr.TimeoutBase[ TO_SK_SCIENCE ] = __FullSecond + REAL_SECOND( 60 );
		return FIX_TIMEOUT; 
	}
	GetCraftItems( cr, state, craft );
	
    return FIXBOY_DEFAULT; 
}

int fix_Tribal( Critter& cr, int state, CraftItem& craft )
{
    if( state == FIXBOY_CRAFT ) 
	{
		if( IsTired( cr ) || !Activated( cr ) ) { return FIX_FAIL; }
		if( CraftingInjure(cr) ) { 
			SEM( cr, "Вы травмированы и не в состоянии создать предмет." );
			return FIX_FAIL; 
		}
		
		cr.Say( SAY_EMOTE_ON_HEAD, "мастерит" );
		cr.StatBase[ST_EXPERIENCE] += 20;
		return FIX_TIMEOUT; 
	}
	GetCraftItems( cr, state, craft );

    return FIXBOY_DEFAULT; 
}

int fix_Cooking( Critter& cr, int state, CraftItem& craft )
{
    if( state == FIXBOY_CRAFT ) 
	{
		if( !Activated( cr ) ) { return FIX_FAIL; }
		
		cr.Say( SAY_EMOTE_ON_HEAD, "готовит" );
		cr.StatBase[ST_EXPERIENCE] += 20;
		raiseSkill( cr, SK_COOKING );
		return FIX_TIMEOUT; 
	}

	GetCraftItems( cr, state, craft );
    return FIXBOY_DEFAULT; 
}

int fix_Ozher( Critter& cr, int state, CraftItem& craft )
{
    if( state == FIXBOY_CRAFT ) 
	{
		if( IsTired( cr ) || !Activated( cr ) ) { return FIX_FAIL; }
		if( CraftingInjure(cr) ) { 
			SEM( cr, "Вы травмированы и не в состоянии создать предмет." );
			return FIX_FAIL; 
		}
		
		cr.Say( SAY_EMOTE_ON_HEAD, "Что-то мастерит" );

		return FIX_TIMEOUT; 
	}
	GetCraftItems( cr, state, craft );
	
    return FIXBOY_DEFAULT; 
}

int fix_Workbench( Critter& cr, int state, CraftItem& craft )
{
    if( state == FIXBOY_CRAFT ) 
	{
		if( IsTired( cr ) || !Activated( cr ) ) { return FIX_FAIL; }
		if( CraftingInjure(cr) ) { 
			SEM( cr, "Вы травмированы и не в состоянии создать предмет." );
			return FIX_FAIL; 
		}
		
		cr.Say( SAY_EMOTE_ON_HEAD, "Что-то делает" );
		cr.StatBase[ST_EXPERIENCE] += 250;
		return FIX_TIMEOUT; 
	}
	GetCraftItems( cr, state, craft );
	
    return FIXBOY_DEFAULT; 
}

int fix_FreeHands( Critter& cr, int state, CraftItem& craft )
{
    if( state == FIXBOY_CRAFT ) 
	{
		if( IsTired( cr ) || !Activated( cr ) ) { return FIX_FAIL; }
		if( CraftingInjure(cr) ) { 
			SEM( cr, "Вы травмированы и не в состоянии создать предмет." );
			return FIX_FAIL; 
		}
		
		cr.Say( SAY_EMOTE_ON_HEAD, "Что-то делает" );
		cr.StatBase[ST_EXPERIENCE] += 100;
		return FIX_TIMEOUT; 
	}
	GetCraftItems( cr, state, craft );
	
    return FIXBOY_DEFAULT; 
}

int fix_None( Critter& cr, int state, CraftItem& craft )
{
    if( state == FIXBOY_CRAFT ) 
	{
		if( IsTired( cr ) || !Activated( cr ) ) { return FIX_FAIL; }
		if( CraftingInjure(cr) ) { 
			SEM( cr, "Вы травмированы и не в состоянии создать предмет." );
			return FIX_FAIL; 
		}
		
		cr.Say( SAY_EMOTE_ON_HEAD, "Что-то делает" );
		//cr.StatBase[ST_EXPERIENCE] += 100;
		return FIX_TIMEOUT; 
	}
	GetCraftItems( cr, state, craft );
	
    return FIXBOY_DEFAULT; 
}

int fix_LowTier( Critter& cr, int state, CraftItem& craft )
{
    if( state == FIXBOY_CRAFT ) 
	{
		if( IsTired( cr ) || !Activated( cr ) ) { return FIX_FAIL; }
		if( CraftingInjure(cr) ) { 
			SEM( cr, "Вы травмированы и не в состоянии создать предмет." );
			return FIX_FAIL; 
		}
		
		cr.StatBase[ST_EXPERIENCE] += 500;
		cr.TimeoutBase[ TO_SK_REPAIR ] = __FullSecond + REAL_SECOND( 10 );
		return FIX_TIMEOUT; 
	}
	GetCraftItems( cr, state, craft );
	
    return FIXBOY_DEFAULT; 
}

int fix_MidTier( Critter& cr, int state, CraftItem& craft )
{
    if( state == FIXBOY_CRAFT ) 
	{
		if( IsTired( cr ) || !Activated( cr ) ) { return FIX_FAIL; }
		if( CraftingInjure(cr) ) { 
			SEM( cr, "Вы травмированы и не в состоянии создать предмет." );
			return FIX_FAIL; 
		}
		
		cr.StatBase[ST_EXPERIENCE] += 1000;
		cr.TimeoutBase[ TO_SK_REPAIR ] = __FullSecond + REAL_SECOND( 60 );
		return FIX_TIMEOUT; 
	}
	GetCraftItems( cr, state, craft );
	
    return FIXBOY_DEFAULT; 
}

int fix_HiTier( Critter& cr, int state, CraftItem& craft )
{
    if( state == FIXBOY_CRAFT ) 
	{
		if( IsTired( cr ) || !Activated( cr ) ) { return FIX_FAIL; }
		if( CraftingInjure(cr) ) { 
			SEM( cr, "Вы травмированы и не в состоянии создать предмет." );
			return FIX_FAIL; 
		}
		
		cr.StatBase[ST_EXPERIENCE] += 5000;
		cr.TimeoutBase[ TO_SK_REPAIR ] = __FullSecond + REAL_SECOND( 180 );
		return FIX_TIMEOUT; 
	}
	GetCraftItems( cr, state, craft );
	
    return FIXBOY_DEFAULT; 
}
