// Author: Mio
// Социальные приправы.

#include "_utils.fos"
#include "speed_h.fos"

// Основные.
import string Colorizing( int number, string[] list, int[] listX ) from "mio_deviants_toolkit";
import string Dictkeys( int number, string[] list, int[] listX ) from "mio_deviants_toolkit";
import int MenuChoice( int storage, uint answerI, string cell, bool rec ) from "mio_deviants_toolkit";
import string[] StatusMaker( Critter& initiator, Critter@ target, string[] list, int[] listX, uint8[] listV ) from "mio_deviants_toolkit";

// Упаковка.
import int BitUnpacker( int storage, uint8 index, uint8 bit ) from "mio_deviants_toolkit";
import int BitZeroing( int storage, uint8 index, uint8 bit ) from "mio_deviants_toolkit";
import int BitPacker( int cell, int storage, uint8 index, uint8 bit ) from "mio_deviants_toolkit";
import int BitChange( int number, int storage, uint8 index, uint8 bit ) from "mio_deviants_toolkit";

// Сторонние.
import void PlayMusic( Map& map, string& musicName, uint pos, uint repeat ) from "media";

import uint8 ChoiceMask( int[] list ) from "mio_deviants_toolkit";
import bool MovePosition( Critter& player ) from "mio_deviants_toolkit";

import void ArmorEffects( Critter& cr, int8 sign ) from "critter_item_movement";
import uint ArmorSkin( Critter& cr, uint armor_skin ) from "critter_item_movement";

// ####################################################################################################
// #                                       Obvious AID Manager                                        #
// ####################################################################################################

// ДЛЯ ВСЕХ.
#define TARGETID								( ST_VAR0 )					// Параметр криттера содержащий ID, с которым происходит взаимодействие.
#define TARGETPID								( ST_VAR1 )					// Параметр криттера содержащий PID, с которым происходит взаимодействие.
#define MENU_STORAGE							( ST_VAR2 )					// Параметр криттера содержащий выбор меню.
#define MENU_PAGE								( ST_VAR3 )					// Параметр криттера содержащий дополнительные данные меню-журналов.

// Пачки.
#define NUM_MENU_PAGE							( 1 )						// Страница. Начальный индекс.
#define BIT_MENU_PAGE							( 4 )						// 
#define NUM_MENU_SIGN							( 32 )						// Знак. Начальный индекс.
#define BIT_MENU_SIGN							( 1 )						// 

#define STARTING_POINT							( 1 )						// Начало отсчёта.
#define INDEX									# ( X ) ( X - STARTING_POINT )

// Types.
#define TYPE_NONE								( 0 )
#define TYPE_ITEM								( 1 )
#define TYPE_MAP								( 2 )
#define TYPE_CRITTER							( 3 )
#define TYPE_CRITTER_PARAM						( 4 )
#define TYPE_CRITTER_NEEDS						( 5 )
#define TYPE_CRITTER_COMBAT						( 6 )
#define TYPE_CRITTER_DIFFERENT					( 7 )
#define TYPE_LOC_NAVIGATION						( 8 )



// ####################################################################################################
// #                                        Condition Control                                         #
// ####################################################################################################

// Condition Control.

#define NUM_HIDEFACE							( 1 )						// Закрыто лицо.
#define BIT_HIDEFACE							( 1 )						// 
#define NUM_HIDELEX								( 2 )						// Закрыто лексему.
#define BIT_HIDELEX								( 1 )						// 
#define NUM_SHOWSPAM							( 3 )						// Отображение точек при печати.
#define BIT_SHOWSPAM							( 1 )						// 
#define NUM_VOICEVOLUME							( 4 )						// Громкость речи.
#define BIT_VOICEVOLUME							( 2 )						// 
#define NUM_ITEMNAMES							( 6 )						// Отображение подсветки итемов.
#define BIT_ITEMNAMES							( 1 )						// 
#define NUM_HINTS								( 7 )						// Отображение подсказки о предмете.
#define BIT_HINTS								( 1 )						// 
#define NUM_RADIOFUSE							( 28 )						// Блокировщик хоткей-типов сообщений.
#define BIT_RADIOFUSE							( 1 )						// 
#define NUM_SLEEPMODE							( 29 )						// Режим ожидания.
#define BIT_SLEEPMODE							( 2 )						// 
#define NUM_DELIRIUM							( 31 )						// Галлюны.
#define BIT_DELIRIUM							( 1 )						// 

bool F_Hideface( Critter& player )             { return BitUnpacker( player.Param[ MIO_FLAGS ], INDEX( NUM_HIDEFACE ), BIT_HIDEFACE ) == 1; }
void F_Hideface( Critter& player, int num )    { player.ParamBase[ MIO_FLAGS ] = BitPacker( num, player.Param[ MIO_FLAGS ], INDEX( NUM_HIDEFACE ), BIT_HIDEFACE ); }
bool F_Hidelex( Critter& player )              { return BitUnpacker( player.Param[ MIO_FLAGS ], INDEX( NUM_HIDELEX ), BIT_HIDELEX ) == 1; }
void F_Hidelex( Critter& player, int num )     { player.ParamBase[ MIO_FLAGS ] = BitPacker( num, player.Param[ MIO_FLAGS ], INDEX( NUM_HIDELEX ), BIT_HIDELEX ); }
bool F_Showspam( Critter& player )             { return BitUnpacker( player.Param[ MIO_FLAGS ], INDEX( NUM_SHOWSPAM ), BIT_SHOWSPAM ) == 1; }
void F_Showspam( Critter& player, int num )    { player.ParamBase[ MIO_FLAGS ] = BitPacker( num, player.Param[ MIO_FLAGS ], INDEX( NUM_SHOWSPAM ), BIT_SHOWSPAM ); }
uint8 F_VoiceVolume( Critter& player )         { return BitUnpacker( player.Param[ MIO_FLAGS ], INDEX( NUM_VOICEVOLUME ), BIT_VOICEVOLUME ); }
void F_VoiceVolume( Critter& player, int num ) { player.ParamBase[ MIO_FLAGS ] = BitPacker( num, player.Param[ MIO_FLAGS ], INDEX( NUM_VOICEVOLUME ), BIT_VOICEVOLUME ); }
bool F_ItemNames( Critter& player )            { return BitUnpacker( player.Param[ MIO_FLAGS ], INDEX( NUM_ITEMNAMES ), BIT_ITEMNAMES ) == 1; }
void F_ItemNames( Critter& player, int num )   { player.ParamBase[ MIO_FLAGS ] = BitPacker( num, player.Param[ MIO_FLAGS ], INDEX( NUM_ITEMNAMES ), BIT_ITEMNAMES ); }
bool F_Hints( Critter& player )                { return BitUnpacker( player.Param[ MIO_FLAGS ], INDEX( NUM_HINTS ), BIT_HINTS ) == 1; }
void F_Hints( Critter& player, int num )       { player.ParamBase[ MIO_FLAGS ] = BitPacker( num, player.Param[ MIO_FLAGS ], INDEX( NUM_HINTS ), BIT_HINTS ); }
bool F_Radiofuse( Critter& player )            { return BitUnpacker( player.Param[ MIO_FLAGS ], INDEX( NUM_RADIOFUSE ), BIT_RADIOFUSE ) == 1; }
void F_Radiofuse( Critter& player, int num )   { player.ParamBase[ MIO_FLAGS ] = BitPacker( num, player.Param[ MIO_FLAGS ], INDEX( NUM_RADIOFUSE ), BIT_RADIOFUSE ); }
uint8 F_Sleepmode( Critter& player )           { return BitUnpacker( player.Param[ MIO_FLAGS ], INDEX( NUM_SLEEPMODE ), BIT_SLEEPMODE ); }
void F_Sleepmode( Critter& player, int num )   { player.ParamBase[ MIO_FLAGS ] = BitPacker( num, player.Param[ MIO_FLAGS ], INDEX( NUM_SLEEPMODE ), BIT_SLEEPMODE ); }
bool F_Delirium( Critter& player )             { return BitUnpacker( player.Param[ MIO_FLAGS ], INDEX( NUM_DELIRIUM ), BIT_DELIRIUM ) == 1; }
void F_Delirium( Critter& player, int num )    { player.ParamBase[ MIO_FLAGS ] = BitPacker( num, player.Param[ MIO_FLAGS ], INDEX( NUM_DELIRIUM ), BIT_DELIRIUM ); }


// ####################################################################################################
// #                                           Compression                                            #
// ####################################################################################################

void MenuMaker( Critter& initiator, string[] list, string@ headline, string@ pointer ) // Генератор менюшек.
{
	uint8 length = list.length();
	initiator.ShowScreen( SCREEN_DIALOGBOX, length, pointer );
	initiator.Say( SAY_DIALOGBOX_TEXT, headline );
	for( uint8 i = 0; i < length; i++ ) { initiator.Say( SAY_DIALOGBOX_BUTTON( i ), Centering( list[ i ] ) ); }
	initiator.Say( SAY_DIALOGBOX_BUTTON( length ), Centering( "Отмена" ) );
}

//string UINTColor( uint color ) { return "|"+color+" "; }- переместила в module/utils/server/junk.fos
void ShortRec( Critter& player, string cell, uint num ) { player.ParamBase[ MENU_STORAGE ] = MenuChoice( player.Param[ MENU_STORAGE ], num, cell, true ); }
void PageReset( Critter& player ) { player.ParamBase[ MENU_PAGE ] = BitZeroing( player.Param[ MENU_PAGE ], INDEX( NUM_MENU_PAGE ), BIT_MENU_PAGE ); }
void Empty( Critter& player, uint answerI, string& answerS ) { null; }



// ================================================== Обработчики ==================================================

void Dispatcher( Critter& player, uint answerI, string& answerS ) // Координатор меню.
{
	ShortRec( player, "MENU_CHOICE", answerI );

	int storage = 		player.Param[ MENU_STORAGE ];
	uint8 branch = 		MenuChoice( storage, 0, "MENU_BRANCH", false );
	uint8 depth = 		MenuChoice( storage, 0, "MENU_DEPTH", false );
	uint8 count = 		MenuChoice( storage, 0, "MENU_COUNT", false );

	bool BACK = 		( answerI == count-1 );
	if( depth == 0 )	{ BACK = false; }
	if( BACK )			{ depth--; ShortRec( player, "MENU_DEPTH", depth ); }

	uint8 menumark_1 = 	MenuChoice( storage, 0, "MENU_MENUMARK_1", false );
	uint8 menumark_2 = 	MenuChoice( storage, 0, "MENU_MENUMARK_2", false );

	//player.Say( SAY_NETMSG, "dpt: "+depth +" - answerI: "+answerI +"/"+count );

	if( branch == 0 )
	{
		if( depth == 0 )
		{
			if( BACK ) { CP_BASIC( player ); return; }																	// Рекурсия.
			if( answerI == 0 ) { MenuAFK( player, answerI, "" ); }														// АФК				- Меню.
			if( answerI == 1 ) { MenuTALKVOLUME( player, answerI, "" ); }												// Голос			- Меню.
			if( answerI == 2 ) { MenuOVERVIEW( player, answerI, "" ); }													// Обзор			- Меню.
			if( answerI == 3 ) { ChangeRADIOFUSE( player, answerI, "" ); return; }										// Предохранитель	- Логика.
			if( answerI == 4 ) { MenuDEBUG( player, answerI, "Фикс заглючившей скорости:" ); }							// Debug			- Меню.
			if( answerI == 5 ) 																							// Подветка			- Меню.
			{  
				bool isOn = !F_ItemNames( player );//Было включено - стало выключено, и наоборот.
				F_ItemNames( player, isOn ? 1 : 0 ); //Устанавливает НОВОЕ состояние.
				player.Say( SAY_NETMSG, "Отображение итемов " + ( isOn ? "|0x00ff00 в": "|0xff0000 вы" ) + "ключено" + "|0x00ff00 ." );
				CP_BASIC( player );
				return;
			}							
			if( answerI == 6 ) 																							// Подсказки			- Меню.
			{  
				bool isOn = !F_Hints( player );//Было включено - стало выключено, и наоборот.
				F_Hints( player, isOn ? 1 : 0 ); //Устанавливает НОВОЕ состояние.
				player.Say( SAY_NETMSG, "Отображение подсказок " + ( isOn ? "|0x00ff00 в": "|0xff0000 вы" ) + "ключено" + "|0x00ff00 ." );
				CP_BASIC( player );
				return;
			}							
			ShortRec( player, "MENU_MENUMARK_1", answerI );
			ShortRec( player, "MENU_DEPTH", depth+1 );
			return;
		}

		if( menumark_1 == 0 )
		{
			if( depth == 1 ) { ChangeAFK( player, answerI, "" ); return; }												// АФК				- Логика.
		}
		if( menumark_1 == 1 )
		{
			if( depth == 1 ) { ChangeTALKVOLUME( player, answerI, "" ); return; }										// Голос			- Логика.
		}
		if( menumark_1 == 2 )
		{
			if( depth == 1 )
			{
				if( answerI == 0 ) { ChangeMASK( player, answerI, "" ); return; }										// Харя				- Логика.
				if( answerI == 1 ) { ChangeHIDELEX( player, answerI, "" ); return; }									// Лексема			- Логика.
				if( answerI == 2 ) { ChangeSPAM( player, answerI, "" ); return; }										// Спам				- Логика.
			}
		}
		if( menumark_1 == 4 )
		{
			if( depth == 1 ) { ChangeDEBUG( player, answerI, "" ); return; }											// Debug			- Логика.
		}
	}
	if( branch == 1 )
	{
		Critter@ targetCr = GetCritter( player.Param[ TARGETID ] );
		if( targetCr is null ) { return; }

		if( depth == 0 )
		{
			if( BACK ) { CP_CRITTER( player, targetCr ); return; }														// Рекурсия.
			if( answerI == 0 ) { PlayerSlap( player, answerI, "" ); return; }											// Ситуации			- Логика.
			ShortRec( player, "MENU_MENUMARK_1", answerI );
			ShortRec( player, "MENU_DEPTH", depth+1 );
			return;
		}

	}
}



// ####################################################################################################
// #                                               MENU                                               #
// ####################################################################################################

void unsafe_CONTROL_PANEL_PLAYER( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ param4 )
{
	player.ParamBase[ MENU_STORAGE ] = 0;

	if( param2 == 0 )
	{
		CP_BASIC( player );
		return;
	}
	if( param2 == 1 )
	{
		Critter@ targetCr = GetCritter( param0 );
		if( targetCr is null ) { return; }
		CP_CRITTER( player, targetCr );
		return;
	}
}

void unsafe_QuickSoundTuning( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ param4 )
{
	if( param0 == 0 )
		player.StatBase[ ST_TALK_DISTANCE ] = DEFAULT_SAY_DISTANCE;

	if( param0 == 1 )
		player.StatBase[ ST_TALK_DISTANCE ] -= 5;

	if( param0 == 2 )
	{
		if( player.StatBase[ ST_TALK_DISTANCE ] != 1 )
			player.StatBase[ ST_TALK_DISTANCE ] += 5;
		else 
			player.StatBase[ ST_TALK_DISTANCE ] = 5;
	}

	player.StatBase[ ST_TALK_DISTANCE ] = CLAMP( player.StatBase[ ST_TALK_DISTANCE ], 1, 60 );
	string hex_str = ( player.StatBase[ ST_TALK_DISTANCE ] == 1 ? "гекс" : "гексов" );
	SSM( player, "Громкость речи: |0xFFFF00 " + player.StatBase[ ST_TALK_DISTANCE ] + " |0x3CF800 " + hex_str);
}

// ================================================== Обработчики ==================================================

string UserMenuInfo( Critter& player )
{
	string s1 = ( F_Hideface( player ) ? "|0x900000 Лицо скрываю" : "|0x3CF800 Лицо открыто" );
	string s2 = ( F_Hidelex( player ) ? "|0x900000 Приметы скрываю" : "|0x3CF800 Приметы видны" );
	string s3 = ( F_Showspam( player ) ? "|0x900000 Набор текста скрываю" : "|0x3CF800 Набор текста отображаю" );
	string s4 = ( F_Radiofuse( player ) ? "|0x900000 Рация на предохранителе" : "|0x3CF800 Рация свободна" );

	string result = "|0x3CF800 Громкость речи: "+ player.StatBase[ ST_TALK_DISTANCE ] +" шагов"+"\n" +s1+"\n" +s2+"\n" +s3+"\n" +s4+"\n";

	if( player.GetTimeEvents( CTE_AFK, null, null, null ) > 0 ) { result = UINTColor( COLOR_LRED )+"АФК РЕЖИМ !!!"; }

	return result;
}
string PlayerMenuInfo( Critter& player )
{
	string result = "Панель взаимодействий:";

	if( player.GetTimeEvents( CTE_AFK, null, null, null ) > 0 ) { result = UINTColor( COLOR_LRED )+"АФК РЕЖИМ !!!"; }

	return result;
}



// ####################################################################################################
// #                                            Main Menu                                             #
// ####################################################################################################

void CP_BASIC( Critter& player )
{
	string[] list = { "АФК", "Голос", "Обзор", "Радио предохр.", "Debug", "Подсветка", "Подсказки" };
	ShortRec( player, "MENU_BRANCH", 0 );
	MenuMaker( player, list, UserMenuInfo( player ), "Dispatcher" );
}

void MenuAFK( Critter& player, uint answerI, string& answerS )
{
	string[] list = { "*Очнуться*", "Дремлет", "Работает", "Читает", "<<< Назад" };
	ShortRec( player, "MENU_COUNT", list.length() );
	MenuMaker( player, list, UserMenuInfo( player ), "Dispatcher" );
}
void MenuTALKVOLUME( Critter& player, uint answerI, string& answerS )
{
	string[] list = { "Громогласно", "Громко", "Спокойно", "Вполголоса", "<<< Назад" };
	ShortRec( player, "MENU_COUNT", list.length() );
	MenuMaker( player, list, UserMenuInfo( player ), "Dispatcher" );
}
void MenuOVERVIEW( Critter& player, uint answerI, string& answerS )
{
	string[] list = { "Скрывать лицо", "Скрывать лексему", "Извещение печати", "<<< Назад" };
	ShortRec( player, "MENU_COUNT", list.length() );
	MenuMaker( player, list, UserMenuInfo( player ), "Dispatcher" );
}
void ChangeRADIOFUSE( Critter& player, uint answerI, string& answerS )
{
	if( F_Radiofuse( player ) ) { F_Radiofuse( player, 0 ); } else { F_Radiofuse( player, 1 ); }
	CP_BASIC( player );
}
void MenuDEBUG( Critter& player, uint answerI, string& answerS )
{
	string[] list = { "Пересчет скорости", "<<< Назад" };
	ShortRec( player, "MENU_COUNT", list.length() );
	MenuMaker( player, list, answerS, "Dispatcher" );
}

uint cte_AFK( Critter& cr, int num, uint& rate )
{
	if( MovePosition( cr ) ) { F_Sleepmode( cr, 0 ); }
	uint8 AFK = F_Sleepmode( cr );
	if( AFK == 0 ) 
	{ 
		//F_VoiceVolume( cr, 0 );
		cr.Say( SAY_NETMSG, UINTColor( COLOR_GRAY )+"AFK режим деактивирован." ); 
		return 0; 
	}

	string[] list = { "", "Дремлет", "Работает", "Читает" };
	cr.Say( SAY_NORM_ON_HEAD, "|0x606060 (" +list[ AFK ] +")" );
	
	bool isSitting = cr.ParamBase[ CR_SLEEPING_STATE ] == -1;
	bool isLaying = cr.ParamBase[ CR_SLEEPING_STATE ] == 3;
	int relaxMod = isSitting ? 2 : isLaying ? 3 : 1;
	
	switch( AFK ) 
	{
		case ( 1 ): 
		{
			cr.TimeoutBase[ TO_HEALING ]   = __FullSecond + ( cr.Timeout[ TO_HEALING ]   - REAL_SECOND( 1 ) * relaxMod );
			break;
		}

		case ( 2 ): 
		{
			cr.TimeoutBase[ TO_TIREDNESS ] = __FullSecond + ( cr.Timeout[ TO_TIREDNESS ] - REAL_SECOND( 1 ) * relaxMod );
			break;	
		}

		case ( 3 ): 
		{
			Map@ currentMap = cr.GetMap ();			
		    if( currentMap.GetProtoId() != MAP_UTILITY_START )
		    {
				cr.ParamBase[ ST_EXPERIENCE ] += 1 * relaxMod;  
		    }
			break;	
		}	
	}


	return REAL_SECOND( 1 );
}

void unsafe_FAST_AFK_MODE( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ param4 )
{
	if( player.GetTimeEvents( CTE_AFK, null, null, null ) > 0 ) 
	{		
		player.EraseTimeEvents( CTE_AFK ); 
		
		if( F_Sleepmode( player ) == param0 )
		{
			player.Say( SAY_NETMSG, UINTColor( COLOR_LRED )+"AFK режим деактивирован." );
			return;
		}
	}

	MovePosition( player );
	F_Sleepmode( player, param0 );

	player.AddTimeEvent( "cte_AFK", REAL_SECOND( 1 ), CTE_AFK, 0 );
	player.Say( SAY_NORM_ON_HEAD, "|0x606060 (AFK)" );
	player.Say( SAY_NETMSG, UINTColor( COLOR_LRED ) + "AFK режим активирован." );
}

void ChangeAFK( Critter& player, uint answerI, string& answerS )
{
	MovePosition( player );
	F_Sleepmode( player, answerI );
	if( player.GetTimeEvents( CTE_AFK, null, null, null ) > 0 ) { player.EraseTimeEvents( CTE_AFK ); }
	if( answerI > 0 )
	{
		//F_VoiceVolume( player, 3 );
		player.AddTimeEvent( "cte_AFK", REAL_SECOND( 1 ), CTE_AFK, 0 );
		player.Say( SAY_NORM_ON_HEAD, "|0x606060 (AFK)" );
		player.Say( SAY_NETMSG, UINTColor( COLOR_LRED )+"AFK режим активирован." );
	}
	else
	{
		//F_VoiceVolume( player, 0 );
		player.EraseTimeEvents( CTE_AFK );
		player.Say( SAY_NETMSG, UINTColor( COLOR_LRED )+"AFK режим деактивирован." );
	}
	MenuAFK( player, answerI, "" );
}
void ChangeTALKVOLUME( Critter& player, uint answerI, string& answerS ) // тут
{
	switch( answerI )
	{
		case 0:
			player.StatBase[ ST_TALK_DISTANCE ] = 50;
			break;
		case 1:
			player.StatBase[ ST_TALK_DISTANCE ] = 20;
			break;
		case 2:
			player.StatBase[ ST_TALK_DISTANCE ] = 10;
			break;
		case 3:
			player.StatBase[ ST_TALK_DISTANCE ] = 5;
			break;
	}
	MenuTALKVOLUME( player, answerI, "" );
}

void ChangeMaskAction( Critter& player, bool toHide )
{
	if( F_Hideface( player ) || !toHide )
	{
		F_Hideface( player, 0 );
		ArmorEffects( player, 0 );
	}
	else
	{
		F_Hideface( player, 1 );
		ArmorEffects( player, 1 );
	}
}

void ChangeMASK( Critter& player, uint answerI, string& answerS )
{
	ChangeMaskAction( player, !F_Hideface( player ) );
	MenuOVERVIEW( player, answerI, "" );
}
void ChangeHIDELEX( Critter& player, uint answerI, string& answerS )
{
	if( F_Hidelex( player ) ) { F_Hidelex( player, 0 ); } else { F_Hidelex( player, 1 ); }
	MenuOVERVIEW( player, answerI, "" );
}
void ChangeSPAM( Critter& player, uint answerI, string& answerS )
{
	if( F_Showspam( player ) ) { F_Showspam( player, 0 ); } else { F_Showspam( player, 1 ); }
	MenuOVERVIEW( player, answerI, "" );
}
void ChangeDEBUG( Critter& player, uint answerI, string& answerS )
{
	ChangeCritterSpeed( player );
	MenuDEBUG( player, answerI, "|0xFF0000 Пересчитано!" );
}



// ####################################################################################################
// #                                           Critter Menu                                           #
// ####################################################################################################

void CP_CRITTER( Critter& player, Critter& targetCr )
{
	ShortRec( player, "MENU_BRANCH", 1 );
	player.ParamBase[ TARGETID ] = targetCr.Id;
	targetCr.ParamBase[ TARGETID ] = player.Id;

	string[] list = { "Тормошить" };
	MenuMaker( player, list, PlayerMenuInfo( targetCr ), "Dispatcher" );
}

// ================================================== Тормошить ==================================================

void PlayerSlap( Critter& player, uint answerI, string& answerS )
{
	Critter@ targetCr = GetCritter( player.Param[ TARGETID ] );
	if( targetCr is null || @targetCr == @player ) { return; }

	uint dist = GetDistantion( player.HexX, player.HexY, targetCr.HexX, targetCr.HexY );

	if( dist < 6 )
	{
		player.Say( SAY_NETMSG, UINTColor( COLOR_YELLOW )+ "Вы пытаетесь растормошить." );
		targetCr.Say( SAY_NETMSG, UINTColor( COLOR_YELLOW )+ "Вас пытаются растормошить." );
	}
	else { player.Say( SAY_NETMSG, UINTColor( COLOR_YELLOW )+"Слишком далеко!" ); }
}